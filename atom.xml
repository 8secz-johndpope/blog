<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2019-08-02T13:32:06.000Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to write end-to-end test using app and api actions</title>
    <link href="https://glebbahmutov.com/blog/realworld-app-action/"/>
    <id>https://glebbahmutov.com/blog/realworld-app-action/</id>
    <published>2019-08-02T02:00:00.000Z</published>
    <updated>2019-08-02T13:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> the source code for this blog post is in repo <a href="https://github.com/cypress-io/cypress-example-realworld" target="_blank" rel="noopener">cypress-io/cypress-example-realworld</a> in the pull request <a href="https://github.com/cypress-io/cypress-example-realworld/pull/55/files" target="_blank" rel="noopener">#55</a>.</p><!-- toc --><ul><li><a href="#first-test">First test</a></li><li><a href="#second-test">Second test</a></li><li><a href="#page-object">Page object</a></li><li><a href="#app-action">App action</a></li><li><a href="#api-action">Api action</a></li></ul><!-- tocstop --><p>End-to-end browser tests do not have to go every time through the DOM interface to exercise the web application. In fact, doing so would make the end-to-end tests terribly slow and inefficient. In this post I will show a concrete example that bypasses the HTML interface for all the but the first test, yet keeps covering the same amount of code (measured by collecting <a href="https://on.cypress.io/code-coverage" target="_blank" rel="noopener">end-to-end code coverage</a>), and runs much much faster.</p><h2><span id="first-test">First test</span></h2><p>Our target application is a clone of the <a href="https://github.com/gothinkster/realworld" target="_blank" rel="noopener">Conduit blog web application</a>, and we want to confirm that we can write a new article. Using <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress Test Runner</a> we can write our first &quot;writes a post&quot; test.</p><figure class="highlight js"><figcaption><span>new-post-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'New post'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.task(<span class="string">'cleanDatabase'</span>)</span><br><span class="line">    cy.registerUserIfNeeded()</span><br><span class="line">    cy.login()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'writes a post'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// I have added "data-cy" attributes</span></span><br><span class="line">    <span class="comment">// following Cypress best practices</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/best-practices#Selecting-Elements</span></span><br><span class="line">    cy.get(<span class="string">'[data-cy=new-post]'</span>).click()</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'[data-cy=title]'</span>).type(<span class="string">'my title'</span>)</span><br><span class="line">    cy.get(<span class="string">'[data-cy=about]'</span>).type(<span class="string">'about X'</span>)</span><br><span class="line">    cy.get(<span class="string">'[data-cy=article]'</span>).type(<span class="string">'this post is **important**.'</span>)</span><br><span class="line">    cy.get(<span class="string">'[data-cy=tags]'</span>).type(<span class="string">'test&#123;enter&#125;'</span>)</span><br><span class="line">    cy.get(<span class="string">'[data-cy=publish]'</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// changed url means the post was successfully created</span></span><br><span class="line">    cy.location(<span class="string">'pathname'</span>).should(<span class="string">'equal'</span>, <span class="string">'/article/my-title'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes</p><p><img src="/blog/images/realworld/new-post.gif" alt="Passing Cypress test that writes a post"></p><p>The above test is already pretty solid:</p><ul><li>the initial state is set using <code>beforeEach</code> callback, ensuring the test starts every time from a clean slate</li><li>the test uses <code>data-cy</code> attributes to find elements following <a href="https://on.cypress.io/best-practices#Selecting-Elements" target="_blank" rel="noopener">Best Practices</a></li></ul><p>Because we can measure <a href="https://cypress.slides.com/cypress-io/complete-code-coverage-with-cypress/" target="_blank" rel="noopener">code coverage from Cypress tests</a>, just by running this single test we get 54.2% of all front-end code statements covered.</p><p><img src="/blog/images/realworld/coverage.png" alt="New post test covers a lot of front-end code"></p><h2><span id="second-test">Second test</span></h2><p>Great, writing a new post works. Let&#39;s see if we can comment on a post. Hmm, to add a comment we need a blog post. We can copy the above test and just add a few additional Cypress commands to add a comment.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'writes a post and comments on it'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'[data-cy=new-post]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'[data-cy=title]'</span>).type(<span class="string">'my title'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=about]'</span>).type(<span class="string">'about X'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=article]'</span>).type(<span class="string">'this post is **important**.'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=tags]'</span>).type(<span class="string">'test&#123;enter&#125;'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=publish]'</span>).click()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// changed url means the post was successfully created</span></span><br><span class="line">  cy.location(<span class="string">'pathname'</span>).should(<span class="string">'equal'</span>, <span class="string">'/article/my-title'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// comment on the post</span></span><br><span class="line">  cy.get(<span class="string">'[data-cy=comment-text]'</span>).type(<span class="string">'great post üëç'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=post-comment]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'[data-cy=comment]'</span>, <span class="string">'great post üëç'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs creating a new blog post and then commenting on it.</p><p><img src="/blog/images/realworld/add-comment.gif" alt="Writing a post and commenting on it"></p><p>After this test finishes, the total code coverage increases by 3%</p><p><img src="/blog/images/realworld/add-comment.png" alt="Code coverage after the above test"></p><p>We can see the new lines covered in the &quot;Article&quot; reducer, the &quot;ADD_COMMENT&quot; action has been covered by the new commands.</p><p><img src="/blog/images/realworld/article-reducer-with-add-comment.png" alt="Additional line covered by the test"></p><p>Nice.</p><h2><span id="page-object">Page object</span></h2><p>Yet, there is a problem. The second test &quot;writes a post and comments on it&quot; is exactly 70% line for line matching the first test &quot;writes a post&quot;. We are creating the post by clicking and typing on the page - repeating <em>exactly the same page actions</em> as the first test. What have we learned from about 2 seconds it takes to type the new post (just like a real user would type character by character), that we don&#39;t know already from the first test?</p><p>Nothing.</p><p>So to remove the duplicate lines, people write Page Objects, a wrapper around the HTML and the elements of the a particular page. We avoid the code duplication by having our tests call into the Page Object wrapper. In our case, the test would be</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'writes a post (via page object) and comments on it'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// page object encapsulating code for writing a post</span></span><br><span class="line">  <span class="comment">// by executing page commands = DOM actions</span></span><br><span class="line">  <span class="keyword">const</span> editor = &#123;</span><br><span class="line">    writeArticle () &#123;</span><br><span class="line">      cy.get(<span class="string">'[data-cy=new-post]'</span>).click()</span><br><span class="line"></span><br><span class="line">      cy.get(<span class="string">'[data-cy=title]'</span>).type(<span class="string">'my title'</span>)</span><br><span class="line">      cy.get(<span class="string">'[data-cy=about]'</span>).type(<span class="string">'about X'</span>)</span><br><span class="line">      cy.get(<span class="string">'[data-cy=article]'</span>).type(<span class="string">'this post is **important**.'</span>)</span><br><span class="line">      cy.get(<span class="string">'[data-cy=tags]'</span>).type(<span class="string">'test&#123;enter&#125;'</span>)</span><br><span class="line">      cy.get(<span class="string">'[data-cy=publish]'</span>).click()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// changed url means the post was successfully created</span></span><br><span class="line">      cy.location(<span class="string">'pathname'</span>).should(<span class="string">'equal'</span>, <span class="string">'/article/my-title'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use "Editor" page wrapper to write a new post</span></span><br><span class="line">  editor.writeArticle()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// comment on the post</span></span><br><span class="line">  cy.get(<span class="string">'[data-cy=comment-text]'</span>).type(<span class="string">'great post üëç'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=post-comment]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'[data-cy=comment]'</span>, <span class="string">'great post üëç'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test works, and removes code duplication. Every time you need an article to test commenting on it, or to test how an article can be deleted, or how a user can like it - every test can just call <code>editor.writeArticle()</code> and be done.</p><h2><span id="app-action">App action</span></h2><p>Let&#39;s see why the Page Object is less than ideal.</p><ul><li>The commands going through the DOM are slow. We will see how to avoid it later.</li><li>Opening the editor and typing into the input boxes again and again from <em>every</em> test does not help us test better, because it is just redundant commands that do the same thing over and over.</li><li>The Page Object is an extra layer of code that does not benefit the users and is built on top of the HTML, and can be only tested at runtime without any static tools help</li></ul><p>Once we have &quot;writes a post&quot; test that goes through the DOM to confirm that a user can write a new article, there is no point doing it again. Instead we can directly create an article by accessing the underlying application code and calling its methods - I call this approach &quot;app actions&quot;, and argue in the blog post <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/" target="_blank" rel="noopener">Stop using Page Objects and Start using App Actions</a> that this approach saves you time and removes an unnecessary level of code sitting on top of the HTML. And this is not about code duplication - yes, you could factor out writing the post into a single reusable function (this would be a Page method). The point is that we want to avoid going through the DOM completely to perform an action that we have already tested!</p><p>In practice, this means we need to access the underlying web application to create the post somehow. This is how we do it.</p><p>First, study the application code to see how the UI components trigger actions. In our case the <code>Editor.js</code> component submits an article via an &quot;agent&quot; object reference.</p><figure class="highlight js"><figcaption><span>src/components/Editor.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> agent <span class="keyword">from</span> <span class="string">'../agent'</span></span><br><span class="line"><span class="comment">// Editor component</span></span><br><span class="line"><span class="keyword">this</span>.submitForm = <span class="function"><span class="params">ev</span> =&gt;</span> &#123;</span><br><span class="line">  ev.preventDefault()</span><br><span class="line">  <span class="keyword">const</span> article = &#123;</span><br><span class="line">    title: <span class="keyword">this</span>.props.title,</span><br><span class="line">    description: <span class="keyword">this</span>.props.description,</span><br><span class="line">    body: <span class="keyword">this</span>.props.body,</span><br><span class="line">    tagList: <span class="keyword">this</span>.props.tagList</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> promise = agent.Articles.create(article)</span><br><span class="line">  <span class="keyword">this</span>.props.onSubmit(promise)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ok, so if we could call <code>agent.Articles.create</code> method directly from our Cypress test, we could create an article almost instantly. Let&#39;s pass this <code>agent</code> reference from the application to the test via <code>window</code> object.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> agent <span class="keyword">from</span> <span class="string">'./agent'</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">  <span class="built_in">window</span>.agent = agent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test can grab the <code>window</code> object, then its <code>agent</code> property and call the application action.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'writes a post (via app action) and comments on it'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> article = &#123;</span><br><span class="line">    title: <span class="string">'my title'</span>,</span><br><span class="line">    description: <span class="string">'about X'</span>,</span><br><span class="line">    body: <span class="string">'this post is **important**.'</span>,</span><br><span class="line">    tagList: [<span class="string">'test'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  cy.window().its(<span class="string">'agent.Articles'</span>)</span><br><span class="line">    .invoke(<span class="string">'create'</span>, article) <span class="comment">// resolves with new article object</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I can also see by inspecting the code that the Editor executes the following code after the agent submits the article</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> ARTICLE_SUBMITTED:</span><br><span class="line">  <span class="keyword">const</span> redirectUrl = <span class="string">`/article/<span class="subst">$&#123;action.payload.article.slug&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...state, <span class="attr">redirectTo</span>: redirectUrl &#125;;</span><br></pre></td></tr></table></figure><p>Ok, we can do the same thing - we can use the result returned by the agent to get the new article&#39;s slug and redirect to the article url. Thus the full test should redirect to the article url like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.window().its(<span class="string">'agent.Articles'</span>)</span><br><span class="line">  .invoke(<span class="string">'create'</span>, article) <span class="comment">// resolves with new article object</span></span><br><span class="line">  .its(<span class="string">'article.slug'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">slug</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">`/article/<span class="subst">$&#123;slug&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// comment on the post</span></span><br><span class="line">cy.get(<span class="string">'[data-cy=comment-text]'</span>).type(<span class="string">'great post üëç'</span>)</span><br><span class="line">cy.get(<span class="string">'[data-cy=post-comment]'</span>).click()</span><br><span class="line"></span><br><span class="line">cy.contains(<span class="string">'[data-cy=comment]'</span>, <span class="string">'great post üëç'</span>).should(<span class="string">'be.visible'</span>)</span><br></pre></td></tr></table></figure><p>The test runs and passes - creating the new post instantly.</p><p><img src="/blog/images/realworld/app-action.png" alt="Creates new post by calling app code"></p><p>If we run both tests &quot;writes a post&quot; and &quot;writes a post (via app action) and comments on it&quot; togher - we get exactly the same code coverage percentage 57.3% - because we literally covered the same statements as before - we just did not cover some of the twice.</p><h2><span id="api-action">Api action</span></h2><p>When we bypass the DOM to set our state (we need an article) before testing a feature (like adding a new comment), we do not even have to use the application code. By studying the Network tab and the application code we can see the HTTP POST request that happens when a new article is sent to the server.</p><p><img src="/blog/images/realworld/post-article.png" alt="POST article XHR call"></p><p>Super, we can execute the same call ourselves. Here is the custom command (for reusability) and the test</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(<span class="string">'postArticle'</span>, fields =&gt; &#123;</span><br><span class="line">  checkArticle(fields)</span><br><span class="line">  <span class="keyword">const</span> jwt = localStorage.getItem(<span class="string">'jwt'</span>)</span><br><span class="line">  expect(jwt, <span class="string">'jwt token'</span>).to.be.a(<span class="string">'string'</span>)</span><br><span class="line"></span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;apiUrl&#125;</span>/api/articles`</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      article: fields</span><br><span class="line">    &#125;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      authorization: <span class="string">`Token <span class="subst">$&#123;jwt&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'writes a post (via API) and comments on it'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> article = &#123;</span><br><span class="line">    title: <span class="string">'my title'</span>,</span><br><span class="line">    description: <span class="string">'about X'</span>,</span><br><span class="line">    body: <span class="string">'this post is **important**.'</span>,</span><br><span class="line">    tagList: [<span class="string">'test'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  cy.postArticle(article)</span><br><span class="line">    .its(<span class="string">'body.article.slug'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">slug</span> =&gt;</span> &#123;</span><br><span class="line">      cy.visit(<span class="string">`/article/<span class="subst">$&#123;slug&#125;</span>`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// comment on the post</span></span><br><span class="line">  cy.get(<span class="string">'[data-cy=comment-text]'</span>).type(<span class="string">'great post üëç'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=post-comment]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'[data-cy=comment]'</span>, <span class="string">'great post üëç'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Super, the test passes, and we have a reusable custom command <code>cy.postArticle</code> we can use any time we need an article to comment on, or to like, or to delete - thus all our end-to-end tests can run fast, yet because we have already tested creating a new article, the code coverage stays complete.</p><p>For me, the rule of thumb is:</p><ul><li>when testing feature A, use the DOM just like a real user would.</li><li>when testing feature B, that needs something feature A does, bypass the DOM when achieving part A. Instead call the application code directly, just like the UI component that implements feature A would. This saves a lot of time, making your tests fly, yet does not diminish the test code coverage.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the source code for this blog post is in repo &lt;a href=&quot;https://github.com/cypress-io/cypress-example-realworld&quot; ta
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Black box API testing with server logs</title>
    <link href="https://glebbahmutov.com/blog/api-testing-with-sever-logs/"/>
    <id>https://glebbahmutov.com/blog/api-testing-with-sever-logs/</id>
    <published>2019-07-19T04:00:00.000Z</published>
    <updated>2019-07-19T14:03:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>In my previous blog post <a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/" target="_blank" rel="noopener">&quot;Add GUI to your E2E API tests&quot;</a> I have used <a href="https://on.cypress.io/request" target="_blank" rel="noopener"><code>cy.request</code></a> command to execute HTTP requests against a backend performing a black box API testing. In this blog post I will show a new custom command <code>cy.api</code> that can take such API testing to the next level. In addition to the new user interface for your API requests, if you capture all server logs using <a href="https://github.com/bahmutov/all-logs" target="_blank" rel="noopener">@bahmutov/all-logs</a>, then the API tests will capture those messages too, allowing you deep insight into what is happening on each API request.</p><!-- toc --><ul><li><a href="#the-api-testing-problem">The API testing problem</a></li><li><a href="#example-adding-numbers">Example - adding numbers</a></li><li><a href="#cy-api-plugin">cy-api plugin</a></li><li><a href="#multiple-tests">Multiple tests</a></li><li><a href="#multiple-api-calls-in-the-same-test">Multiple API calls in the same test</a></li><li><a href="#logs">Logs</a></li><li><a href="#using-logs-in-test">Using logs in test</a></li><li><a href="#concat-messages">Concat messages</a></li><li><a href="#conclusions">Conclusions</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="the-api-testing-problem">The API testing problem</span></h2><p>I have written A LOT of API tests, mostly against REST backends. For our <a href="https://www.cypress.io/dashboard" target="_blank" rel="noopener">Cypress Dashboard</a> REST API we have more than 1000 API tests ... so writing and debugging failing tests is a big part of my job. A typical test:</p><ul><li>sets the state using database model queries</li><li>then uses <a href="https://www.npmjs.com/package/supertest" target="_blank" rel="noopener">supertest</a> to call an HTTP endpoint</li><li>and checks the response</li></ul><p>Here is a typical simple <code>supertest</code> test case</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.get(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123; <span class="attr">name</span>: <span class="string">'john'</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// test code</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'supertest'</span>)</span><br><span class="line"><span class="comment">// notice that the test uses "app" reference</span></span><br><span class="line">request(app)</span><br><span class="line">  .get(<span class="string">'/user'</span>)</span><br><span class="line">  .expect(<span class="string">'Content-Type'</span>, /json/)</span><br><span class="line">  .expect(<span class="string">'Content-Length'</span>, <span class="string">'15'</span>)</span><br><span class="line">  .expect(<span class="number">200</span>)</span><br><span class="line">  .end(<span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The test runs against the server instance, but might as well test against an URL - to keep a better separation between the test context and the server.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test server running at localhost:5555</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'supertest'</span>)(<span class="string">'http://localhost:5555'</span>)</span><br><span class="line">it(<span class="string">'responds with json'</span>, () =&gt;</span><br><span class="line">  request</span><br><span class="line">    .post(<span class="string">'/users'</span>)</span><br><span class="line">    .send(&#123;<span class="attr">name</span>: <span class="string">'john'</span>&#125;)</span><br><span class="line">    .set(<span class="string">'Accept'</span>, <span class="string">'application/json'</span>)</span><br><span class="line">    .expect(<span class="string">'Content-Type'</span>, /json/)</span><br><span class="line">    .expect(<span class="number">200</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I call this type of testing &quot;black box&quot; testing because we treat the API as an unknown entity that only communicates through HTTP requests and responses. When doing realistic tests, we need to make several calls: setting data, updating it, checking it. For example, testing if the user can create a new article using API might take several requests:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'creates an article for a user'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> userId = <span class="keyword">await</span> request(<span class="string">'/users'</span>).post(...) <span class="comment">// create user</span></span><br><span class="line">  <span class="keyword">const</span> article = <span class="keyword">await</span> request(<span class="string">'/artices'</span>).post(&#123;</span><br><span class="line">    userId,</span><br><span class="line">    ... <span class="comment">// rest of the article fields</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// fetch all articles for the user to make sure</span></span><br><span class="line">  <span class="comment">// the new article has been correctly added</span></span><br><span class="line">  <span class="keyword">const</span> userArticles = <span class="keyword">await</span> request(<span class="string">'/articles?user='</span> + userId)</span><br><span class="line">  <span class="comment">// assert userArticles includes the new article</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>There is a lot of logic that the backend goes through in order to process those test requests. There is just a slight problem - if a test fails, it is hard to debug why. I have to re-start the server with verbose logs (sometimes enabled for a specific namespace to limit the sudden avalanche of messages) and re-run just this particular test, then scroll through a LOT of terminal output to understand the failure.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DEBUG=server:* npm run test</span><br><span class="line">... thousands of log lines ...</span><br></pre></td></tr></table></figure><p>This is slow and annoying. There must be a better way.</p><h2><span id="example-adding-numbers">Example - adding numbers</span></h2><p>My first example comes from the <a href="https://github.com/bahmutov/server-logs-example" target="_blank" rel="noopener">bahmutov/server-logs-example</a> repo. The server there responds to &quot;GET /&quot; requests with the sum of passed numbers. For example we can ask the server to add 2 and 3 together (I am using <a href="https://httpie.org/" target="_blank" rel="noopener">httpie</a> instead of <code>curl</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ http &apos;:7000/?a=2&amp;b=3&apos;</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Date: Tue, 16 Jul 2019 01:37:13 GMT</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>Let&#39;s write an end-to-end test for this server. I will use <a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">Cypress</a> Test Runner so I can have a GUI during testing. Here is the first test <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/integration/simple.js" target="_blank" rel="noopener">cypress/integration/simple.js</a> that uses <a href="https://on.cypress.io/request" target="_blank" rel="noopener"><code>cy.request</code></a> and verifies the <code>body</code> of the response object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://on.cypress.io/intelligent-code-completion</span></span><br><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'adds 2 + 3'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    url: <span class="string">'/'</span>,</span><br><span class="line">    qs: &#123;</span><br><span class="line">      a: <span class="number">2</span>,</span><br><span class="line">      b: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">'body'</span>)</span><br><span class="line">  .should(<span class="string">'equal'</span>, <span class="string">'5'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes - I can see the green assertion in the Command Log.</p><p><img src="/blog/images/cy-api/simple.png" alt="Simple API test passing"></p><p>Hmm, but what did we send to the server? The Command Log does not show it - if I want to see the query parameters, I need to open the browser Developer Tools and click on the <code>REQUEST</code> command - then the request object is dumped to the console and I can understand what happens during the test a little bit better.</p><p><img src="/blog/images/cy-api/request-object.png" alt="Request object in DevTools Console"></p><p>Ok, this is not exactly convenient:</p><ul><li>I need to keep the DevTools open</li><li>I need to click on each command to inspect it</li><li>During the headless <code>cypress run</code> the DevTools is not shown in the video, thus I won&#39;t be able to understand my tests by watching the video</li></ul><p>Meanwhile notice how the application frame stays completely blank - because we are not loading a website using <a href="https://on.cypress.io/visit" target="_blank" rel="noopener"><code>cy.visit</code></a> during our API test; we are only executing HTTP requests.</p><h2><span id="cy-api-plugin">cy-api plugin</span></h2><p>Let me introduce the <code>cy.api</code> command that comes from <a href="https://github.com/bahmutov/cy-api" target="_blank" rel="noopener">@bahmutov/cy-api</a> plugin for Cypress Test Runner. Install it as a dev dependency using your favorite NPM client:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @bahmutov/cy-api</span><br></pre></td></tr></table></figure><p>And load it from <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/support/index.js" target="_blank" rel="noopener">cypress/support/index.js</a> file</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@bahmutov/cy-api/support'</span></span><br></pre></td></tr></table></figure><p>Now in my Cypress test I can use a new command <code>cy-api</code> that takes exactly the same argument object as <code>cy.request</code>; here is <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/integration/cy-api-example.js" target="_blank" rel="noopener">cypress/integration/cy-api-example.js</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loads Cypress types + definition for custom "cy.api" command</span></span><br><span class="line"><span class="comment">/// &lt;reference types="@bahmutov/cy-api" /&gt;</span></span><br><span class="line">it(<span class="string">'adds 2 + 3 (cy.api)'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.api(&#123;</span><br><span class="line">    url: <span class="string">'/'</span>,</span><br><span class="line">    qs: &#123;</span><br><span class="line">      a: <span class="number">2</span>,</span><br><span class="line">      b: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">'body'</span>)</span><br><span class="line">  .should(<span class="string">'equal'</span>, <span class="string">'5'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When the <code>cy.api</code> command runs, it automatically renders the request and server response to the <em>empty application frame</em>.</p><p><img src="/blog/images/cy-api/cy-api-example.png" alt="The cy-api command shows the relevant information"></p><p>No longer you need to click on the request in the Command Log and have DevTools ready - the relevant information is right there on the screen at all times.</p><h2><span id="multiple-tests">Multiple tests</span></h2><p>You can also use multiple <code>cy.api</code> commands in the same test, giving each one a name. All requests and responses will be displayed in the frame, and the frame will automatically scroll to show the last command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'adds and subtracts'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/'</span>,</span><br><span class="line">      qs: &#123;</span><br><span class="line">        a: <span class="number">2</span>,</span><br><span class="line">        b: <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'2 + 3'</span></span><br><span class="line">  )</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .should(<span class="string">'equal'</span>, <span class="string">'5'</span>)</span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/'</span>,</span><br><span class="line">      qs: &#123;</span><br><span class="line">        a: <span class="number">2</span>,</span><br><span class="line">        b: <span class="number">-6</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'2 - 6'</span></span><br><span class="line">  )</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .should(<span class="string">'equal'</span>, <span class="string">'-4'</span>)</span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/'</span>,</span><br><span class="line">      qs: &#123;</span><br><span class="line">        a: <span class="number">-10</span>,</span><br><span class="line">        b: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'-10 + 0'</span></span><br><span class="line">  )</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .should(<span class="string">'equal'</span>, <span class="string">'-10'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/cy-api/multiple.png" alt="Multiple API requests"></p><p>Because the writing to the DOM happens in stages, hover over Command Log shows each part as it is added to the frame; time traveling debugger for your API requests!</p><p><img src="/blog/images/cy-api/hover-cy-api.gif" alt="Time travel over API requests"></p><h2><span id="multiple-api-calls-in-the-same-test">Multiple API calls in the same test</span></h2><p>From the test we can use results of the previous API call - either using <code>.then</code> closures (pyramid of doom, anyone?) or by storing results in the <a href="https://on.cypress.io/variables-and-aliases" target="_blank" rel="noopener">shared test context</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'adds 2 + 3 + 10'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// we can pass query parameters through url too</span></span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/?a=2&amp;b=3'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'first sum'</span></span><br><span class="line">  )</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .as(<span class="string">'first sum'</span>) <span class="comment">// save result in shared test context</span></span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      cy.api(</span><br><span class="line">        &#123;</span><br><span class="line">          url: <span class="string">'/'</span>,</span><br><span class="line">          qs: &#123;</span><br><span class="line">            <span class="comment">// because we use "function () &#123;...&#125;"</span></span><br><span class="line">            <span class="comment">// callback form, "this" refers to the</span></span><br><span class="line">            <span class="comment">// shared test context where we saved</span></span><br><span class="line">            <span class="comment">// the first sum using ".as('first sum')" command</span></span><br><span class="line">            <span class="comment">// https://on.cypress.io/as</span></span><br><span class="line">            a: <span class="keyword">this</span>[<span class="string">'first sum'</span>],</span><br><span class="line">            b: <span class="number">10</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'second sum'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/cy-api/two-calls.png" alt="Passing result of the first API call to the second API call"></p><h2><span id="logs">Logs</span></h2><p>Great, this makes the tests useful - yet there is nothing yet to simplify the debugging experience when a test fails. Let&#39;s look at that. If a test suddenly fails, it means something went wrong on the server. Our application server <a href="https://github.com/bahmutov/server-logs-example/blob/master/server/index.js" target="_blank" rel="noopener">server/index.js</a> logs the following messages while processing the requests:</p><figure class="highlight js"><figcaption><span>server/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// we will use console.log, util.debuglog and debug modules to log stuff</span></span><br><span class="line"><span class="keyword">const</span> verbose = <span class="built_in">require</span>(<span class="string">'util'</span>).debuglog(<span class="string">'verbose'</span>)</span><br><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'compute'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; pathname, query &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let's just log the basic request parameters</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'%s %s pathname %s'</span>, req.method, req.url, pathname)</span><br><span class="line">    <span class="comment">// and log the parsed query object in verbose mode</span></span><br><span class="line">    <span class="comment">// visible when NODE_DEBUG=verbose is set</span></span><br><span class="line">    verbose(<span class="string">'query is %o'</span>, query)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> a = <span class="built_in">parseFloat</span>(query.a)</span><br><span class="line">    <span class="keyword">const</span> b = <span class="built_in">parseFloat</span>(query.b)</span><br><span class="line">    <span class="keyword">const</span> sum = a + b</span><br><span class="line">    <span class="comment">// "debug" log only shows the computation if DEBUG=compute is set</span></span><br><span class="line">    debug(<span class="string">'%d + %d = %d'</span>, a, b, sum)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return result to the caller</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>By default, we are only logging the basic information; here I will be calling the server with <code>http &#39;:7000/?a=2&amp;b=3&#39;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node ./server</span><br><span class="line">listening on port 7000</span><br><span class="line">GET /?a=2&amp;b=3 pathname /</span><br></pre></td></tr></table></figure><p>If I want more information, for example to check how the query was parsed, I can enable the built-in <a href="https://nodejs.org/api/util.html#util_util_debuglog_section" target="_blank" rel="noopener">util.debuglog</a> logs.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_DEBUG=verbose node ./server</span><br><span class="line">listening on port 7000</span><br><span class="line">GET /?a=2&amp;b=3 pathname /</span><br><span class="line">VERBOSE 35756: query is &#123; a: &apos;2&apos;, b: &apos;3&apos; &#125;</span><br></pre></td></tr></table></figure><p><strong>Warning:</strong> the exact log messages from the <code>util.debuglog</code> module strongly depend on the Node version.</p><p>We can now see our query object (and process id 35756). Or we can see other debug messages by turning on the <a href="https://github.com/visionmedia/debug" target="_blank" rel="noopener">debug</a> module</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=compute node ./server</span><br><span class="line">listening on port 7000</span><br><span class="line">GET /?a=2&amp;b=3 pathname /</span><br><span class="line">  compute 2 + 3 = 5 +0ms</span><br></pre></td></tr></table></figure><p>Beautiful - what does this have to do with our API testing and <code>cy-api</code>? Well, using another module <a href="https://github.com/bahmutov/all-logs" target="_blank" rel="noopener">@bahmutov/all-logs</a> you can silently capture ALL logs from your server (even without turning them on) and then <code>cy.api</code> command will grab them during each request. Here is how to turn it on in your server.</p><ol><li>Instead of starting the server with <code>node ./server</code>, start it with <code>node -r @bahmutov/all-logs ./server</code>. This sets up the log interception.</li><li>Add HTTP middleware to your server that <code>cy.api</code> can call to retrieve and reset collected messages. For example, our server is a plain <code>http</code> server and we can do the following:</li></ol><figure class="highlight js"><figcaption><span>server/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logs = <span class="built_in">require</span>(<span class="string">'@bahmutov/all-logs/middleware/http'</span>)</span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (logs(req, res) === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// the HTTP request was for the server logs</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; pathname, query &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// the rest of the code</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>That is it. Let&#39;s look at our previous test with the <code>@bahmutov/all-logs</code> included. Wow, our Test Runner suddenly shows a lot more information!</p><p><img src="/blog/images/cy-api/two-calls-with-logs.png" alt="API tests with server logs"></p><p>The <code>cy.api</code> command fetches the intercepted logs from the server and shows them between the <code>Request</code> and <code>Response</code> sections. There are a lot of low level messages from Node itself, and in the future we plan to allow easy filtering by the log type (<code>console</code>, <code>util</code>, <code>debug</code>) and the namespace (in this case the namespaces were <code>HTTP</code>, <code>log</code> and <code>compute</code>). That is what those (currently non-functioning) checkboxes are for.</p><h2><span id="using-logs-in-test">Using logs in test</span></h2><p>The <code>cy.api</code> command yields the same object as <a href="https://on.cypress.io/request" target="_blank" rel="noopener">cy.request</a> does, plus the <code>messages</code> list with all server-side logs. Here is the same test as above, but with printing the <code>body</code> and <code>messages</code> properties from the yielded object:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// there was first cy.api</span></span><br><span class="line"><span class="comment">// and this is the second one</span></span><br><span class="line">cy.api(</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'/'</span>,</span><br><span class="line">    qs: &#123;</span><br><span class="line">      a: <span class="keyword">this</span>[<span class="string">'first sum'</span>],</span><br><span class="line">      b: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'second sum'</span></span><br><span class="line">).then(<span class="function">(<span class="params">&#123; body, messages &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'answer'</span>, body)</span><br><span class="line">  <span class="built_in">console</span>.table(messages)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/cy-api/print-logs.png" alt="Printed result and logs"></p><p>We can assert the result is what we are expecting, and that <code>debug compute</code> message records the correct parsed numbers. The <code>.then()</code> callback is below. I love writing BDD assertions that are readable!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function">(<span class="params">&#123; body, messages &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'answer'</span>, body)</span><br><span class="line">  <span class="built_in">console</span>.table(messages)</span><br><span class="line">  expect(body, <span class="string">'result'</span>).to.equal(<span class="string">'15'</span>) <span class="comment">// our api returns strings</span></span><br><span class="line">  <span class="comment">// use the Lodash "find" method to search by properties</span></span><br><span class="line">  <span class="keyword">const</span> computeLogMessage = Cypress._.find(messages, &#123;</span><br><span class="line">    type: <span class="string">'debug'</span>,</span><br><span class="line">    namespace: <span class="string">'compute'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  expect(computeLogMessage)</span><br><span class="line">    .to.be.an(<span class="string">'object'</span>)</span><br><span class="line">    .and.have.property(<span class="string">'message'</span>, <span class="string">'5 + 10 = 15'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/cy-api/log-check.png" alt="Asserting the result and the log message"></p><p>You might ask yourself - isn&#39;t this testing the implementation details? It is up to you to write tests that reach deeper into the server logic in order to test it from the from front-end. If you decide this approach ties the E2E tests too tightly to the implementation - don&#39;t check the logs from the tests, just have them in case the response value <code>15</code> is different from the expected one. But I would advise to set a policy on server-side logs that allows using the messages in tests. For example, you might have a <code>debug</code> namespace just for E2E tests that one CAN test against.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debugE2E = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'compute'</span>)</span><br><span class="line"><span class="comment">// messages via `debugE2E` are going to be asserted from the API E2E tests</span></span><br></pre></td></tr></table></figure><p>If you decide to allow some messages to be used from tests, we can easily verify the major &quot;checkpoints&quot; along the way using snapshots. For example, I will add the <a href="https://github.com/meinaart/cypress-plugin-snapshots" target="_blank" rel="noopener">meinaart/cypress-plugin-snapshots</a> plugin by following the instructions in that repo&#39;s README file. Now we can write a test and do snapshots with just API response and filtered backend messages. The full source code is in <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/integration/with-snapshots.js" target="_blank" rel="noopener">cypress/integration/with-snapshots.js</a> and below:</p><figure class="highlight js"><figcaption><span>cypress/integration/with-snapshots.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pickImportantMessages = <span class="function">(<span class="params">&#123; body, messages &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// only look at logs from DEBUG=compute namespace</span></span><br><span class="line">  <span class="keyword">const</span> computations = Cypress._.filter(messages, &#123;</span><br><span class="line">    type: <span class="string">'debug'</span>,</span><br><span class="line">    namespace: <span class="string">'compute'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    result: body,</span><br><span class="line">    backendMessages: Cypress._.map(computations, <span class="string">'message'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'performs expected computations'</span>, () =&gt; &#123;</span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/?a=2&amp;b=3'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'2 + 3'</span></span><br><span class="line">  )</span><br><span class="line">    .then(pickImportantMessages)</span><br><span class="line">    .toMatchSnapshot()</span><br><span class="line"></span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/?a=-1&amp;b=30'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'-1 + 30'</span></span><br><span class="line">  )</span><br><span class="line">    .then(pickImportantMessages)</span><br><span class="line">    .toMatchSnapshot()</span><br><span class="line"></span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/?a=+1&amp;b=+2'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'+1 + 2'</span></span><br><span class="line">  )</span><br><span class="line">    .then(pickImportantMessages)</span><br><span class="line">    .toMatchSnapshot()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The snapshots are saved on the first run, and I can inspect the saved values by clicking on the &quot;Snapshot&quot; command.</p><p><img src="/blog/images/cy-api/snapshots.png" alt="Individual snapshot value"></p><p>Imagine something has changed. For example, I have changed the input parameters for the second <code>cy.api</code> call. Instead of <code>-1 + 30</code> the test passes <code>30 - 1</code> now. Let&#39;s see how the snapshot shows the difference.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.api(</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'/?a=30&amp;b=-1'</span> <span class="comment">// instead of -1 + 30</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'30 - 1'</span></span><br><span class="line">)</span><br><span class="line">  .then(pickImportantMessages)</span><br><span class="line">  .toMatchSnapshot()</span><br></pre></td></tr></table></figure><p>Immediately the snapshot value is different from the value saved in the file <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/integration/__snapshots__/with-snapshots.js.snap" target="_blank" rel="noopener">cypress/integration/<strong>snapshots</strong>/with-snapshots.js.snap</a>. The test fails.</p><p><img src="/blog/images/cy-api/snapshot-error.png" alt="Snapshot error causes the test to fail"></p><p>Clicking on the &quot;Compare snapshot&quot; button brings up the difference viewer.</p><p><img src="/blog/images/cy-api/snapshot-diff.png" alt="Snapshot difference view"></p><p>The beautiful thing - if the new value is expected, you can simply click &quot;Update snapshot&quot; button and the new &quot;snap&quot; will be saved.</p><h2><span id="concat-messages">Concat messages</span></h2><p>The above test can be rewritten in shorter form, because all calls are independent of each other; we still need to execute them one by one to guarantee the same order.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'computes all given examples'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> list = []</span><br><span class="line">  <span class="keyword">const</span> addToList = list.push.bind(list)</span><br><span class="line">  ;[</span><br><span class="line">    <span class="comment">// all examples to compute</span></span><br><span class="line">    <span class="string">'/?a=2&amp;b=3'</span>,</span><br><span class="line">    <span class="string">'/?a=30&amp;b=-1'</span>,</span><br><span class="line">    <span class="string">'/?a=+1&amp;b=+2'</span></span><br><span class="line">  ].forEach(<span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">    cy.api(&#123; url &#125;)</span><br><span class="line">      .then(pickImportantMessages)</span><br><span class="line">      .then(addToList)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.wrap(list).toMatchSnapshot()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice how we compare the entire list at once at the very end.</p><p><img src="/blog/images/cy-api/single-list.png" alt="Single snapshot of all test messages and results"></p><p>The beauty of this combined snapshot is: if we change the backend logic - for example by taking an absolute value of the arguments before adding them - the snapshot shows precisely where the good log and the current one started diverging!</p><figure class="highlight js"><figcaption><span>server/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// added Math.abs on purpose to break the tests</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">Math</span>.abs(<span class="built_in">parseFloat</span>(query.a))</span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">Math</span>.abs(<span class="built_in">parseFloat</span>(query.b))</span><br><span class="line"><span class="keyword">const</span> sum = a + b</span><br><span class="line">debug(<span class="string">'%d + %d = %d'</span>, a, b, sum)</span><br></pre></td></tr></table></figure><p>The test fails - the snapshot does not match, and the difference in the message and in the result is obvious.</p><p><img src="/blog/images/cy-api/debug-error.png" alt="Debugging the test failure using logs"></p><p>But even better is finding the log message for that <code>cy.api</code> call, shown with green arrow - and immediately seeing the previous log message. The query argument <code>b</code> is <code>-1</code>, yet the parsed value is <code>1</code> - that points the finger at the argument conversion step. Perfect - the debugging cycle is short, just like I wanted.</p><h2><span id="conclusions">Conclusions</span></h2><p>Testing the web application means testing the code at different levels: you still need unit tests and end-to-end web application tests. But the middle of the stack - the HTTP API deserves to be tested as well, since it is the foundation for the web application. The plugin <a href="https://github.com/bahmutov/cy-api" target="_blank" rel="noopener">@bahmutov/cy-api</a> should help with API testing, and I hope the approach of capturing the detailed server-side logs helps when debugging a failing test.</p><p>Give <code>cy.api</code> a spin and open a <a href="https://github.com/bahmutov/cy-api/issues" target="_blank" rel="noopener">GitHub issue</a> if something does not work, or if you have an idea to make this type of testing better.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://github.com/bahmutov/cy-api" target="_blank" rel="noopener">@bahmutov/cy-api</a> plugin provides <code>cy.api</code> command</li><li><a href="https://github.com/bahmutov/all-logs" target="_blank" rel="noopener">@bahmutov/all-logs</a> captures all server-side logs</li><li><a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/" target="_blank" rel="noopener">&quot;Add GUI to your E2E API tests&quot;</a></li><li><a href="https://www.cypress.io/blog/2018/01/16/end-to-end-snapshot-testing/" target="_blank" rel="noopener">&quot;End-to-End Snapshot Testing&quot;</a> describes snapshot testing for web application testing</li><li><a href="../picking-snapshot-library/">&quot;Picking snapshot library&quot;</a></li><li><a href="https://github.com/meinaart/cypress-plugin-snapshots" target="_blank" rel="noopener">meinaart/cypress-plugin-snapshots</a> is the snapshot plugin I love using in Cypress</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In my previous blog post &lt;a href=&quot;https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Capture all the logs</title>
    <link href="https://glebbahmutov.com/blog/capture-all-the-logs/"/>
    <id>https://glebbahmutov.com/blog/capture-all-the-logs/</id>
    <published>2019-07-05T04:00:00.000Z</published>
    <updated>2019-07-17T12:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this blog post I will show how to intercept messages logged by a Node process using a pre-loaded module. You can find the source code for these examples in <a href="https://github.com/bahmutov/capture-logs-example" target="_blank" rel="noopener">bahmutov/capture-logs-example</a> repository.</p><h2><span id="capture-console-logs">Capture console logs</span></h2><p>Imagine you want to collect all strings logged from a Node program. You could proxy all <code>console.log</code> calls and store them until needed. Take an example Node program like this one in <a href="https://github.com/bahmutov/capture-logs-example/blob/master/index.js" target="_blank" rel="noopener">index.js</a>:</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'this is %s log message ‚úÖ'</span>, <span class="string">'console'</span>)</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'this is console %s ‚ö†Ô∏è'</span>, <span class="string">'warn'</span>)</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'this is console error üî•'</span>)</span><br></pre></td></tr></table></figure><p>When we run this program, all logs are written to their respective output streams. Note that values are substituted into placeholders like <code>%s -&gt; &quot;console&quot;</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">this is console log message ‚úÖ</span><br><span class="line">this is console warn ‚ö†Ô∏è</span><br><span class="line">this is console error üî•</span><br></pre></td></tr></table></figure><p>Note that <code>console.log</code> writes its messages to <code>STDOUT</code>, while <code>console.warn</code> and <code>console.error</code> write to <code>STDERR</code>. You can verify this by hiding <code>STDERR</code> stream via redirect.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># hide STDERR stream</span><br><span class="line">$ node . 2&gt; /dev/null</span><br><span class="line">this is console log message ‚úÖ</span><br><span class="line"># hide STDOUT stream</span><br><span class="line">$ node . 1&gt; /dev/null</span><br><span class="line">this is console warn ‚ö†Ô∏è</span><br><span class="line">this is console error üî•</span><br></pre></td></tr></table></figure><p>Great, now let&#39;s collect the messages by pre-loading a module that is going to proxy <code>console.*</code> methods. Here is the <a href="https://github.com/bahmutov/capture-logs-example/blob/master/log.js" target="_blank" rel="noopener">log.js</a> file:</p><figure class="highlight js"><figcaption><span>log.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ignore "console.table" and "console.dir" for now</span></span><br><span class="line"><span class="keyword">const</span> methodNames = [<span class="string">'log'</span>, <span class="string">'warn'</span>, <span class="string">'error'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// put all messages interleaved into single list</span></span><br><span class="line"><span class="comment">// so we can see how they all appeared</span></span><br><span class="line"><span class="comment">// each message should have "type" and "message"</span></span><br><span class="line"><span class="keyword">const</span> messages = []</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * put the original log methods into a global object</span></span><br><span class="line"><span class="comment"> * so we can do two things:</span></span><br><span class="line"><span class="comment"> *  1: restore the methods when needed</span></span><br><span class="line"><span class="comment"> *  2: print messages without going through proxied methods</span></span><br><span class="line"><span class="comment"> *      like "cnsl.log('my message')"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">global.cnsl = &#123;&#125;</span><br><span class="line"></span><br><span class="line">methodNames.forEach(<span class="function"><span class="params">methodName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> originalMethod = (global.cnsl[methodName] = <span class="built_in">console</span>[methodName])</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>[methodName] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// save the original message (formatted into a single string)</span></span><br><span class="line">    <span class="comment">// use "util.format" to perform string formatting if needed</span></span><br><span class="line">    <span class="keyword">const</span> params = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> message = params.length</span><br><span class="line">      ? util.format(<span class="built_in">arguments</span>[<span class="number">0</span>], ...params)</span><br><span class="line">      : <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">    messages.push(&#123;</span><br><span class="line">      type: methodName, <span class="comment">// "log", "warn", "error"</span></span><br><span class="line">      message</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call the original method like "console.log"</span></span><br><span class="line">    originalMethod.apply(<span class="built_in">console</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A method to restore the original console methods</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> restore = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(global.cnsl).forEach(<span class="function"><span class="params">methodName</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>[methodName] = global.cnsl[methodName]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">'beforeExit'</span>, () =&gt; &#123;</span><br><span class="line">  restore()</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'*** printing saved messages ***'</span>)</span><br><span class="line">  messages.forEach(<span class="function"><span class="params">m</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'%s: %s'</span>, m.type, m.message)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Each method like <code>console.log</code> is replaced with our function that keeps a copy of the formatted string and calls the original <code>log</code> method. We can now run our original program, but require the <code>./log.js</code> first; all logged strings will be collected and printed again at the end.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ node -r ./log .</span><br><span class="line"></span><br><span class="line">this is console log message ‚úÖ</span><br><span class="line">this is console warn ‚ö†Ô∏è</span><br><span class="line">this is console error üî•</span><br><span class="line">*** printing saved messages ***</span><br><span class="line">log: this is console log message ‚úÖ</span><br><span class="line">warn: this is console warn ‚ö†Ô∏è</span><br><span class="line">error: this is console error üî•</span><br></pre></td></tr></table></figure><h2><span id="capture-debug-logs">Capture <code>debug</code> logs</span></h2><p>I <a href="../good-logging/">love using</a> <a href="https://github.com/visionmedia/debug" target="_blank" rel="noopener"><code>debug</code></a> module to control my verbose logs. Just import the module and control if its messages are showing up in the terminal using an environment variable <code>DEBUG=some:name:space</code>. Here is a copy of the program but with additional logging statement. See <a href="https://github.com/bahmutov/capture-logs-example/blob/master/index-debug.js" target="_blank" rel="noopener">index-debug.js</a> file:</p><figure class="highlight js"><figcaption><span>index-debug.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'verbose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this is %s log message ‚úÖ'</span>, <span class="string">'console'</span>)</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'this is console %s ‚ö†Ô∏è'</span>, <span class="string">'warn'</span>)</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'this is console error üî•'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// only visible when you call "DEBUG=verbose node ./index-debug"</span></span><br><span class="line">debug(<span class="string">'this is verbose debug = %d'</span>, <span class="number">42</span>)</span><br></pre></td></tr></table></figure><p>If we run the program &quot;normally&quot; the <code>debug</code> calls are ignored. We need to enable &quot;verbose&quot; namespace to actually see them.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ node ./index-debug.js</span><br><span class="line">this is console log message ‚úÖ</span><br><span class="line">this is console warn ‚ö†Ô∏è</span><br><span class="line">this is console error üî•</span><br><span class="line"></span><br><span class="line">$ DEBUG=verbose node ./index-debug.js</span><br><span class="line">this is console log message ‚úÖ</span><br><span class="line">this is console warn ‚ö†Ô∏è</span><br><span class="line">this is console error üî•</span><br><span class="line">  verbose this is verbose debug = 42 +0ms</span><br></pre></td></tr></table></figure><p>Perfect - can we capture the log calls to the <code>debug</code> instances? Well, <code>debug</code> module writes directly into <code>process.stderr</code> stream bypassing <code>console.*</code> methods, thus our proxy is not going to work. Luckily, the <code>debug</code> module exposes its internals so we can easily proxy <em>its</em> methods. Bonus: we can log even the disabled <code>debug</code> namespaces!</p><p>Look at the implementation of <a href="https://github.com/bahmutov/capture-logs-example/blob/master/log-debug.js" target="_blank" rel="noopener">log-debug.js</a>. When a new debug log instance is created using <code>require(&#39;debug&#39;)(... namespace name ...)</code>, it is added to the list of debug instances. That list is an <code>Array</code> instance, and a new instance is pushed to the array using &quot;standard&quot; <code>debug.instances.push()</code>. Well, we can overwrite this method, just like we can overwrite pretty much everything in JavaScript. When we do this, we get access to <em>every</em> <code>debug</code> instance instantiated by the process. That&#39;s where we can insert out logic to capture debug log messages - even if the namespace is disabled!</p><figure class="highlight js"><figcaption><span>log-debug.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logDebugCalls</span> (<span class="params">messages</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// assume there is "debug" module, otherwise</span></span><br><span class="line">  <span class="comment">// do nothing (put try / catch around require)</span></span><br><span class="line">  <span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// All enabled debug instances by default use "debug.log" method</span></span><br><span class="line">  <span class="comment">// to actually write to process.stderr stream. Assume user code</span></span><br><span class="line">  <span class="comment">// does not change this, just save the message</span></span><br><span class="line">  <span class="keyword">const</span> debugLog = debug.log</span><br><span class="line">  debug.log = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    messages.push(&#123;</span><br><span class="line">      type: <span class="string">'debug'</span>,</span><br><span class="line">      message: util.format(...args)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// and call the original method to print it</span></span><br><span class="line">    debugLog.apply(debug, args)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// new instances are added using "debug.instances.push()"</span></span><br><span class="line">  <span class="comment">// so we can proxy this method</span></span><br><span class="line">  debug.instances.push = <span class="function"><span class="params">debugInstance</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.push.call(debug.instances, debugInstance)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (debugInstance.enabled) &#123;</span><br><span class="line">      <span class="comment">// ignore custom debugInstance.log method - we could</span></span><br><span class="line">      <span class="comment">// intercept that as well by using "setter" property</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if the debug instance is disabled, the common "debug.log"</span></span><br><span class="line">    <span class="comment">// method is NOT going to be called. We DO want to record the message though</span></span><br><span class="line">    <span class="comment">// to enable test debugging</span></span><br><span class="line">    debugInstance.enabled = <span class="literal">true</span></span><br><span class="line">    debugInstance.log = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">      messages.push(&#123;</span><br><span class="line">        type: <span class="string">'debug'</span>,</span><br><span class="line">        message: util.format(...args)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logDebugCalls</span><br></pre></td></tr></table></figure><p>The above file <code>log-debug.js</code> exports the <code>logDebugCalls</code> and we can call it from our <code>log.js</code> file passing the <code>messages</code> list. Thus the debug messages get inserted into the same list as the intercepted <code>console.log</code> messages, giving us the right order.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in log.js</span></span><br><span class="line"><span class="comment">// intercept "debug" module logging calls</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./log-debug'</span>)(messages)</span><br></pre></td></tr></table></figure><p>And there is the logging in action - first let&#39;s run with <code>DEBUG=verbose</code> enabled. The <code>debug</code> call shows up in the terminal AND is captured. Then we will run the process without <code>DEBUG</code> environment variable. The <code>debug</code> call is NOT in the normal terminal output, because the namespace is not enabled, yet it is still captured.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=verbose node -r ./log ./index-debug.js</span><br><span class="line">this is console log message ‚úÖ</span><br><span class="line">this is console warn ‚ö†Ô∏è</span><br><span class="line">this is console error üî•</span><br><span class="line">  verbose this is verbose debug = 42 +0ms</span><br><span class="line">*** printing saved messages ***</span><br><span class="line">log: this is console log message ‚úÖ</span><br><span class="line">warn: this is console warn ‚ö†Ô∏è</span><br><span class="line">error: this is console error üî•</span><br><span class="line">debug:   verbose this is verbose debug = 42 +0ms</span><br><span class="line"></span><br><span class="line">$ node -r ./log ./index-debug.js</span><br><span class="line">this is console log message ‚úÖ</span><br><span class="line">this is console warn ‚ö†Ô∏è</span><br><span class="line">this is console error üî•</span><br><span class="line">*** printing saved messages ***</span><br><span class="line">log: this is console log message ‚úÖ</span><br><span class="line">warn: this is console warn ‚ö†Ô∏è</span><br><span class="line">error: this is console error üî•</span><br><span class="line">debug:   verbose this is verbose debug = 42 +0ms</span><br></pre></td></tr></table></figure><p>Beautiful - we have all the logs we might need, yet the &quot;normal&quot; terminal output only shows top level messages. We are now free to do anything with the verbose logs. For example we could show all the logs ONLY if something goes wrong, avoiding double test runs like <a href="https://github.com/bahmutov/locha" target="_blank" rel="noopener">locha</a> does.</p><h2><span id="see-also">See also</span></h2><ul><li>I have released the log interception in <a href="https://github.com/bahmutov/all-logs" target="_blank" rel="noopener"><code>@bahmutov/all-logs</code></a> NPM module. It can collect all<ul><li><code>console.{log, warn, error}</code> messages</li><li>all messages via <code>debug</code> module</li><li>all messages via <code>util.debuglog</code> (see the update below)</li></ul></li><li><a href="../good-logging/">Good logging</a></li><li><a href="../oo-vs-fp-log-example/">OO vs FP console log example</a></li><li><a href="https://github.com/visionmedia/debug" target="_blank" rel="noopener"><code>debug</code></a> module</li><li>Source code for this blog post is in the <a href="https://github.com/bahmutov/capture-logs-example" target="_blank" rel="noopener">bahmutov/capture-logs-example</a> repository.</li></ul><h2><span id="update-1-utildebuglog">Update 1 - <code>util.debuglog</code></span></h2><p>In Node, there is built-in <code>NODE_DEBUG=&lt;namespace&gt;</code> mechanism for verbose logs, see <a href="https://nodejs.org/api/util.html#util_util_debuglog_section" target="_blank" rel="noopener"><code>util.debuglog</code></a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">const</span> debuglog = util.debuglog(<span class="string">'foo'</span>);</span><br><span class="line">debuglog(<span class="string">'hello from foo [%d]'</span>, <span class="number">123</span>);</span><br></pre></td></tr></table></figure><p>If you run the above piece of code with <code>NODE_DEBUG=foo</code> it will show the namespace (uppercased) and process id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOO 3245: hello from foo [123]</span><br></pre></td></tr></table></figure><p>One can intercept these log messages by overwriting <code>util.debuglog</code> method.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this blog post I will show how to intercept messages logged by a Node process using a pre-loaded module. You can find the source code 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Run Cypress included from Docker container</title>
    <link href="https://glebbahmutov.com/blog/run-cypress-included-from-docker-container/"/>
    <id>https://glebbahmutov.com/blog/run-cypress-included-from-docker-container/</id>
    <published>2019-06-20T04:00:00.000Z</published>
    <updated>2019-06-20T21:24:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>In the blog post <a href="https://www.cypress.io/blog/2019/05/02/run-cypress-with-a-single-docker-command/" target="_blank" rel="noopener">&quot;Run Cypress with a single Docker command&quot;</a> I gave several examples running Cypress Docker image <a href="https://github.com/cypress-io/cypress-docker-images/tree/master/included" target="_blank" rel="noopener">cypress/included</a> using <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">docker-compose</a> command. I also showed how to run Cypress inside a Docker container, yet see it on the host machine. But I did not give an example of how to run Cypress inside a Docker container and test a web application running on the host machine.</p><p>In this short blog post I will show how to do this. I am running Docker v18.09.2 on Mac.</p><p>So imagine I have a local web application running on <code>localhost:3333</code>. For example it could be a <a href="https://github.com/indexzero/http-server" target="_blank" rel="noopener">http-server</a> serving a local <code>public</code> folder:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http-server -p 3333 public</span><br></pre></td></tr></table></figure><p>I can load <code>http://localhost:3333</code> in any browser and see the page.</p><p>My <code>cypress.json</code> file points at this URL</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:3333"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Typically I would <a href="https://on.cypress.io/installing-cypress" target="_blank" rel="noopener">install Cypress locally</a>, but maybe I don&#39;t want to install any tools. I can still run <code>cypress/included</code> Docker image, but any application running inside the container does NOT have access to the <code>localhost</code> of the host machine. Instead Docker provides a special hostname <code>host.docker.internal</code> for container processes to access the web apps running on the host machine, see <a href="https://stackoverflow.com/questions/24319662/from-inside-of-a-docker-container-how-do-i-connect-to-the-localhost-of-the-mach" target="_blank" rel="noopener">this Stackoverflow question</a>. When I start Cypress run, I need to set the base url config parameter, which I will do using an environment variable <code>CYPRESS_baseUrl</code>. Here is the full command with explanation below</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">  -v $PWD:/e2e \</span><br><span class="line">  -w /e2e \</span><br><span class="line">  -e CYPRESS_baseUrl=http://host.docker.internal:3333 \</span><br><span class="line">  cypress/included:3.3.1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Explanation of the &quot;docker run&quot; command line arguments:</span><br><span class="line"></span><br><span class="line"> -it                      = interactive terminal</span><br><span class="line"> -v $PWD:/e2e             = map current folder to /e2e inside the container</span><br><span class="line"> -w /e2e                  = set working directy to /e2e</span><br><span class="line"> -e CYPRESS_baseUrl=...   = pass environment variable CYPRESS_baseUrl</span><br><span class="line"> cypress/included:3.3.1   = name of the Docker image with tag</span><br></pre></td></tr></table></figure><p>The tests run and finish</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Starting)</span><br><span class="line"></span><br><span class="line">  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</span><br><span class="line">  ‚îÇ Cypress:    3.3.1                                                                              ‚îÇ</span><br><span class="line">  ‚îÇ Browser:    Electron 61 (headless)                                                             ‚îÇ</span><br><span class="line">  ‚îÇ Specs:      1 found (spec.js)                                                                  ‚îÇ</span><br><span class="line">  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</span><br><span class="line"></span><br><span class="line">  Running: spec.js...                                                                      (1 of 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ‚úì loads page (291ms)</span><br><span class="line"></span><br><span class="line">  1 passing (320ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  (Results)</span><br><span class="line"></span><br><span class="line">  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</span><br><span class="line">  ‚îÇ Tests:        1         ‚îÇ</span><br><span class="line">  ‚îÇ Passing:      1         ‚îÇ</span><br><span class="line">  ‚îÇ Failing:      0         ‚îÇ</span><br><span class="line">  ‚îÇ Pending:      0         ‚îÇ</span><br><span class="line">  ‚îÇ Skipped:      0         ‚îÇ</span><br><span class="line">  ‚îÇ Screenshots:  0         ‚îÇ</span><br><span class="line">  ‚îÇ Video:        true      ‚îÇ</span><br><span class="line">  ‚îÇ Duration:     0 seconds ‚îÇ</span><br><span class="line">  ‚îÇ Spec Ran:     spec.js   ‚îÇ</span><br><span class="line">  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  (Video)</span><br><span class="line"></span><br><span class="line">  - Started processing:   Compressing to 32 CRF</span><br><span class="line">  - Finished processing:  /e2e/cypress/videos/spec.js.mp4 (0 seconds)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Finished)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Spec                                                Tests  Passing  Failing  Pending  Skipped</span><br><span class="line">  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</span><br><span class="line">  ‚îÇ ‚úî spec.js                                   318ms        1        1        -        -        - ‚îÇ</span><br><span class="line">  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò</span><br><span class="line">    All specs passed!                           318ms        1        1        -        -        -</span><br></pre></td></tr></table></figure><h2><span id="bonus">Bonus</span></h2><p>You can use <code>cypress/included</code> on CI server, see <a href="https://github.com/bahmutov/cypress-included-example" target="_blank" rel="noopener">bahmutov/cypress-included-example</a> for example.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the blog post &lt;a href=&quot;https://www.cypress.io/blog/2019/05/02/run-cypress-with-a-single-docker-command/&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="docker" scheme="https://glebbahmutov.com/blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>End-to-end Testing for Server-Side Rendered Pages</title>
    <link href="https://glebbahmutov.com/blog/ssr-e2e/"/>
    <id>https://glebbahmutov.com/blog/ssr-e2e/</id>
    <published>2019-05-21T04:00:00.000Z</published>
    <updated>2019-05-21T04:20:31.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#ssr-application">SSR application</a></li><li><a href="#check-html">Check HTML</a></li><li><a href="#removing-application-bundle">Removing application bundle</a></li><li><a href="#disable-component-method">Disable component method</a></li><li><a href="#confirming-createreactclass-call">Confirming <code>createReactClass</code> call</a></li><li><a href="#hydrated-page">Hydrated page</a></li><li><a href="#conclusions">Conclusions</a></li></ul><!-- tocstop --><p><strong>Note:</strong> the source code for this blog post is in <a href="https://github.com/bahmutov/react-server-example" target="_blank" rel="noopener">bahmutov/react-server-example</a> repository which is a fork of the excellent <a href="https://github.com/mhart/react-server-example" target="_blank" rel="noopener">mhart/react-server-example</a>.</p><h2><span id="ssr-application">SSR application</span></h2><p>If you install dependencies and run this web application, it starts listening on port 3000. For each received request the server returns a rendered markup for a simple list generated using a React component. It also returns props that allow the application to <a href="../hydrate-your-apps/">hydrate client-side</a> and continue from there.</p><p>Here is the returned HTML (I am using my favorite <a href="https://httpie.org/" target="_blank" rel="noopener">httpie</a> instead of <code>curl</code> to fetch the page). Notice both the list items and the <code>window.APP_PROPS</code> in the returned page:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ http localhost:3000</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 676</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Date: Tue, 14 May 2019 01:32:41 GMT</span><br><span class="line"></span><br><span class="line">&lt;body&gt;&lt;div id=&quot;content&quot;&gt;&lt;div data-reactroot=&quot;&quot;&gt;&lt;button disabled=&quot;&quot;&gt;</span><br><span class="line">Add Item&lt;/button&gt;&lt;ul&gt;&lt;li&gt;Item 0&lt;/li&gt;&lt;li&gt;Item 1&lt;/li&gt;&lt;li&gt;Item 2&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Item 3&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;var APP_PROPS = &#123;&quot;items&quot;:[&quot;Item 0&quot;,</span><br><span class="line">&quot;Item 1&quot;,&quot;Item 2&quot;,&quot;Item 3&quot;]&#125;;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react@16.7.0/umd/react.production.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react-dom@16.7.0/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react-dom-factories@1.0.2/index.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/create-react-class@15.6.3/create-react-class.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>How do we test the server-side rendered page using an end-to-end test runner like Cypress.io? The application hydrates, thus if we simply load the page using <code>cy.visit(&#39;http://localhost:3000&#39;)</code> we might be testing the client-side SPA, not the server-rendered one! Here is one possible solution.</p><p>Instead of <a href="https://on.cypress.io" target="_blank" rel="noopener"><code>cy.visit</code></a> we can request the page using <a href="https://on.cypress.io" target="_blank" rel="noopener"><code>cy.request</code></a> just like a regular HTTP resource - forcing the server to render it. The following test shows how to request the page and pick its <code>body</code> property:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders 5 items on the server'</span>, () =&gt; &#123;</span><br><span class="line">  cy.request(<span class="string">'/'</span>).its(<span class="string">'body'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The DevTools console shows the returned HTML page</p><p><img src="/blog/images/ssr-e2e/request-ssr-page.png" alt="Page HTML is returned by the server"></p><h2><span id="check-html">Check HTML</span></h2><p>If we have static HTML we can find the rendered list items. Without bringing any extra libraries like <a href="https://cheerio.js.org/" target="_blank" rel="noopener">cheerio</a> we can use jQuery already bundled with Cypress:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders 5 items on the server'</span>, () =&gt; &#123;</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> $li = Cypress.$(html).find(<span class="string">'li'</span>)</span><br><span class="line">      expect($li)</span><br><span class="line">        .to.have.property(<span class="string">'length'</span>)</span><br><span class="line">        .equal(<span class="number">4</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ssr-e2e/4-li-items.png" alt="Confirm there are 4 items"></p><p>Nice, server is really rendering the expected items - but we don&#39;t see them! Hmm, we can throw the HTML into the application&#39;s iframe (the one that is empty right now)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders 5 items on the server'</span>, () =&gt; &#123;</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> $li = Cypress.$(html).find(<span class="string">'li'</span>)</span><br><span class="line">      expect($li)</span><br><span class="line">        .to.have.property(<span class="string">'length'</span>)</span><br><span class="line">        .equal(<span class="number">4</span>)</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The only problem with this approach - the JavaScript starts running immediately, which we can see by adding a few console log statements to the component life cycle methods.</p><p><img src="/blog/images/ssr-e2e/log.png" alt="Component is running"></p><h2><span id="removing-application-bundle">Removing application bundle</span></h2><p>After we receive the server-side rendered page, but before we stick it into the browser, we can simply remove the application bundle (or even all script tags). Then we can use &quot;normal&quot; Cypress query methods to confirm the expected number of elements - and see them ourselves.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'skips client-side bundle'</span>, () =&gt; &#123;</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// remove the application code bundle</span></span><br><span class="line">      html = html.replace(<span class="string">'&lt;script src="/bundle.js"&gt;&lt;/script&gt;'</span>, <span class="string">''</span>)</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// now we can use "normal" Cypress api to confirm</span></span><br><span class="line">  <span class="comment">// number of list element</span></span><br><span class="line">  cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The page shows the expected elements (highlighted) and the console does not show any messages from the component itself. The button stays disabled, which is another sign that our component has never been activated.</p><p><img src="/blog/images/ssr-e2e/without-bundle.png" alt="Skipped component bundle"></p><h2><span id="disable-component-method">Disable component method</span></h2><p>Instead of removing the application bundle completely, we can just disable some React component lifecycle methods, for example <code>componentDidMount</code>. Here is how we can do it - by being ready when <code>window.createReactClass</code> is called.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'disables component methods from createReactClass'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> createReactClass</span><br><span class="line">  cy.window().then(<span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(win, <span class="string">'createReactClass'</span>, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">definition</span> =&gt;</span> &#123;</span><br><span class="line">          definition.componentDidMount = <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">null</span></span><br><span class="line">          <span class="keyword">return</span> createReactClass(definition)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (fn) &#123;</span><br><span class="line">        createReactClass = fn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">  <span class="comment">// since we disabled componentDidMount the button should</span></span><br><span class="line">  <span class="comment">// never become enabled</span></span><br><span class="line">  cy.get(<span class="string">'button'</span>).should(<span class="string">'be.disabled'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ssr-e2e/no-component.png" alt="No more componentDidMount"></p><h2><span id="confirming-createreactclass-call">Confirming <code>createReactClass</code> call</span></h2><p>In the above test we have confirmed that the <code>componentDidMount</code> was called - but only indirectly, by observing the button that has remained disabled. Let&#39;s actually confirm that our dummy no-op function was called once by the React starting up. We can create a <a href="https://on.cypress.io/stub" target="_blank" rel="noopener"><code>cy.stub</code></a> that will be called by the component.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'how to know if componentDidMount was called'</span>, () =&gt; &#123;</span><br><span class="line">  cy.window().then(<span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> createReactClass</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(win, <span class="string">'createReactClass'</span>, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">definition</span> =&gt;</span> &#123;</span><br><span class="line">          definition.componentDidMount = cy.stub().as(<span class="string">'componentDidMount'</span>)</span><br><span class="line">          <span class="keyword">return</span> createReactClass(definition)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (fn) &#123;</span><br><span class="line">        createReactClass = fn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// and then ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, we have a tiny bit of problem with the rest of the test. How do we get to the <code>@componentDidMount</code> alias? We cannot simply assert that it has been called once - because the alias has not been created yet when we try to <code>cy.get</code> it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.request(<span class="string">'/'</span>)</span><br><span class="line">  .its(<span class="string">'body'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">    cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// hmm, this throws, because alias "componentDidMount"</span></span><br><span class="line"><span class="comment">// has NOT been registered yet</span></span><br><span class="line">cy.get(<span class="string">'@componentDidMount'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ssr-e2e/cy-get-timing-problem.png" alt="Stub was called, but the test claims it was unavailable"></p><p>Notice that in the test above <code>cy.get(&#39;@componentDidMount&#39;)</code> has failed to find the alias, yet it was later called by the app. That is why the &quot;Spies / Stubs&quot; table shows 1 call. Hmm, how do we wait until an alias has been created before calling <code>cy.get</code> on it? We could just add a 1 second wait - that should be enough, right?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cy.request(<span class="string">'/'</span>)</span><br><span class="line">  .its(<span class="string">'body'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">    cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">  &#125;)</span><br><span class="line">cy.wait(<span class="number">1000</span>)</span><br><span class="line">cy.get(<span class="string">'@componentDidMount'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ssr-e2e/wait-1-second.png" alt="Wait 1 second - the alias should be there after the delay"></p><p>Of course, this is NOT the way Cypress works - you should not hardcode waits, instead you should just declare a condition to wait for. The test runner then will only wait until the moment the condition becomes satisfied, and not a millisecond longer. To achieve this we can take advantage of <a href="https://on.cypress.io/should#Function" target="_blank" rel="noopener"><code>cy.should(fn)</code></a> that automatically retries the callback function until it passes without throwing an error (or times out).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">it.only(<span class="string">'how to know if componentDidMount was called'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> componentDidMountSet</span><br><span class="line">  cy.window().then(<span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> createReactClass</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(win, <span class="string">'createReactClass'</span>, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">definition</span> =&gt;</span> &#123;</span><br><span class="line">          definition.componentDidMount = cy.stub().as(<span class="string">'componentDidMount'</span>)</span><br><span class="line">          componentDidMountSet = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">return</span> createReactClass(definition)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (fn) &#123;</span><br><span class="line">        createReactClass = fn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait until custom assertion passes</span></span><br><span class="line">  cy.wrap(<span class="literal">null</span>).should(<span class="function"><span class="params">()</span> =&gt;</span> expect(componentDidMountSet).to.be.true)</span><br><span class="line">  <span class="comment">// now the alias should exist</span></span><br><span class="line">  cy.get(<span class="string">'@componentDidMount'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This line is the key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.wrap(<span class="literal">null</span>).should(<span class="function"><span class="params">()</span> =&gt;</span> expect(componentDidMountSet).to.be.true)</span><br></pre></td></tr></table></figure><p>It <a href="https://on.cypress.io/retry-ability" target="_blank" rel="noopener">retries</a> until the <code>expect(...).to.be.true</code> passes successfully.</p><p><img src="/blog/images/ssr-e2e/retry.png" alt="Auto-retry until variable is set"></p><p>Notice that auto-retrying is much faster (130ms) than hard-coding 1 second wait, yet works reliably.</p><p>One other way to write a command to wait until a specific condition becomes true (without throwing) is to use <a href="https://github.com/NoriSte/cypress-wait-until" target="_blank" rel="noopener">cypress-wait-until</a> plugin. Using this plugin we can write the same &quot;wait until variable gets its value&quot; like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> componentDidMountSet</span><br><span class="line">...</span><br><span class="line">cy.waitUntil(<span class="function"><span class="params">()</span> =&gt;</span> cy.wrap(componentDidMountSet))</span><br><span class="line">cy.get(<span class="string">'@componentDidMount'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br></pre></td></tr></table></figure><h2><span id="hydrated-page">Hydrated page</span></h2><p>Once the web application starts client-side, the markup should not jump or move - the newly rendered DOM should match the static HTML exactly, except the button becomes enabled in our example. Let&#39;s confirm it with the following test:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders same application after hydration'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// technical detail - removes any stubs from previous tests</span></span><br><span class="line">  <span class="comment">// since our application iframe does not get reset</span></span><br><span class="line">  <span class="comment">// (there is no "cy.visit" call to reset it)</span></span><br><span class="line">  <span class="keyword">const</span> win = cy.state(<span class="string">'window'</span>)</span><br><span class="line">  <span class="keyword">delete</span> win.createReactClass</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> pageHtml</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      pageHtml = html</span><br><span class="line">      <span class="comment">// remove bundle script to only have static HTML</span></span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(</span><br><span class="line">        html.replace(<span class="string">'&lt;script src="/bundle.js"&gt;&lt;/script&gt;'</span>, <span class="string">''</span>)</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">  cy.get(<span class="string">'button'</span>).should(<span class="string">'be.disabled'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> staticHTML</span><br><span class="line">  cy.get(<span class="string">'#content'</span>)</span><br><span class="line">    .invoke(<span class="string">'html'</span>)</span><br><span class="line">    <span class="comment">// static HTML before hydration has the "disabled" button attribute</span></span><br><span class="line">    <span class="comment">// we should remove it before comparing to hydrated HTML</span></span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> (staticHTML = html.replace(<span class="string">' disabled=""'</span>, <span class="string">''</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// now mount the full page and let it hydrate</span></span><br><span class="line">    .then(resetDocument)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(pageHtml)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// now the page should be live client-side</span></span><br><span class="line">  cy.get(<span class="string">'button'</span>).should(<span class="string">'be.enabled'</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'#content'</span>)</span><br><span class="line">    .invoke(<span class="string">'html'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      expect(html).to.equal(staticHTML)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs and confirms that the hydrated page matches the static HTML exactly.</p><p><img src="/blog/images/ssr-e2e/hydrate-test.png" alt="Static vs hydrated HTML test"></p><h2><span id="conclusions">Conclusions</span></h2><p>Using <a href="https://on.cypress.io" target="_blank" rel="noopener">cy.request</a> we can request the server-side rendered page and mount it into the Test Runner&#39;s application iframe for further testing. We can disable client-side functionality to make sure we only see the static HTML before hydration. We can also spy on the client-side application to confirm that it starts correctly, and I have shown how to wait for a variable to get its value before the test continues. Finally, I have shown how to confirm that the static HTML sent by the server is hydrated correctly by the client side application from the <code>APP_PROPS</code> data.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ssr-application&quot;&gt;SSR application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#check-html&quot;&gt;Check HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#removi
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="react" scheme="https://glebbahmutov.com/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Combined End-to-end and Unit Test Coverage</title>
    <link href="https://glebbahmutov.com/blog/combined-end-to-end-and-unit-test-coverage/"/>
    <id>https://glebbahmutov.com/blog/combined-end-to-end-and-unit-test-coverage/</id>
    <published>2019-05-19T04:00:00.000Z</published>
    <updated>2019-06-13T13:37:18.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#e2e-code-coverage-overview">E2E code coverage overview</a></li><li><a href="#the-missing-4">The missing 4%</a></li><li><a href="#combined-coverage">Combined coverage</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="e2e-code-coverage-overview">E2E code coverage overview</span></h2><p>In my previous blog post <a href="../stub-navigator-api/">&quot;Stub navigator API in end-to-end tests&quot;</a> I have introduced an application that uses navigator browser API to show the battery charge percentage. While exploring the ways to test this application using <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> we have discovered an edge case that caused that web application to crash when running in any browser but Chrome. The edge case is shown below - the application crashes if the <code>battery</code> variable remains undefined by the time <code>window.load</code> tries to attach an event listener.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> battery</span><br><span class="line"><span class="keyword">if</span> (navigator.battery) &#123;</span><br><span class="line">  readBattery(navigator.battery)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getBattery) &#123;</span><br><span class="line">  navigator.getBattery().then(readBattery)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// edge case!</span></span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'.not-support'</span>).removeAttribute(<span class="string">'hidden'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// WHAT HAPPENS WHEN "battery" IS undefined?</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// show updated status when the battery changes</span></span><br><span class="line">  battery.addEventListener(<span class="string">'chargingchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While Cypress allows writing end-to-end tests with ease, it <em>does not tell us what tests to write</em>. It is up to the person who is developing the web application to know what use cases to cover with end-to-end tests. But code coverage could be a good metric that highlights the untested logical edge cases. In the blog post <a href="../code-coverage-for-e2e-tests/">&quot;Code Coverage for End-to-end Tests&quot;</a> I have shown how to instrument application JavaScript code as a build step. The collected code coverage saved after the end-to-end tests passed makes the missed line really visible.</p><p><img src="/blog/images/battery-coverage/missed-line.png" alt="Missed line"></p><p>Once we add a test to hit this line, we discover the problem in the application code, add a missed guard and make application robust.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// add a guard condition to prevent crashing</span></span><br><span class="line">  <span class="keyword">if</span> (battery) &#123;</span><br><span class="line">    battery.addEventListener(<span class="string">'chargingchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In another blog post <a href="../code-coverage-by-parcel/">&quot;Code Coverage by Parcel Bundler&quot;</a> I have set up on-the-fly code coverage using the excellent <a href="https://parceljs.org/" target="_blank" rel="noopener">Parcel Bundler</a>. Instead of generating and saving an intermediate instrumented application source, we can instrument the application while serving it. The details will vary depending on the source bundler used, but most bundlers can use <a href="https://www.npmjs.com/package/babel-plugin-istanbul" target="_blank" rel="noopener">babel-plugin-istanbul</a> to instrument ES6 on the fly. In our case, the application&#39;s code will be instrumented because I have added a tiny <code>.babelrc</code> file:</p><figure class="highlight plain"><figcaption><span>.babelrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [&quot;istanbul&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To save the code coverage results correctly, my end-to-end tests are using <a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> plugin - and the tests reach <a href="https://coveralls.io/github/bahmutov/demo-battery-api?branch=bundle" target="_blank" rel="noopener">96% code coverage</a>.</p><h2><span id="the-missing-4">The missing 4%</span></h2><p>Hmm, great, but we are still 4% short of the perfect 100%. If we look at each source file, we can see that missing lines and logical branches are from this utility function <code>toTime</code> that converts number of seconds to <code>hours:minutes</code> string label.</p><p><img src="/blog/images/combined-cc/to-time-coverage.png" alt="toTime function not covered by e2e tests"></p><p>We have missed logical branches when the number of hours has double digits, and we have missed a branch of code when the number of minutes has a single digit. The function <code>toTime</code> is called from another function <code>batteryStats</code> with <code>battery.chargingTime</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">batteryStats</span> (<span class="params">battery</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> percentage = <span class="built_in">parseFloat</span>((battery.level * <span class="number">100</span>).toFixed(<span class="number">2</span>)) + <span class="string">'%'</span></span><br><span class="line">  <span class="keyword">const</span> charging = battery.charging</span><br><span class="line">  <span class="keyword">let</span> fully</span><br><span class="line">  <span class="keyword">let</span> remaining</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (charging &amp;&amp; battery.chargingTime === <span class="literal">Infinity</span>) &#123;</span><br><span class="line">    fully = <span class="string">'Calculating...'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (battery.chargingTime !== <span class="literal">Infinity</span>) &#123;</span><br><span class="line">    fully = toTime(battery.chargingTime)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fully = <span class="string">'---'</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could add end-to-end tests passing <code>battery</code> object that has just the right number in <code>battery.chargingTime</code> property to hit both missed hours and minutes cases. Hmm, but that is so weird - trying to essentially unit test an internal function via end-to-end tests! Instead, let&#39;s cover <code>toTime</code> function with unit tests. Luckily, Cypress can <a href="https://github.com/cypress-io/cypress-example-recipes#unit-testing" target="_blank" rel="noopener">execute unit tests</a> for us.</p><p>I have written <a href="https://github.com/bahmutov/demo-battery-api/blob/cover-unit-tests-3/cypress/integration/utils-spec.js" target="_blank" rel="noopener">cypress/integration/utils-spec.js</a> that imports the function <code>toTime</code> directly and hits all logical branches and statements.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toTime &#125; <span class="keyword">from</span> <span class="string">'../../src/utils'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'toTime'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// hit all if - else branches in the "toTime" function</span></span><br><span class="line"></span><br><span class="line">  it(<span class="string">'handles single digit units'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> hhmm = toTime(<span class="number">0</span>)</span><br><span class="line">    expect(hhmm).to.equal(<span class="string">'00:00'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'handles double digit units'</span>, () =&gt; &#123;</span><br><span class="line">    expect(toTime(<span class="number">36001</span>)).to.equal(<span class="string">'10:00'</span>)</span><br><span class="line">    expect(toTime(<span class="number">601</span>)).to.equal(<span class="string">'00:10'</span>)</span><br><span class="line">    <span class="comment">// there are no seconds in the returned string</span></span><br><span class="line">    <span class="comment">// but we can still cover the logical branches</span></span><br><span class="line">    expect(toTime(<span class="number">20</span>)).to.equal(<span class="string">'00:00'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="combined-coverage">Combined coverage</span></h2><p>Just like that the coverage in this function is complete, but hmm, the new coverage is NOT reflected in the generated code coverage reports - it is as if the unit tests did not contribute anything to the coverage numbers. This is to be expected - because we only collected coverage from <em>the application code loaded by the page during <code>cy.visit</code> command.</em> We never instrumented the <em>unit test</em> code, the code loaded from the spec file.</p><p>Our <code>.babelrc</code> only told our application bundler to instrument the source code, Cypress Test Runner has no idea that it should instrument the spec code - instead Cypress uses its own bundler to process and load code.</p><p>Luckily, we can easily use <strong>the same <code>babel-plugin-istanbul</code> instrumentation</strong> to bundle our spec files (which includes code loaded directly from the spec files) and save the code coverage. Just tell Cypress to use &quot;.babelrc&quot; during bundling. We need to add the following to the <a href="https://github.com/bahmutov/demo-battery-api/blob/cover-unit-tests-3/cypress/plugins/index.js" target="_blank" rel="noopener">cypress/plugins/index.js</a> file.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> browserify = <span class="built_in">require</span>(<span class="string">'@cypress/browserify-preprocessor'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// tell Cypress to use .babelrc when bundling spec code</span></span><br><span class="line">  <span class="keyword">const</span> options = browserify.defaultOptions</span><br><span class="line">  options.browserifyOptions.transform[<span class="number">1</span>][<span class="number">1</span>].babelrc = <span class="literal">true</span></span><br><span class="line">  on(<span class="string">'file:preprocessor'</span>, browserify(options))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Of course, we also need to install <a href="https://github.com/cypress-io/cypress-browserify-preprocessor#readme" target="_blank" rel="noopener">@cypress/browserify-preprocessor</a> npm package for this to work</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev @cypress/browserify-preprocessor</span></span><br></pre></td></tr></table></figure><p>We don&#39;t have to change anything else - <a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> v1.1.0 already knows how to correctly merge code coverage from the application and from unit tests - and saves the combined code coverage report. The spec files themselves are NOT in the report, only the application source files are. The above unit tests cover the <code>toTime</code> function pretty well:</p><p><img src="/blog/images/combined-cc/unit-coverage.png" alt="toTime covered by unit tests"></p><p>What about the rest of the code? Everything gets covered - the DOM updates and battery API code get covered by end-to-end tests, while individual little functions are covered by the unit tests. When <code>cypress-istanbul</code> combines the coverage, it saves the report showing full 100% code coverage.</p><p><img src="/blog/images/combined-cc/full-coverage.png" alt="Full coverage"></p><p>You can also see this coverage report at <a href="https://coveralls.io/github/bahmutov/demo-battery-api?branch=cover-unit-tests-3" target="_blank" rel="noopener">coveralls.io/github/bahmutov/demo-battery-api?branch=cover-unit-tests-3</a>, the coverage information is set by the CI build job. You can find the source code at <a href="https://github.com/bahmutov/demo-battery-api/tree/cover-unit-tests-3" target="_blank" rel="noopener">bahmutov/demo-battery-api</a> repo in branch &quot;cover-unit-tests-3&quot;.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://github.com/bahmutov/code-coverage-webpack-dev-server" target="_blank" rel="noopener">Code coverage using webpack-dev-server example</a></li><li><a href="https://on.cypress.io/code-coverage" target="_blank" rel="noopener">Cypress.io code coverage guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#e2e-code-coverage-overview&quot;&gt;E2E code coverage overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-missing-4&quot;&gt;The missing 4%&lt;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Code Coverage by Parcel Bundler</title>
    <link href="https://glebbahmutov.com/blog/code-coverage-by-parcel/"/>
    <id>https://glebbahmutov.com/blog/code-coverage-by-parcel/</id>
    <published>2019-05-16T04:00:00.000Z</published>
    <updated>2019-06-13T13:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#instrument-code-using-parcel">Instrument code using Parcel</a></li><li><a href="#saving-coverage-information">Saving coverage information</a></li><li><a href="#sending-report-to-coverallsio">Sending report to coveralls.io</a></li><li><a href="#more-information">More information</a></li></ul><!-- tocstop --><p>In my previous blog post <a href="../code-coverage-for-e2e-tests/">&quot;Code Coverage for End-to-end Tests&quot;</a> I have instrumented application source code and collected code coverage during end-to-end tests. This helped guide the end-to-end tests to cover edge cases and discover a logical error in the <a href="../stub-navigator-api/">browser battery api demo</a>. In this post I will show how you can instrument the application source code on the fly without using a separate build step. I will also show how to use a new NPM module <a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> to collect and save code coverage information no matter how the code was instrumented. Finally, I will show how to send the collected coverage information to 3rd party dashboard such as <a href="https://coveralls.io" target="_blank" rel="noopener">coveralls.io</a>.</p><p>You can find the source code in the branch &quot;bundle&quot; of the repo <a href="https://github.com/bahmutov/demo-battery-api/tree/bundle" target="_blank" rel="noopener">bahmutov/demo-battery-api</a> and you can see the code coverage reports at <a href="https://coveralls.io/github/bahmutov/demo-battery-api" target="_blank" rel="noopener">coveralls.io/github/bahmutov/demo-battery-api</a>.</p><p><img src="/blog/images/bundle/builds.png" alt="coveralls.io showing code coverage numbers from several builds"></p><h2><span id="instrument-code-using-parcel">Instrument code using Parcel</span></h2><p>The demo application has <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/index.html" target="_blank" rel="noopener">index.html</a> with the entry script tag <code>&lt;script src=&quot;src/index.js&quot; async&gt;&lt;/script&gt;</code>. That script <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/src/index.js" target="_blank" rel="noopener">src/index.js</a> includes 2 other utility scripts:</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; batteryStats &#125; <span class="keyword">from</span> <span class="string">'./utils'</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderStats &#125; <span class="keyword">from</span> <span class="string">'./dom-utils'</span></span><br></pre></td></tr></table></figure><p>I will serve the <code>index.html</code> using <a href="https://parceljs.org" target="_blank" rel="noopener">Parcel bundler</a>.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"parcel serve index.html"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, I have claimed in the past that <a href="../parcel/">&quot;Parcel is awesome sauce&quot;</a>, and the next example just proves it one more time. If we want to instrument the application JavaScript code, we can use <a href="https://www.npmjs.com/package/babel-plugin-istanbul" target="_blank" rel="noopener">babel-plugin-istanbul</a> - Parcel will load and apply Babel plugins if you have <code>.babelrc</code> file!</p><figure class="highlight plain"><figcaption><span>.babelrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [&quot;istanbul&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We probably do not want to instrument the application code in every situation, only during testing. So more realistic configuration would be <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/.babelrc" target="_blank" rel="noopener">.babelrc</a> with the &quot;istanbul&quot; plugin loaded only if we run the command with test environment like <code>NODE_ENV=test parcel serve index.html</code>:</p><figure class="highlight plain"><figcaption><span>.babelrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;env&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &#123;</span><br><span class="line">      &quot;plugins&quot;: [ &quot;istanbul&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Warning:</strong> the above conditional plugin loading is currently broken in Parcel v1.12.3, there is an open PR <a href="https://github.com/parcel-bundler/parcel/pull/2840" target="_blank" rel="noopener">#2840</a> with a fix.</p><p>When we start the application and open &quot;localhost:1234&quot; we can see that <code>index.js</code> and the 2 files it has imported are bundled into a single resource - and the source has been instrumented to keep track how many times each statement, function and logical branch was executed.</p><p><img src="/blog/images/bundle/instrumented-code.png" alt="Instrumented code"></p><p>Parcel generates the source maps by default, and we can find the original, uninstrumented code in &quot;src&quot; folder</p><p><img src="/blog/images/bundle/source-maps.png" alt="Source maps give us the original source code"></p><p>Super, zero effort on our part and we get coverage counters in the browser when the code runs - but how do we save that coverage object back to disk after the tests? And how do we generate reports?</p><h2><span id="saving-coverage-information">Saving coverage information</span></h2><p>Just like before we need to merge code coverage after each test to pain the complete picture. I have factored out the code into Cypress plugin called <a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> since it should be able to save code coverage as long as it is compatible with <a href="https://istanbul.js.org" target="_blank" rel="noopener">istanbuljs</a> tool. Just install this plugin and its peer dependencies:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D cypress-istanbul nyc istanbul-lib-coverage</span><br></pre></td></tr></table></figure><p>To load the plugin (it uses tasks) add to your <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/cypress/plugins/index.js" target="_blank" rel="noopener">cypress/plugins/index.js</a> file the following</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">'task'</span>, <span class="built_in">require</span>(<span class="string">'cypress-istanbul/task'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and to your <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/cypress/support/index.js" target="_blank" rel="noopener">cypress/support/index.js</a> the following line:</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'cypress-istanbul/support'</span></span><br></pre></td></tr></table></figure><p>And that is it! Open Cypress, select a single spec, for example <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/cypress/integration/battery.js" target="_blank" rel="noopener">cypress/integration/battery.js</a> which runs 2 end-to-end tests. You should see &quot;After all&quot; task that executes <code>nyc report --reporter=html</code> command to generate a friendly static report.</p><p><img src="/blog/images/bundle/html-report.png" alt="HTML code coverage report"></p><p>We can open the detailed view of <code>index.js</code> to see how the first code path <code>readBattery(navigator.battery)</code> was executed twice - because two tests both his this branch path.</p><p><img src="/blog/images/bundle/indexjs-report.png" alt="Code coverage for index.js after running two battery tests"></p><h2><span id="sending-report-to-coverallsio">Sending report to coveralls.io</span></h2><p>We can use the code coverage report locally to direct testing efforts. We can also store the generated report as a test artifact on CI. For example you can find it on each <a href="https://circleci.com/gh/bahmutov/demo-battery-api/tree/bundle" target="_blank" rel="noopener">Circle build</a> - it looks exactly the same as our local report folder.</p><p><img src="/blog/images/bundle/ci-report.png" alt="Code coverage report as CI test artifact"></p><p>But we probably want to analyze long term trends in code coverage, maybe review missed edge cases as a team during code review, etc. We need code coverage as a service - and <a href="https://coveralls.io" target="_blank" rel="noopener">coveralls.io</a> is a good one. Let&#39;s send the code coverage we have collected there. I have linked the demo GitHub repository to the new project <a href="https://coveralls.io/github/bahmutov/demo-battery-api" target="_blank" rel="noopener">https://coveralls.io/github/bahmutov/demo-battery-api</a> and added two environment variables to CircleCI: <code>COVERALLS_SERVICE_NAME=circleci, COVERALLS_REPO_TOKEN=...</code>. After that I have installed NPM module <a href="https://github.com/nickmerwin/node-coveralls#readme" target="_blank" rel="noopener">coveralls</a> - it will send LCOV data to <code>coveralls.io</code> after the test run. All we need is to generate the LCOV report and pipe it to this &quot;coveralls&quot; npm module. In the project&#39;s <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/circle.yml" target="_blank" rel="noopener">circle.yml</a> file the last steps are:</p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post-steps:</span></span><br><span class="line">  <span class="comment"># store the created coverage report folder</span></span><br><span class="line">  <span class="comment"># you can click on it in the CircleCI UI</span></span><br><span class="line">  <span class="comment"># to see live static HTML site</span></span><br><span class="line"><span class="attr">  - store_artifacts:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">coverage</span></span><br><span class="line">  <span class="comment"># and send coverage data to coveralls.io</span></span><br><span class="line">  <span class="comment"># see https://coveralls.io/github/bahmutov/demo-battery-api</span></span><br><span class="line"><span class="attr">  - run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">coveralls</span></span><br></pre></td></tr></table></figure><p>The <code>coveralls</code> script uses <code>nyc</code> again</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"coveralls"</span>: <span class="string">"nyc report --reporter=text-lcov | coveralls"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Each CI build sends the coverage information - and since <code>cypress run</code> executes and combines ALL spec files, we are hitting 95% code coverage!</p><p><img src="/blog/images/bundle/coveralls-info.png" alt="Coveralls summary"></p><p>We can open individual scripts (Coveralls pulls the sources from GitHub) and see the last missed lines</p><p><img src="/blog/images/bundle/coveralls-index.png" alt="Coveralls index.js coverage"></p><p>Beautiful.</p><h2><span id="more-information">More information</span></h2><ul><li>Source at <a href="https://github.com/bahmutov/demo-battery-api/tree/bundle" target="_blank" rel="noopener">https://github.com/bahmutov/demo-battery-api/tree/bundle</a> (branch &quot;bundle&quot;)</li><li><a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> plugin</li><li><a href="https://coveralls.io/github/bahmutov/demo-battery-api" target="_blank" rel="noopener">https://coveralls.io/github/bahmutov/demo-battery-api</a> dashboard</li><li><a href="../code-coverage-for-e2e-tests/">&quot;Code Coverage for End-to-end Tests&quot;</a> blog post</li><li><a href="../stub-navigator-api/">&quot;Stub navigator API in end-to-end tests&quot;</a> blog post</li><li><a href="https://github.com/bahmutov/code-coverage-webpack-dev-server" target="_blank" rel="noopener">Code coverage using webpack-dev-server example</a></li><li><a href="https://on.cypress.io/code-coverage" target="_blank" rel="noopener">Cypress.io code coverage guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#instrument-code-using-parcel&quot;&gt;Instrument code using Parcel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#saving-coverage-informatio
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Using TypeScript aliases in Cypress tests</title>
    <link href="https://glebbahmutov.com/blog/using-ts-aliases-in-cypress-tests/"/>
    <id>https://glebbahmutov.com/blog/using-ts-aliases-in-cypress-tests/</id>
    <published>2019-05-09T04:00:00.000Z</published>
    <updated>2019-05-10T13:53:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this post I will show how you can write end-to-end tests in TypeScript and how to import from test code your application source files using path aliases like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;greeting&#125; <span class="keyword">from</span> <span class="string">'@app/greeting'</span></span><br></pre></td></tr></table></figure><p>instead of brittle relative paths like this</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;greeting&#125; <span class="keyword">from</span> <span class="string">'../../app/src/greeting'</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> the source code for this blog post is at <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests" target="_blank" rel="noopener">bahmutov/using-ts-aliases-in-cypress-tests</a></p><h2><span id="application">Application</span></h2><p>For this demo I will use a minimal example: just an HTML page <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/index.html" target="_blank" rel="noopener">index.html</a> with some TypeScript code</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"src/app.ts"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The code <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/src/app.ts" target="_blank" rel="noopener">src/app.ts</a> places the greeting imported from <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/src/utils.ts" target="_blank" rel="noopener">src/utils.ts</a> into the DOM</p><figure class="highlight ts"><figcaption><span>src/utils.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> greeting = <span class="string">'Hello World'</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>src/app.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; greeting &#125; <span class="keyword">from</span> <span class="string">"./utils"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerText = greeting</span><br></pre></td></tr></table></figure><p>To serve the app I will use <a href="https://parceljs.org" target="_blank" rel="noopener">Parce bundler</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D parcel-bundler</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"parcel serve index.html"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When I run <code>npm start</code> the page is working as expected at <code>localhost:1234</code></p><p><img src="/blog/images/path-aliases/app.png" alt="Application in action"></p><h2><span id="cypress-tests-in-typescript">Cypress Tests in TypeScript</span></h2><p>We can add <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress end-to-end tests</a> to this project with</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D cypress</span><br><span class="line">+ cypress@3.2.0</span><br></pre></td></tr></table></figure><p>To quickly scaffold everything, I prefer to use my little utility <a href="https://github.com/bahmutov/cly" target="_blank" rel="noopener">@bahmutov/cly</a> which stands for &quot;quickly&quot;. Or maybe it stands for &quot;Cypress CLI&quot;? Who knows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npx @bahmutov/cly init</span><br><span class="line">npx: installed 72 in 6.398s</span><br><span class="line">scaffolding new Cypress project</span><br><span class="line">‚úÖ scaffolded &quot;cypress&quot; folder with a single example spec</span><br><span class="line">you can configure additional options in cypress.json file</span><br><span class="line">see https://on.cypress.io/configuration</span><br></pre></td></tr></table></figure><p>We have <code>cypress.json</code> and <code>cypress</code> folder, let&#39;s change the contents of <code>cypress/integration/spec.js</code> to test our page.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'shows greeting'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:1234'</span>)</span><br><span class="line">  cy.contains(<span class="string">'#app'</span>, <span class="string">'Hello World'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Start the app in one terminal with <code>npm start</code> and open Cypress from another terminal with <code>npx cypress open</code> - the test should be green.</p><p><img src="/blog/images/path-aliases/first-test.png" alt="First test is passing"></p><p>But if we write our application in TypeScript, let&#39;s also write our tests in TypeScript. The simplest way to configure test bundling is by installing <a href="https://github.com/bahmutov/add-typescript-to-cypress" target="_blank" rel="noopener">@bahmutov/add-typescript-to-cypress</a> package. We also need to install TypeScript module itself, and we need Webpack</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @bahmutov/add-typescript-to-cypress typescript webpack</span><br><span class="line">+ typescript@3.4.5</span><br><span class="line">+ @bahmutov/add-typescript-to-cypress@2.0.3</span><br><span class="line">+ webpack@4.31.0</span><br></pre></td></tr></table></figure><p>Super, it even has created a default <code>tsconfig.json</code> file for us</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"node_modules/cypress"</span>,</span><br><span class="line">    <span class="string">"cypress/*/*.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can rename our test file from <code>spec.js</code> to <code>spec.ts</code> - and it should run the same. Since the <code>tsconfig.json</code> file is only necessary for our Cypress tests I will move it into the <code>cypress</code> folder. Do not forget to update the paths in <code>tsconfig.json</code> after moving.</p><h2><span id="sharing-code">Sharing code</span></h2><p>Our application shows the greeting text - and I don&#39;t want to hardcode the string to find in my test code. Instead I think it is ok to load the greeting from the application code. It is simple to do using a relative path.</p><figure class="highlight typescript"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;greeting&#125; <span class="keyword">from</span> <span class="string">'../../src/utils'</span></span><br><span class="line">it(<span class="string">'shows greeting'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:1234'</span>)</span><br><span class="line">  cy.contains(<span class="string">'#app'</span>, greeting).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nice, but I really dislike the long relative paths that use <code>../..</code> to get out of the Cypress integration folder. Luckily TypeScript and Webpack both have ways to define aliases to use shortcuts. We need TypeScript <a href="https://dev.to/lars124/path-aliases-with-typescript-in-nodejs-4353" target="_blank" rel="noopener">path aliases</a> to make sure our TypeScript tooling (like VSCode IntelliSense) understands the spec files, while <a href="https://webpack.js.org/configuration/resolve/#resolvealias" target="_blank" rel="noopener">Webpack aliases</a> are needed to find the code during bundling.</p><p>Our goal is to refer to all source files by <code>@src/...</code> from our spec files rather than <code>../../src/...</code>.</p><p>In the <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/cypress/tsconfig.json" target="_blank" rel="noopener">cypress/tsconfig.json</a> add <code>baseUrl</code> and <code>paths</code> properties.</p><figure class="highlight json"><figcaption><span>cypress/tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"../node_modules/cypress"</span>,</span><br><span class="line">    <span class="string">"*/*.ts"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">".."</span>,</span><br><span class="line">    <span class="attr">"paths"</span>: &#123;</span><br><span class="line">      <span class="attr">"@src/*"</span>: [<span class="string">"src/*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nice, now we can import <code>greeting</code> from the test file like this</p><figure class="highlight typescript"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;greeting&#125; <span class="keyword">from</span> <span class="string">'@src/utils'</span></span><br></pre></td></tr></table></figure><p>VSCode can resolve the alias correctly, as shown by this popup</p><p><img src="/blog/images/path-aliases/path-alias.png" alt="Path alias is working in TypeScript"></p><p>But if we try to run Cypress test right now, we will get a nasty error</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./cypress/integration/spec.ts</span><br><span class="line">Module not found: Error: Can&apos;t resolve &apos;@src/utils&apos; in &apos;/Users/gleb/git/using-ts-aliases-in-cypress-tests/cypress/integration&apos;</span><br><span class="line">resolve &apos;@src/utils&apos; in &apos;/Users/gleb/git/using-ts-aliases-in-cypress-tests/cypress/integration&apos;</span><br><span class="line">  Parsed request is a module</span><br><span class="line">  ... goes on for 50 lines</span><br></pre></td></tr></table></figure><p>This is due to the fact that Webpack bundler does not know about the path aliases in <code>tsconfig.json</code>. The simplest way is to tell Webpack how to <a href="https://webpack.js.org/configuration/resolve/#resolvealias" target="_blank" rel="noopener">alias modules</a> by prefix. In file <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/cypress/plugins/cy-ts-preprocessor.js" target="_blank" rel="noopener">cypress/plugins/cy-ts-preprocessor.js</a> add the following <code>alias</code> object to the existing <code>resolve</code> block:</p><figure class="highlight js"><figcaption><span>cypress/plugins/cy-ts-preprocessor.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackOptions = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.ts'</span>, <span class="string">'.js'</span>],</span><br><span class="line">    <span class="comment">// add the alias object</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@src'</span>: path.resolve(__dirname, <span class="string">'../../src'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That is it, our tests can share code with application without fragile folder hops.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://www.cypress.io/blog/2018/11/14/testing-redux-store/" target="_blank" rel="noopener">Testing Redux Store</a></li><li><a href="../use-typescript-with-cypress/">Use TypeScript With Cypress</a></li><li><a href="https://github.com/bahmutov/add-typescript-to-cypress" target="_blank" rel="noopener">bahmutov/add-typescript-to-cypress</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this post I will show how you can write end-to-end tests in TypeScript and how to import from test code your application source files 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="typescript" scheme="https://glebbahmutov.com/blog/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Code Coverage for End-to-end Tests</title>
    <link href="https://glebbahmutov.com/blog/code-coverage-for-e2e-tests/"/>
    <id>https://glebbahmutov.com/blog/code-coverage-for-e2e-tests/</id>
    <published>2019-05-06T04:00:00.000Z</published>
    <updated>2019-06-13T13:37:45.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#instrumenting-the-code-as-a-pre-processor-step">Instrumenting the code as a pre-processor step</a></li><li><a href="#during-the-tests">During the tests</a></li><li><a href="#the-coverage-report">The coverage report</a></li><li><a href="#code-coverage-from-multiple-spec-files">Code coverage from multiple spec files</a></li><li><a href="#code-coverage-on-ci">Code coverage on CI</a></li><li><a href="#100-code-coverage">100% code coverage</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><p>In my previous blog post <a href="../stub-navigator-api/">&quot;Stub navigator API in end-to-end tests&quot;</a> I have shown a small web application that shows the current battery charge information. Then I have shown several Cypress end-to-end tests and found an edge case that caused the application to crash.</p><p><img src="/blog/images/battery/crash.png" alt="Application crashes trying to attach the event listener"></p><p>The crash was caused by the failure of the program <a href="https://github.com/bahmutov/demo-battery-api/blob/master/src/index.js" target="_blank" rel="noopener">src/index.js</a> to account for the final <code>- else</code> code path when dealing with the browser capabilities.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> battery</span><br><span class="line"><span class="keyword">if</span> (navigator.battery) &#123;</span><br><span class="line">  readBattery(navigator.battery)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getBattery) &#123;</span><br><span class="line">  navigator.getBattery().then(readBattery)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// hmm, the "battery" variable remains undefined</span></span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'.not-support'</span>).removeAttribute(<span class="string">'hidden'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// hmm what happens when "battery" variable stays undefined?</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// show updated status when the battery changes</span></span><br><span class="line">  battery.addEventListener(<span class="string">'chargingchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    readBattery()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  battery.addEventListener(<span class="string">'levelchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    readBattery()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our end-to-end test in spec file <a href="https://github.com/bahmutov/demo-battery-api/blob/master/cypress/integration/no-battery.js" target="_blank" rel="noopener">no-battery.js</a> removes both <code>navigator.battery</code> and <code>navigator.getBattery</code> properties and reaches the final <code>- else</code> path, causing the <code>window.onload</code> to crash - the variable <code>battery</code> remains undefined. If only we could see right away before writing <code>no-battery.js</code> that this code path is a problem!</p><h2><span id="instrumenting-the-code-as-a-pre-processor-step">Instrumenting the code as a pre-processor step</span></h2><p>Cypress users who think collecting application code coverage during end-to-end tests <a href="https://github.com/cypress-io/cypress/issues/346" target="_blank" rel="noopener">proposed several solutions</a>. All solutions instrument the web application code during the build step, then save the collected code coverage data after the tests. Finally, yet another step generates coverage report from the saved data. Let&#39;s see how it can be done for our battery API demo application.</p><p>You can find this code in branch <a href="https://github.com/bahmutov/demo-battery-api/tree/coverage-step" target="_blank" rel="noopener">coverage-step</a> in the <a href="https://github.com/bahmutov/demo-battery-api" target="_blank" rel="noopener">demo-battery-api</a> repository.</p><p>First, we will instrument our application code as a pre-processing step using <a href="https://github.com/istanbuljs/istanbuljs" target="_blank" rel="noopener">IstanbulJS</a> library and its command line wrapper <a href="https://github.com/istanbuljs/nyc" target="_blank" rel="noopener">nyc</a>. I will install the following two libraries</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev nyc@14 istanbul-lib-coverage@2</span><br><span class="line">+ istanbul-lib-coverage@2.0.5</span><br><span class="line">+ nyc@14.1.0</span><br></pre></td></tr></table></figure><p>I have added the command to instrument application code in <code>src</code> folder and place the instrumented code into <code>build/src</code>. The <code>cp</code> command copies the rest of the application files: HTML and styles.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"npm run instrument &amp;&amp; npm run cp"</span>,</span><br><span class="line">    <span class="attr">"preinstrument"</span>: <span class="string">"npm run clean"</span>,</span><br><span class="line">    <span class="attr">"instrument"</span>: <span class="string">"nyc instrument --compact false src build/src"</span>,</span><br><span class="line">    <span class="attr">"cp"</span>: <span class="string">"cp src/*.css build/src &amp;&amp; cp src/*.png build/src &amp;&amp; cp index.html build"</span>,</span><br><span class="line">    <span class="attr">"clean"</span>: <span class="string">"rm -rf build .nyc_output || true"</span>,</span><br><span class="line">    <span class="attr">"report:coverage"</span>: <span class="string">"nyc report --reporter=html"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we execute <code>npm run build</code> we will get the instrumented application in the <code>build</code> folder. For demo purposes I pass <code>--compact false</code> during instrument step to avoid minification. The output code looks like this (this is only a small part of the instrumented code):</p><figure class="highlight js"><figcaption><span>build/src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navigator.battery) &#123;</span><br><span class="line">  cov_w7e0b4vcv.b[<span class="number">11</span>][<span class="number">0</span>]++;</span><br><span class="line">  cov_w7e0b4vcv.s[<span class="number">31</span>]++;</span><br><span class="line">  readBattery(navigator.battery);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  cov_w7e0b4vcv.b[<span class="number">11</span>][<span class="number">1</span>]++;</span><br><span class="line">  cov_w7e0b4vcv.s[<span class="number">32</span>]++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (navigator.getBattery) &#123;</span><br><span class="line">    cov_w7e0b4vcv.b[<span class="number">12</span>][<span class="number">0</span>]++;</span><br><span class="line">    cov_w7e0b4vcv.s[<span class="number">33</span>]++;</span><br><span class="line">    navigator.getBattery().then(readBattery);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cov_w7e0b4vcv.b[<span class="number">12</span>][<span class="number">1</span>]++;</span><br><span class="line">    cov_w7e0b4vcv.s[<span class="number">34</span>]++;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.not-support'</span>).removeAttribute(<span class="string">'hidden'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The instrumentation just inserts counters into the code, incrementing them for each statement (the <code>cov_w7e0b4vcv.s[31]++</code> line) and <code>if - else</code> branch (the <code>cov_w7e0b4vcv.b[11][0]++</code> line). After the code finishes running, we can map the numbers from the object <code>window.cov_w7e0b4vcv</code> back to the original source code to see which lines were covered.</p><h2><span id="during-the-tests">During the tests</span></h2><p>The application code has been instrumented, and we serve the <code>build</code> folder during end-to-end tests, rather than the original <code>src</code> folder. Here is what we need to do in the browser during each test:</p><ul><li>reset the collected coverage before tests begin</li><li>merge the code coverage collected during each test with previously collected data</li><li>generate a coverage report in desired format after all tests have finished</li></ul><p>The above 3 things are controlled by the <a href="https://github.com/bahmutov/demo-battery-api/blob/coverage-step/cypress/support/index.js" target="_blank" rel="noopener">cypress/support/index.js</a> file that gets bundled with each spec file automatically.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line">before(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">'resetCoverage'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// save coverage after each test</span></span><br><span class="line">  <span class="comment">// because the entire "window" object is about</span></span><br><span class="line">  <span class="comment">// to be recycled by Cypress before next test</span></span><br><span class="line">  cy.window().then(<span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (win.__coverage__) &#123;</span><br><span class="line">      cy.task(<span class="string">'combineCoverage'</span>, win.__coverage__)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">after(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">'coverageReport'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Each <a href="https://on.cypress.io/task" target="_blank" rel="noopener">cy.task</a> jumps from the browser context to the backend context in Cypress where we have the full access to the file system. Thus we can save the code coverage JSON file and execute <code>nyc</code> to produce the report. Here is the <a href="https://github.com/bahmutov/demo-battery-api/blob/coverage-step/cypress/plugins/index.js" target="_blank" rel="noopener">cypress/plugins/index.js</a> that keeps the code coverage object and generates the report:</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> istanbul = <span class="built_in">require</span>(<span class="string">'istanbul-lib-coverage'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; join &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; existsSync, mkdirSync, writeFileSync &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> execa = <span class="built_in">require</span>(<span class="string">'execa'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> coverageMap = istanbul.createCoverageMap(&#123;&#125;)</span><br><span class="line">  <span class="keyword">const</span> outputFolder = <span class="string">'.nyc_output'</span></span><br><span class="line">  <span class="keyword">const</span> nycFilename = join(outputFolder, <span class="string">'out.json'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!existsSync(outputFolder)) &#123;</span><br><span class="line">    mkdirSync(outputFolder)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'created folder %s for output coverage'</span>, outputFolder)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on(<span class="string">'task'</span>, &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Clears accumulated code coverage information</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    resetCoverage () &#123;</span><br><span class="line">      coverageMap = istanbul.createCoverageMap(&#123;&#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'reset code coverage'</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Combines coverage information from single test</span></span><br><span class="line"><span class="comment">     * with previously collected coverage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    combineCoverage (coverage) &#123;</span><br><span class="line">      coverageMap.merge(coverage)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Saves coverage information as a JSON file and calls</span></span><br><span class="line"><span class="comment">     * NPM script to generate HTML report</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    coverageReport () &#123;</span><br><span class="line">      writeFileSync(nycFilename, <span class="built_in">JSON</span>.stringify(coverageMap, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'wrote coverage file %s'</span>, nycFilename)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'saving coverage report'</span>)</span><br><span class="line">      <span class="keyword">return</span> execa(<span class="string">'npm'</span>, [<span class="string">'run'</span>, <span class="string">'report:coverage'</span>], &#123; <span class="attr">stdio</span>: <span class="string">'inherit'</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s run the instrumented tests. I will run just a single test that removes <code>navigator.battery</code> property.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">'navigator.getBattery'</span>, () =&gt; &#123;</span><br><span class="line">  it.only(<span class="string">'shows battery status of 75%'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">      onBeforeLoad (win) &#123;</span><br><span class="line">        <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line">        win.navigator.getBattery = cy</span><br><span class="line">          .stub()</span><br><span class="line">          .resolves(&#123;</span><br><span class="line">            level: <span class="number">0.75</span>,</span><br><span class="line">            charging: <span class="literal">false</span>,</span><br><span class="line">            addEventListener: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .as(<span class="string">'getBattery'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.contains(<span class="string">'.battery-percentage'</span>, <span class="string">'75%'</span>)</span><br><span class="line">    cy.get(<span class="string">'@getBattery'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The Cypress Test Runner shows the code coverage related commands.</p><p><img src="/blog/images/battery-coverage/one-test.png" alt="Single test with code coverage"></p><p>Great, let us see the covered lines.</p><h2><span id="the-coverage-report">The coverage report</span></h2><p>The saved code coverage object is just a large JSON file <code>.nyc_output/out.json</code> like this</p><figure class="highlight js"><figcaption><span>JSON coverage object example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"/demo-battery-api/src/index.js"</span>: &#123;</span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/demo-battery-api/src/index.js"</span>,</span><br><span class="line">    <span class="string">"statementMap"</span>: &#123;</span><br><span class="line">      <span class="string">"0"</span>: &#123;</span><br><span class="line">        <span class="string">"start"</span>: &#123;</span><br><span class="line">          <span class="string">"line"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="string">"column"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"end"</span>: &#123;</span><br><span class="line">          <span class="string">"line"</span>: <span class="number">76</span>,</span><br><span class="line">          <span class="string">"column"</span>: <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"s"</span>: &#123;</span><br><span class="line">      <span class="string">"0"</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="string">"1"</span>: <span class="number">14</span>,</span><br><span class="line">      <span class="string">"2"</span>: <span class="number">14</span>,</span><br><span class="line">      <span class="string">"3"</span>: <span class="number">14</span>,</span><br><span class="line">      <span class="string">"4"</span>: <span class="number">14</span>,</span><br><span class="line">      <span class="string">"5"</span>: <span class="number">14</span>,</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>The object contains location of all statements, functions and branches in the original code, and the counters for how many times each item has been executed (for example the <code>s</code> counters are for statements). The human coverage report is generated from the <code>.nyc_output/out.json</code> file using npm script <code>&quot;report:coverage&quot;: &quot;nyc report --reporter=html&quot;</code> is placed in <code>coverage</code> folder. It is a folder with a static site.</p><figure class="highlight plain"><figcaption><span>coverage folder</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">coverage/</span><br><span class="line">  base.css</span><br><span class="line">  block-navigation.js</span><br><span class="line">  index.html</span><br><span class="line">  index.js.html</span><br><span class="line">  prettify.css</span><br><span class="line">  prettify.js</span><br><span class="line">  sort-arrow-sprite.png</span><br><span class="line">  sorter.js</span><br></pre></td></tr></table></figure><p>We can open the <code>coverage/index.html</code> file and see that our test really has hit just a single <code>if - else</code> line. Lines in red show the code NOT covered by the tests.</p><p><img src="/blog/images/battery-coverage/coverage-report.png" alt="The getBattery path hit by the test"></p><p>We can enable all tests and see more lines covered - and the only uncovered line is the third code path <code>- else</code> when there is neither <code>navigator.battery</code> nor <code>navigator.getBattery</code> methods.</p><p><img src="/blog/images/battery-coverage/missed-line.png" alt="Missed line"></p><p><strong>Tip:</strong> I prefer having a separate npm script to generate the code coverage report, because we may want to generate reports in different formats. For example we can generate a summary report and show it in the terminal: <code>&quot;report:coverage&quot;: &quot;nyc report --compact&quot;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm run report:coverage</span><br><span class="line">----------|----------|----------|----------|----------|-------------------|</span><br><span class="line">File      |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |</span><br><span class="line">----------|----------|----------|----------|----------|-------------------|</span><br><span class="line">All files |       95 |    92.31 |      100 |       95 |                   |</span><br><span class="line"> index.js |       95 |    92.31 |      100 |       95 |             31,64 |</span><br><span class="line">----------|----------|----------|----------|----------|-------------------|</span><br></pre></td></tr></table></figure><p>We can even fail the build if the code coverage (lines, statements, branches or per file) is below given threshold:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npx nyc report --check-coverage --statements 100</span><br><span class="line">----------|----------|----------|----------|----------|-------------------|</span><br><span class="line">File      |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |</span><br><span class="line">----------|----------|----------|----------|----------|-------------------|</span><br><span class="line">All files |     97.5 |    96.15 |      100 |     97.5 |                   |</span><br><span class="line"> index.js |     97.5 |    96.15 |      100 |     97.5 |                64 |</span><br><span class="line">----------|----------|----------|----------|----------|-------------------|</span><br><span class="line">ERROR: Coverage for statements (97.5%) does not meet global threshold (100%)</span><br><span class="line">$ echo $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>Better write more tests.</p><h2><span id="code-coverage-from-multiple-spec-files">Code coverage from multiple spec files</span></h2><p>If we have more than a single test (spec) file, we need to be careful when we reset the coverage information. There are two different cases, depending on how the test runner is running:</p><ul><li>if the test runner is in the interactive mode using <code>cypress open</code> then we can reset the coverage before the tests. This works for a single spec file, or when running all specs using &quot;Run all specs&quot; button.</li><li>if the test runner is in the headless mode using <code>cypress run</code>, then each spec is processed separately. It is almost like executing a series of separate commands: <code>cypress run --spec test1.js</code>, <code>cypress run --spec test2.js</code>, etc. We cannot reset the coverage in that case - we risk destroying the information collected from the previous spec file. We need to reset the coverage <em>before running Cypress</em>. Luckily this is simple to do, here I am using npm <code>precy:run</code> script that automatically runs before <code>cy:run</code> script.</li></ul><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"cy:open"</span>: <span class="string">"cypress open"</span>,</span><br><span class="line">    <span class="attr">"cy:run"</span>: <span class="string">"cypress run"</span>,</span><br><span class="line">    <span class="attr">"precy:run"</span>: <span class="string">"rm -rf .nyc_output || true"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From the tests, we can pass <code>isInteractive</code> flag to the task, and only reset the coverage file when <code>isInteractive</code> is <code>true</code>.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">before(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// we need to reset the coverage when running</span></span><br><span class="line">  <span class="comment">// in the interactive mode, otherwise the counters will</span></span><br><span class="line">  <span class="comment">// keep increasing every time we rerun the tests</span></span><br><span class="line">  cy.task(<span class="string">'resetCoverage'</span>, &#123; <span class="attr">isInteractive</span>: Cypress.config(<span class="string">'isInteractive'</span>) &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">'task'</span>, &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Clears accumulated code coverage information.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Interactive mode with "cypress open"</span></span><br><span class="line"><span class="comment">     *    - running a single spec or "Run all specs" needs to reset coverage</span></span><br><span class="line"><span class="comment">     * Headless mode with "cypress run"</span></span><br><span class="line"><span class="comment">     *    - runs EACH spec separately, so we cannot reset the coverage</span></span><br><span class="line"><span class="comment">     *      or we will lose the coverage from previous specs.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    resetCoverage (&#123; isInteractive &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isInteractive) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'reset code coverage in interactive mode'</span>)</span><br><span class="line">        <span class="keyword">const</span> coverageMap = istanbul.createCoverageMap(&#123;&#125;)</span><br><span class="line">        writeFileSync(nycFilename, <span class="built_in">JSON</span>.stringify(coverageMap, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Else:</span></span><br><span class="line"><span class="comment">          in headless mode, assume the coverage file was deleted</span></span><br><span class="line"><span class="comment">          before the `cypress run` command was called</span></span><br><span class="line"><span class="comment">          example: rm -rf .nyc_output || true</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Perfect.</p><h2><span id="code-coverage-on-ci">Code coverage on CI</span></h2><p>The generated HTML code coverage report can be stored on continuous integration server as a static artifact. I am running these builds on CircleCI at <a href="https://circleci.com/gh/bahmutov/demo-battery-api/tree/coverage-step" target="_blank" rel="noopener">https://circleci.com/gh/bahmutov/demo-battery-api/tree/coverage-step</a> using <a href="https://github.com/cypress-io/circleci-orb" target="_blank" rel="noopener">Cypress Circle Orb</a>. After the test run, I store the <code>coverage</code> folder as a test artifact. Here is the entire CI config file <a href="https://github.com/bahmutov/demo-battery-api/blob/coverage-step/circle.yml" target="_blank" rel="noopener">circle.yml</a></p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># see https://github.com/cypress-io/circleci-orb</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line"><span class="attr">  cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cypress/run:</span></span><br><span class="line">          <span class="comment"># we need to start the web application</span></span><br><span class="line"><span class="attr">          start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="comment"># there are no jobs to follow this one</span></span><br><span class="line">          <span class="comment"># so no need to save the workspace files (saves time)</span></span><br><span class="line"><span class="attr">          no-workspace:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># store the created coverage report folder</span></span><br><span class="line">          <span class="comment"># you can click on it in the CircleCI UI</span></span><br><span class="line">          <span class="comment"># to see live static HTML site</span></span><br><span class="line"><span class="attr">          post-steps:</span></span><br><span class="line"><span class="attr">            - store_artifacts:</span></span><br><span class="line"><span class="attr">                path:</span> <span class="string">coverage</span></span><br></pre></td></tr></table></figure><p>Note that on CI we do not need to remove the code coverage folder <code>.nyc_output</code> before starting <code>cypress run</code> - because CI server automatically gets a fresh workspace folder.</p><p>You can see the artifact with each build. For example you can browse to the artifacts in the build <a href="https://circleci.com/gh/bahmutov/demo-battery-api/28#artifacts/containers/0" target="_blank" rel="noopener">#28</a></p><p><img src="/blog/images/battery-coverage/artifacts.png" alt="Code coverage folder as a build artifact"></p><p>Click on <code>index.html</code> to see the JavaScript coverage report</p><p><img src="/blog/images/battery-coverage/report.png" alt="Code coverage report"></p><p>We have only a single JavaScript application file, open the report for <code>index.js</code> by clicking on it.</p><p><img src="/blog/images/battery-coverage/index-js-report.png" alt="Code coverage for index.js file"></p><h2><span id="100-code-coverage">100% code coverage</span></h2><p>Hitting a 100% code coverage is a <a href="https://slides.com/bahmutov/test-coverage-update" target="_blank" rel="noopener">hard and thankless task</a>. Code coverage is not the goal in itself, rather the gap in the code coverage helps me identify a missing test and an overlooked edge condition. In our case, the uncovered logical branch shows that we did not test what happens when the browser <code>navigator</code> object does not have the battery API. Let&#39;s fix the issue and enable the previously crashing test.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// add a guard condition to prevent crashing</span></span><br><span class="line">  <span class="keyword">if</span> (battery) &#123;</span><br><span class="line">    battery.addEventListener(<span class="string">'chargingchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      readBattery()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    battery.addEventListener(<span class="string">'levelchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      readBattery()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You need to rerun the instrumentation step again (<code>npm run build</code> in my case). Enable the previously crashing test - and it is passing now!</p><p><img src="/blog/images/battery-coverage/fixed.png" alt="No battery API support - no problem"></p><p>Run all tests again - interactively using &quot;Run all tests&quot; button, or using <code>npm run cy:run</code> and get the 100% code covered.</p><p><img src="/blog/images/battery-coverage/100-covered.png" alt="100% code covered"></p><h2><span id="see-also">See also</span></h2><ul><li>The example source code is in the branch <a href="https://github.com/bahmutov/demo-battery-api/tree/coverage-step" target="_blank" rel="noopener">coverage-step</a> in the <a href="https://github.com/bahmutov/demo-battery-api" target="_blank" rel="noopener">demo-battery-api</a> repository</li><li><a href="../stub-navigator-api/">&quot;Stub navigator API in end-to-end tests&quot;</a> is the previous blog post explaining the end-to-end tests for this web application</li><li>Code coverage Cypress repo <a href="https://github.com/cypress-io/cypress/issues/346" target="_blank" rel="noopener">issue #346</a></li><li><a href="https://on.cypress.io/code-coverage" target="_blank" rel="noopener">Cypress.io code coverage guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#instrumenting-the-code-as-a-pre-processor-step&quot;&gt;Instrumenting the code as a pre-processor step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Stub navigator API in end-to-end tests</title>
    <link href="https://glebbahmutov.com/blog/stub-navigator-api/"/>
    <id>https://glebbahmutov.com/blog/stub-navigator-api/</id>
    <published>2019-04-29T04:00:00.000Z</published>
    <updated>2019-06-16T13:39:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#battery-status-web-app">Battery status web app</a></li><li><a href="#simple-test">Simple test</a></li><li><a href="#mocking-navigatorbattery-property">Mocking <code>navigator.battery</code> property</a></li><li><a href="#mocking-navigatorgetbattery-method">Mocking <code>navigator.getBattery</code> method</a></li><li><a href="#battery-status-updates">Battery status updates</a></li><li><a href="#no-battery-api">No battery API</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="battery-status-web-app">Battery status web app</span></h2><p>In source repo <a href="https://github.com/bahmutov/demo-battery-api" target="_blank" rel="noopener">bahmutov/demo-battery-api</a> there is a web application forked from <a href="https://github.com/pazguille/demo-battery-api" target="_blank" rel="noopener">pazguille/demo-battery-api</a> that uses <code>navigator</code> browser API to show the current battery status. You can try the demo of the application at <a href="http://pazguille.github.io/demo-battery-api/" target="_blank" rel="noopener">http://pazguille.github.io/demo-battery-api/</a>. It should look something like this:</p><p><img src="/blog/images/battery/battery.png" alt="Battery status web page"></p><p>You can see the application JavaScript code in <a href="https://github.com/bahmutov/demo-battery-api/blob/master/src/index.js" target="_blank" rel="noopener">src/index.js</a>. The main piece of code tries to grab battery status using either <code>navigator.battery</code> or <code>navigator.getBattery</code> properties.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navigator.battery) &#123;</span><br><span class="line">  readBattery(navigator.battery)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getBattery) &#123;</span><br><span class="line">  navigator.getBattery().then(readBattery)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'.not-support'</span>).removeAttribute(<span class="string">'hidden'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// show updated status when the battery changes</span></span><br><span class="line">  battery.addEventListener(<span class="string">'chargingchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    readBattery()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  battery.addEventListener(<span class="string">'levelchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    readBattery()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s test this code a little bit to make sure it works as expected.</p><h2><span id="simple-test">Simple test</span></h2><p>Since we do not know anything about the computer running the end-to-end test, our first <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a> spec <a href="https://github.com/bahmutov/demo-battery-api/blob/master/cypress/integration/simple.js" target="_blank" rel="noopener">simple.js</a> is pretty bare.</p><figure class="highlight js"><figcaption><span>cypress/integration/simple.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">'shows battery status'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  <span class="comment">// shows the actual battery percentage</span></span><br><span class="line">  <span class="comment">// we can only assert that the percentage is visible,</span></span><br><span class="line">  <span class="comment">// but not its value</span></span><br><span class="line">  cy.get(<span class="string">'.battery-percentage'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can only check if the battery percentage element is visible - but not what is shows, because we don&#39;t know what value to expect there.</p><p><img src="/blog/images/battery/simple.png" alt="The simple test"></p><h2><span id="mocking-navigatorbattery-property">Mocking <code>navigator.battery</code> property</span></h2><p>It would be much better to make the test deterministic. For example, we could mock the <code>navigator.battery</code> property the application code checks first. The test can now check each displayed value to be properly rendered, as <a href="https://github.com/bahmutov/demo-battery-api/blob/master/cypress/integration/battery.js" target="_blank" rel="noopener">battery.js</a> spec demonstrates.</p><figure class="highlight js"><figcaption><span>cypress/integration/battery.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line">context(<span class="string">'navigator.battery'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'shows battery status of 50%'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">      onBeforeLoad (win) &#123;</span><br><span class="line">        <span class="comment">// mock "navigator.battery" property</span></span><br><span class="line">        <span class="comment">// returning mock charge object</span></span><br><span class="line">        win.navigator.battery = &#123;</span><br><span class="line">          level: <span class="number">0.5</span>,</span><br><span class="line">          charging: <span class="literal">false</span>,</span><br><span class="line">          chargingTime: <span class="literal">Infinity</span>,</span><br><span class="line">          dischargingTime: <span class="number">3600</span>, <span class="comment">// seconds</span></span><br><span class="line">          addEventListener: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// now we can assert actual text - we are charged at 50%</span></span><br><span class="line">    cy.get(<span class="string">'.battery-percentage'</span>)</span><br><span class="line">      .should(<span class="string">'be.visible'</span>)</span><br><span class="line">      .and(<span class="string">'have.text'</span>, <span class="string">'50%'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// not charging means running on battery</span></span><br><span class="line">    cy.contains(<span class="string">'.battery-status'</span>, <span class="string">'Battery'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">    <span class="comment">// and has enough juice for 1 hour</span></span><br><span class="line">    cy.contains(<span class="string">'.battery-remaining'</span>, <span class="string">'1:00'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/battery/mock-battery.png" alt="Mocked property allows us to check more DOM elements"></p><p>This end-to-end test covers a larger surface of our application&#39;s user interface.</p><h2><span id="mocking-navigatorgetbattery-method">Mocking <code>navigator.getBattery</code> method</span></h2><p>The previous test has confirmed that <code>navigator.battery</code> property is read by the application code and the values are rendered correctly. What about the case when the <code>navigator.battery</code> is unavailable and the application falls back to <code>navigator.getBattery</code> method to read the current energy status? Let&#39;s write a test in <a href="https://github.com/bahmutov/demo-battery-api/blob/master/cypress/integration/get-battery.js" target="_blank" rel="noopener">get-battery.js</a> to confirm that it works too.</p><figure class="highlight js"><figcaption><span>cypress/integration/get-battery.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line">context(<span class="string">'navigator.getBattery'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> mockBatteryInfo = &#123;</span><br><span class="line">    level: <span class="number">0.75</span>,</span><br><span class="line">    charging: <span class="literal">true</span>,</span><br><span class="line">    chargingTime: <span class="number">1800</span>, <span class="comment">// seconds</span></span><br><span class="line">    dischargingTime: <span class="literal">Infinity</span>,</span><br><span class="line">    addEventListener: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'shows battery status of 75%'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">      onBeforeLoad (win) &#123;</span><br><span class="line">        <span class="comment">// application tries navigator.battery first</span></span><br><span class="line">        <span class="comment">// so we delete this method</span></span><br><span class="line">        <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line">        <span class="comment">// then the app tries navigator.getBattery</span></span><br><span class="line">        win.navigator.getBattery = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(mockBatteryInfo)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// check the display</span></span><br><span class="line">    cy.contains(<span class="string">'.battery-percentage'</span>, <span class="string">'75%'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">    cy.contains(<span class="string">'.battery-status'</span>, <span class="string">'Adapter'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">    cy.contains(<span class="string">'.battery-fully'</span>, <span class="string">'0:30'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The DOM shows the mocked property values correctly.</p><p><img src="/blog/images/battery/get-battery1.png" alt="`getBattery` resolves and DOM renders formatted values correctly"></p><p>Any time we mock an existing application method, I prefer to create a <a href="https://on.cypress.io/stub" target="_blank" rel="noopener">Cypress method stub</a>. The stub allows us to confirm that it was actually called (and with the right arguments if required). The second test in spec file <a href="https://github.com/bahmutov/demo-battery-api/blob/master/cypress/integration/get-battery.js" target="_blank" rel="noopener">get-battery.js</a> confirms the DOM elements and that the <code>navigator.getBattery</code> was actually invoked.</p><figure class="highlight js"><figcaption><span>cypress/integration/get-battery.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'calls navigator.getBattery'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">    onBeforeLoad (win) &#123;</span><br><span class="line">      <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line">      <span class="comment">// we can create Cypress stub and check</span></span><br><span class="line">      <span class="comment">// that is is really being called by the application code</span></span><br><span class="line">      win.navigator.getBattery = cy</span><br><span class="line">        .stub()</span><br><span class="line">        .resolves(mockBatteryInfo)</span><br><span class="line">        .as(<span class="string">'getBattery'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">'.battery-percentage'</span>, <span class="string">'75%'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">  <span class="comment">// ensure our stub has been called by the application</span></span><br><span class="line">  cy.get(<span class="string">'@getBattery'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/battery/get-battery2.png" alt="Stubs are shown in their own section of the Command Log"></p><h2><span id="battery-status-updates">Battery status updates</span></h2><p>In the mocks above, we returned a no-op <code>addEventListener</code> method with the battery object. Let&#39;s return something meaningful and verify our application updates itself when a new battery event is emitted. The application attaches twice to the returned battery object in order to listen to the following events:</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  battery.addEventListener(<span class="string">'chargingchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    readBattery()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  battery.addEventListener(<span class="string">'levelchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    readBattery()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test is a little bit longer now - I have included a lot of comments and additional steps to make the steps clear. In essence, we set the initial battery status, collect the functions passed by the application, verify them, then call them and verify that the DOM shows the changed values. The spec file <a href="https://github.com/bahmutov/demo-battery-api/blob/master/cypress/integration/updates.js" target="_blank" rel="noopener">updates.js</a> contains this test.</p><figure class="highlight js"><figcaption><span>cypress/integration/updates.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line">context(<span class="string">'navigator.getBattery updates'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'updates battery display'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> appListener</span><br><span class="line">    <span class="keyword">const</span> updateBattery = cy</span><br><span class="line">      .stub()</span><br><span class="line">      .callsFake(<span class="function">(<span class="params">e, fn</span>) =&gt;</span> (appListener = fn))</span><br><span class="line">      .as(<span class="string">'update'</span>)</span><br><span class="line">    <span class="keyword">const</span> mockBatteryInfo = &#123;</span><br><span class="line">      level: <span class="number">0.3</span>,</span><br><span class="line">      charging: <span class="literal">true</span>,</span><br><span class="line">      chargingTime: <span class="number">1800</span>, <span class="comment">// seconds</span></span><br><span class="line">      dischargingTime: <span class="literal">Infinity</span>,</span><br><span class="line">      addEventListener: updateBattery</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">      onBeforeLoad (win) &#123;</span><br><span class="line">        <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line">        win.navigator.getBattery = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(mockBatteryInfo)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// initial display</span></span><br><span class="line">    cy.contains(<span class="string">'.battery-percentage'</span>, <span class="string">'30%'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">    cy.contains(<span class="string">'.battery-status'</span>, <span class="string">'Adapter'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// application started listening for battery updates</span></span><br><span class="line">    <span class="comment">// by attaching to two events</span></span><br><span class="line">    cy.get(<span class="string">'@update'</span>)</span><br><span class="line">      .should(<span class="string">'have.been.calledTwice'</span>)</span><br><span class="line">      <span class="comment">// and check the first arguments to the calls</span></span><br><span class="line">      .and(<span class="string">'have.been.calledWith'</span>, <span class="string">'chargingchange'</span>)</span><br><span class="line">      .and(<span class="string">'have.been.calledWith'</span>, <span class="string">'levelchange'</span>)</span><br><span class="line">      <span class="comment">// send a changed battery status event</span></span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// verify the listener was set</span></span><br><span class="line">        expect(appListener).to.be.a(<span class="string">'function'</span>)</span><br><span class="line">        mockBatteryInfo.level = <span class="number">0.275</span></span><br><span class="line">        <span class="comment">// log message for clarity</span></span><br><span class="line">        cy.log(<span class="string">'Set battery at **27.5%**'</span>)</span><br><span class="line">        appListener()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// because all Cypress commands are automatically chained</span></span><br><span class="line">    <span class="comment">// this "cy.contains" only runs AFTER</span></span><br><span class="line">    <span class="comment">// previous ".then" completes</span></span><br><span class="line">    cy.contains(<span class="string">'.battery-percentage'</span>, <span class="string">'27.5%'</span>)</span><br><span class="line">      .should(<span class="string">'be.visible'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// let's change a different propety</span></span><br><span class="line">        mockBatteryInfo.charging = <span class="literal">false</span></span><br><span class="line">        appListener()</span><br><span class="line">        <span class="comment">// log message for clarity</span></span><br><span class="line">        cy.log(<span class="string">'Pulling the üîå'</span>)</span><br><span class="line">        cy.contains(<span class="string">'.battery-status'</span>, <span class="string">'Battery'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/battery/updates.png" alt="Application listens to the battery events"></p><h2><span id="no-battery-api">No battery API</span></h2><p>Great, our application can use either <code>navigator.battery</code> property or <code>navigator.getBattery</code> method to show the initial battery charge status and listen for updates. But what if the browser does not have this API at all? The browser support for this API is <a href="https://caniuse.com/#feat=battery-status" target="_blank" rel="noopener">really limited to Chrome only</a>.</p><p><img src="/blog/images/battery/battery-status-api.png" alt="Battery status API support"></p><p>Let us delete both <code>navigator.battery</code> and <code>navigator.getBattery</code> properties before running out test in <a href="https://github.com/bahmutov/demo-battery-api/blob/master/cypress/integration/no-battery.js" target="_blank" rel="noopener">no-battery.js</a> spec. The test below shows that <em>deleting <code>navigator.getBattery</code> does not work</em>. The method remains there!</p><p><strong>Update:</strong> you can directly delete the battery method from the <code>navigator</code> object - you just need to delete it from the prototype object! See <a href="../cypress-tips-and-tricks/#disable-serviceworker">&quot;Cypress Tips &amp; Tricks&quot; Disable ServiceWorker section</a>.</p><figure class="highlight js"><figcaption><span>cypress/integration/no-battery.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line">context(<span class="string">'no battery'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// this test fails on purpose</span></span><br><span class="line">  it(<span class="string">'just deleting properties does not work'</span>, () =&gt; &#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">      onBeforeLoad (win) &#123;</span><br><span class="line">        <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line"></span><br><span class="line">        <span class="comment">// how to delete navigator.getBattery method?</span></span><br><span class="line">        <span class="comment">// deleting does not work</span></span><br><span class="line">        <span class="keyword">delete</span> win.navigator.getBattery</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// navigator.battery was deleted successfully</span></span><br><span class="line">    cy.window()</span><br><span class="line">      .its(<span class="string">'navigator.battery'</span>)</span><br><span class="line">      .should(<span class="string">'be.undefined'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// but navigator.getBattery happily remains there</span></span><br><span class="line">    cy.window()</span><br><span class="line">      .its(<span class="string">'navigator.getBattery'</span>)</span><br><span class="line">      .should(<span class="string">'be.undefined'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/battery/deleting.png" alt="Deleted property `navigator.getBattery` happily remains there"></p><p>Here is a trick - instead of running <code>delete navigator.getBattery</code> overwrite it using <code>Object.defineProperty</code> like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">  onBeforeLoad (win) &#123;</span><br><span class="line">    <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line"></span><br><span class="line">    <span class="comment">// how to delete navigator.getBattery method?</span></span><br><span class="line">    <span class="comment">// deleting does not work</span></span><br><span class="line">    <span class="comment">// but we can just overwrite it with undefined!</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(win.navigator, <span class="string">'getBattery'</span>, &#123;</span><br><span class="line">      value: <span class="literal">undefined</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>And it will stay undefined - and the test will fail because the application crashes üí•</p><figure class="highlight js"><figcaption><span>cypress/integration/no-battery.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'should not crash'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// but the application does crash</span></span><br><span class="line">  <span class="comment">// if both navigator.battery and navigator.getBattery</span></span><br><span class="line">  <span class="comment">// methods are missing</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Uncaught TypeError: Cannot read property 'addEventListener' of undefined</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// window.onload = function () &#123;</span></span><br><span class="line">  <span class="comment">//   battery.addEventListener('chargingchange', function () &#123;</span></span><br><span class="line">  <span class="comment">//     readBattery()</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br><span class="line">  <span class="comment">//   ...</span></span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">    onBeforeLoad (win) &#123;</span><br><span class="line">      <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line"></span><br><span class="line">      <span class="comment">// how to delete navigator.getBattery method?</span></span><br><span class="line">      <span class="comment">// deleting does not work</span></span><br><span class="line">      <span class="comment">// delete win.navigator.getBattery</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// but we can just overwrite it with undefined!</span></span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(win.navigator, <span class="string">'getBattery'</span>, &#123;</span><br><span class="line">        value: <span class="literal">undefined</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The source of the crash is easy to find - the code calls <code>battery.addEventListener</code> without checking first if the <code>battery</code> is defined.</p><p><img src="/blog/images/battery/crash.png" alt="Application crashes trying to attach the event listener"></p><p>How do we prevent crashes like this from happening? How can we better target our tests to uncover all the edge cases? Do we need to wait for Cypress <a href="https://github.com/cypress-io/cypress/issues/3207" target="_blank" rel="noopener">cross-browser support</a> and run the same test in Firefox to discover the bug? Or do we randomly delete browser API methods hoping to emulate a real-world scenario?</p><p>I will show how we can collect code coverage during end-to-end tests and &quot;discover&quot; the missing code paths in our tests. But it will be a different blog post, so stay tuned by following <a href="https://twitter.com/bahmutov" target="_blank" rel="noopener">@bahmutov</a> on Twitter, or subscribe to this blog&#39;s RSS feed.</p><h2><span id="see-also">See also</span></h2><ul><li>Cypress stubs and spies are <a href="https://sinonjs.org" target="_blank" rel="noopener">sinon.js</a> stubs, so it makes sense to get familiar with this wonderful library.</li><li>Cypress guide to <a href="https://on.cypress.io/stubs-spies-and-clocks" target="_blank" rel="noopener">spies, stubs and clocks</a> is really good.</li><li><strong>Update:</strong> read the new blog post <a href="../code-coverage-for-e2e-tests/">&quot;Code Coverage for End-to-end Tests&quot;</a> that explains how to collect code coverage during end-to-end tests and fix the missed edge case.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#battery-status-web-app&quot;&gt;Battery status web app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#simple-test&quot;&gt;Simple test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Testing an online chainsaw store using Cypress.io</title>
    <link href="https://glebbahmutov.com/blog/chainsaws/"/>
    <id>https://glebbahmutov.com/blog/chainsaws/</id>
    <published>2019-04-25T04:00:00.000Z</published>
    <updated>2019-04-29T14:02:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Source code</strong> for this blog post is in <a href="https://github.com/bahmutov/testing-chainsawsdirect" target="_blank" rel="noopener">https://github.com/bahmutov/testing-chainsawsdirect</a> repo.</p><p>I don&#39;t know what kind of chainsaw <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> is (maybe it is an open source chainsaw ?!) but I do know that Cypress can quickly test an online chainsaw store like <a href="https://www.chainsawsdirect.com" target="_blank" rel="noopener">www.chainsawsdirect.com</a>.</p><h2><span id="first-test">First test</span></h2><p>I have installed Cypress with <code>npm install -D cypress</code> and created <code>cypress.json</code> file with base url pointing at the domain I want to test: <a href="https://www.chainsawsdirect.com" target="_blank" rel="noopener">www.chainsawsdirect.com</a></p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"https://www.chainsawsdirect.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>My first test is simple - it selects a type of the product and checks if the page shows at least a few matching ones.</p><figure class="highlight js"><figcaption><span>cypress/integration/first.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'has gas chainsaws'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  cy.get(<span class="string">'#style1'</span>).select(<span class="string">'Chain Saws - Gas'</span>)</span><br><span class="line">  <span class="comment">// make sure there are at least double digit number of products</span></span><br><span class="line">  cy.contains(<span class="string">'.plcount'</span>, /^\d\d Products$/).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs and passes</p><p><img src="/blog/images/chainsaws/first.gif" alt="Has gas chainsaws test"></p><p>If I hover over any command in the Command Log (left side of the GUI), it will show the view of the application at that moment. For example, I can hover over &quot;CONTAINS ...&quot; command and see that the right text on the page is highlighted - our test is asserting the right thing.</p><p><img src="/blog/images/chainsaws/first-products.png" alt="Highlights number of gas chainsaws found"></p><p><strong>Note:</strong> the red XHR calls in the Command Log are the calls to the ad tracking service I <a href="https://on.cypress.io/configuration#blacklistHosts" target="_blank" rel="noopener">have blacklisted</a> from <code>cypress.json</code> file.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"https://www.chainsawsdirect.com"</span>,</span><br><span class="line">  <span class="attr">"blacklistHosts"</span>: <span class="string">"wrs.adrsp.net"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="test-organization">Test organization</span></h2><p>Following the <a href="https://on.cypress.io/writing-and-organizing-tests" target="_blank" rel="noopener">Writing and organizing test</a> guide, I can refactor my spec file to avoid code duplication. For example, we can visit the page before each test:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'has gas chainsaws'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'#style1'</span>).select(<span class="string">'Chain Saws - Gas'</span>)</span><br><span class="line">  cy.contains(<span class="string">'.plcount'</span>, /^\d\d Products$/).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="prices-test">Prices test</span></h2><p>Hmm, $500 for a gas chainsaw is kind of steep. I would like to buy a reasonably priced saw, so let&#39;s test that we can see all gas chainsaws sorted by price from low to high. Cypress <a href="https://on.cypress.io/selector-playground" target="_blank" rel="noopener">Selector Playground</a> helps me find the selector command for the price widget:</p><p><img src="/blog/images/chainsaws/sort-selector.png" alt="Selector Playground suggests the command to use"></p><p>We can sort found products and get all DOM elements with the prices.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">'Chainsaw Direct'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'has reasonably priced gas chainsaws'</span>, () =&gt; &#123;</span><br><span class="line">    cy.get(<span class="string">'#style1'</span>).select(<span class="string">'Chain Saws - Gas'</span>)</span><br><span class="line">    cy.contains(<span class="string">'.plcount'</span>, /^\d\d Products$/).should(<span class="string">'be.visible'</span>)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'#sort_value'</span>).select(<span class="string">'Price: Low to High'</span>)</span><br><span class="line">    cy.get(<span class="string">'.regPrice'</span>).should(<span class="string">'have.length.gt'</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/chainsaws/low-to-high.gif" alt="Prices low to high"></p><p>Great, there are 22 products currently in the store, and they seem arranged from low price to higher prices. But are we sure that the products are really sorted? The low price $154.99 is nice, but I would like to</p><ul><li>grab all elements with prices like <code>$154.99</code>, <code>$159.99</code>, ...</li><li>convert to numbers</li><li>assert that the list of numbers follows the increasing order</li></ul><p>The <a href="https://on.cypress.io/assertions" target="_blank" rel="noopener">built-in Chai assertions</a> that come with Cypress do not include &quot;array should be sorted&quot; assertion, but a quick NPM search finds a package that seems to do what I need.</p><p><img src="/blog/images/chainsaws/npm-search.png" alt="Find chai-sorted"></p><p>Extending Cypress Chai object with additional assertions is show in <a href="https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/extending-cypress__chai-assertions" target="_blank" rel="noopener">&quot;Adding Chai Assertions&quot; recipe</a> and is simple. Just add these two lines to <code>cypress/support/index.js</code> file.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chaiSorted <span class="keyword">from</span> <span class="string">'chai-sorted'</span></span><br><span class="line">chai.use(chaiSorted)</span><br></pre></td></tr></table></figure><p>Update the test to parse elements&#39; text content and add assertion</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">'Chainsaw Direct'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'has reasonably priced gas chainsaws'</span>, () =&gt; &#123;</span><br><span class="line">    cy.get(<span class="string">'#style1'</span>).select(<span class="string">'Chain Saws - Gas'</span>)</span><br><span class="line">    cy.contains(<span class="string">'.plcount'</span>, /^\d\d Products$/).should(<span class="string">'be.visible'</span>)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'#sort_value'</span>).select(<span class="string">'Price: Low to High'</span>)</span><br><span class="line">    cy.get(<span class="string">'.regPrice'</span>)</span><br><span class="line">      .should(<span class="string">'have.length.gt'</span>, <span class="number">0</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">$prices</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// remove "$" from prices and convert to strings</span></span><br><span class="line">        <span class="keyword">const</span> prices = $prices</span><br><span class="line">          .toArray()</span><br><span class="line">          .map(<span class="function"><span class="params">$el</span> =&gt;</span> <span class="built_in">parseFloat</span>($el.innerText.substr(<span class="number">1</span>)))</span><br><span class="line">        <span class="comment">// assertion comes from chai-sorted</span></span><br><span class="line">        expect(prices).to.be.sorted()</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful, there are 22 prices, and they are displayed sorted in ascending order.</p><p><img src="/blog/images/chainsaws/sorted.png" alt="Prices are in ascending order"></p><h2><span id="search-test">Search test</span></h2><p>I can see that there is a search box that shows different results as I type.</p><p><img src="/blog/images/chainsaws/search-xhr.png" alt="Search XHR calls"></p><p>I can inspect each XHR call to find out how the API returns the search results. Let&#39;s get it to show &quot;Cypress Test Runner&quot; as the one and only search result üòÅ</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'finds Cypress among the saws'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// stub API calls to the search endpoint</span></span><br><span class="line">  cy.server()</span><br><span class="line">  cy.route(<span class="string">'/sayt.php?q=Cypr*'</span>, &#123;</span><br><span class="line">    suggestions: [</span><br><span class="line">      &#123;</span><br><span class="line">        value: <span class="string">'Cypress Test Runner'</span>,</span><br><span class="line">        data: <span class="number">1</span>,</span><br><span class="line">        exactMatch: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// by stubbing search XHRs we can return a single</span></span><br><span class="line">  <span class="comment">// result when typing "Cypress" into the search box</span></span><br><span class="line">  cy.get(<span class="string">'#searchText'</span>).type(<span class="string">'Cypress'</span>, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;)</span><br><span class="line">  cy.get(<span class="string">'.autocomplete-suggestion'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">1</span>)</span><br><span class="line">    .first()</span><br><span class="line">    .should(<span class="string">'have.text'</span>, <span class="string">'Cypress Test Runner'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs and the test results are showing the synthetic test result we have returned from the stubbed XHR.</p><p><img src="/blog/images/chainsaws/found.gif" alt="Prices are in ascending order"></p><p>All good.</p><h2><span id="conclusions">Conclusions</span></h2><p>Cypress test runner is a quick and enjoyable way to write and run end-to-end tests for any website. Well, for almost any website - we have difficulties with websites that <a href="https://github.com/cypress-io/cypress/issues/685" target="_blank" rel="noopener">use iframes</a>, <a href="https://github.com/cypress-io/cypress/issues/144" target="_blank" rel="noopener">shadow DOM</a> or <a href="https://github.com/cypress-io/cypress/issues/944" target="_blank" rel="noopener">multiple domains</a>. But aside from that - if you need to cut some nice looking tests, try <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Source code&lt;/strong&gt; for this blog post is in &lt;a href=&quot;https://github.com/bahmutov/testing-chainsawsdirect&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>NPM Install with just GitHub</title>
    <link href="https://glebbahmutov.com/blog/npm-install-with-just-github/"/>
    <id>https://glebbahmutov.com/blog/npm-install-with-just-github/</id>
    <published>2019-04-02T04:00:00.000Z</published>
    <updated>2019-04-02T03:21:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have discussed how to <a href="../use-github-instead-of-npm/">Use GitHub instead of NPM</a> to share and install NPM modules. But that blog post had a huge shortcoming - it did not deal with built or transpiled artifacts. More and more NPM packages are now transpiled from TypeScript for example, and thus usually have two folders: <code>lib</code> and <code>dist</code>. The GitHub repository only has the <code>lib</code> folder with the original source. The built <code>dist</code> folder is the one published to the NPM registry.</p><p>If we just install an NPM package from GitHub we will not get the <code>dist</code> folder - it is not on GitHub. We could try building it ourselves ... but that is tricky, since the project might be a pain to build.</p><p>Today I had just this problem - I needed to quickly patch <a href="https://github.com/percy/percy-cypress" target="_blank" rel="noopener">@percy/cypress</a> NPM module to get around Webpack <a href="https://github.com/percy/percy-cypress/issues/58" target="_blank" rel="noopener">bundling problem there</a>. I have opened a <a href="https://github.com/percy/percy-cypress/pull/69" target="_blank" rel="noopener">pull request</a> with my work around from my fork <a href="https://github.com/bahmutov/percy-cypress/tree/find-percy-58" target="_blank" rel="noopener">bahmutov/percy-cypress branch find-percy-58</a>.</p><p>Meanwhile I wanted to use my patched version in <a href="https://github.com/bahmutov/calculator" target="_blank" rel="noopener">bahmutov/calculator</a> project. I could simply install my fork using <code>github:</code> reference</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D github:bahmutov/percy-cypress</span><br></pre></td></tr></table></figure><p>But this installation installs ... wrong files</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l node_modules/\@percy/cypress/</span><br><span class="line">total 80</span><br><span class="line">-rw-r--r--  1 gleb  wheel  1072 Oct 26  1985 LICENSE</span><br><span class="line">-rw-r--r--  1 gleb  wheel   420 Oct 26  1985 README.md</span><br><span class="line">-rw-r--r--  1 gleb  wheel   477 Oct 26  1985 appveyor.yml</span><br><span class="line">-rw-r--r--  1 gleb  wheel   627 Oct 26  1985 dependencies.yml</span><br><span class="line">-rw-r--r--  1 gleb  wheel  1878 Apr  1 22:59 package.json</span><br><span class="line">-rwxr-xr-x  1 gleb  wheel   255 Oct 26  1985 release.sh</span><br><span class="line">-rw-r--r--  1 gleb  wheel  1875 Oct 26  1985 run-tests.js</span><br><span class="line">-rw-r--r--  1 gleb  wheel  5329 Oct 26  1985 tsconfig.json</span><br><span class="line">-rw-r--r--  1 gleb  wheel   197 Oct 26  1985 tslint.json</span><br></pre></td></tr></table></figure><p>I need to install <em>the built</em> module. So here is how to do this myself.</p><p>First, add the <code>files: []</code> property to the <a href="https://github.com/bahmutov/percy-cypress/blob/fix-webpack/package.json" target="_blank" rel="noopener">package.json</a>. It is more flexible than just <code>.npmignore</code> since when using <code>files</code> you can whitelist or blacklist files and folders. In our case, we want to only distribute the <code>dist</code> folder with the NPM package. Compare the files before and after.</p><p><strong>before</strong> adding <code>files</code> property</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ npm pack --dry</span><br><span class="line">npm notice</span><br><span class="line">npm notice üì¶  @percy/cypress@1.0.5</span><br><span class="line">npm notice === Tarball Contents ===</span><br><span class="line">npm notice 1.2kB package.json</span><br><span class="line">npm notice 477B  appveyor.yml</span><br><span class="line">npm notice 627B  dependencies.yml</span><br><span class="line">npm notice 1.1kB LICENSE</span><br><span class="line">npm notice 3.5kB percy-cypress-1.0.5.tgz</span><br><span class="line">npm notice 420B  README.md</span><br><span class="line">npm notice 255B  release.sh</span><br><span class="line">npm notice 1.9kB run-tests.js</span><br><span class="line">npm notice 5.3kB tsconfig.json</span><br><span class="line">npm notice 197B  tslint.json</span><br><span class="line">npm notice 507B  .circleci/config.yml</span><br><span class="line">npm notice 97B   dist/environment.d.ts</span><br><span class="line">npm notice 516B  dist/environment.js</span><br><span class="line">npm notice 11B   dist/index.d.ts</span><br><span class="line">npm notice 3.6kB dist/index.js</span><br><span class="line">npm notice 775B  dist/percy-healthcheck</span><br><span class="line">npm notice === Tarball Details ===</span><br><span class="line">npm notice name:          @percy/cypress</span><br><span class="line">npm notice version:       1.0.5</span><br><span class="line">npm notice filename:      percy-cypress-1.0.5.tgz</span><br><span class="line">npm notice package size:  11.2 kB</span><br><span class="line">npm notice unpacked size: 20.4 kB</span><br><span class="line">npm notice shasum:        3f195fc4d1e93032d14e88e4be885c0ceee4387e</span><br><span class="line">npm notice integrity:     sha512-PoLpQJbOCd+2p[...]9rS2kGW/MQv0A==</span><br><span class="line">npm notice total files:   16</span><br><span class="line">npm notice</span><br><span class="line">percy-cypress-1.0.5.tgz</span><br></pre></td></tr></table></figure><p>Lots of stray files - no user of this NPM package needs <code>tslint.json</code> for example. <strong>After</strong> adding <code>files: [&quot;dist&quot;]</code> we get just the necessary file list.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ npm pack --dry</span><br><span class="line">npm notice</span><br><span class="line">npm notice üì¶  @percy/cypress@1.0.5</span><br><span class="line">npm notice === Tarball Contents ===</span><br><span class="line">npm notice 1.2kB package.json</span><br><span class="line">npm notice 1.1kB LICENSE</span><br><span class="line">npm notice 420B  README.md</span><br><span class="line">npm notice 97B   dist/environment.d.ts</span><br><span class="line">npm notice 516B  dist/environment.js</span><br><span class="line">npm notice 11B   dist/index.d.ts</span><br><span class="line">npm notice 3.6kB dist/index.js</span><br><span class="line">npm notice 775B  dist/percy-healthcheck</span><br><span class="line">npm notice === Tarball Details ===</span><br><span class="line">npm notice name:          @percy/cypress</span><br><span class="line">npm notice version:       1.0.5</span><br><span class="line">npm notice filename:      percy-cypress-1.0.5.tgz</span><br><span class="line">npm notice package size:  3.5 kB</span><br><span class="line">npm notice unpacked size: 7.7 kB</span><br><span class="line">npm notice shasum:        1afc7e5117dfda71fbb32d3326a7145faba052af</span><br><span class="line">npm notice integrity:     sha512-NA75z/sUCpZLR[...]gmy9ZyI3rQo8Q==</span><br><span class="line">npm notice total files:   8</span><br><span class="line">npm notice</span><br><span class="line">percy-cypress-1.0.5.tgz</span><br></pre></td></tr></table></figure><p>Super. Now, push the code (using a separate branch for example) to GitHub. Start a new release there.</p><p><img src="/blog/images/draft-release.png" alt="Draft new release"></p><p>When you make a GitHub release you can drop binary files there.</p><p><img src="/blog/images/release-binaries.png" alt="Attach binaries to release"></p><p>To prepare a binary file, run <code>npm pack</code> command (without <code>--dry</code> option). This will give you a <code>tgz</code> file like <code>percy-cypress-1.0.5.tgz</code>. Drop this file <em>into the GitHub release</em>. Here is the <a href="https://github.com/bahmutov/percy-cypress/releases/tag/fix-webpack" target="_blank" rel="noopener"><code>fix-webpack</code></a> I have made.</p><p><img src="/blog/images/github-tgz.png" alt="GitHub release with NPM module tgz file"></p><p>Right click on the <code>percy-cypress-1.0.5.tgz</code> file to grab the download url, in this case it will be <code>https://github.com/bahmutov/percy-cypress/releases/download/fix-webpack/percy-cypress-1.0.5.tgz</code>. You can <code>npm install</code> that URL!</p><p>So I went to my example project <a href="https://github.com/bahmutov/calculator" target="_blank" rel="noopener">bahmutov/calculator</a> and ran</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D https://github.com/bahmutov/percy-cypress/releases/download/fix-webpack/percy-cypress-1.0.5.tgz</span><br></pre></td></tr></table></figure><p>The installed NPM package is beautiful; it just has what is necessary.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l node_modules/\@percy/cypress/</span><br><span class="line">total 24</span><br><span class="line">-rw-r--r--  1 gleb  staff  1072 Oct 26  1985 LICENSE</span><br><span class="line">-rw-r--r--  1 gleb  staff   420 Oct 26  1985 README.md</span><br><span class="line">drwxr-xr-x  7 gleb  staff   238 Apr  1 22:23 dist</span><br><span class="line">-rw-r--r--  1 gleb  staff  2497 Apr  1 22:23 package.json</span><br></pre></td></tr></table></figure><p>The <a href="https://github.com/bahmutov/calculator/blob/ab87fd8e18d5061fc19e49a09dcbb5483e9a82a5/package.json#L8" target="_blank" rel="noopener">package.json</a> keeps the long original download url. Thus this installation works on CI server the same way.</p><p>Everything is peachy: I have my fork, and I can install it from other NPM projects.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have discussed how to &lt;a href=&quot;../use-github-instead-of-npm/&quot;&gt;Use GitHub instead of NPM&lt;/a&gt; to share and install NPM modules. But that 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
      <category term="git" scheme="https://glebbahmutov.com/blog/tags/git/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Readable Cypress.io tests</title>
    <link href="https://glebbahmutov.com/blog/readable-tests/"/>
    <id>https://glebbahmutov.com/blog/readable-tests/</id>
    <published>2019-04-01T04:00:00.000Z</published>
    <updated>2019-04-01T14:10:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>The tests should be simple to read and understand. The tests are already a layer on top the production code that is complex, so they should not add their own quirks or gotchas. In this blog post I will show how to make the tests express their meaning by adding custom Cypress commands, and how to make assertions really simple to understand by extending the default Chai assertions.</p><p><strong>Note:</strong> these examples come from the repository <a href="https://github.com/bahmutov/todo-api-with-json-schema" target="_blank" rel="noopener">bahmutov/todo-api-with-json-schema</a>.</p><h2><span id="the-example">The example</span></h2><p>In my example application, the production code and the tests are using <a href="http://json-schema.org/" target="_blank" rel="noopener">json-schemas</a>. These schemas are created and validated using <a href="https://github.com/cypress-io/schema-tools" target="_blank" rel="noopener">@cypress-io/schema-tools</a> library. See these resources to learn why we are using JSON schemas</p><ul><li><a href="https://slides.com/bahmutov/json-schemas-update" target="_blank" rel="noopener">&quot;JSON Schemas: State of Testing Update&quot;</a> presentation</li><li><a href="https://slides.com/bahmutov/json-schemas-confoo" target="_blank" rel="noopener">&quot;JSON Schemas are your True Testing Friend&quot;</a> presentation and its companion <a href="https://www.cypress.io/blog/2018/07/10/json-schemas-are-your-true-testing-friend/" target="_blank" rel="noopener">blog post</a></li></ul><p>I have created a schema for request and response to the API that validates Todo objects the web application is saving and loading from the server. Here the <a href="https://github.com/bahmutov/todo-api-with-json-schema/blob/master/schemas/post-todo-request.ts" target="_blank" rel="noopener">schemas/post-todo-request.ts</a> file that describes what the server expects to receive.</p><figure class="highlight js"><figcaption><span>schemas/post-todo-request.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ObjectSchema, versionSchemas &#125; <span class="keyword">from</span> <span class="string">'@cypress/schema-tools'</span></span><br><span class="line"><span class="keyword">import</span> &#123; formats &#125; <span class="keyword">from</span> <span class="string">'../formats'</span></span><br><span class="line"></span><br><span class="line">type uuid = string</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Todo item sent by the client.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type PostTodoRequestExample100 = &#123;</span><br><span class="line">  text: string</span><br><span class="line">  done: boolean</span><br><span class="line">  uuid: uuid</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postTodoExample100: PostTodoRequestExample100 = &#123;</span><br><span class="line">  text: <span class="string">'do something'</span>,</span><br><span class="line">  done: <span class="literal">false</span>,</span><br><span class="line">  uuid: <span class="string">'20514af9-2a2a-4712-9c1e-0510c288c9ec'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PostTodoRequest100: ObjectSchema = &#123;</span><br><span class="line">  version: &#123;</span><br><span class="line">    major: <span class="number">1</span>,</span><br><span class="line">    minor: <span class="number">0</span>,</span><br><span class="line">    patch: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  schema: &#123;</span><br><span class="line">    title: <span class="string">'PostTodoRequest'</span>,</span><br><span class="line">    type: <span class="string">'object'</span>,</span><br><span class="line">    description: <span class="string">'Todo item sent by the client'</span>,</span><br><span class="line">    properties: &#123;</span><br><span class="line">      text: &#123;</span><br><span class="line">        type: <span class="string">'string'</span>,</span><br><span class="line">        description: <span class="string">'Todo text, like "clean room"'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      done: &#123;</span><br><span class="line">        type: <span class="string">'boolean'</span>,</span><br><span class="line">        description: <span class="string">'Is this todo item completed?'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      uuid: &#123;</span><br><span class="line">        type: <span class="string">'string'</span>,</span><br><span class="line">        format: formats.uuid.name, <span class="comment">// "uuid"</span></span><br><span class="line">        description: <span class="string">'item random GUID'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// require all properties</span></span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// do not allow any extra properties</span></span><br><span class="line">    additionalProperties: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  example: postTodoExample100,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PostTodoRequest = versionSchemas(PostTodoRequest100)</span><br></pre></td></tr></table></figure><p>Given an object, we can assert that it follows the above schema in a Jest test like this one:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; assertSchema &#125; <span class="keyword">from</span> <span class="string">'@cypress/schema-tools'</span></span><br><span class="line"><span class="keyword">import</span> &#123; schemas &#125; <span class="keyword">from</span> <span class="string">'../schemas'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'POST /todo request'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> assertTodoRequest = assertSchema(schemas)(<span class="string">'postTodoRequest'</span>, <span class="string">'1.0.0'</span>)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'valid TODO request object'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> todo = &#123;</span><br><span class="line">      text: <span class="string">'use scheams'</span>,</span><br><span class="line">      done: <span class="literal">true</span>,</span><br><span class="line">      uuid: <span class="string">'4899e1a9-e38f-43f9-a765-35b81a41c65d'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// all good, the object is passing schema validation</span></span><br><span class="line">    expect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      assertTodoRequest(todo)</span><br><span class="line">    &#125;).not.toThrow()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>But any object NOT following the schema will raise an error with really good explanation message.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'TODO request object missing text'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> todo = &#123;</span><br><span class="line">    done: <span class="literal">true</span>,</span><br><span class="line">    uuid: <span class="string">'4899e1a9-e38f-43f9-a765-35b81a41c65d'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  expect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    assertTodoRequest(todo)</span><br><span class="line">  &#125;).toThrowErrorMatchingSnapshot()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The snapshot in this case is</p><figure class="highlight js"><figcaption><span>__tests__/__snapshots__/post-todo-request-test.ts.snap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Jest Snapshot v1, https://goo.gl/fbAQLP</span></span><br><span class="line"></span><br><span class="line">exports[<span class="string">`POST /todo request TODO request object missing text 1`</span>] = <span class="string">`</span></span><br><span class="line"><span class="string">"Schema postTodoRequest@1.0.0 violated</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Errors:</span></span><br><span class="line"><span class="string">data.text is required</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Current object:</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  \\"done\\": true,</span></span><br><span class="line"><span class="string">  \\"uuid\\": \\"4899e1a9-e38f-43f9-a765-35b81a41c65d\\"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Expected object like this:</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  \\"done\\": false,</span></span><br><span class="line"><span class="string">  \\"text\\": \\"do something\\",</span></span><br><span class="line"><span class="string">  \\"uuid\\": \\"20514af9-2a2a-4712-9c1e-0510c288c9ec\\"</span></span><br><span class="line"><span class="string">&#125;"</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>Nice, the errors are readable, but what about our end-to-end tests?</p><h2><span id="end-to-end-tests">End-to-end tests</span></h2><p>When we have a web application making requests to the server API, our end-to-end tests should validate two main things:</p><ul><li><a href="https://on.cypress.io/fixture" target="_blank" rel="noopener">fixture files</a> Cypress can use to mock complex network calls. We really want the fixture files to be valid with respect to the schemas used.</li><li>network requests and responses should confirm to the schema we expect</li></ul><h3><span id="validating-fixtures">Validating fixtures</span></h3><p>We can validate a fixture file using the methods provided by the <a href="https://github.com/cypress-io/schema-tools" target="_blank" rel="noopener">@cypress-io/schema-tools</a> function. For example in <a href="https://github.com/bahmutov/todo-api-with-json-schema/blob/master/cypress/integration/fixture-spec.js" target="_blank" rel="noopener">cypress/integration/fixture-spec.js</a> we can import the <code>api</code> object created by the schema utilities and use <code>api.assertSchema</code> to validate a loaded object.</p><figure class="highlight js"><figcaption><span>cypress/integration/fixture-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; api &#125; <span class="keyword">from</span> <span class="string">'../../dist/schemas'</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">'has todo fixture matching schema'</span>, () =&gt; &#123;</span><br><span class="line">  cy.fixture(<span class="string">'todo'</span>).then(api.assertSchema(<span class="string">'PostTodoRequest'</span>, <span class="string">'1.0.0'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This is ok, but it is less than readable. Luckily we can make it better by writing a <a href="https://on.cypress.io/custom-commands" target="_blank" rel="noopener">Cypress custom command</a>. I will write a custom command in <a href="https://github.com/bahmutov/todo-api-with-json-schema/blob/master/cypress/support/commands.js" target="_blank" rel="noopener">cypress/support/commands.js</a>:</p><figure class="highlight js"><figcaption><span>cypress/support/commands.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; api &#125; <span class="keyword">from</span> <span class="string">'../../dist/schemas'</span></span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(</span><br><span class="line">  <span class="string">'fixtureSchema'</span>,</span><br><span class="line">  (fixtureName, schemaName, schemaVersion) =&gt; &#123;</span><br><span class="line">    <span class="comment">// verify input arguments to prevent silly mistakes</span></span><br><span class="line">    expect(fixtureName, <span class="string">'fixture name'</span>).to.be.a(<span class="string">'string'</span>)</span><br><span class="line">    expect(schemaName, <span class="string">'schema name'</span>).to.be.a(<span class="string">'string'</span>)</span><br><span class="line">    expect(schemaVersion, <span class="string">'schema version'</span>).to.match(<span class="regexp">/^\d+\.\d+\.\d+$/</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// load and verify the fixture itself</span></span><br><span class="line">    cy.fixture(fixtureName, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).then(</span><br><span class="line">      api.assertSchema(schemaName, schemaVersion)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>and will include this <code>commands.js</code> file from the <a href="https://github.com/bahmutov/todo-api-with-json-schema/blob/master/cypress/support/index.js" target="_blank" rel="noopener">cypress/support/index.js</a> file</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./commands'</span></span><br></pre></td></tr></table></figure><p>Super, our fixture validation becomes readable:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'loads and asserts todo schema'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// uses a custom command we have added in cypress/support/commands.js</span></span><br><span class="line">  cy.fixtureSchema(<span class="string">'todo'</span>, <span class="string">'PostTodoRequest'</span>, <span class="string">'1.0.0'</span>)</span><br><span class="line">    <span class="comment">// you can chain commands to the loaded fixture</span></span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'text'</span>, <span class="string">'use fixtures'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The combined command <code>cy.fixtureSchema</code> lessens the overhead for anyone reading the spec code, leaving more mental capacity to actually think about the application and its logic.</p><p>If an object loaded from a fixture file does not match the schema, a good error is displayed in the Cypress GUI.</p><p><img src="/blog/images/readable-tests/fixture-does-not-match-schema.png" alt="Object loaded from the fixture file does not match the schema"></p><p>Great.</p><h3><span id="custom-assertions">Custom assertions</span></h3><p>In addition to the custom commands, we can also extend the Chai assertions with our own predicates. In our repository I will add file <code>cypress/support/assertions.js</code> and will import this file from the <code>cypress/support/index.js</code> file.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./commands'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./assertions'</span></span><br></pre></td></tr></table></figure><p>Let&#39;s add a custom Chai assertion that validates an object against a schema.</p><figure class="highlight js"><figcaption><span>cypress/support/assertions.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; api &#125; <span class="keyword">from</span> <span class="string">'../../dist/schemas'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// how to add a custom Chai assertion to Cypress</span></span><br><span class="line"><span class="comment">// see "Adding Chai Assertions" recipe in</span></span><br><span class="line"><span class="comment">// https://github.com/cypress-io/cypress-example-recipes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isFollowingSchema = <span class="function">(<span class="params">_chai, utils</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">assertFollowingSchema</span> (<span class="params">schemaName, schemaVersion</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// if the subject does not the schema, we will</span></span><br><span class="line">    <span class="comment">// get a very nice error message from "api.assertSchema"</span></span><br><span class="line">    api.assertSchema(schemaName, schemaVersion)(<span class="keyword">this</span>._obj)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// but if assertion passes, we should print passing assertion</span></span><br><span class="line">    <span class="comment">// message which we can do using Chai</span></span><br><span class="line">    <span class="keyword">this</span>.assert(</span><br><span class="line">      <span class="literal">true</span>,</span><br><span class="line">      <span class="string">`expected subject to follow schema **<span class="subst">$&#123;schemaName&#125;</span>@<span class="subst">$&#123;schemaVersion&#125;</span>**`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _chai.Assertion.addMethod(<span class="string">'followSchema'</span>, assertFollowingSchema)</span><br><span class="line">&#125;</span><br><span class="line">chai.use(isFollowingSchema)</span><br></pre></td></tr></table></figure><p>Notice there are 2 assertions in the <code>isFollowingSchema</code> callback: the &quot;real&quot; one and an always-passing one <code>this.assert(true, &lt;message&gt;)</code>. This is a little trick I use to have a detailed error message if an assertion fails, and a short success message when the object conforms to the schema. Here is an example test validating the response body.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'returns new item matching schema'</span>, () =&gt; &#123;</span><br><span class="line">  cy.server()</span><br><span class="line">  cy.route(<span class="string">'POST'</span>, <span class="string">'/todos'</span>).as(<span class="string">'post'</span>)</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">'Use schemas&#123;enter&#125;'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check response passes schema</span></span><br><span class="line">  cy.wait(<span class="string">'@post'</span>)</span><br><span class="line">    .its(<span class="string">'response.body'</span>)</span><br><span class="line">    <span class="comment">// use custom Chai assertion</span></span><br><span class="line">    .should(<span class="string">'followSchema'</span>, <span class="string">'PostTodoResponse'</span>, <span class="string">'1.0.0'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When the test passes, the Command Log is showing the summary thanks to that &quot;dummy&quot; <code>this.assert(true, ...)</code> assertion trick.</p><p><img src="/blog/images/readable-tests/custom-assertion.png" alt="Returned object passes schema message"></p><h2><span id="adding-intellisense">Adding IntelliSense</span></h2><p>Cypress commands and assertions come with full JSDoc comments, which allows a modern text editor like VSCode to show help during test writing. For example when hovering over <code>cy.should</code> this tooltip pops up:</p><p><img src="/blog/images/readable-tests/should-help.jpeg" alt="`cy.should` documentation"></p><p>Note that the help box shows help for <code>cy.should</code> WITH <code>have.property</code> assertion! Thus we should be able to specify JSDoc for both our custom commands and for custom assertions. To do this, create a new file <code>cypress/support/index.d.ts</code>. It is a TypeScript file that will describe additional <code>cy</code> commands and assertions. The new commands are added to the <code>Chainable&lt;Subject&gt;</code> interface, and the new assertions are added to the <code>Chainer&lt;Subject&gt;</code> interface. For each command and assertion I will write a detailed JSDoc command with examples.</p><figure class="highlight ts"><figcaption><span>cypress/support/index.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Semver string, usually simple like "major.minor.patch"</span></span><br><span class="line"><span class="comment"> * @example</span></span><br><span class="line"><span class="comment"> * const version: semverString = '2.1.0'</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> semverString = <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> Cypress &#123;</span><br><span class="line">  <span class="keyword">interface</span> Chainable&lt;Subject&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Load a fixture JSON and check it against a schema.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @example</span></span><br><span class="line"><span class="comment">     * cy.fixtureSchema('single-todo', 'Todo', '1.1.0')</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    fixtureSchema(fixturePath: <span class="built_in">string</span>,</span><br><span class="line">      schemaName: <span class="built_in">string</span>, schemaVersion: semverString): Chainable&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">interface</span> Chainer&lt;Subject&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Custom Chai assertion that checks if the given subject follows</span></span><br><span class="line"><span class="comment">     * a schema</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @example</span></span><br><span class="line"><span class="comment">    cy.wrap(&#123; ... &#125;)</span></span><br><span class="line"><span class="comment">      .should('followSchema', 'mySchemaName', '2.1.0')</span></span><br><span class="line"><span class="comment">    cy.fixture('filename')</span></span><br><span class="line"><span class="comment">      .should('followSchema', 'PostTodoRequest', '1.0.0')</span></span><br><span class="line"><span class="comment">    cy.wait('@networkCallAlias')</span></span><br><span class="line"><span class="comment">      .its('response.body')</span></span><br><span class="line"><span class="comment">      .should('followSchema', 'PostTodoResponse', '1.0.0')</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    (chainer: <span class="string">'followSchema'</span>,</span><br><span class="line">      schemaName: <span class="built_in">string</span>, schemaVersion: <span class="built_in">string</span>): Chainable&lt;Subject&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Special note:</strong> my blog&#39;s syntax highlighting does not parse the original JSDoc for the above assertion correctly. Here is a screenshot of how it SHOULD be to avoid VSCode parsing to break on <code>@networkCallAlias</code> string and to preserve indentation:</p><p><img src="/blog/images/readable-tests/indent.png" alt="Use tripple slashes in JSdoc to preserve example indent"></p><p>I write my code examples using triple back ticks like that to preserve indentation and avoid problems caused by <code>@</code> character in the network alias.</p><p>Once we have this support <code>index.d.ts</code> file in place, we can include it from our JavaScript spec files (and it can replace the regular triple-slash special command importing <code>cypress</code> types).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in a JavaScript spec file, instead of this:</span></span><br><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import your own support .d.ts file</span></span><br><span class="line"><span class="comment">// which will import Cypress in turn</span></span><br><span class="line"><span class="comment">// and will add your custom definitions</span></span><br><span class="line"><span class="comment">/// &lt;reference path="../support/index.d.ts" /&gt;</span></span><br></pre></td></tr></table></figure><p>Hover over <code>cy.fixtureSchema</code> and see documentation from the <code>.d.ts</code> file</p><p><img src="/blog/images/readable-tests/custom-command.jpeg" alt="IntelliSense for custom command"></p><p>Typing a custom assertion <code>should(&#39;followSchema&#39;, ...)</code> brings the following help popup</p><p><img src="/blog/images/readable-tests/typing-custom-assertion.png" alt="IntelliSense for custom assertion"></p><p>In all cases, good documentation is essential.</p><h2><span id="conclusions">Conclusions</span></h2><p>Making test code as readable as possible is a worthy goal. Each test command and assertion can express its intent, and custom commands and assertions help achieve this.</p><p>I would suggest adding custom commands and assertions to their own files in <code>cypress/support</code> folder and including them from <code>cypress/support/index.js</code> file</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./commands'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./assertions'</span></span><br></pre></td></tr></table></figure><p>I would also write a TypeScript definition file like <code>cypress/support/index.d.ts</code> that describes the new commands and assertions and is loaded by IntelliSense to provide pop-up help during editing.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The tests should be simple to read and understand. The tests are already a layer on top the production code that is complex, so they shou
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Testing how an application renders a drawing with Cypress and Percy.io</title>
    <link href="https://glebbahmutov.com/blog/testing-visually/"/>
    <id>https://glebbahmutov.com/blog/testing-visually/</id>
    <published>2019-03-30T04:00:00.000Z</published>
    <updated>2019-05-10T13:26:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> you can find the source code for this blog post at <a href="https://github.com/cypress-io/angular-pizza-creator" target="_blank" rel="noopener">github.com/cypress-io/angular-pizza-creator</a> and a live demo of the application at <a href="https://toddmotto.com/angular-pizza-creator/" target="_blank" rel="noopener">toddmotto.com/angular-pizza-creator/</a>.</p><p><strong>Note 2:</strong> the webinar video has been posted at <a href="https://www.youtube.com/watch?v=MXfZeE9RQDw" target="_blank" rel="noopener">www.youtube.com/watch?v=MXfZeE9RQDw</a> and the slides at <a href="https://slides.com/bahmutov/visual-testing-with-percy" target="_blank" rel="noopener">slides.com/bahmutov/visual-testing-with-percy</a>.</p><p><strong>Table of contents</strong></p><!-- toc --><ul><li><a href="#ordering-a-pizza">Ordering a pizza</a></li><li><a href="#custom-commands">Custom commands</a></li><li><a href="#visual-testing">Visual testing</a></li><li><a href="#visual-testing-workflow">Visual testing workflow</a></li><li><a href="#conclusions">Conclusions</a></li></ul><!-- tocstop --><h2><span id="ordering-a-pizza">Ordering a pizza</span></h2><p>There is a nice little web application at <a href="https://toddmotto.com/angular-pizza-creator/" target="_blank" rel="noopener">toddmotto.com/angular-pizza-creator/</a> for ordering a pizza. It does not actually order pizza, but it surely looks appetizing!</p><p><img src="/blog/images/testing-visually/pizza.gif" alt="Making my own pizza"></p><p>When we click on a topping, the order changes price, and the pizza rendering gets a new set of sliced toppings dropped. If we are building a web application like this, how do we test it?</p><p>First, we need to ensure that the we can build the pizza we want and that the order is going to cost us the right amount. We can write such test using a functional end-to-end test runner <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a>. Our first test will check the following user story:</p><ul><li>user needs to enter delivery information before they can place an order</li><li>user needs to pick at least one topping before they can place an order</li><li>the total order price should be correct</li><li>when the order is placed, a window alert pops up with the message &quot;Order placed&quot;</li></ul><p>At the end the web application looks like this</p><p><img src="/blog/images/testing-visually/order-placed.png" alt="Order placed"></p><p>Here is our first <a href="https://github.com/cypress-io/angular-pizza-creator/blob/master/cypress/integration/order-spec.js" target="_blank" rel="noopener">cypress/integration/order-spec.js</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">context(<span class="string">'Pizza Creator'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// uses base url setting from cypress.json</span></span><br><span class="line">    <span class="comment">// which right now points at "localhost:3000"</span></span><br><span class="line">    cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'orders custom pizza'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// enter delivery information</span></span><br><span class="line">    cy.get(<span class="string">'[formcontrolname="name"]'</span>).type(<span class="string">'Joe'</span>)</span><br><span class="line">    cy.get(<span class="string">'[formcontrolname="email"]'</span>).type(<span class="string">'foo@bar.com'</span>)</span><br><span class="line">    cy.get(<span class="string">'[formcontrolname="confirm"]'</span>).type(<span class="string">'foo@bar.com'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// without complete delivery information,</span></span><br><span class="line">    <span class="comment">// we should not be able to place the order</span></span><br><span class="line">    cy.get(<span class="string">'button[type="submit"]'</span>).should(<span class="string">'be.disabled'</span>)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'[formcontrolname="address"]'</span>).type(<span class="string">'1 Pizza st'</span>)</span><br><span class="line">    cy.get(<span class="string">'[formcontrolname="postcode"]'</span>).type(<span class="string">'12345'</span>)</span><br><span class="line">    cy.get(<span class="string">'[formcontrolname="phone"]'</span>).type(<span class="string">'1234567890'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// still cannot order pizza - need to pick toppings</span></span><br><span class="line">    cy.get(<span class="string">'button[type="submit"]'</span>).should(<span class="string">'be.disabled'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add a few toppings</span></span><br><span class="line">    cy.contains(<span class="string">'label.pizza-topping'</span>, <span class="string">'Pepperoni'</span>).click()</span><br><span class="line">    cy.contains(<span class="string">'label.pizza-topping'</span>, <span class="string">'Onion'</span>).click()</span><br><span class="line">    cy.contains(<span class="string">'label.pizza-topping'</span>, <span class="string">'Mozzarella'</span>).click()</span><br><span class="line">    cy.contains(<span class="string">'label.pizza-topping'</span>, <span class="string">'Basil'</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check the price and order pizza</span></span><br><span class="line">    cy.contains(<span class="string">'.pizza-summary__total-price'</span>, <span class="string">'Total: $12.75'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let us confirm we can place our order,</span></span><br><span class="line">    <span class="comment">// but first, prepare for "window.alert" call</span></span><br><span class="line">    cy.on(<span class="string">'window:alert'</span>, cy.stub().as(<span class="string">'alert'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// now the button should be enabled</span></span><br><span class="line">    cy.get(<span class="string">'button[type="submit"]'</span>)</span><br><span class="line">      .should(<span class="string">'be.enabled'</span>)</span><br><span class="line">      .click()</span><br><span class="line">    cy.get(<span class="string">'@alert'</span>).should(<span class="string">'have.been.calledWithExactly'</span>, <span class="string">'Order placed'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// scroll pizza view back into view</span></span><br><span class="line">    cy.get(<span class="string">'form'</span>)</span><br><span class="line">      .scrollIntoView(&#123;&#125;)</span><br><span class="line">      .should(<span class="string">'be.visible'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>which passes locally</p><p><img src="/blog/images/testing-visually/order-spec.gif" alt="Order spec passing locally"></p><h2><span id="custom-commands">Custom commands</span></h2><p>If we plan to write more tests, entering delivery and picking toppings actions will quickly lead to lots of duplicate test code. We can factor them out to <a href="https://on.cypress.io/custom-commands" target="_blank" rel="noopener">custom commands</a>, making our test code more readable and dry. I will write the following into <a href="https://github.com/cypress-io/angular-pizza-creator/blob/master/cypress/support/index.js" target="_blank" rel="noopener">cypress/support/index.js</a> file:</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Returns selector for a form control using name attribute */</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">name</span> =&gt;</span> <span class="string">`[formcontrolname="<span class="subst">$&#123;name&#125;</span>"]`</span></span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">'enterForm'</span>, (name, text) =&gt; &#123;</span><br><span class="line">  <span class="comment">// enter text into the form control without Command Log messages</span></span><br><span class="line">  <span class="keyword">const</span> quiet = &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  cy.get(f(name), quiet).type(text, quiet)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">'enterDeliveryInformation'</span>, () =&gt; &#123;</span><br><span class="line">  cy.enterForm(<span class="string">'name'</span>, <span class="string">'Joe'</span>)</span><br><span class="line">  cy.enterForm(<span class="string">'email'</span>, <span class="string">'foo@bar.com'</span>)</span><br><span class="line">  cy.enterForm(<span class="string">'confirm'</span>, <span class="string">'foo@bar.com'</span>)</span><br><span class="line">  cy.enterForm(<span class="string">'address'</span>, <span class="string">'1 Pizza st'</span>)</span><br><span class="line">  cy.enterForm(<span class="string">'postcode'</span>, <span class="string">'12345'</span>)</span><br><span class="line">  cy.enterForm(<span class="string">'phone'</span>, <span class="string">'1234567890'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">'pickToppings'</span>, (...toppings) =&gt; &#123;</span><br><span class="line">  toppings.forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    cy.contains(<span class="string">'label.pizza-topping'</span>, name).click()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The support file is bundled with each spec file, thus my <a href="https://github.com/cypress-io/angular-pizza-creator/blob/master/cypress/integration/dry-spec.js" target="_blank" rel="noopener">cypress/integration/dry-spec.js</a> can immediate use the new Cypress commands.</p><figure class="highlight js"><figcaption><span>cypress/integration/dry-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'orders custom pizza'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.enterDeliveryInformation()</span><br><span class="line">  cy.pickToppings(<span class="string">'Pepperoni'</span>, <span class="string">'Onion'</span>, <span class="string">'Mozzarella'</span>, <span class="string">'Basil'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check the price and order pizza</span></span><br><span class="line">  cy.contains(<span class="string">'.pizza-summary__total-price'</span>, <span class="string">'Total: $12.75'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// let us confirm we can place our order,</span></span><br><span class="line">  <span class="comment">// but first, prepare for "window.alert" call</span></span><br><span class="line">  cy.on(<span class="string">'window:alert'</span>, cy.stub().as(<span class="string">'alert'</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// now the button should be enabled</span></span><br><span class="line">  cy.get(<span class="string">'button[type="submit"]'</span>)</span><br><span class="line">    .should(<span class="string">'be.enabled'</span>)</span><br><span class="line">    .click()</span><br><span class="line">  cy.get(<span class="string">'@alert'</span>).should(<span class="string">'have.been.calledWithExactly'</span>, <span class="string">'Order placed'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// scroll pizza view back into view</span></span><br><span class="line">  cy.get(<span class="string">'form'</span>)</span><br><span class="line">    .scrollIntoView(&#123;&#125;)</span><br><span class="line">    .should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful, I ‚ù§Ô∏è readable functional tests.</p><h2><span id="visual-testing">Visual testing</span></h2><p>Hmm, we can verify the order side of the application - but what about the beautiful animated pizza drawing? Are the toppings falling onto the pizza crust - or do they accidentally land outside the circle? And what if someone changes the pie from the mouth-watering <code>#FFDC71</code> to much less appetizing <code>#71FF71</code>?</p><p><img src="/blog/images/testing-visually/green-pizza.png" alt="No, thank you"></p><p>A functional test cannot catch all possible changes in style, color and position - there are just too many assertions to make. Instead we need to compare the result as an image - and we need to compare it to a &quot;good&quot; baseline image. As long as the images match and the functional tests pass, our pizza app is working.</p><p>When dealing with images, we need to think where the baseline images are going to be stored - they quickly become a nuisance as their number grows. Think how many binary images can a Git repository hold until it becomes a nightmare to clone.</p><p>Also a huge problem with image diffing is the process of reviewing them and approving the visual changes. I would prefer to have an online service that shows me and other team members the differences in a nice convenient manner. I don&#39;t want to manually download images from CI to view them!</p><p>We need a complete solution, so today I will look at <a href="https://percy.io/" target="_blank" rel="noopener">Percy.io</a> visual diffing service. I have signed up for free with my GitHub account and created a project <a href="https://percy.io/cypress-io/angular-pizza-creator" target="_blank" rel="noopener">percy.io/cypress-io/angular-pizza-creator</a> that you can see for yourself. My setup follows the <a href="https://docs.percy.io/docs/cypress-tutorial" target="_blank" rel="noopener">Percy Cypress tutorial</a>.</p><p>In my project I have added <a href="https://github.com/percy/percy-cypress" target="_blank" rel="noopener">@percy/cypress</a> development dependency.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev @percy/cypress</span><br><span class="line">...</span><br><span class="line">success Saved 1 new dependency.</span><br><span class="line">info Direct dependencies</span><br><span class="line">‚îî‚îÄ @percy/cypress@1.0.4</span><br></pre></td></tr></table></figure><p>Then I have added a single line to my <a href="https://github.com/cypress-io/angular-pizza-creator/blob/master/cypress/support/index.js" target="_blank" rel="noopener">support file</a></p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@percy/cypress'</span></span><br><span class="line"><span class="comment">// the rest of my custom commands</span></span><br></pre></td></tr></table></figure><p>The imported <code>@percy/cypress</code> adds its own custom command <code>cy.percySnapshot()</code>. I write a test that snapshots the pizza before adding any topics and after in <a href="https://github.com/cypress-io/angular-pizza-creator/blob/master/cypress/integration/visual-spec.js" target="_blank" rel="noopener">visual-spec.js</a>:</p><figure class="highlight js"><figcaption><span>cypress/integration/visual-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'draws pizza correctly'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.percySnapshot(<span class="string">'Empty Pizza'</span>)</span><br><span class="line"></span><br><span class="line">  cy.enterDeliveryInformation()</span><br><span class="line">  <span class="keyword">const</span> toppings = [<span class="string">'Pepperoni'</span>, <span class="string">'Chili'</span>, <span class="string">'Onion'</span>]</span><br><span class="line">  cy.pickToppings(...toppings)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure the web app has updated</span></span><br><span class="line">  cy.contains(<span class="string">'.pizza-summary__total-price'</span>, <span class="string">'Total: $12.06'</span>)</span><br><span class="line">  cy.percySnapshot(toppings.join(<span class="string">' - '</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// scroll pizza view back into view</span></span><br><span class="line">  cy.get(<span class="string">'form'</span>)</span><br><span class="line">    .scrollIntoView(&#123;&#125;)</span><br><span class="line">    .should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs locally.</p><p><img src="/blog/images/testing-visually/visual-spec.png" alt="Visual spec passing locally"></p><p>Just remember: the test should take a snapshot when the application has finished rendering; and not before. The web app might take a while to redraw - maybe it is sending data to the server, or processing a complex operation. Adding an assertion is usually enough to wait as long as necessary, but no longer, thanks to the <a href="https://on.cypress.io/retry-ability" target="_blank" rel="noopener">retry-ability</a> built into most Cypress commands. To prevent the snapshot from being taken too early, like before the toppings have been applied to the order, the above test uses <code>cy.contains</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make sure the web app has updated</span></span><br><span class="line">cy.contains(<span class="string">'.pizza-summary__total-price'</span>, <span class="string">'Total: $12.06'</span>)</span><br><span class="line">cy.percySnapshot(toppings.join(<span class="string">' - '</span>))</span><br></pre></td></tr></table></figure><p>I can ignore additional Percy messages in the Command Log - because I have not set up sending data for image diffing yet. In fact, I will not run image diffing locally - there is no need for it, due to asynchronous nature of image generation and comparison. Percy custom command just sends DOM snapshot and styles to Percy cloud, where the actual images are generated (across multiple browsers and resolutions) and then compared. In order to enable sending images, I need to change how I run Cypress. Usually one runs Cypress by simply executing <code>npx cypress open</code> or <code>npx cypress run</code> in headless mode. But when Percy runs it needs extra time - to send the DOM snapshots and styles to the Percy.io API. Thus I need to run Percy app, which will start Cypress and will make sure the image diffing starts, even if Cypress application finishes. The command should be:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx percy <span class="built_in">exec</span> -- cypress run</span><br></pre></td></tr></table></figure><p>I don&#39;t need to change anything in my <a href="https://github.com/cypress-io/angular-pizza-creator/blob/master/package.json" target="_blank" rel="noopener">package.json</a> file - because normally I just work with functional tests. Only my CI configuration file needs to change its test command to run Cypress through Percy. Since I almost always use <a href="https://github.com/cypress-io/circleci-orb" target="_blank" rel="noopener">Cypress CircleCI Orb</a> to run my end-to-end tests, here is my <a href="https://github.com/cypress-io/angular-pizza-creator/blob/master/circle.yml" target="_blank" rel="noopener">circle.yml</a> file.</p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># import Cypress orb by specifying an exact version x.y.z</span></span><br><span class="line">  <span class="comment"># or the latest version 1.x.x using "@1" syntax</span></span><br><span class="line"><span class="attr">  cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line">      <span class="comment"># "cypress" is the name of the imported orb</span></span><br><span class="line">      <span class="comment"># "run" is the name of the job defined in Cypress orb</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cypress/run:</span></span><br><span class="line"><span class="attr">          yarn:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># builds and starts the local application</span></span><br><span class="line"><span class="attr">          start:</span> <span class="string">yarn</span> <span class="string">setup</span> <span class="string">&amp;&amp;</span> <span class="string">yarn</span> <span class="string">start</span></span><br><span class="line">          <span class="comment"># waits for web application to load completely</span></span><br><span class="line"><span class="attr">          wait-on:</span> <span class="string">'http://localhost:3000'</span></span><br><span class="line">          <span class="comment"># runs the Cypress tests via "Percy exec"</span></span><br><span class="line"><span class="attr">          command:</span> <span class="string">npx</span> <span class="string">percy</span> <span class="string">exec</span> <span class="bullet">--</span> <span class="string">cypress</span> <span class="string">run</span> <span class="bullet">--record</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> I am recording the Cypress test results and video using <code>cypress run --record</code> on the <a href="https://on.cypress.io/dashboard-service" target="_blank" rel="noopener">Cypress Dashboard</a>, which is a separate service from Percy web application dashboard.</p><p>For results to be sent to the right Percy project, I grabbed the <code>PERCY_TOKEN</code> from the Percy web application and set it on CircleCI as an environment variable. Then I pushed my code. CircleCI runs <a href="https://circleci.com/gh/cypress-io/angular-pizza-creator/13" target="_blank" rel="noopener">build #13</a> which shows Percy start message:</p><p><img src="/blog/images/testing-visually/percy-start.png" alt="Percy starts Cypress"></p><p>Percy outputs messages to the terminal when snapshots are taken:</p><p><img src="/blog/images/testing-visually/percy-runs.png" alt="Percy snapshot message"></p><p>After the entire run, Percy application sends the request to generate images and compare them and exits:</p><p><img src="/blog/images/testing-visually/percy-ci-message.png" alt="Percy finishes after Cypress exits"></p><p>I can open the displayed url <a href="https://percy.io/cypress-io/angular-pizza-creator/builds/1663756" target="_blank" rel="noopener">https://percy.io/cypress-io/angular-pizza-creator/builds/1663756</a> and after a few seconds the &quot;Pending ...&quot; status changes to &quot;Unreviewed&quot;. There are two desktop screenshots (and two more generated using Firefox) that I can see.</p><p><img src="/blog/images/testing-visually/two-new-snapshots.png" alt="Percy asks me to review new snapshos"></p><p>I approve the changes - now these snapshots become the official baseline images that will be used in the future for comparisons. All images are stored in the Percy cloud, and do not clutter the project&#39;s GitHub repository.</p><p>Let me change the pizza crust color to green and try pushing the commit. CircleCI build passes, and Percy web application shows that there are new changes - it has detected the change in color.</p><p><img src="/blog/images/testing-visually/there-are-changes.png" alt="Percy shows new changes in the build"></p><p>We can go into &quot;baseline vs current image&quot; view and toggle diff to see where the colors have changed.</p><p><img src="/blog/images/testing-visually/percy-diff.gif" alt="Diffing the two images to see the changed region"></p><p>Perfect, Percy web application catches the visual difference - but our tests have passed, haven&#39;t they?</p><h2><span id="visual-testing-workflow">Visual testing workflow</span></h2><p>Visual tests with Percy do not fail Cypress tests. Instead they send the DOM snapshots and all page styles to the Percy cloud where</p><ul><li>the actual images will be generated on multiple browsers and resolutions</li><li>new images are compared against baseline images</li></ul><p>A project could have 100s of images, waiting for all of them in the Cypress test might mean a loooong test. Thus Percy suggests a different asynchronous workflow it its <a href="https://percy.io/how-it-works" target="_blank" rel="noopener">&quot;How it works&quot;</a> guide.</p><p><strong>1.</strong> Install Percy GitHub application <a href="https://github.com/marketplace/percy" target="_blank" rel="noopener">github.com/marketplace/percy</a> and link the project to the GitHub repository. This enables commit status reporting.</p><p><img src="/blog/images/testing-visually/link-repo-to-percy-project.png" alt="Percy project linked to GitHub repository"></p><p>Percy recommends using pull requests to make any changes to the code. By default Percy project settings has the <code>master</code> branch as auto-approved. I had it turned off before to show image diffs, but now I will turn it back on.</p><p><img src="/blog/images/testing-visually/auto-approve-master.png" alt="If the visual changes have made it to master they are auto approved"></p><p><strong>2.</strong> For functional and visual changes I will open a pull request. Each pull request runs functional tests AND Percy sends back image diffing results as a GitHub status check. For example <a href="https://github.com/cypress-io/angular-pizza-creator/pull/2" target="_blank" rel="noopener">angular-pizza-creator/pull/2</a> automatically gets 2 commit checks:</p><p><img src="/blog/images/testing-visually/2-checks.png" alt="Functional tests and visual diff status for pull request"></p><p><strong>3.</strong> Clicking on the failed Percy check &quot;details&quot; link brings me to the diff view:</p><p><img src="/blog/images/testing-visually/percy-check.png" alt="Pizza crust changed color"></p><p>Thus each pull request needs the functional tests to pass and for the team to review and approve the visual changes (if it makes sense) - and there could be 100s of visual changes triggered across all part of the project, even for a small style change!</p><p><strong>4.</strong> If I click &quot;Approve&quot; button in Percy, it changes the GitHub commit status to pass and my pull request is good to go.</p><p><img src="/blog/images/testing-visually/approved.png" alt="Approved changes in Percy set PR status to green"></p><p>The pull request was merged into <code>master</code> and the new approved images become the new baseline images</p><p><img src="/blog/images/testing-visually/merged.png" alt="Merged pull request status"></p><p>The entire process is simple and convenient.</p><h2><span id="conclusions">Conclusions</span></h2><p>Running both functional and visual tests gives me a peace of mind. The chances of accidentally breaking the page layout or hiding an element, or making the app look hideous goes pretty much to zero. If you would like to know more about visual testing with Cypress.io and Percy.io check out these links:</p><ul><li><a href="https://percy.io" target="_blank" rel="noopener">percy.io</a></li><li><a href="https://www.cypress.io" target="_blank" rel="noopener">www.cypress.io</a></li><li><a href="https://docs.percy.io/docs/cypress" target="_blank" rel="noopener">Percy Cypress documentation</a></li></ul><p>There are also a few open source alternatives for visual diffing that do not have the GitHub integration or the cloud component that Percy provides, check them out if you would like to do image diffing yourself: <a href="https://on.cypress.io/plugins#visual-testing" target="_blank" rel="noopener">on.cypress.io/plugins#visual-testing</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can find the source code for this blog post at &lt;a href=&quot;https://github.com/cypress-io/angular-pizza-creator&quot; t
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Testing a chart with Cypress and Applitools</title>
    <link href="https://glebbahmutov.com/blog/testing-a-chart/"/>
    <id>https://glebbahmutov.com/blog/testing-a-chart/</id>
    <published>2019-03-28T04:00:00.000Z</published>
    <updated>2019-03-28T21:13:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> you can find the source code for this blog post at <a href="https://github.com/bahmutov/chart-testing-example" target="_blank" rel="noopener">github.com/bahmutov/chart-testing-example</a>.</p><h2><span id="charts">Charts</span></h2><p>I have found a great JavaScript library for creating SVG charts <a href="https://github.com/frappe/charts" target="_blank" rel="noopener">github.com/frappe/charts</a> with a demo website at <a href="https://frappe.io/charts" target="_blank" rel="noopener">https://frappe.io/charts</a>. Creating a chart is as simple as including a single script tag and writing a little snippet like</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/frappe-charts@1.1.0/dist/frappe-charts.min.iife.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  labels: [<span class="string">'winter'</span>, <span class="string">'spring'</span>, <span class="string">'summer'</span>, <span class="string">'fall'</span>],</span><br><span class="line">  datasets: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'Sunny days'</span>,</span><br><span class="line">      type: <span class="string">'bar'</span>,</span><br><span class="line">      values: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">25</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chart = <span class="keyword">new</span> frappe.Chart(<span class="string">'#chart'</span>, &#123;</span><br><span class="line">  title: <span class="string">'Sunny days per year'</span>,</span><br><span class="line">  data: data,</span><br><span class="line">  type: <span class="string">'bar'</span>,</span><br><span class="line">  height: <span class="number">250</span>,</span><br><span class="line">  colors: [<span class="string">'#7cd6fd'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>which produces a bar chart like this:</p><p><img src="/blog/images/testing-a-chart/chart.png" alt="Bar chart with tooltip on hover"></p><p>Great, but how do I actually test this chart? How do I ensure that I accidentally do not break my code when upgrading from <a href="mailto:`frappe-charts@1.1.0" target="_blank" rel="noopener">`frappe-charts@1.1.0</a><code>to</code><a href="mailto:frappe-charts@1.2.0" target="_blank" rel="noopener">frappe-charts@1.2.0</a>`?</p><h2><span id="functional-tests">Functional tests</span></h2><p>First, let&#39;s start testing this SVG chart using <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> test runner. I will install <code>cypress</code>, <code>parcel-bundler</code> (to server local site) and <a href="https://github.com/bahmutov/start-server-and-test" target="_blank" rel="noopener">start-server-and-test</a> (for starting the server and the tests).</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"parcel server index.html"</span>,</span><br><span class="line">    <span class="attr">"cy:open"</span>: <span class="string">"cypress open"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"start-test 1234 cy:open"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"cypress"</span>: <span class="string">"3.2.0"</span>,</span><br><span class="line">    <span class="attr">"parcel-bundler"</span>: <span class="string">"1.12.3"</span>,</span><br><span class="line">    <span class="attr">"start-server-and-test"</span>: <span class="string">"1.7.12"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The first test should load the site and assure that the chart is visible</p><figure class="highlight js"><figcaption><span>cypress/integration/first-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'shows bar chart'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'localhost:1234'</span>)</span><br><span class="line">  cy.get(<span class="string">'.frappe-chart'</span>)</span><br><span class="line">    .should(<span class="string">'be.visible'</span>)</span><br><span class="line">    .and(<span class="function"><span class="params">chart</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// we can assert anything about the chart really</span></span><br><span class="line">      expect(chart.height()).to.be.greaterThan(<span class="number">200</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can start Cypress GUI with <code>npm run dev</code> and see the first test pass</p><p><img src="/blog/images/testing-a-chart/first-test.gif" alt="First passing test"></p><p>Do you see delayed data load with animation? It happens <em>after</em> the test has already finished. I would like my test to only finish when all 4 bars are rendered, so I will change my test to find the four SVG rectangles.</p><figure class="highlight js"><figcaption><span>cypress/integration/first-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'shows bar chart'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'localhost:1234'</span>)</span><br><span class="line">  cy.get(<span class="string">'.frappe-chart'</span>)</span><br><span class="line">    .should(<span class="string">'be.visible'</span>)</span><br><span class="line">    .and(<span class="function"><span class="params">chart</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// we can assert anything about the chart really</span></span><br><span class="line">      expect(chart.height()).to.be.greaterThan(<span class="number">200</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// let the chart load by observing the rendered bars</span></span><br><span class="line">    .find(<span class="string">'g.dataset-0 rect'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test now waits for the rectangles to appear - and then it finishes.</p><p><img src="/blog/images/testing-a-chart/wait-for-rectangles.gif" alt="Waiting for 4 rectangles"></p><p>Since we are always going to load the chart, let us move the <code>cy.visit</code> and rectangle check to <code>beforeEach</code> hook. Even better, we can move the URL to <code>cypress.json</code> settings file.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:1234"</span>,</span><br><span class="line">  <span class="attr">"viewportHeight"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/first-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  <span class="comment">// let the chart load by observing the rendered bars</span></span><br><span class="line">  cy.get(<span class="string">'.frappe-chart g.dataset-0 rect'</span>).should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'shows bar chart'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'.frappe-chart'</span>)</span><br><span class="line">    .should(<span class="string">'be.visible'</span>)</span><br><span class="line">    .and(<span class="function"><span class="params">chart</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// we can assert anything about the chart really</span></span><br><span class="line">      expect(chart.height()).to.be.greaterThan(<span class="number">200</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The <code>beforeEach</code> commands are shown in its own top section of the Command Log.</p><p><img src="/blog/images/testing-a-chart/before-each.png" alt="Loading chart before each test"></p><h2><span id="testing-tooltip">Testing tooltip</span></h2><p>When I hover over a bar in my chart, a tooltip pops up. Can I test that it does? Cypress <a href="https://github.com/cypress-io/cypress/issues/10" target="_blank" rel="noopener">does not support <code>:hover</code> yet</a>, but looking at the event listeners for the SVG <code>rect</code> element I notice that the tooltip is connected to <code>mousemove</code> and <code>mouseleave</code> events.</p><p><img src="/blog/images/testing-a-chart/events.png" alt="Event listeners for `rect` element"></p><p>Maybe I can get the tooltip to show up by using <a href="https://on.cypress.io/trigger" target="_blank" rel="noopener"><code>cy.trigger(&#39;mousemove&#39;)</code></a> command?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'.frappe-chart g.dataset-0 rect'</span>)</span><br><span class="line">  .eq(<span class="number">1</span>) <span class="comment">// pick the "spring" bar</span></span><br><span class="line">  .trigger(<span class="string">'mousemove'</span>)</span><br></pre></td></tr></table></figure><p>Yes! The tooltip shows up. Let us confirm it - and because the tooltip is hidden with <code>style=&quot;opacity: 0&quot;</code> attribute, we can assert that it is initially hidden, then shown, then hidden again by writing small utility functions <code>tooltipHidden</code> and <code>tooltipVisible</code>.</p><figure class="highlight js"><figcaption><span>cypress/integration/tooltip-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tooltipHidden = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="comment">// initially the tooltip is not visible</span></span><br><span class="line">  <span class="comment">// because element is set to be hidden using attribute style="opacity:0"</span></span><br><span class="line">  <span class="comment">// we should check its visibility using "have.css" assertion</span></span><br><span class="line">  cy.get(<span class="string">'.graph-svg-tip'</span>).should(<span class="string">'have.css'</span>, <span class="string">'opacity'</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tooltipVisible = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  cy.get(<span class="string">'.graph-svg-tip'</span>).should(<span class="string">'have.css'</span>, <span class="string">'opacity'</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'shows and hides tooltip'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rectangles = <span class="string">'.frappe-chart g.dataset-0 rect'</span></span><br><span class="line"></span><br><span class="line">  tooltipHidden()</span><br><span class="line">  cy.get(rectangles)</span><br><span class="line">    .eq(<span class="number">1</span>) <span class="comment">// pick the "spring" bar</span></span><br><span class="line">    .trigger(<span class="string">'mousemove'</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// tooltipVisible() returns the Cypress element chain</span></span><br><span class="line">  <span class="comment">// so we can add an assertion to check the text</span></span><br><span class="line">  <span class="comment">// shown in the tooltip</span></span><br><span class="line">  tooltipVisible().should(<span class="string">'contain'</span>, <span class="string">'spring'</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(rectangles)</span><br><span class="line">    .eq(<span class="number">1</span>)</span><br><span class="line">    .trigger(<span class="string">'mouseleave'</span>)</span><br><span class="line"></span><br><span class="line">  tooltipHidden()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I have added <code>cy.wait(1000)</code> to pause the test and make the tooltip visible.</p><p><img src="/blog/images/testing-a-chart/tooltip.gif" alt="Tooltip test: first the tooltip appears and after 1 second disappears"></p><h2><span id="tooltip-for-each-bar">Tooltip for each bar</span></h2><p>A different tooltip appears when the mouse moves over each bar. Let us test it. For now, I will hardcode the season labels in the test.</p><figure class="highlight js"><figcaption><span>cypress/integration/seasons-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'shows tooltip for each season'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rectangles = <span class="string">'.frappe-chart g.dataset-0 rect'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> labels = [<span class="string">'winter'</span>, <span class="string">'spring'</span>, <span class="string">'summer'</span>, <span class="string">'fall'</span>]</span><br><span class="line"></span><br><span class="line">  ;[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">    cy.get(rectangles)</span><br><span class="line">      .eq(k)</span><br><span class="line">      .trigger(<span class="string">'mousemove'</span>)</span><br><span class="line">      .wait(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'.graph-svg-tip'</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).should(<span class="string">'contain'</span>, labels[k])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs through the four vertical bars and confirms the tooltip has the right label</p><p><img src="/blog/images/testing-a-chart/seasons.gif" alt="Seasons labels"></p><h2><span id="reading-labels-at-run-time">Reading labels at run-time</span></h2><p>Instead of hardcoding the labels in the test, we can read the labels from the application at run-time. First, we need to expose the chart reference or its data object reference during Cypress tests. Here is my preferred way of doing this:</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">  <span class="built_in">window</span>.chart = chart</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From now on, if you open DevTools during Cypress tests, and point the context at the application&#39;s iframe, you will be able to walk to the labels via <code>window.chart</code> object.</p><p><img src="/blog/images/testing-a-chart/chart-data.png" alt="Access labels via `window.chart`"></p><p>We can read these labels from our tests too using <a href="https://on.cypress.io/window" target="_blank" rel="noopener"><code>cy.window()</code></a> and <a href="https://on.cypress.io/its" target="_blank" rel="noopener"><code>cy.its()</code></a></p><figure class="highlight js"><figcaption><span>cypress/integration/seasons-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'shows tooltip for each defined label'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rectangles = <span class="string">'.frappe-chart g.dataset-0 rect'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// labels are accessed at run-time from the chart object</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .its(<span class="string">'chart.data.labels'</span>)</span><br><span class="line">    <span class="comment">// make sure we have a valid list with labels</span></span><br><span class="line">    .should(<span class="string">'have.length.gt'</span>, <span class="number">0</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">labels</span> =&gt;</span> &#123;</span><br><span class="line">      labels.forEach(<span class="function">(<span class="params">label, k</span>) =&gt;</span> &#123;</span><br><span class="line">        cy.get(rectangles)</span><br><span class="line">          .eq(k)</span><br><span class="line">          .trigger(<span class="string">'mousemove'</span>)</span><br><span class="line">          .wait(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">        cy.get(<span class="string">'.graph-svg-tip'</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).should(<span class="string">'contain'</span>, label)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Super, the test is passing, just like before, but now the labels are not copied.</p><h2><span id="reading-labels-at-compile-time">Reading labels at compile-time</span></h2><p>Instead of exposing the application and reading labels <em>during</em> the test, we can factor the labels into its own JavaScript module and share them between the application and the test code. We are already using <a href="https://parceljs.org/" target="_blank" rel="noopener">parcel-bundler</a> to serve our code, so we can just extract the labels into its own file.</p><figure class="highlight js"><figcaption><span>labels.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> labels = [<span class="string">'winter'</span>, <span class="string">'spring'</span>, <span class="string">'summer'</span>, <span class="string">'fall'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; labels &#125; <span class="keyword">from</span> <span class="string">'./labels'</span></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  labels,</span><br><span class="line">  datasets: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'Sunny days'</span>,</span><br><span class="line">      type: <span class="string">'bar'</span>,</span><br><span class="line">      values: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">25</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The application is bundled using <code>parcel-bundler</code> and served - just like before.</p><p>Cypress includes its own bundler, so we import <code>labels</code> from the spec file.</p><figure class="highlight js"><figcaption><span>cypress/integration/labels-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; labels &#125; <span class="keyword">from</span> <span class="string">'../../labels'</span></span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  <span class="comment">// let the chart load by observing the rendered bars</span></span><br><span class="line">  cy.get(<span class="string">'.frappe-chart g.dataset-0 rect'</span>).should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'shows tooltip for each imported label'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rectangles = <span class="string">'.frappe-chart g.dataset-0 rect'</span></span><br><span class="line"></span><br><span class="line">  labels.forEach(<span class="function">(<span class="params">label, k</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.get(rectangles)</span><br><span class="line">      .eq(k)</span><br><span class="line">      .trigger(<span class="string">'mousemove'</span>)</span><br><span class="line">      .wait(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'.graph-svg-tip'</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).should(<span class="string">'contain'</span>, label)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Great, all working, and there is no code duplication.</p><h2><span id="visual-diffing-with-applitools-plugin">Visual diffing with Applitools plugin</span></h2><p>But what if the charts library publishes a new version, changing the appearance of the bar chart? Or what if someone comes and changes the beautiful blue color in <code>app.js</code> from <code>#7cd6fd</code> to the ugly <code>#816c30</code>? The functional tests like we have written above cannot check if the chart looks the same. Yes, we could check each positional property and every style property of every element on the page ... and that will super painful to write as a test.</p><p>Instead let&#39;s set up image diffing testing, in this case I will use <a href="https://applitools.com/tutorials/cypress.html" target="_blank" rel="noopener">Applitools Cypress plugin</a>.</p><p>First, I will install the Applitools Cypress plugin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @applitools/eyes-cypress --save-dev</span><br></pre></td></tr></table></figure><p>Then I need to run</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx eyes-setup</span><br></pre></td></tr></table></figure><p>Which should do 2 things: load Applitools from Cypress plugins file and load Applitools commands from the support file</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// added by Applitools</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'@applitools/eyes-cypress'</span>)(<span class="built_in">module</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// added by Applitools</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@applitools/eyes-cypress/commands'</span></span><br></pre></td></tr></table></figure><p>I then made an Applitools account using my GitHub account and grabbed my Applitools API key. The image below comes from the <a href="https://applitools.com/tutorials/cypress.html#quick-start" target="_blank" rel="noopener">Applitools Cypress Quickstart tutorial</a>.</p><p><img src="/blog/images/testing-a-chart/applitools-API-key.gif" alt="personal Applitools API key"></p><p>Then from the terminal I have exported the key once</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> APPLITOOLS_API_KEY=&lt;my api key&gt;</span><br></pre></td></tr></table></figure><p>And now I am good to go. I have updated my tooltip test to use <code>cy.eye...</code> commands created by the Applitools plugin.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'shows tooltip for each season'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// start new batch of images</span></span><br><span class="line">  cy.eyesOpen(&#123;</span><br><span class="line">    appName: <span class="string">'chart-testing-example'</span>,</span><br><span class="line">    batchName: <span class="string">'tooltips'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> rectangles = <span class="string">'.frappe-chart g.dataset-0 rect'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> labels = [<span class="string">'winter'</span>, <span class="string">'spring'</span>, <span class="string">'summer'</span>, <span class="string">'fall'</span>]</span><br><span class="line"></span><br><span class="line">  labels.forEach(<span class="function">(<span class="params">label, k</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.get(rectangles)</span><br><span class="line">      .eq(k)</span><br><span class="line">      .trigger(<span class="string">'mousemove'</span>)</span><br><span class="line">      .wait(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'.graph-svg-tip'</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).should(<span class="string">'contain'</span>, label)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we limit the visual diff to the chart</span></span><br><span class="line">    cy.eyesCheckWindow(&#123;</span><br><span class="line">      sizeMode: <span class="string">'selector'</span>,</span><br><span class="line">      selector: <span class="string">'.frappe-chart'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.eyesClose() <span class="comment">// tell Applitools we are done</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I run Cypress locally (with <code>APPLITOOLS_API_KEY</code> environment variable). A few seconds after the test completes, the Applitools web application dashboard shows the 4 images.</p><p><img src="/blog/images/testing-a-chart/applitools-batch.png" alt="Applitools shows the new batch of images"></p><p>Because this is a new batch, all images were automatically accepted and saved as baselines. Let us change the color of the bars to my least favorite color <code>#816c30</code> and just push the code to CI. I am using CircleCI and I have already set the <code>APPLITOOLS_API_KEY</code> as an environment variable there.</p><p>The CI run has failed, see <a href="https://circleci.com/gh/bahmutov/chart-testing-example/4" target="_blank" rel="noopener">https://circleci.com/gh/bahmutov/chart-testing-example/4</a> - and it has failed after the Applitools cloud that actually does image rendering and comparison has reported the changes asynchronously back to the test runner. That&#39;s why the failures are not reported immediately during the test, but inside the <code>after</code> test callback.</p><p><img src="/blog/images/testing-a-chart/ci-visual-diff-error.png" alt="Visual diff has failed"></p><p>Let us go the Applitool dashboard to see why the test has failed visual comparison.</p><p><img src="/blog/images/testing-a-chart/visual-diff.png" alt="Visual diff showing changes"></p><p>We can go into each image to see the difference with the saved baseline image. For example we can toggle (T) between the new image and the baseline.</p><p><img src="/blog/images/testing-a-chart/diff.gif" alt="Toggle mode"></p><p>We can even highlight the changed areas (although it is pretty clear in this case where the changes are)</p><p><img src="/blog/images/testing-a-chart/highlight-diff.gif" alt="Highlight differences mode"></p><p>There is one more interesting feature the Applitools analysis offers. I can click on the &quot;&lt;&gt;&quot; button which opens a root cause analysis view. In this view, if I show the &quot;diff&quot; of the images, it also shows WHY the images have changed. In our case it correctly shows the root of the problem: the change &quot;style: fill&quot; property!</p><p><img src="/blog/images/testing-a-chart/visual-diff-root-cause-analysis.png" alt="Root cause analysis"></p><p>I don&#39;t like the new color, so I will revert the commit and push again.</p><h2><span id="conclusions">Conclusions</span></h2><ul><li>testing an SVG chart is pretty close to testing a regular DOM using Cypress</li><li>for visual regressions, consider using an image diffing tool. There are several choices, both commercial and open source<ul><li><a href="https://applitools.com" target="_blank" rel="noopener">Applitools.com</a></li><li><a href="https://on.cypress.io/plugins#visual-testing" target="_blank" rel="noopener">several other plugins</a></li></ul></li></ul><p><strong>Note:</strong> you can find the source code for this blog post at <a href="https://github.com/bahmutov/chart-testing-example" target="_blank" rel="noopener">github.com/bahmutov/chart-testing-example</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can find the source code for this blog post at &lt;a href=&quot;https://github.com/bahmutov/chart-testing-example&quot; tar
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Parallel or not</title>
    <link href="https://glebbahmutov.com/blog/parallel-or-not/"/>
    <id>https://glebbahmutov.com/blog/parallel-or-not/</id>
    <published>2019-03-09T05:00:00.000Z</published>
    <updated>2019-03-09T17:56:55.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#cypressio">Cypress.io</a></li><li><a href="#the-problem">The problem</a></li><li><a href="#solution">Solution</a><ul><li><a href="#the-test-job-definition">The test job definition</a></li><li><a href="#branch-filters">Branch filters</a></li><li><a href="#one-machine-for-external-pull-requests">One machine for external pull requests</a></li><li><a href="#parallel-tests-for-internal-branches">Parallel tests for internal branches</a></li></ul></li><li><a href="#github-configuration">GitHub configuration</a></li></ul><!-- tocstop --><p><a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress.io</a> test runner can run end-to-end tests <a href="https://on.cypress.io/parallellization" target="_blank" rel="noopener">in parallel</a> if your continuous integration server can spin multiple agents. Agents in that case coordinate and split the tests amongst themselves. Most CI providers now allow you to use multiple machines, but CircleCI shines in this regard in my opinion. Here is how to run the same testing job on 4 machines.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  test:</span></span><br><span class="line"><span class="attr">    parallelism:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line">      <span class="comment"># run test commands</span></span><br></pre></td></tr></table></figure><p>Four is the default number of machines given to open source projects by the kind folks at Circle.</p><h2><span id="cypressio">Cypress.io</span></h2><p>When running Cypress.io end-to-end tests across multiple machines, you can use <a href="https://github.com/cypress-io/circleci-orb" target="_blank" rel="noopener">Cypress CircleCI Orb</a> or write the test job steps yourself. Ultimately, each test machine has to call the <code>cypress run</code> command</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx cypress run --record --parallel</span><br></pre></td></tr></table></figure><p>Each CI machine contacts the Cypress.io Dashboard API to pick the next spec to run. To authenticate with the Cypress Dashboard, each agent requires passing a private record key, usually by having an environment variable called <a href="https://on.cypress.io/dashboard-service" target="_blank" rel="noopener">CYPRESS_RECORD_KEY</a> set. In the parallel mode, by adding more machines the test job can power through all tests very quickly, see my other blog post <a href="https://www.cypress.io/blog/2018/09/05/run-end-to-end-tests-on-ci-faster/" target="_blank" rel="noopener">&quot;Run Your End-to-end Tests 10 Times Faster with Automatic Test Parallelization&quot;</a>.</p><h2><span id="the-problem">The problem</span></h2><p>Our friends at <a href="https://github.com/withspectrum/spectrum" target="_blank" rel="noopener">Spectrum</a> have started using parallel running mode, which dropped their test run from <a href="https://dashboard.cypress.io/#/projects/6a92uk/runs/3145/specs" target="_blank" rel="noopener">16 minutes</a> to <a href="https://dashboard.cypress.io/#/projects/6a92uk/runs/3276/specs" target="_blank" rel="noopener">2 minutes</a>.</p><p><strong>Before</strong></p><p><img src="/blog/images/parallel-or-not/1-machine.png" alt="1 machine"></p><p><strong>After</strong></p><p><img src="/blog/images/parallel-or-not/9-machines.png" alt="9 machines"></p><p>This was great improvement, yet there was a problem. Often all 9 machines would be <em>locked up</em> running tests for code submitted by the <em>outside contributors</em> in their pull requests. Why was this happening?</p><p>To understand why all 9 machines would suddenly be busy, you need to know how continuous integration systems treat the project&#39;s environment variables like the private tokens or record keys. By default, as a security practice, CI providers do <a href="https://circleci.com/docs/2.0/oss/#build-pull-requests-from-forked-repositories" target="_blank" rel="noopener">NOT pass the environment variables to the forked pull requests</a>.</p><p><img src="/blog/images/parallel-or-not/forked-pr.png" alt="CircleCI project settings"></p><p>You can even use this fact to <a href="https://circleci.com/blog/managing-secrets-when-you-have-pull-requests-from-outside-contributors/" target="_blank" rel="noopener">stop some jobs for forked pull requests</a>.</p><p>When Cypress test runner starts the command <code>npx cypress run --record --parallel</code> and the variable <code>CYPRESS_RECORD_KEY</code> is undefined, the test runner detects it and <em>runs all the tests</em>. So you, the project owner still get the test status: passes or fails, yet the private record key is not exposed to the untrusted 3rd party.</p><p>The test runner shows the <a href="https://github.com/cypress-io/cypress/blob/4b060362e7495af963dc636664ea45317de58642/packages/server/lib/errors.coffee#L398" target="_blank" rel="noopener">following error message</a> in the terminal, before running all tests:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Warning: It looks like you are trying to record this run from a forked PR.</span><br><span class="line">The &apos;Record Key&apos; is missing. Your CI provider is likely not passing private</span><br><span class="line">environment variables to builds from forks.</span><br><span class="line">These results will not be recorded.</span><br><span class="line">This error will not alter the exit code.</span><br></pre></td></tr></table></figure><p>So all forked pull requests to Spectrum project used all 9 machines to run all Cypress tests files <em>on each machine</em>, effectively using all resources.</p><h2><span id="solution">Solution</span></h2><p>I came up with the following solution to this problem. Here is the <a href="https://github.com/bahmutov/circleci-parallel-based-on-env/blob/master/circle.yml" target="_blank" rel="noopener">circle.yml</a> from the demo project <a href="https://github.com/bahmutov/circleci-parallel-based-on-env" target="_blank" rel="noopener">circleci-parallel-based-on-env</a>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># we need version 2.1. to use job parameters</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  run-it:</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">      parallelism:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">        default:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">Number</span> <span class="string">of</span> <span class="string">boxes</span> <span class="string">to</span> <span class="string">use</span> <span class="string">to</span> <span class="string">run</span> <span class="string">this</span> <span class="string">job</span></span><br><span class="line"><span class="attr">    docker:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="string">cypress/base:10</span></span><br><span class="line"><span class="attr">    parallelism:</span> <span class="string">&lt;&lt;parameters.parallelism&gt;&gt;</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">echo</span> <span class="string">"runs with parallelism = &lt;&lt;parameters.parallelism&gt;&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  after-tests:</span></span><br><span class="line"><span class="attr">    docker:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="string">cypress/base:10</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">echo</span> <span class="string">"all good"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">  main:</span></span><br><span class="line">    <span class="comment"># see how to filter jobs in workflow per branch</span></span><br><span class="line">    <span class="comment"># https://circleci.com/docs/2.0/configuration-reference/#jobs-1</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="attr">      - run-it:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">parallel</span> <span class="string">build</span> <span class="string">job</span></span><br><span class="line">          <span class="comment"># pass parameter to the job</span></span><br><span class="line"><span class="attr">          parallelism:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">          filters:</span></span><br><span class="line"><span class="attr">            branches:</span></span><br><span class="line">              <span class="comment"># for pull requests do not run this job</span></span><br><span class="line"><span class="attr">              ignore:</span> <span class="string">/pull.*/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - run-it:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">single</span> <span class="string">build</span> <span class="string">job</span></span><br><span class="line">          <span class="comment"># pass parameter to the job</span></span><br><span class="line"><span class="attr">          parallelism:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">          filters:</span></span><br><span class="line"><span class="attr">            branches:</span></span><br><span class="line">              <span class="comment"># run pull requests with parallelism 1</span></span><br><span class="line"><span class="attr">              only:</span> <span class="string">/pull.*/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - after-tests:</span></span><br><span class="line"><span class="attr">          requires:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"parallel build job"</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"single build job"</span></span><br></pre></td></tr></table></figure><p>The above configuration file does not use Cypress, but shows in principle how you can configure the same job to run in parallel, using as many machines as you can for your own commits. At the same time the outside pull requests will only run on a single machine. Let me go through the configuration source block by block.</p><h3><span id="the-test-job-definition">The test job definition</span></h3><p>Our test job takes a parameter that specifies how many machines it should run on</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  run-it:</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">      parallelism:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">        default:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">Number</span> <span class="string">of</span> <span class="string">boxes</span> <span class="string">to</span> <span class="string">use</span> <span class="string">to</span> <span class="string">run</span> <span class="string">this</span> <span class="string">job</span></span><br><span class="line"><span class="attr">    docker:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="string">cypress/base:10</span></span><br><span class="line"><span class="attr">    parallelism:</span> <span class="string">&lt;&lt;parameters.parallelism&gt;&gt;</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">echo</span> <span class="string">"runs with parallelism = &lt;&lt;parameters.parallelism&gt;&gt;"</span></span><br></pre></td></tr></table></figure><h3><span id="branch-filters">Branch filters</span></h3><p>CircleCI allows you to configure jobs to run for <a href="https://circleci.com/docs/2.0/configuration-reference/#filters-1" target="_blank" rel="noopener">some branches, but not for others</a>. For example, if we want to run a job in a workflow only for the <code>master</code> branch, we can write a workflow like</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">  main:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="attr">      - run-it:</span></span><br><span class="line"><span class="attr">          filters:</span></span><br><span class="line"><span class="attr">            branches:</span></span><br><span class="line"><span class="attr">              only:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>We can also <em>skip</em> a job for a branch</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">  main:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="attr">      - run-it:</span></span><br><span class="line"><span class="attr">          filters:</span></span><br><span class="line"><span class="attr">            branches:</span></span><br><span class="line">              <span class="comment"># do not run this job for branch "alpha"</span></span><br><span class="line"><span class="attr">              ignore:</span> <span class="string">alpha</span></span><br></pre></td></tr></table></figure><p><strong>Important:</strong> all pull requests from external forkes are named <code>pull/&lt;number&gt;</code> on GitHub. We can use regular expressions to filter our jobs using <code>pull</code> prefix.</p><h3><span id="one-machine-for-external-pull-requests">One machine for external pull requests</span></h3><p>For external pull requests we can run our test job with <code>parallelism: 1</code> parameter</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- run-it:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">single</span> <span class="string">build</span> <span class="string">job</span></span><br><span class="line"><span class="attr">    parallelism:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    filters:</span></span><br><span class="line"><span class="attr">      branches:</span></span><br><span class="line"><span class="attr">        only:</span> <span class="string">/pull.*/</span></span><br></pre></td></tr></table></figure><p>Great, only 1 machine gets used for external pull requests.</p><h3><span id="parallel-tests-for-internal-branches">Parallel tests for internal branches</span></h3><p>For internal branches, we want to use all available machines, and our job in this case looks like this</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- run-it:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">parallel</span> <span class="string">build</span> <span class="string">job</span></span><br><span class="line"><span class="attr">    parallelism:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">    filters:</span></span><br><span class="line"><span class="attr">      branches:</span></span><br><span class="line">        <span class="comment"># for pull requests do not run this job</span></span><br><span class="line"><span class="attr">        ignore:</span> <span class="string">/pull.*/</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> do not name your internal branch with prefix &quot;pull...&quot; or it will match the filter and will run tests serially.</p><h2><span id="github-configuration">GitHub configuration</span></h2><p>To make sure GitHub pull requests wait for the test results, we need to set a check somehow. But we have 2 jobs with two different names, and only one of them runs at a time. So how do we tell GitHub to wait for a status check for <em>one of the two</em> jobs? Here is a trick: create another dummy CircleCI job that requires both test jobs.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  after-tests:</span></span><br><span class="line"><span class="attr">    docker:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="string">cypress/base:10</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">echo</span> <span class="string">"all good"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">  main:</span></span><br><span class="line">    <span class="comment"># job "parallel build job"</span></span><br><span class="line">    <span class="comment"># job "single build job"</span></span><br><span class="line"><span class="attr">    - after-tests:</span></span><br><span class="line"><span class="attr">        requires:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">"parallel build job"</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">"single build job"</span></span><br></pre></td></tr></table></figure><p>Then on GitHub we can set this new job &quot;after-tests&quot; to be <em>required</em>.</p><p><img src="/blog/images/parallel-or-not/github-required.png" alt="Set &quot;after-tests&quot; as required GitHub check"></p><p>CircleCI is smart enough to only require the job that <em>can run</em> for that branch. Thus checks for serial job from the outside forked pull request <a href="https://github.com/bahmutov/circleci-parallel-based-on-env/pull/1" target="_blank" rel="noopener">shows</a> &quot;single build job&quot; + <strong>required</strong> &quot;after-tests&quot;.</p><p><img src="/blog/images/parallel-or-not/serial-1.png" alt="Jobs for forked pull request"></p><p>But when there is a commit to an <em>internal branch</em>, the CircleCI runs tests on several machines, and GitHub <a href="https://github.com/bahmutov/circleci-parallel-based-on-env/pull/2" target="_blank" rel="noopener">shows</a> &quot;parallel build job&quot; + again <strong>required</strong> &quot;after-tests&quot; job.</p><p><img src="/blog/images/parallel-or-not/parallel-2.png" alt="Jobs for forked pull request"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#cypressio&quot;&gt;Cypress.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-problem&quot;&gt;The problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#solution&quot;&gt;Solut
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Zeit Now v2 workflow</title>
    <link href="https://glebbahmutov.com/blog/zeit-now-v2-workflow/"/>
    <id>https://glebbahmutov.com/blog/zeit-now-v2-workflow/</id>
    <published>2019-02-07T05:00:00.000Z</published>
    <updated>2019-04-01T20:54:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>I like <a href="../tags/zeit">Zeit Now v1</a> and now there is something even more powerful - <a href="https://zeit.co/blog/now-2" target="_blank" rel="noopener">Zeit Now v2</a>. I got to admit, at first I was skeptical. But after trying to write a GitHub bot using Zeit I am excited. The Now v2 deployment process has hugely shifted how I think about my code, and how the deployment process works.</p><p>While writing the bot, I have tried to use TypeScript (mostly to avoid writing tests), and in this blog post I will show a couple of tricks I had to use in order to get my development workflow into overdrive.</p><h2><span id="basics">Basics</span></h2><p>So let&#39;s start with a GitHub hook that will receive events from our GitHub App installation. We should write a server to ... wait, stop! No, we should write the event handler, don&#39;t worry about servers. So here is our file <code>hooks/gh/index.ts</code> that should receive the events</p><figure class="highlight ts"><figcaption><span>hooks/gh/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; IncomingMessage, ServerResponse &#125; <span class="keyword">from</span> <span class="string">'http'</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (req: IncomingMessage, res: ServerResponse) =&gt; &#123;</span><br><span class="line">  <span class="comment">// handle incoming request</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> you will probably need to install TypeScript and Node type definitions with <code>npm i -D typescript @types/node</code> and initialize <code>tsconfig.json</code> with <code>npx tsc --init</code> commands.</p><p>So, how will our hook get to the cloud? All we need is to map each file we are interested in deploying to a <a href="https://zeit.co/docs/v2/deployments/builders/overview/" target="_blank" rel="noopener">builder</a>. There are static builders for serving HTML, PHP builders, Docker builders, full Express server builders, etc. But we are only interested in the default <a href="https://zeit.co/docs/v2/deployments/official-builders/node-js-now-node/" target="_blank" rel="noopener">Node builder</a>. We need TypeScript support, so we will need <code>canary</code> version as of February 2019 and an existing <code>tsconfig.json</code>.</p><figure class="highlight json"><figcaption><span>now.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"builds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"hooks/gh/index.ts"</span>,</span><br><span class="line">      <span class="attr">"use"</span>: <span class="string">"@now/node@canary"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Every time we run command <code>now</code> from the terminal it will go through the files in the <code>builds</code> list (and <code>src</code> could be a wildcard, mind blown!), and will build new lambda if there are file changes, and then will deploy it to the cloud at a new immutable url. So a single command, in a monorepo can produce hundreds of separate deploys - where the deploy is super fast, because it smartly computes what has changed for each lambda.</p><p>If we have a hundred separate lambdas, how do we provide uniform API endpoints? We can define a routing structure on top of individual deploys. For now, we are just using the file paths as the endpoints by default. For example, our hook will be accessible at some url like <code>https://folder-name-aoesid9xn.now.sh/hooks/gh</code>.</p><h2><span id="micro">Micro</span></h2><p>So our request handler needs to decode the input body, perform its magic, and then respond. For simplicity, I will use <a href="https://github.com/zeit/micro" target="_blank" rel="noopener">Zeit micro</a>.</p><figure class="highlight ts"><figcaption><span>hooks/gh/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; json, send &#125; = <span class="built_in">require</span>(<span class="string">'micro'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (req: IncomingMessage, res: ServerResponse) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> json(req)</span><br><span class="line">    <span class="comment">// do our stuff</span></span><br><span class="line">    send(res, <span class="number">200</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e.message)</span><br><span class="line">    <span class="keyword">return</span> send(res, <span class="number">400</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We <a href="https://zeit.co/blog/environment-variables-secrets" target="_blank" rel="noopener">set secret environment variables</a> and can deploy the event handler to Now cloud. We can always follow the logs to see what is going on</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now logs -f https://folder-name-aoesid9xn.now.sh</span><br></pre></td></tr></table></figure><h2><span id="local-development">Local development</span></h2><p>But what about local development? Now v2 is fast enough to keep deploying code changes, doing something on GitHub and receiving events - but that&#39;s not the best way to develop code. We need to work locally.</p><p>There is <a href="https://github.com/zeit/micro-dev" target="_blank" rel="noopener">micro-dev</a> that wraps the single event handler with an actual server, hot code reloading, etc. To use it with TypeScript we need <code>ts-node</code> and an intermediate file to register <code>.ts</code> Node hook.</p><figure class="highlight js"><figcaption><span>local/gh-hook.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'ts-node'</span>).register(&#123;</span><br><span class="line">  transpileOnly: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">require</span>(<span class="string">'../hooks/gh'</span>)</span><br></pre></td></tr></table></figure><p>We can start the local development from <code>package.json</code></p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"local:gh-hook"</span>: <span class="string">"micro-dev local/gh-hook.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is <code>micro-dev</code> in action</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ npm run <span class="built_in">local</span>:gh-hook</span><br><span class="line"></span><br><span class="line">&gt; my-folder@1.0.0 <span class="built_in">local</span>:gh-hook /my-folder</span><br><span class="line">&gt; micro-dev <span class="built_in">local</span>/gh-hook.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</span><br><span class="line">   ‚îÇ                                                  ‚îÇ</span><br><span class="line">   ‚îÇ   Micro is running!                              ‚îÇ</span><br><span class="line">   ‚îÇ                                                  ‚îÇ</span><br><span class="line">   ‚îÇ   ‚Ä¢ Local:            http://localhost:3000      ‚îÇ</span><br><span class="line">   ‚îÇ   ‚Ä¢ On Your Network:  http://10.130.4.201:3000   ‚îÇ</span><br><span class="line">   ‚îÇ                                                  ‚îÇ</span><br><span class="line">   ‚îÇ   Copied <span class="built_in">local</span> address to clipboard!             ‚îÇ</span><br><span class="line">   ‚îÇ                                                  ‚îÇ</span><br><span class="line">   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò</span><br></pre></td></tr></table></figure><p>Perfect, local server with hot reloading. But we need to get a couple of events from GitHub to know.</p><h2><span id="ngrok">ngrok</span></h2><p>Here is where <a href="http://ngrok.io" target="_blank" rel="noopener">ngrok</a> comes in. We have a team account where we have reserved a domain word. So I can start <code>npm run local:gh-hook</code> and then from another terminal run <code>ngrok http -subdomain=my-folder-bot 3000</code>. This requires authenticated <code>ngrok</code> CLI, but works immediately.</p><p>Now I have a permanent external domain that GitHub can call with events: <code>https://my-folder-bot.ngrok.io/webhook</code>, and it gets to my local event handler. And here is a cool thing: <code>ngrok</code> starts a local dashboard, where I can see each request, replay it, copy and save it into a JSON file.</p><p><img src="/blog/images/ngrok-requests.png" alt="inspect request in the ngrok dashboard"></p><h2><span id="cypress">Cypress</span></h2><p>If we have request JSON bodies, we can install <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a> test runner and use it as <a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/" target="_blank" rel="noopener">API tester with a GUI</a>. Just copy a request from GitHub and save it as a JSON <a href="https://on.cypress.io/fixture" target="_blank" rel="noopener">fixture file</a>.</p><figure class="highlight"><figcaption><span>cypress/fixtures/pr-opened.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"action"</span>: <span class="string">"opened"</span>,</span><br><span class="line">  <span class="attr">"number"</span>: <span class="number">3376</span>,</span><br><span class="line">  <span class="attr">"pull_request"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is a typical test where we load the fixture, use it as a request body and assert that the response responds with expected result</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">context(<span class="string">'Pull requests'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'finds issues mentioned'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// fixture fixes issue 3353</span></span><br><span class="line">    cy.fixture(<span class="string">'pr-opened'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">data</span> =&gt;</span> cy.request(<span class="string">'/webhook'</span>, data))</span><br><span class="line">      .its(<span class="string">'body'</span>)</span><br><span class="line">      .should(<span class="string">'equal'</span>, <span class="string">'handled opened pull request for issues 3353'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes and we can inspect each request and response in Cypress Command Log</p><p><img src="/blog/images/cy-request-test.png" alt="Cypress request inspection"></p><p>So we capture test data using <code>ngrok</code>, write simple, focused code with individual functions and let <code>now</code> package and deploy lambdas to the cloud. No need to worry about servers, complex stacks of middleware, etc.</p><p><strong>Note: ‚ö†Ô∏è</strong> adding Cypress as a dev dependency includes it in the lambda, slowing down the deploy. I have not found a way to exclude it yet.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I like &lt;a href=&quot;../tags/zeit&quot;&gt;Zeit Now v1&lt;/a&gt; and now there is something even more powerful - &lt;a href=&quot;https://zeit.co/blog/now-2&quot; target
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="zeit" scheme="https://glebbahmutov.com/blog/tags/zeit/"/>
    
      <category term="typescript" scheme="https://glebbahmutov.com/blog/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Use TypeScript With Cypress</title>
    <link href="https://glebbahmutov.com/blog/use-typescript-with-cypress/"/>
    <id>https://glebbahmutov.com/blog/use-typescript-with-cypress/</id>
    <published>2019-01-19T05:00:00.000Z</published>
    <updated>2019-05-10T13:24:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>How to write <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> end-to-end tests in TypeScript is a question that comes up again and again. Here is what you need to do step by step if you are using WebPack already. If you don&#39;t want to follow steps, just use <a href="https://github.com/bahmutov/add-typescript-to-cypress" target="_blank" rel="noopener">bahmutov/add-typescript-to-cypress</a> module.</p><p>You can find the source code for this post in <a href="https://github.com/bahmutov/use-typescript-with-cypress" target="_blank" rel="noopener">bahmutov/use-typescript-with-cypress</a> repo.</p><h2><span id="install-cypress">Install Cypress</span></h2><p>If you haven&#39;t already, install Cypress</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev cypress</span><br></pre></td></tr></table></figure><p>Open Cypress for the first time - it will scaffold <code>cypress</code> folder with examples. We don&#39;t need it and can delete it. I will replace it with a single JavaScript spec file.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'loads examples'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'https://example.cypress.io'</span>)</span><br><span class="line">  cy.contains(<span class="string">'Kitchen Sink'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Cypress runs the test and it passes</p><p><img src="/blog/images/ts-cypress/first-test-passes.png" alt="first test passes"></p><p>There is no IntelliSense yet. The global variable <code>cy</code> has type <code>any</code> according to VSCode.</p><p><img src="/blog/images/ts-cypress/no-intellisense.png" alt="no IntelliSense support"></p><p>If we add <code>@ts-check</code> comment, VSCode is complaining about unknown variable <code>cy</code>.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line">it(<span class="string">'loads examples'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'https://example.cypress.io'</span>)</span><br><span class="line">  cy.contains(<span class="string">'Kitchen Sink'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ts-cypress/ts-check.png" alt="ts-check error"></p><h2><span id="fix-intellisense-and-ts-check">Fix IntelliSense and ts-check</span></h2><p>Ok, if you want IntelliSense and <code>ts-check</code> to work - just add a single comment with reference types at the top of the JavaScript spec file, <a href="https://on.cypress.io/intelligent-code-completion" target="_blank" rel="noopener">see Cypress docs</a>.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line">it(<span class="string">'loads examples'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'https://example.cypress.io'</span>)</span><br><span class="line">  cy.contains(<span class="string">'Kitchen Sink'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>That&#39;s it. Nothing else is necessary. You now have IntelliSense and <code>ts-check</code> working.</p><p><img src="/blog/images/ts-cypress/reference-types.png" alt="with reference types comment"></p><h2><span id="typescript-spec">TypeScript Spec</span></h2><p>Let&#39;s switch from JavaScript to TypeScript. Rename <code>spec.js</code> to <code>spec.ts</code> and start using types. We don&#39;t need the reference comment or <code>@ts-check</code> directive.</p><figure class="highlight ts"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Url = <span class="built_in">string</span></span><br><span class="line">it(<span class="string">'loads examples'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url: Url = <span class="string">'https://example.cypress.io'</span></span><br><span class="line">  cy.visit(url)</span><br><span class="line">  cy.contains(<span class="string">'Kitchen Sink'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, Cypress cannot bundle the spec file.</p><p><img src="/blog/images/ts-cypress/typescript-not-working.png" alt="typescript is not working"></p><p>VSCode cannot find global variable <code>cy</code> anymore.</p><p><img src="/blog/images/ts-cypress/cannot-find-cy.png" alt="cannot find cy"></p><p>Let&#39;s fix this. We will need Webpack and Cypress Webpack preprocessor.</p><h2><span id="transpile-typescript-using-webpack">Transpile TypeScript using Webpack</span></h2><p>To transpile TS code I will use Webpack. I am following the <a href="https://webpack.js.org/guides/typescript/" target="_blank" rel="noopener">Webpack TypeScript guide</a> exactly as written.</p><p><strong>1.</strong> install tools</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack typescript ts-loader</span><br></pre></td></tr></table></figure><p><strong>2.</strong> copy <code>tsconfig.json</code> example</p><p>I will copy the <code>tsconfig.json</code> exactly as is from the Webpack TypeScript guide and save it locally.</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./dist/"</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es6"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then I will add a single <code>types</code> entry to load global <code>cypress</code> variables.</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./dist/"</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es6"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"types"</span>: [<span class="string">"cypress"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I have IntelliSense and types working in VSCode again.</p><p><img src="/blog/images/ts-cypress/fixed-types.jpeg" alt="fixed types"></p><p><strong>3.</strong> copy <code>webpack.config.js</code> example</p><p>We need <code>webpack.config.js</code> too - and again I am copying the example from the Webpack TypeScript guide as is.</p><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.ts'</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">        use: <span class="string">'ts-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.tsx'</span>, <span class="string">'.ts'</span>, <span class="string">'.js'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For Cypress transpile, the <code>entry</code> and the <code>output</code> fields do not matter, since each spec file will have its own. But the <code>ts-loader</code> and <code>resolve</code> rules are important. Now we need to configure Cypress to transpile spec files using Webpack, and not its built-in Browserify.</p><h2><span id="cypress-webpack-preprocessor">Cypress Webpack preprocessor</span></h2><p>We need to install <a href="https://github.com/cypress-io/cypress-webpack-preprocessor" target="_blank" rel="noopener">cypress-webpack-preprocessor</a> and point it at <code>webpack.config.js</code>. I am copying everything exactly as its README shows.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @cypress/webpack-preprocessor</span><br></pre></td></tr></table></figure><p>Because we have already configured Webpack and <code>ts-loader</code>, no other dependencies are necessary.</p><p>Now copy the options snippet from the README to <code>cypress/plugins/index.js</code> to configure Webpack as a preprocessor</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'@cypress/webpack-preprocessor'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">on</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="comment">// send in the options from your webpack.config.js, so it works the same</span></span><br><span class="line">    <span class="comment">// as your app's code</span></span><br><span class="line">    webpackOptions: <span class="built_in">require</span>(<span class="string">'../../webpack.config'</span>),</span><br><span class="line">    watchOptions: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on(<span class="string">'file:preprocessor'</span>, webpack(options))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Start Cypress again and the TypeScript specs will be transpiled.</p><p><img src="/blog/images/ts-cypress/transpiled-ts-spec.png" alt="transpiled TypeScript spec"></p><h2><span id="additional-features">Additional features</span></h2><p>If we try to use ES6 features in our specs, VSCode will show an error, and Cypress test will not be transpiled.</p><figure class="highlight ts"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'handles ES6 features'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    name: cy.stub().returns(<span class="string">'Joe'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> Proxy()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ts-cypress/proxy-error.png" alt="proxy error"></p><p>Go to <code>tsconfig.json</code> and change <code>target</code> property from &quot;es5&quot; to &quot;es6&quot;.</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./dist/"</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es6"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es6"</span>,</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"types"</span>: [<span class="string">"cypress"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now everything will work again and we can test how an ES6 proxy can intercept and redirect calls.</p><figure class="highlight ts"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'handles ES6 features'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    name: cy.stub().returns(<span class="string">'Joe'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> Proxy(o, &#123;</span><br><span class="line">    <span class="keyword">get</span> (target, method) &#123;</span><br><span class="line">      <span class="keyword">return</span> target.name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  expect(proxy.whatever()).to.equal(<span class="string">'Joe'</span>)</span><br><span class="line">  expect(o.name).to.have.been.calledOnce</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ts-cypress/proxy-test-passes.png" alt="proxy test passes"></p><h2><span id="intellisense-with-custom-commands-or-assertions">IntelliSense with custom commands or assertions</span></h2><p>If you extend the <code>cy</code> global object with <a href="https://on.cypress.io/custom-commands" target="_blank" rel="noopener">custom commands</a>, you also need to add their type definitions. See section <a href="https://github.com/cypress-io/cypress-example-todomvc#cypress-intellisense" target="_blank" rel="noopener">Cypress IntelliSense in <code>cypress-example-todomvc</code></a> for example.</p><p>If you write custom assertions to extend <code>should(...)</code> chainers, you can also provide type definitions for them, see recipe <a href="https://github.com/cypress-io/cypress-example-recipes#adding-chai-assertions" target="_blank" rel="noopener">Adding Chai Assertions</a>.</p><h2><span id="related">Related</span></h2><ul><li><a href="https://github.com/bahmutov/use-typescript-with-cypress" target="_blank" rel="noopener">bahmutov/use-typescript-with-cypress</a></li><li><a href="https://on.cypress.io/typescript" target="_blank" rel="noopener">Cypress TypeScript documentation</a></li><li><a href="https://www.cypress.io/blog" target="_blank" rel="noopener">Cypress blog</a></li><li><a href="../using-ts-aliases-in-cypress-tests/">Using TypeScript aliases in Cypress tests</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;How to write &lt;a href=&quot;https://www.cypress.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cypress.io&lt;/a&gt; end-to-end tests in TypeScript is a question 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="typescript" scheme="https://glebbahmutov.com/blog/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Cypress is just ...</title>
    <link href="https://glebbahmutov.com/blog/cypress-is/"/>
    <id>https://glebbahmutov.com/blog/cypress-is/</id>
    <published>2019-01-16T05:00:00.000Z</published>
    <updated>2019-03-06T17:30:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>One thing I have to repeat again and again to everyone willing to liste, is that <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a> architecture is <a href="https://on.cypress.io/key-differences" target="_blank" rel="noopener">fundamentally different</a> from Selenium or WebDriver. Cypress runs <em>right inside the browser next to your web app</em>. And Cypress is just JavaScript, like your web app (after maybe transpiling the source code). And if you know how to build a web application, you can change how Cypress looks and behaves because Cypress user interface is a web application itself. Because Cypress is also a Node application, from the tests you can jump to the operating system and do everything you might want. Let&#39;s see how it all comes together.</p><h2><span id="cypress-is-just-javascript">Cypress is just JavaScript</span></h2><p>Cypress tests are written usually in JavaScript, CoffeeScript or TypeScript. Ultimately everything gets transpiled to JavaScript, and runs in the spec iframe in the browser. Modern browsers understand modern JavaScript (and missing features <a href="../testing-es6-module-in-cypress-electron/">can be polyfilled for your tests</a>), so your tests can take advantage of it.</p><p>Take <a href="http://es6-features.org/#Proxying" target="_blank" rel="noopener">ES6 proxies</a> for example. We can use a proxy to intercept calls to the global <code>cy</code> object and create convenient methods for finding elements by <a href="https://on.cypress.io/best-practices#Selecting-Elements" target="_blank" rel="noopener">test id attribute</a>. The following code snippet comes from <a href="https://github.com/bahmutov/cypress-get-it" target="_blank" rel="noopener">cypress-get-it</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">global.cy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(global.cy, &#123;</span><br><span class="line">  <span class="keyword">get</span> (target, prop) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getting prop'</span>, prop)</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^get\w+/</span>.test(prop)) &#123;</span><br><span class="line">      <span class="keyword">const</span> words = getSomethingToWords(prop)</span><br><span class="line">      <span class="keyword">const</span> attribute = getAttribute(words)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">selector</span> =&gt;</span> &#123;</span><br><span class="line">        cy.log(<span class="string">`<span class="subst">$&#123;prop&#125;</span> "<span class="subst">$&#123;selector&#125;</span>"`</span>)</span><br><span class="line">        <span class="keyword">return</span> target.get(<span class="string">`[<span class="subst">$&#123;attribute&#125;</span>="<span class="subst">$&#123;selector&#125;</span>"]`</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> target[prop]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So when we call <code>cy.visit(&#39;...&#39;)</code> from now on, it goes to the &quot;real&quot; <a href="https://on.cypress.io/visit" target="_blank" rel="noopener"><code>cy.visit</code></a>. But if we call any method that starts with <code>cy.get...</code> then we convert the method name like <code>cy.getFooBarBaz(&quot;value&quot;)</code> to the data attribute selector and call the existing method <code>cy.get(&#39;[foo-bar-baz=&quot;value&quot;])</code>.</p><p>For page that looks like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-test-id</span>=<span class="string">"foo"</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-test</span>=<span class="string">"bar"</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">test-id</span>=<span class="string">"baz"</span>&gt;</span>baz<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>we can write method names that express actual data attributes and are easy to read</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.getDataTestId(<span class="string">'foo'</span>).should(<span class="string">'have.text'</span>, <span class="string">'foo'</span>)</span><br><span class="line">cy.getDataTest(<span class="string">'bar'</span>).should(<span class="string">'have.text'</span>, <span class="string">'bar'</span>)</span><br><span class="line">cy.getTestId(<span class="string">'baz'</span>).should(<span class="string">'have.text'</span>, <span class="string">'baz'</span>)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/cypress-is/get-it.png" alt="Successful elements"></p><p>Should you use <a href="https://github.com/bahmutov/cypress-get-it" target="_blank" rel="noopener">cypress-get-it</a>? Probably not. You better use small utility functions without any magic.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ti = <span class="function"><span class="params">s</span> =&gt;</span> <span class="string">`[data-test-id="<span class="subst">$&#123;s&#125;</span>]`</span></span><br><span class="line"><span class="keyword">const</span> t = <span class="function"><span class="params">s</span> =&gt;</span> <span class="string">`[data-test="<span class="subst">$&#123;s&#125;</span>]`</span></span><br><span class="line"><span class="keyword">const</span> i = <span class="function"><span class="params">s</span> =&gt;</span> <span class="string">`[test-id="<span class="subst">$&#123;s&#125;</span>]`</span></span><br><span class="line">cy.get(ti(<span class="string">'foo'</span>)).should(<span class="string">'have.text'</span>, <span class="string">'foo'</span>)</span><br><span class="line">cy.get(t(<span class="string">'bar'</span>)).should(<span class="string">'have.text'</span>, <span class="string">'bar'</span>)</span><br><span class="line">cy.get(i(<span class="string">'baz'</span>)).should(<span class="string">'have.text'</span>, <span class="string">'baz'</span>)</span><br></pre></td></tr></table></figure><p>You can even overwrite <a href="https://on.cypress.io" target="_blank" rel="noopener"><code>cy.get</code></a> using <a href="https://on.cypress.io/custom-commands" target="_blank" rel="noopener">custom Cypress command</a> and invent your own syntax (in addition to the built-in jQuery selectors)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// all selectors that start with "=" are going to become "data-test-id" selectors</span></span><br><span class="line">Cypress.Commands.overwrite(<span class="string">'get'</span>, (<span class="keyword">get</span>, selector) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (selector.startsWith(<span class="string">'='</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = selector.substr(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> s = <span class="string">`[data-test-id="<span class="subst">$&#123;value&#125;</span>"]`</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(s)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(selector)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You have a choice, because it is just JavaScript.</p><h2><span id="cypress-runs-in-the-browser">Cypress runs in the browser</span></h2><p>Cypress is controlling a real browser when it runs your tests. In the browser window, there are 2 iframes: app iframe and spec iframe. The app iframe is holding the web application. The spec iframe loads the bundled test code.</p><p><img src="/blog/images/cypress-is/cypress-iframes.png" alt="Cypress architecture"></p><p>The spec iframe has no width or height, since it has no visual elements. Instead it sends all events that happen during a test to the top window where Cypress web application is drawing the Command Log. You can open DevTools and inspec the iframes yourself.</p><p><img src="/blog/images/cypress-is/iframes.png" alt="Iframes in the elements panel"></p><p>The most immediate result of this architecture besides <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/" target="_blank" rel="noopener">being able to control application directly via app actions</a>, is that the test code <em>can modify the Cypress user interface</em>. Literally, your spec code can even <a href="../cypress-jump/">use JSX right away</a> because Cypress UI is a React application and our browserify bundler transpiles JSX.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'react-dom'</span>)</span><br><span class="line">it(<span class="string">'injects dynamic React component and it works'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>)</span><br><span class="line">  cy.get(<span class="string">'#app'</span>).then(<span class="function"><span class="params">el$</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> welcomeGleb = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">"Gleb"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    ReactDOM.render(welcomeGleb, el$[0])</span></span><br><span class="line"><span class="xml">  &#125;)</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure><p>Once you realize that the spec JavaScript code can control the web application it is running in, the world is your oyster. For example, you will no longer need to wait for the Cypress dev team to add color theme support. You can just <a href="https://www.cypress.io/blog/2018/10/11/halloween-theme/" target="_blank" rel="noopener">do it in user space</a>.</p><p><img src="/blog/images/cypress-is/halloween.png" alt="Cypress Halloween theme"></p><p>Find the source code and two dark color themes in <a href="https://github.com/bahmutov/cypress-dark" target="_blank" rel="noopener">cypress-dark</a>.</p><h2><span id="cypress-has-node-backend">Cypress has Node backend</span></h2><p>Cypress tests are running in the browser, but can call the backend code that runs on Node using <a href="https://on.cypress.io/task" target="_blank" rel="noopener"><code>cy.task</code></a> command. Anything you might want to do on the host system can be done from Node. Read and write files, work with a database, send smoke signals - anything Node can do, <a href="../powerful-cy-task/">your tests can do too</a>.</p><p>Let&#39;s put everything we just saw together. Running a single test, or skipping a test from the Cypress UI has been a common feature request. But do we need to change the core of the test runner to be able to do it? Can we do it ourselves (in a hacky way)? We want:</p><ul><li>when all tests have finished, put a button &quot;Skip&quot; next to each test name in the Command Log</li><li>when a user clicks on &quot;Skip&quot; button, we can read the spec file and change it by adding <code>it.skip</code> for that test</li><li>save the changed file on disk, and Cypress will pick up changes, rerunning the tests</li></ul><p>So let&#39;s do this. You can find the solution in <a href="https://github.com/bahmutov/cypress-skip-and-only-ui" target="_blank" rel="noopener">cypress-skip-and-only-ui</a> repo. Drawing buttons after all tests have finished is somewhat tricky because we have to compute the full test title from UI elements by walking through the DOM.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">after(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// finds the root node of all tests from Mocha runnables</span></span><br><span class="line">  <span class="keyword">const</span> runnable = cy.state(<span class="string">'runnable'</span>)</span><br><span class="line">  <span class="keyword">const</span> root = getRootSuite(runnable)</span><br><span class="line">  <span class="keyword">const</span> titles = getTests(root)</span><br><span class="line"></span><br><span class="line">  $.find(<span class="string">'.runnable-title'</span>).map(<span class="function"><span class="params">rt</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// walk through the DOM to find full title</span></span><br><span class="line">    <span class="keyword">const</span> uiTitle = findParentTitles(rt) || []</span><br><span class="line">    uiTitle.reverse()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// match test title from DOM with test titles found from the runnables</span></span><br><span class="line">    <span class="keyword">if</span> (titles.some(<span class="function"><span class="params">testTitle</span> =&gt;</span> Cypress._.isEqual(testTitle, uiTitle))) &#123;</span><br><span class="line">      <span class="comment">// add UI buttons for this test</span></span><br><span class="line">      addOnlySkipButtons(rt, uiTitle, Cypress.spec)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Find the rest of the code in <a href="https://github.com/bahmutov/cypress-skip-and-only-ui/blob/master/src/support.tsx" target="_blank" rel="noopener">src/support.tsx</a>. The final result looks like this:</p><p><img src="/blog/images/cypress-is/buttons.png" alt="skip, only and reset buttons"></p><p>When you click on a button, like &quot;skip&quot; for example, it sends a message using <code>cy.task</code> to the Node backend. The message includes the spec filename (provided by Cypress) and the full test title.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onClickSkip = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">'skipTests'</span>, &#123;</span><br><span class="line">    <span class="comment">// like '/foo/bar/cypress/integration/spec.js'</span></span><br><span class="line">    filename: spec.absolute,</span><br><span class="line">    <span class="comment">// like ['several tests together', 'inner', 'has deep test']</span></span><br><span class="line">    title: title</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The Node handles the <code>skipTests</code> command by loading the spec, creating an abstract syntax tree, walking it to find <code>CallExpression</code> with <code>Identifier = &quot;it&quot;</code> and then rewriting that particular node. Hint: use module called <a href="https://github.com/substack/node-falafel#readme" target="_blank" rel="noopener">falafel</a> for this, it is great. Find the code to do this in <a href="https://github.com/bahmutov/cypress-skip-and-only-ui/blob/master/src/task-utils.ts" target="_blank" rel="noopener">src/task-utils.ts</a>. Note: I am transpiling TSX to plain <code>React.createElement</code> using TypeScript before publishing <code>cypress-skip-and-only-ui</code> to NPM, because Cypress bundler does NOT transpile <code>node_modules</code>. The final result: Cypress UI with my buttons that modify the specs on the fly, and Cypress rerunning the tests on chance.</p><p><img src="/blog/images/cypress-is/skip-and-only.gif" alt="skip, only and reset buttons in action"></p><p>Beautiful.</p><h2><span id="communicate-yourself">Communicate yourself</span></h2><p>You can create your own link between Cypress backend and the web app, for example by using web sockets. Then you can perform operations on the server, like watch files. Whenever a file changes, send a message to the Cypress web application via web socket, and the web app can react. This is the idea behind <a href="https://github.com/bahmutov/cypress-watch-and-reload" target="_blank" rel="noopener">cypress-watch-and-reload</a> - watch arbitrary source files and rerun tests on changes.</p><p><img src="/blog/images/cypress-is/reload.gif" alt="watch and reload"></p><p>You know how it reruns the tests? By clicking on the UI &quot;Rerun&quot; button of course üòÅ</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.top.document.querySelector(<span class="string">'.reporter .restart'</span>).click()</span><br></pre></td></tr></table></figure><h2><span id="conclusion">Conclusion</span></h2><p>If you know how to make a web application using JavaScript, HTML and CSS, you can:</p><ol><li>Write good end-to-end tests using <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> test runner.</li><li>Customize how Cypress looks and behaves because Cypress is just a JavaScript code running inside a web app and on Node backend.</li></ol><p>And if you are just beginning your <a href="https://hackernoon.com/beginning-your-web-development-journey-start-here-7084346f5762" target="_blank" rel="noopener">web development journey</a>, take a look at Cypress <a href="https://on.cypress.io/tutorials" target="_blank" rel="noopener">testing tutorials</a>. They will help you get better at both testing and at web development in general.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One thing I have to repeat again and again to everyone willing to liste, is that &lt;a href=&quot;https://www.cypress.io&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t help me say No</title>
    <link href="https://glebbahmutov.com/blog/dont-help-me-say-no/"/>
    <id>https://glebbahmutov.com/blog/dont-help-me-say-no/</id>
    <published>2019-01-12T05:00:00.000Z</published>
    <updated>2019-01-14T14:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>In the past 6 years I have been on the hiring side of things. I have read a thousand resumes and have interviewed probably more than a hundred engineers, both senior, junior and interns, and have seen common mistakes that cost people an invitation to even the first interview. In this post I will try to summarize the common mistakes and give advice how to avoid them.</p><h2><span id="it-is-a-filter">It is a filter</span></h2><p>First, you need to remember, that when a company like <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress.io</a> advertises a <a href="https://www.cypress.io/jobs/" target="_blank" rel="noopener">job</a>, we receive a large number of resumes, approximately 10 - 50 applications in the first month per job posting. Thus our primary task is to filter applications <em>quickly</em> to just 2-8 promising candidates we want to interview. I don&#39;t feel bad about rejecting candidates, because I know that the market is hot and the applicant will find something else. Still, if you really want to work at this particular job, you probably want to avoid silly mistakes, right?</p><p>Here are the common reasons for rejection</p><h2><span id="a-general-resume">A general resume</span></h2><p>Yes, I understand that you are probably applying to 5, 10, 50 companies, and that you are sending the same resume to all of them. But if the resume does not describe how you can help our company that writes tools for end-to-end testing of modern web applications, I am going to reject you.</p><p>Please, take time to pick relevant skills from your experience and create resume targeted at Cypress. You can &quot;guess&quot; what experience would be relevant by looking at our open source repositories like <a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">cypress-io/cypress</a>, reading our documentation about how <a href="https://www.cypress.io/features/" target="_blank" rel="noopener">Cypress works</a>, following <a href="https://twitter.com/cypress_io" target="_blank" rel="noopener">@cypress_io on Twitter</a> and most importantly</p><blockquote><p>Reading the job posting</p></blockquote><p>Read it! We list specific requirements and responsibilities. You do NOT have to be the world-class expert on GraphQL, but when you read &quot;Explore emerging technologies like GraphQL&quot; among other job responsibilities that should give you an idea! Do not create a resume <em>just</em> for Cypress though. Create several versions of your resume - one highlighting your DevOps skills, another one highlighting front-end, another highlighting area X - and now you can apply to 50 companies, and easily get through the initial filter.</p><p>Again, this is not the keyword matching, it is not automated text filtering - a human engineer is looking at your resume to see if you can bring the skills we need. If you don&#39;t start with those skills, it will be hard for us to continue.</p><p>The main reason for long, unfocused resumes?</p><h2><span id="listing-every-little-bit-of-technology-you-have-ever-touched-in-your-resume">Listing every little bit of technology you have ever touched in your resume</span></h2><p>Really. If your resume is longer than</p><ul><li>1 page and you have less than 3 years of experience</li><li>2 pages and you have more than 3 years of experience</li></ul><p>It is an automatic rejection by me.</p><p>Look at the Cypress job posting, take your looong resume and copy just 3 - 4 main skills and tools that are relevant and create a resume with them. Take all your previous jobs and pick 1 main thing from each job that shows how you have applied those skills. Done. I will thank you.</p><p>Do you want to know how bad it is?</p><p>This might be a fluke of this particular job postings site, but go to <a href="https://resumes.indeed.com/" target="_blank" rel="noopener">https://resumes.indeed.com/</a> and search resumes for something like &quot;React&quot; or &quot;DevOps&quot; and look at the resumes. For some reason, every application we receive through <code>indeed.com</code> comes in like this (I have taken screenshots of each page and have removed job titles and locations, even if there is no personal information in this resume)</p><p><strong>Warning ‚ö†Ô∏è: you will have to scroll for a while</strong></p><p><img src="/blog/images/no/page1.png" alt="page 1"><img src="/blog/images/no/page2.png" alt="page 2"><img src="/blog/images/no/page3.png" alt="page 3"><img src="/blog/images/no/page4.png" alt="page 4"><img src="/blog/images/no/page5.png" alt="page 5"><img src="/blog/images/no/page6.png" alt="page 6"><img src="/blog/images/no/page7.png" alt="page 7"></p><p>Let&#39;s summarize what we are seeing here. 7 (SEVEN, S-E-V-E-N) pages in a resume titled &quot;DevOps&quot; with final section &quot;Skills&quot; having &quot;DevOps (less than 1 year)&quot;</p><p><img src="/blog/images/no/really.gif" alt="Really?"></p><p>I can already see the resume running for 20 pages after this particular engineer reaches 3 years of experience!</p><p>I don&#39;t know what prompts people to write resumes like this. I am certainly not reading them. And it is NOT because I am allergic to long-form prose. No. To me this resume screams</p><blockquote><p>I don&#39;t know what is important and what is not</p></blockquote><p>And I believe that if you cannot decide what is important for <em>this job position</em>, you will not be able to effectively solve problems working at <em>this job position</em>.</p><p>We have noticed that all resumes coming from <code>indeed.com</code> have this problem. So we suspect that this particular website prompts users to check boxes with skills and then creates a resume with a wall of text automatically. Not a very good strategy, but this brings me to a super important mistake people make when looking for a job.</p><p>Here is <a href="https://github.com/bahmutov/bahmutov.github.io/blob/master/gleb.bahmutov.resume.pdf" target="_blank" rel="noopener">my resume</a> - about 1.5 pages after 10 years in the industry.</p><h2><span id="using-a-recruiter">Using a recruiter</span></h2><p>Here is the sad truth about recruiters:</p><ul><li>they <a href="../rating-recruiter-pitches/">don&#39;t know what they are doing</a></li><li>they do not help me screen the candidates in any way. I am still reading the job applications the same way no matter how they arrive</li><li>they do not provide candidates that are any better than my personal network does, or candidates that apply &quot;organically&quot;</li></ul><p>But there is a <em>huge, huge, huge</em> downside to any candidate that comes through a recruiter</p><blockquote><p>This candidate is 25-35% more expensive in the first year</p></blockquote><p>That&#39;s how recruiters make money - they take a one-time commission on each candidate that gets a job. Usually the commission is a percentage of the yearly salary, and it is a pretty heavy chunk. So by going through a recruiter, who</p><ul><li>emails the candidate&#39;s resume to me</li><li>charges me $20k-$40k if I hire you</li></ul><p>you have instantly made yourself <em>super expensive</em>. Unless there is something very unique about your skills <em>for this particular job</em>, forget it. Are you looking for a front-end job coding React web applications? There are 30 people with your skills who have applied in the same week. If you are 30% more expensive than the other 29, you are not going through the initial filter.</p><p>Of course, the recruiter will not tell you about all applications that they have emailed on your behalf. Instead they will tell you about a few companies that are desperate for any candidates to come in for an interview. But then you are eliminating job positions that are highly desirable, like Cypress.</p><p>Something to think about.</p><h2><span id="not-knowing-why-you-want-to-work-at-my-company">Not knowing why you want to work at my company</span></h2><p>Here is a trick that 90% of applicants skip (and certainly all applicants coming via recruiters lack). Write cover letter / email / message when applying. One paragraph, 4 sentences - why have you applied to this particular position? How did you hear about it? Why are you excited to apply?</p><p>If you do not write this, my first email to you after I read your resume will be</p><blockquote><p>Thank you for applying to our company. Why do you want to work here?</p></blockquote><p>I am not looking for much, just a few sentences that make sense, and show that you want to work here, with this team, in this field, solving the problems we are trying to solve.</p><p>Very few applications have a &quot;cover&quot; statement (it does not have to be a letter), and having one <em>automatically</em> propels you to the top 5%. Not a bad return on 15 - 30 minute time investment.</p><p><strong>PS:</strong> good cover statements are so effective, we would internally email each other saying &quot;check out this resume, this person wrote very well why they wanted to work here&quot;. Yup, it is that rare and that effective.</p><h2><span id="bonus-applying-without-work-experience">Bonus: applying without work experience</span></h2><p>I get asked sometimes about Catch-22 situation. Every job posting needs work experience, but to get work experience you need a job first. So how do you get into a field in the first place?</p><p>Here is a secret. &quot;Work experience&quot; should really be &quot;Experience with and knowledge of tools and methods to do this particular work&quot;. So if you have never worked yet in the front-end dev position, but for example worked as a designer:</p><ul><li>make a few web apps by yourself. There are tutorials, boot camps, blog posts, etc. to guide you.</li><li>put them on GitHub</li><li>document what you have done and how to run the project in Readme</li><li>describe what you have learnt in blog posts</li></ul><p>Boom, you just proved that you can successfully develop front-end web applications, and that you can communicate effectively with other developers. So much of the daily work now happens through GitHub and writing anyway.</p><p>You are trying to break into QA field?</p><ul><li>take a sample application and write tests for it</li><li>put them on GitHub</li><li>document test cases, describe findings in Readme or blog posts</li></ul><p>Done, you have proved that you can test.</p><p>To be perfectly honest, having a well-described examples of your work that I can see and we discuss, is a <em>massive advantage</em>. I have nothing against people who do not have time to contribute to open source or have projects on GitHub to show me, but if you are just trying to break into the field - find time to do it. Make sure to organize the code, ask your friends for feedback, ask people you meet at a meetup or online for suggestions - and you will build a &quot;portfolio&quot; that will be a great substitute for work experience.</p><h2><span id="bonus-2-put-links-in-the-resume">Bonus 2: put links in the resume</span></h2><p>If you have a GitHub profile, or a personal blog or a book that you want us to see when we evaluate your resume - please, please,please put it right in the top section of the resume. Do not assume that the application system does anything with additional links you can submit with your resume. First, all links you add to your application are usually shown to us as &quot;Website&quot;, &quot;Website&quot;, &quot;Website&quot;. Second, when we forward your resume to discuss - the links are lost. Put them right front and center, so we see them <em>easily</em>. Here is <a href="https://github.com/bahmutov/bahmutov.github.io/blob/master/gleb.bahmutov.resume.pdf" target="_blank" rel="noopener">my resume</a> for example. Link to my personal website with a lot of OSS projects, blog, videos, etc - right there, under my name.</p><h2><span id="somewhat-related">Somewhat related</span></h2><ul><li><a href="../rating-recruiter-pitches/">Rating recruiter pitches</a>, and <a href="https://habr.com/post/435256/" target="_blank" rel="noopener">its Russian translation</a></li><li><a href="https://medium.com/@sharondio/an-open-letter-to-technical-recruiters-and-companies-who-are-recruiting-d9ac49793140" target="_blank" rel="noopener">An Open Letter to Technical Recruiters and Companies who are Recruiting</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the past 6 years I have been on the hiring side of things. I have read a thousand resumes and have interviewed probably more than a hu
      
    
    </summary>
    
      <category term="people" scheme="https://glebbahmutov.com/blog/categories/people/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
  </entry>
  
  <entry>
    <title>Cypress should callback</title>
    <link href="https://glebbahmutov.com/blog/cypress-should-callback/"/>
    <id>https://glebbahmutov.com/blog/cypress-should-callback/</id>
    <published>2019-01-02T05:00:00.000Z</published>
    <updated>2019-01-02T14:38:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> source code for this blog post is in <a href="https://github.com/bahmutov/cypress-should-callback" target="_blank" rel="noopener">bahmutov/cypress-should-callback</a>, see the <a href="https://github.com/bahmutov/cypress-should-callback/tree/master/cypress/integration" target="_blank" rel="noopener">spec files</a>.</p><p>Cypress has a built-in retry-ability in almost every command - a concept that still keeps blowing my mind, and makes for a great demo during my presentations. For example, here is an application that adds elements to the page one by one</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line"><span class="keyword">const</span> addTodo = <span class="function">(<span class="params">title</span>) =&gt;</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  el.innerText = title</span><br><span class="line">  app.appendChild(el)</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(addTodo(<span class="string">'first child'</span>), <span class="number">1000</span>)</span><br><span class="line">setTimeout(addTodo(<span class="string">'second child'</span>), <span class="number">2000</span>)</span><br><span class="line">setTimeout(addTodo(<span class="string">'third child'</span>), <span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>My Cypress test for this is extremely simple.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'loads 3 elements'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>)</span><br><span class="line">  cy.get(<span class="string">'#app div'</span>).should(<span class="string">'have.length'</span>, <span class="number">3</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/should-cb/3-elements.gif" alt="get command is retried with assertion until passes"></p><p>Inside each Cypress command that does not change the state of the app (like <code>get</code>, <code>find</code>) there is a retry mechanism. The command will be executed, the result passed to the assertion that follows - and if the assertion passes, then the command completes successfully. If the assertion throws an error, the command is executed again, result passes to the assertion and so on and so on - until the assertion either passes, or the default timeout of 4 seconds ends. Here is an assertion that fails on purpose, looking for 4 items, while the application only shows 3.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'#app div'</span>).should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/should-cb/failed.gif" alt="assertion fails after 4 seconds"></p><p>Imagine our test only checks for 2 items - it won&#39;t wait for 3 items to appear. The test passes as soon as the second item has been added.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'#app div'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/should-cb/2-items.gif" alt="as soon as two items appear, the assertion passes"></p><p>There is a huge variety of assertions you can use. Cypress comes with <a href="https://on.cypress.io/assertions" target="_blank" rel="noopener">Chai, Chai-Sinon and Chai-jQuery assertions</a>, and you can easily <a href="http://on.cypress.io/recipes#Adding-Chai-Assertions" target="_blank" rel="noopener">bring additional assertion libraries</a>. The best part - the <a href="https://on.cypress.io/intelligent-code-completion" target="_blank" rel="noopener">Cypress assertions do come with IntelliSense</a>, which makes writing them less of memorization and more of expressing what you want to &quot;see&quot; in the test.</p><p><img src="/blog/images/should-cb/assertion.png" alt="IntelliSense in assertion, just hover over &quot;.should&quot;"></p><h2><span id="should-callback">Should callback</span></h2><p>If built-in assertions are not enough, you can pass your own callback function with assertions. For example, what if we want to confirm the text in each of the three items that appear? We could write 3 commands with 3 assertions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'3 commands'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>)</span><br><span class="line">  cy.get(<span class="string">'#app div:nth(0)'</span>)</span><br><span class="line">    .should(<span class="string">'contain'</span>, <span class="string">'first child'</span>)</span><br><span class="line">  cy.get(<span class="string">'#app div:nth(1)'</span>)</span><br><span class="line">    .should(<span class="string">'contain'</span>, <span class="string">'second child'</span>)</span><br><span class="line">  cy.get(<span class="string">'#app div:nth(2)'</span>)</span><br><span class="line">    .should(<span class="string">'contain'</span>, <span class="string">'third child'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/should-cb/nth.gif" alt="Confirming the text in 3 items"></p><p>The test works, but the selectors are complex, and I would like to have a single assertion, rather than multiple ones. If I want a complex assertion that Cypress will use to rerun the previous command until it passes or times out - I need to pass a callback function to <code>should(cb)</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'loads 3 elements'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>)</span><br><span class="line">  cy.get(<span class="string">'#app div'</span>)</span><br><span class="line">    .should(<span class="function">(<span class="params">$div</span>) =&gt;</span> &#123;</span><br><span class="line">      expect($div.eq(<span class="number">0</span>)).to.contain(<span class="string">'first child'</span>)</span><br><span class="line">      expect($div.eq(<span class="number">1</span>)).to.contain(<span class="string">'second child'</span>)</span><br><span class="line">      expect($div.eq(<span class="number">2</span>)).to.contain(<span class="string">'third child'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I can use any <a href="https://on.cypress.io/assertions" target="_blank" rel="noopener">BDD and TDD style assertions</a> inside the callback function, or even throw my own errors.</p><p><img src="/blog/images/should-cb/should-cb.gif" alt="Should callback passing"></p><p>Notice how Cypress understands the explicit assertions we use inside the <code>should</code> callback and shows them as pending. The assertions appear one by one - as first assertion passes, then the first and second assertions start running. When element <code>&lt;div&gt;second child&lt;/div&gt;</code> appears, all 3 assertions start running, and Command Log shows them as pending. Finally, when the third item appears, all assertions are shown as passing.</p><p>Should callback is an escape hatch - a way to write very complex logic to check the state of the application&#39;s user interface or internal state.</p><h2><span id="returned-value">Returned value</span></h2><p>Note that any returned value from <code>should(cb)</code> is ignored - the subject passed to the next function is the original subject Cypress passed to the callback function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'#app div'</span>)</span><br><span class="line">  .should(<span class="function">(<span class="params">$div</span>) =&gt;</span> &#123;</span><br><span class="line">    expect($div.eq(<span class="number">0</span>)).to.contain(<span class="string">'first child'</span>)</span><br><span class="line">    expect($div.eq(<span class="number">1</span>)).to.contain(<span class="string">'second child'</span>)</span><br><span class="line">    expect($div.eq(<span class="number">2</span>)).to.contain(<span class="string">'third child'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $div.eq(<span class="number">2</span>).text() <span class="comment">// will be ignored!</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">$div</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// $div is still the original jQuery list</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>If you want to change the subject - do it in the commands running after the assertion. At this point you know that assertion is passing and the application has the right UI and state (unless the app changes right after passing the assertion).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'loads 3 elements'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>)</span><br><span class="line">  cy.get(<span class="string">'#app div'</span>)</span><br><span class="line">    .should(<span class="function">(<span class="params">$div</span>) =&gt;</span> &#123;</span><br><span class="line">      expect($div.eq(<span class="number">0</span>)).to.contain(<span class="string">'first child'</span>)</span><br><span class="line">      expect($div.eq(<span class="number">1</span>)).to.contain(<span class="string">'second child'</span>)</span><br><span class="line">      expect($div.eq(<span class="number">2</span>)).to.contain(<span class="string">'third child'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .eq(<span class="number">2</span>)</span><br><span class="line">    .invoke(<span class="string">'text'</span>)</span><br><span class="line">    .should(<span class="string">'equal'</span>, <span class="string">'third child'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/should-cb/second-text.gif" alt="Second item text"></p><h2><span id="custom-commands-with-retry">Custom commands with retry</span></h2><p>If you want to write a <a href="https://on.cypress.io/custom-commands" target="_blank" rel="noopener">custom Cypress command</a> that would retry an assertion that follows it, it&#39;s not difficult. The code snippet below comes from <a href="https://github.com/cypress-io/cypress-xpath/blob/master/src/index.js" target="_blank" rel="noopener">cypress-xpath</a> module we have written as good example.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xpath = <span class="function">(<span class="params">selector, options = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// actual function that returns elements using XPath</span></span><br><span class="line">  <span class="keyword">const</span> getValue = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> resolveValue = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// retry calling "getValue" until following assertions pass</span></span><br><span class="line">    <span class="comment">// or this command times out</span></span><br><span class="line">    <span class="keyword">return</span> Cypress.Promise.try(getValue).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> cy.verifyUpcomingAssertions(value, options, &#123;</span><br><span class="line">        onRetry: resolveValue,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> resolveValue()</span><br><span class="line">&#125;</span><br><span class="line">Cypress.Commands.add(<span class="string">'xpath'</span>, xpath)</span><br></pre></td></tr></table></figure><h2><span id="easier-custom-commands-with-cypress-pipe">Easier custom commands with cypress-pipe</span></h2><p>You can even remove all boilerplate of writing custom commands by using 3rd party module <a href="https://github.com/NicholasBoll/cypress-pipe#readme" target="_blank" rel="noopener">cypress-pipe</a>. For example if the function that returns elements is our custom plain function, it will be retried with our <code>should(cb)</code> function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference types="cypress-pipe" /&gt;</span></span><br><span class="line">it(<span class="string">'loads 3 elements'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>)</span><br><span class="line">  <span class="comment">// instead of using Cypress ".get" command</span></span><br><span class="line">  <span class="comment">// write our own function to return elements</span></span><br><span class="line">  <span class="keyword">const</span> getElements = <span class="function">(<span class="params">doc</span>) =&gt;</span></span><br><span class="line">    doc.querySelectorAll(<span class="string">'#app div'</span>)</span><br><span class="line"></span><br><span class="line">  cy.document()</span><br><span class="line">    .pipe(getElements)</span><br><span class="line">    .should(<span class="function">(<span class="params">divs</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// note that "getElements" returns plain NodeList</span></span><br><span class="line">      <span class="comment">// and not jQuery</span></span><br><span class="line">      expect(divs[<span class="number">0</span>].innerText).to.contain(<span class="string">'first child'</span>)</span><br><span class="line">      expect(divs[<span class="number">1</span>].innerText).to.contain(<span class="string">'second child'</span>)</span><br><span class="line">      expect(divs[<span class="number">2</span>].innerText).to.contain(<span class="string">'third child'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/should-cb/pipe-example.gif" alt="Custom function retried until custom should function passes"></p><p>I love using <code>cy.pipe</code> command because it allows me to compose &quot;regular&quot; functions in place in order to create a callback function. For example in the above example we get elements and then inside the <code>should(cb)</code> iterate over them to get <code>innerText</code> property. But we can use &quot;standard&quot; data transformation functions from a good functional library like <a href="https://ramdajs.com/docs/" target="_blank" rel="noopener">Ramda</a> to extract property <code>innerText</code> from a given list of items.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; compose, map, prop &#125; <span class="keyword">from</span> <span class="string">'ramda'</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">'loads 3 elements'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>)</span><br><span class="line">  <span class="comment">// instead of using Cypress ".get" command</span></span><br><span class="line">  <span class="comment">// write our own function to return elements</span></span><br><span class="line">  <span class="keyword">const</span> getElements = <span class="function">(<span class="params">doc</span>) =&gt;</span></span><br><span class="line">    doc.querySelectorAll(<span class="string">'#app div'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mapInnerText = map(prop(<span class="string">'innerText'</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getTexts = compose(mapInnerText, getElements)</span><br><span class="line"></span><br><span class="line">  cy.document()</span><br><span class="line">    .pipe(getTexts)</span><br><span class="line">    .should(<span class="function">(<span class="params">texts</span>) =&gt;</span> &#123;</span><br><span class="line">      expect(texts[<span class="number">0</span>]).to.contain(<span class="string">'first child'</span>)</span><br><span class="line">      expect(texts[<span class="number">1</span>]).to.contain(<span class="string">'second child'</span>)</span><br><span class="line">      expect(texts[<span class="number">2</span>]).to.contain(<span class="string">'third child'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the above case, we don&#39;t even need <code>should(cb)</code> with custom function, and we can use deep equality to confirm the text inside the elements.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.document()</span><br><span class="line">  .pipe(getTexts)</span><br><span class="line">  .should(<span class="string">'deep.equal'</span>, [<span class="string">'first child'</span>, <span class="string">'second child'</span>, <span class="string">'third child'</span>])</span><br></pre></td></tr></table></figure><p>We can always start with custom <code>should(cb)</code> callback function, then if we notice general data transformations, refactor it to make it simpler and &quot;standard-like&quot;. Readability and simplicity is the goal.</p><h2><span id="more-information">More information</span></h2><ul><li>See <a href="https://example.cypress.io/commands/assertions" target="_blank" rel="noopener">assertion examples</a></li><li>Read <a href="https://on.cypress.io/assertions" target="_blank" rel="noopener">Cypress assertions page</a></li><li>Read <a href="https://on.cypress.io/should" target="_blank" rel="noopener"><code>.should</code></a> documentation</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; source code for this blog post is in &lt;a href=&quot;https://github.com/bahmutov/cypress-should-callback&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Do not use NODE_ENV for staging</title>
    <link href="https://glebbahmutov.com/blog/do-not-use-node-env-for-staging/"/>
    <id>https://glebbahmutov.com/blog/do-not-use-node-env-for-staging/</id>
    <published>2018-12-29T05:00:00.000Z</published>
    <updated>2018-12-29T18:49:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>I write software locally, push it to remote Git server, where if the tests pass it gets deployed to staging environment. If the staging environment works correctly, then I will deploy the software to production. I often use <code>NODE_ENV</code> environment variable to flag these three environments. By default, the environment variable is unset and defaults to <code>development</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.env.NODE_ENV = process.env.NODE_ENV || <span class="string">'development'</span></span><br></pre></td></tr></table></figure><p>Depending on the <code>NODE_ENV</code> my program could load different settings: urls, logging parameters, server routes. Often, it is a YAML or a JSON file with environment names as keys</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"development"</span>: &#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"http://localhost:1234"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"staging"</span>: &#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"https://staging.server.com"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"production"</span>: &#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"https://server.com"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When running on staging or production, I set <code>NODE_ENV</code> variable on the server to <code>staging</code> or <code>production</code>. This value then lets my code load right config for the environment. If <code>NODE_ENV=production</code> then <code>npm install</code> and <code>npm ci</code> install production NPM dependencies. So there is a catch:</p><ul><li>On staging with <code>NODE_ENV=staging</code> <code>npm install</code> and <code>npm ci</code> will install production AND dev dependencies</li><li>Thus staging will NOT be exactly like production.</li></ul><p>Staging would run just fine if one of the dependencies was saved as dev dependency by mistake, but the same application would crash in production because that dependencies would not be present.</p><p>Modifying <code>npm install</code> call with conditional to add <code>--production</code> flag when running on staging and production would create a nasty shell command. Luckily NPM thought about this. There is an additional environment variable we can set to install only the production dependencies on staging - it is <a href="https://docs.npmjs.com/misc/config#production" target="_blank" rel="noopener"><code>NPM_CONFIG_PRODUCTION</code></a> which acts just like <code>--production</code> during install step.</p><p>But watch out! <a href="https://github.com/npm/npm/issues/14168" target="_blank" rel="noopener">Setting <code>NPM_CONFIG_PRODUCTION=true</code> during install overrides <code>NODE_ENV</code> for all npm scripts</a>, which is what NPM intended. So the server will behave differently if you call <code>node ./start.js</code> or <code>npm start</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NPM_CONFIG_PRODUCTION=true</span><br><span class="line">NODE_ENV=staging</span><br><span class="line">node ./start.js</span><br></pre></td></tr></table></figure><p>Server starts with <code>process.env.NODE_ENV=staging</code> value. But if you have NPM script <code>start</code> that does the same in <code>package.json</code> the result will be different.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node ./start.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NPM_CONFIG_PRODUCTION=true</span><br><span class="line">NODE_ENV=staging</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>Server starts with <code>process.env.NODE_ENV=production</code> value!</p><p>We got burnt by this once - good thing we have noticed error reports from <code>staging</code> being written to the production dashboard, and figured why the staging server was running against <em>production</em> before any production data was corrupted.</p><p>There are two solutions.</p><p><strong>1.</strong> Override <code>process.env.NODE_ENV</code> in every entry point with a different variable like <code>FORCE_NODE_ENV</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">process.env.NODE_ENV =</span><br><span class="line">  process.env.FORCE_NODE_ENV || process.env.NODE_ENV || <span class="string">'development'</span></span><br></pre></td></tr></table></figure><p>You have to be 100% sure that <em>every</em> script - <code>start.js</code>, <code>knex.js</code>, <code>db/migrations.js</code> goes through the same override first. Otherwise some script might still be executed against production, which is ... less than ideal.</p><p><strong>2.</strong> Use another variable to pick the environment settings, and leave <code>NODE_ENV</code> alone. For example, the variable <code>SETTINGS</code> could be <code>development</code>, <code>staging</code> or <code>production</code>, and <code>NODE_ENV</code> will be always be undefined or <code>production</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">process.env.SETTINGS = process.env.SETTINGS || <span class="string">'development'</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Running production-like with settings %s'</span>, process.env.SETTINGS)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The second method is my preferred one - but it might not be supported by every config-loading library. So find a config library that does allow you to specify a different variable from <code>NODE_ENV</code>. For example <a href="https://github.com/lorenwest/node-config" target="_blank" rel="noopener">config</a> allows using <a href="https://github.com/lorenwest/node-config/wiki/Environment-Variables#node_config_env" target="_blank" rel="noopener">NODE_CONFIG_ENV</a> to specify environment to load.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I write software locally, push it to remote Git server, where if the tests pass it gets deployed to staging environment. If the staging e
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>E2E Testing json-graphql-server using Cypress</title>
    <link href="https://glebbahmutov.com/blog/e2e-testing-graphql-using-cypress/"/>
    <id>https://glebbahmutov.com/blog/e2e-testing-graphql-using-cypress/</id>
    <published>2018-12-19T05:00:00.000Z</published>
    <updated>2018-12-19T15:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post explains how Cypress.io test runner can test an application that uses GraphQL to load / save data on the server. The backend will be done using <a href="https://github.com/marmelab/json-graphql-server" target="_blank" rel="noopener">json-graphql-server</a> and the E2E tests will load that server into the browser. You can find the source code at <a href="https://github.com/bahmutov/todo-graphql-example" target="_blank" rel="noopener">https://github.com/bahmutov/todo-graphql-example</a>. Let&#39;s start.</p><!-- toc --><ul><li><a href="#graphql-backend">GraphQL backend</a></li><li><a href="#application-frontend">Application frontend</a></li><li><a href="#first-test">First test</a></li><li><a href="#continuous-integration">Continuous Integration</a></li><li><a href="#testing-the-loading-message">Testing the loading message</a></li><li><a href="#adding-todo-mutation">Adding Todo mutation</a></li><li><a href="#network-control-limits">Network control limits</a></li><li><a href="#run-json-graphql-server-in-the-browser">Run json-graphql-server in the browser</a></li><li><a href="#testing-graphql-logic">Testing GraphQL logic</a></li><li><a href="#reset-fetch-mock-on-page-reload">Reset fetch mock on page reload</a></li><li><a href="#related-info">Related info</a></li></ul><!-- tocstop --><h2><span id="graphql-backend">GraphQL backend</span></h2><p>My demo application is a regular <a href="http://todomvc.com/" target="_blank" rel="noopener">TodoMVC</a> application with React frontend and GraphQL backend. To simplify the backend programming, I am using <a href="https://github.com/marmelab/json-graphql-server" target="_blank" rel="noopener">json-graphql-server</a>. The entire &quot;database&quot; file <code>db.js</code> has only 2 todo items initially</p><figure class="highlight js"><figcaption><span>db.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  todos: [</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      title: <span class="string">'use GraphQL'</span>,</span><br><span class="line">      completed: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="number">2</span>,</span><br><span class="line">      title: <span class="string">'write React frontend'</span>,</span><br><span class="line">      completed: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Running <code>json-graphql-server db.js</code> gives me instantly a GraphQL API. I can open <code>localhost:3000</code> and play with GraphQL queries. For example to load all todo items:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  allTodos &#123;</span><br><span class="line">    id,</span><br><span class="line">    title,</span><br><span class="line">    completed</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>which returns JSON response</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"allTodos"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"use GraphQL"</span>,</span><br><span class="line">        <span class="attr">"completed"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"write React frontend"</span>,</span><br><span class="line">        <span class="attr">"completed"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If I accidentally try to reference an invalid field, the response will contain &quot;errors&quot; list</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  allTodos &#123;</span><br><span class="line">    nope,</span><br><span class="line">    title,</span><br><span class="line">    completed</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"errors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"Cannot query field \"nope\" on type \"Todo\"."</span>,</span><br><span class="line">      <span class="attr">"locations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"line"</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"column"</span>: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="application-frontend">Application frontend</span></h2><p>To write frontend to my application I picked React with <a href="https://github.com/apollographql/apollo-client#readme" target="_blank" rel="noopener">apollo-boost</a> and <a href="https://github.com/apollographql/react-apollo#readme" target="_blank" rel="noopener">react-apollo</a>. To serve the application I will use <a href="https://github.com/parcel-bundler/parcel#readme" target="_blank" rel="noopener">Parcel bundler</a>.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"json-graphql-server db.js"</span>,</span><br><span class="line">    <span class="attr">"app"</span>: <span class="string">"parcel serve src/index.html"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>src/index.html</code> just includes placeholder element with <code>id=root</code> and <code>index.js</code> bundle.</p><figure class="highlight html"><figcaption><span>src/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>GraphQL TodoMVC Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todoapp"</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'todomvc-app-css/index.css'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"></span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById('root'))</span></span><br></pre></td></tr></table></figure><p>The &quot;App&quot; component instantiates the Apollo client and inserts it into React system as a provider.</p><figure class="highlight js"><figcaption><span>src/App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ApolloClient <span class="keyword">from</span> <span class="string">'apollo-boost'</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ApolloProvider &#125; <span class="keyword">from</span> <span class="string">'react-apollo'</span></span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./containers/Header'</span></span><br><span class="line"><span class="keyword">import</span> MainSection <span class="keyword">from</span> <span class="string">'./containers/MainSection'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> ApolloClient(&#123;</span><br><span class="line">  uri: <span class="string">'http://localhost:3000'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;ApolloProvider client=&#123;client&#125;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">      &lt;MainSection /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>ApolloProvider&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><p>The markup of the app mostly follows <a href="https://github.com/cypress-io/cypress-example-recipes#testing-redux-store" target="_blank" rel="noopener">TodoMVC with Redux</a> code from <a href="https://www.cypress.io/blog/2018/11/14/testing-redux-store/" target="_blank" rel="noopener">Testing Redux Store</a> blog post I have written earlier. The <a href="https://github.com/bahmutov/todo-graphql-example/blob/5399de05c9cb24ffda18b5549043cc8a6faeb933/src/Todos.jsx" target="_blank" rel="noopener">Todos.jsx</a> is fetching the initial list of Todo items for example, and then creating a pure functional component <code>TodoItem.jsx</code> for each returned item.</p><figure class="highlight jsx"><figcaption><span>src/Todos.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Todos = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Query</span><br><span class="line">    query=&#123;gql<span class="string">`</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        allTodos &#123;</span></span><br><span class="line"><span class="string">          id</span></span><br><span class="line"><span class="string">          title</span></span><br><span class="line"><span class="string">          completed</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span>&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;(&#123; loading, error, data &#125;) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (loading) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Error :(<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;ul className=<span class="string">'todo-list'</span>&gt;</span><br><span class="line">          &#123;data.allTodos.map(<span class="function"><span class="params">todo</span> =&gt;</span> (</span><br><span class="line">            &lt;TodoItem todo=&#123;todo&#125; key=&#123;todo.id&#125; /&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Query&gt;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Todos</span><br></pre></td></tr></table></figure><p>If we start the GraphQL backend and the application, and browse to <code>localhost:1234</code> we can see the initial items.</p><p><img src="/blog/images/e2e-testing-graphql-using-cypress/initial-load.png" alt="Initial todos"></p><p>You can see that the app renders the loaded items correctly, and that there is the correct GraphQL query at the start of the application.</p><h2><span id="first-test">First test</span></h2><p>Let us confirm that our application renders the initial list of Todos correctly. I will use <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> to write my end-to-end tests. First, because it is <a href="../tags/cypress">incredibly powerful</a>. Second, because I spent last year and a half making it more powerful and developer-friendly.</p><p>I will install Cypress test runner using <code>npm i -D cypress</code> and will write my first test - just checking if two items load initially. You can find this code in <a href="https://github.com/bahmutov/todo-graphql-example/pull/5" target="_blank" rel="noopener">this pull request</a></p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'loads 2 items'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>A few notes about the above test code</p><ul><li>I have added the special comment <code>/// &lt;reference types=&quot;cypress&quot; /&gt;</code> that allows editors that understand this comment syntax (like VSCode, WebStorm) to load TypeScript definitions included with Cypress NPM module. Then if I hover over Cypress commands, I get to see code completion and documentation. For example when I am hovering over <code>should(&#39;have.length&#39;, 2)</code> assertion, VSCode editor shows information about this specific assertion. <a href="https://on.cypress.io/intelligent-code-completion" target="_blank" rel="noopener">More information</a>.</li></ul><p><img src="/blog/images/e2e-testing-graphql-using-cypress/comment-should-have-length.png" alt="Intelligent help"></p><ul><li>The test visits <code>/</code> url, because I have placed the <code>http://localhost:1234</code> base url in <code>cypress.json</code> <a href="https://on.cypress.io/configuration" target="_blank" rel="noopener">settings file</a></li></ul><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:1234"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>The test passes, all seems good</li></ul><p><img src="/blog/images/e2e-testing-graphql-using-cypress/two-items-test.png" alt="Two items test"></p><h2><span id="continuous-integration">Continuous Integration</span></h2><p>Before writing any more tests, I will set up continuous integration server to make sure each commit is fully tested. There are <a href="https://on.cypress.io/ci" target="_blank" rel="noopener">Cypress CI examples</a> for many systems, but the simplest one to use is <a href="https://slides.com/bahmutov/circleci-cypress-orb" target="_blank" rel="noopener">via Cypress CircleCI Orb</a>. I will add the repo <code>bahmutov/todo-graphql-example</code> to CircleCI build and will drop this <code>circle.yml</code> file into my repo</p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line"><span class="attr">  cypress:</span> <span class="string">cypress-io/cypress@1.2.0</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cypress/run</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> in order to use 3rd party orbs (like the Cypress CircleCI Orb), you need to go to the organization (or user) Security settings on CircleCI page and enable this setting</p><p><img src="/blog/images/e2e-testing-graphql-using-cypress/enable-3rd-party-orbs.png" alt="Two items test"></p><p>The configuration file uses the [Cypress Circle Orb][cypress orb registry] that comes from CircleCI registry. Because I am using a specific version <a href="mailto:`cypress-io/cypress@1.2.0" target="_blank" rel="noopener">`cypress-io/cypress@1.2.0</a><code>of the orb, I am isolated from any configuration changes until I decide to upgrade the orb. The orb takes care of installing Cypress, caching its binary and running</code>cypress run` command - I don&#39;t have to configure these things from my project!</p><p>Hmm, but how will the CI know that it needs to</p><ul><li>start GraphQL endpoint with <code>npm start</code> command</li><li>then start the application using <code>npm run app</code> and wait for port 1234 to respond</li><li>before running Cypress tests?</li></ul><p>To start the server in the background before running the tests, and wait for port 1234 to respond, we can use <a href="https://github.com/cypress-io/circleci-orb/blob/28c03c35dbc7c60295da447cdfef4179b109e910/docs/jobs.md#run" target="_blank" rel="noopener">parameters defined in the Cypress orb</a>. I will add another script to the <code>package.json</code> to start both the GraphQL endpoint and the bundler</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"json-graphql-server db.js"</span>,</span><br><span class="line">    <span class="attr">"app"</span>: <span class="string">"parcel serve src/index.html"</span>,</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"npm start &amp; npm run app"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The Circle config will start the server (in the background) and wait for local url <code>http://localhost:1234</code> to respond before starting the Cypress tests</p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line"><span class="attr">  cypress:</span> <span class="string">cypress-io/cypress@1.2.0</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cypress/run:</span></span><br><span class="line"><span class="attr">          start:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">server</span></span><br><span class="line"><span class="attr">          wait-on:</span> <span class="attr">http://localhost:1234</span></span><br></pre></td></tr></table></figure><p>Great, the test passes on CircleCI - see the result here <a href="https://circleci.com/gh/bahmutov/todo-graphql-example/3" target="_blank" rel="noopener">todo-graphql-example/3</a></p><h2><span id="testing-the-loading-message">Testing the loading message</span></h2><p>When <code>Todos.jsx</code> is loading the initial set of todos, it is showing the &quot;Loading...&quot; message.</p><figure class="highlight jsx"><figcaption><span>Todos.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Todos = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Query</span><br><span class="line">    query=&#123;gql<span class="string">`</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        allTodos &#123;</span></span><br><span class="line"><span class="string">          id</span></span><br><span class="line"><span class="string">          title</span></span><br><span class="line"><span class="string">          completed</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span>&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;(&#123; loading, error, data &#125;) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (loading) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Error :(<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><p>Let us test it. We need to delay the server response somehow in order for this message to appear. We need <a href="https://on.cypress.io/network-requests" target="_blank" rel="noopener">network control</a> which Cypress provides <em>except for <code>window.fetch</code></em> calls currently. The network rewrite is <a href="https://github.com/cypress-io/cypress/issues/687" target="_blank" rel="noopener">in progress</a> which will <a href="https://github.com/cypress-io/cypress/issues/95" target="_blank" rel="noopener">add support for <code>window.fetch</code> spying and stubbing</a>. For now, we can force GraphQL request from Apollo client to drop from <code>window.fetch</code> to using <code>XMLHttpRequest</code> protocol that is stubbed. Let us do this</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it.only(<span class="string">'shows loading message'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">    onBeforeLoad (win) &#123;</span><br><span class="line">      <span class="comment">// force Apollo client to use XHR</span></span><br><span class="line">      <span class="keyword">delete</span> win.fetch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice in the screenshot below that when Apollo client uses XHR to make GraphQL request, Cypress &quot;sees&quot; it. The XHR details appear in the Command Log on the left, and if you click on the <code>(XHR)</code> command it shows the details of the call in the DevTools console.</p><p><img src="/blog/images/e2e-testing-graphql-using-cypress/graphql-xhr.png" alt="XHR GraphQL call"></p><p>Also, do you see that Cypress is showing DOM snapshot when you click on the <code>(XHR)</code> command? Because Cypress takes DOM snapshots while running the tests, it can travel back in time and show how the application looked during each command of the test. In this case, our application did in fact show &quot;Loading...&quot; message, but it was kind of quick. Let us delay the server response and confirm that the user interface shows this message. To delay the response I need to stub it, and return some mock data. I will use <a href="https://on.cypress.io/route" target="_blank" rel="noopener"><code>cy.route</code></a> for it</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">it.only(<span class="string">'shows loading message'</span>, () =&gt; &#123;</span><br><span class="line">  cy.server()</span><br><span class="line">  cy.route(&#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    url: <span class="string">'http://localhost:3000/'</span>,</span><br><span class="line">    delay: <span class="number">1000</span>,</span><br><span class="line">    status: <span class="number">200</span>,</span><br><span class="line">    response: &#123;</span><br><span class="line">      errors: [],</span><br><span class="line">      data: &#123;</span><br><span class="line">        allTodos: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">    onBeforeLoad (win) &#123;</span><br><span class="line">      <span class="comment">// force Apollo client to use XHR</span></span><br><span class="line">      <span class="keyword">delete</span> win.fetch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">'.main'</span>, <span class="string">'Loading...'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes - and I can check that the <code>Loading...</code> goes away too. Because React re-renders the affected DOM tree, the element &quot;Loading...&quot; should disappear from the DOM</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">cy.contains(<span class="string">'.main'</span>, <span class="string">'Loading...'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line"><span class="comment">// and then it should disappear from the DOM</span></span><br><span class="line">cy.contains(<span class="string">'.main'</span>, <span class="string">'Loading...'</span>).should(<span class="string">'not.exist'</span>)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/e2e-testing-graphql-using-cypress/testing-loading.png" alt="Loading shows up and disappears"></p><p><strong>note:</strong> checking the loader using its text content is less maintainable than using a test data attribute. See <a href="https://on.cypress.io/best-practices#Selecting-Elements" target="_blank" rel="noopener">Selecting Elements</a> section in our <a href="https://on.cypress.io/best-practices" target="_blank" rel="noopener">Best Practices</a> guide.</p><p>While we are working with XHR stub, we can move the data to be returned by the stub out from the spec file and into its own fixture file. I will create <code>cypress/fixtures/empty-list-no-errors.json</code> with the response</p><figure class="highlight json"><figcaption><span>cypress/fixtures/empty-list-no-errors.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"errors"</span>: [],</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"allTodos"</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the <code>cy.route</code> response I can use the name of the fixture file directly</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cy.route(&#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  url: <span class="string">'http://localhost:3000/'</span>,</span><br><span class="line">  delay: <span class="number">1000</span>,</span><br><span class="line">  status: <span class="number">200</span>,</span><br><span class="line">  response: <span class="string">'fixture:empty-list-no-errors'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes the same way.</p><h2><span id="adding-todo-mutation">Adding Todo mutation</span></h2><p>Let us add a new todo. We will wire the <code>TodoTextInput.jsx</code> component to send a mutation to the GraphQL endpoint.</p><figure class="highlight js"><figcaption><span>TodoTextInput.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gql <span class="keyword">from</span> <span class="string">'graphql-tag'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Mutation &#125; <span class="keyword">from</span> <span class="string">'react-apollo'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// utility to generate random ids for new items</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomId</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Number</span>(</span><br><span class="line">    <span class="built_in">Math</span>.random()</span><br><span class="line">      .toString()</span><br><span class="line">      .substr(<span class="number">2</span>, <span class="number">10</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GraphQL mutation, we expect just "id" back</span></span><br><span class="line"><span class="keyword">const</span> ADD_TODO = gql<span class="string">`</span></span><br><span class="line"><span class="string">  mutation AddTodo($id: ID!, $title: String!) &#123;</span></span><br><span class="line"><span class="string">    createTodo(id: $id, title: $title, completed: false) &#123;</span></span><br><span class="line"><span class="string">      id</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// now the component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoTextInput</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleSubmit (addTodo, e) &#123;</span><br><span class="line">    <span class="keyword">const</span> text = e.target.value.trim()</span><br><span class="line">    <span class="keyword">if</span> (e.which === <span class="number">13</span>) &#123;</span><br><span class="line">      addTodo(&#123;</span><br><span class="line">        variables: &#123;</span><br><span class="line">          id: randomId(),</span><br><span class="line">          title: text</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.props.newTodo) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">text</span>: <span class="string">''</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="comment">// extract mutation from GraphQL client</span></span><br><span class="line">      &lt;Mutation mutation=&#123;ADD_TODO&#125;&gt;</span><br><span class="line">        &#123;addTodo =&gt; (</span><br><span class="line">          &lt;input</span><br><span class="line">            className=&#123;classnames(&#123;</span><br><span class="line">              edit: <span class="keyword">this</span>.props.editing,</span><br><span class="line">              <span class="string">'new-todo'</span>: <span class="keyword">this</span>.props.newTodo</span><br><span class="line">            &#125;)&#125;</span><br><span class="line">            type=<span class="string">'text'</span></span><br><span class="line">            placeholder=&#123;<span class="keyword">this</span>.props.placeholder&#125;</span><br><span class="line">            autoFocus</span><br><span class="line">            value=&#123;<span class="keyword">this</span>.state.text&#125;</span><br><span class="line">            onBlur=&#123;<span class="keyword">this</span>.handleBlur.bind(<span class="keyword">this</span>)&#125;</span><br><span class="line">            onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125;</span><br><span class="line">            onKeyDown=&#123;<span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>, addTodo)&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;<span class="regexp">/Mutation&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>Whenever there is <code>keyDown</code> event, if the key is Enter (<code>which: 13</code>),  we call the mutation <code>ADD_TODO</code> passed as an argument to the <code>handleSubmit</code> method. The mutation can be seen in the Network tab</p><p><img src="/blog/images/e2e-testing-graphql-using-cypress/add-todo-mutation.png" alt="AddTodo mutation"></p><p>Notice that the text of the query is sent separately from the variable values. Also notice that the application is NOT showing the new Todo item &quot;baz&quot; in the list. Because we just sent it to the server, but have not told the Apollo Client to <a href="https://blog.apollographql.com/react-graphql-tutorial-mutations-764d7ec23c15" target="_blank" rel="noopener">refresh the list</a>. The easy way to refetch the data after sending a mutation is to ... tell the client to refetch a specific query after sending a mutation!</p><p>Here is our query to get all todo items - I am exporting it now:</p><figure class="highlight jsx"><figcaption><span>Todos.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ALL_TODOS = gql<span class="string">`</span></span><br><span class="line"><span class="string">  query allTodos &#123;</span></span><br><span class="line"><span class="string">    allTodos &#123;</span></span><br><span class="line"><span class="string">      id</span></span><br><span class="line"><span class="string">      title</span></span><br><span class="line"><span class="string">      completed</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>And I am adding <code>refetchQueries</code> property to the <code>Mutation</code> node</p><figure class="highlight jsx"><figcaption><span>TodoTextInput.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Mutation &#125; <span class="keyword">from</span> <span class="string">'react-apollo'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ALL_TODOS &#125; <span class="keyword">from</span> <span class="string">'../Todos'</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">render () &#123;</span><br><span class="line">  &lt;Mutation mutation=&#123;ADD_TODO&#125; refetchQueries=&#123;[&#123; <span class="attr">query</span>: ALL_TODOS &#125;]&#125;&gt;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The new item will now appear in the list when we enter it in the input field. The Network DevTools tab shows the mutation followed by the query all todos fetch.</p><p><img src="/blog/images/e2e-testing-graphql-using-cypress/mutation-then-query.png" alt="AddTodo mutation followed by AllTodos query"></p><h2><span id="network-control-limits">Network control limits</span></h2><p>Our previous tests were rudimentary. Cypress network stubbing is working in the browser by spying and stubbing the XMLHttpRequest object, and it is very limited. For example, one cannot selectively stub calls based on request body - only based on the HTTP method and url. So our stubbing can tell apart calls like these</p><ul><li><code>cy.route(&#39;GET&#39;, &#39;/todos&#39;)</code> from <code>cy.route(&#39;POST&#39;, &#39;/todos&#39;)</code> because they have different HTTP method</li><li><code>cy.route(&#39;POST&#39;, &#39;/todos&#39;)</code> from <code>cy.route(&#39;POST&#39;, &#39;/todos/1&#39;)</code> because they have different url</li></ul><p>But all GraphQL requests share the same method and url - so they all look the same to the <a href="https://on.cypress.io/route" target="_blank" rel="noopener"><code>cy.route</code></a>. Only the request bodies are different - and <code>cy.route</code> does not look at request body when matching the route üôÅ.</p><p>Future enhancement <a href="https://github.com/cypress-io/cypress/issues/687" target="_blank" rel="noopener">#687</a> will allow much more flexible stubbing, but for now we need a different work around.</p><h2><span id="run-json-graphql-server-in-the-browser">Run json-graphql-server in the browser</span></h2><p>If we have our simple GraphQL server based on JSON object using <a href="https://github.com/marmelab/json-graphql-server" target="_blank" rel="noopener">json-graphql-server</a>, then we can load the <em>same</em> server right in the browser, and mock HTTP calls directly using another library!</p><p>So, we will load the <code>json-graphql-server</code> directly from the test, and we will use <a href="http://www.wheresrhys.co.uk/fetch-mock/" target="_blank" rel="noopener">fetch-mock</a> to replace <code>window.fetch</code> inside application&#39;s iframe with a polyfill that will point at that in-browser GraphQL server.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fetchMock <span class="keyword">from</span> <span class="string">'fetch-mock'</span></span><br><span class="line"><span class="keyword">import</span> JsonGraphqlServer <span class="keyword">from</span> <span class="string">'json-graphql-server'</span></span><br><span class="line"><span class="comment">// load JSON for GraphQL server</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="built_in">require</span>(<span class="string">'../../db'</span>)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'in browser fetch mock'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">    onBeforeLoad (win) &#123;</span><br><span class="line">      <span class="keyword">const</span> server = JsonGraphqlServer(&#123; data &#125;)</span><br><span class="line">      win.fetch = fetchMock.sandbox()</span><br><span class="line">      <span class="comment">// all GraphQL queries go to this endpoint</span></span><br><span class="line">      win.fetch.post(<span class="string">'http://localhost:3000/'</span>, server.getHandler())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test works - our GraphQL server is running in the browser!</p><p><img src="/blog/images/e2e-testing-graphql-using-cypress/in-browser.png" alt="in browser GraphQL json server"></p><h2><span id="testing-graphql-logic">Testing GraphQL logic</span></h2><p>Now that we can just load our &quot;backend&quot; server right in the browser under test, we can write complex tests. But first, we should move the server setup logic into the common hook to run before each test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">    onBeforeLoad (win) &#123;</span><br><span class="line">      <span class="keyword">const</span> server = JsonGraphqlServer(&#123; data &#125;)</span><br><span class="line">      win.fetch = fetchMock.sandbox()</span><br><span class="line">      <span class="comment">// all GraphQL queries go to this endpoint</span></span><br><span class="line">      win.fetch.post(<span class="string">'http://localhost:3000/'</span>, server.getHandler())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'in browser fetch mock'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can confirm that a new item gets added to the list - all using in-browser JSON GraphQL server</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'adds an item'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">'new todo&#123;enter&#125;'</span>)</span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">3</span>)</span><br><span class="line">    .contains(<span class="string">'new todo'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/e2e-testing-graphql-using-cypress/add-todo.png" alt="Adding todo test using in-browser server"></p><p><strong>Note:</strong> our <code>beforeEach</code> contains a bug. Right now we are loading a single object <code>data</code> that the <code>JsonGraphlServer</code> will mutate if a test adds a new item for example. Thus to make the tests independent we need to clone this object before passing it to the constructor.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onBeforeLoad (win) &#123;</span><br><span class="line">  <span class="comment">// avoid mutating global data singleton</span></span><br><span class="line">  <span class="keyword">const</span> copied = Cypress._.cloneDeep(data)</span><br><span class="line">  <span class="keyword">const</span> server = JsonGraphqlServer(&#123; <span class="attr">data</span>: copied &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, let&#39;s confirm that GraphQL requests really happen when we add a new Todo item. We need a reference to the <code>win.fetch</code> mock sandbox. We can save it in the scope as <code>let fetches</code> variable.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fetches</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">    onBeforeLoad (win) &#123;</span><br><span class="line">      <span class="keyword">const</span> server = JsonGraphqlServer(&#123; data &#125;)</span><br><span class="line">      fetches = win.fetch = fetchMock.sandbox()</span><br><span class="line">      <span class="comment">// all GraphQL queries go to this endpoint</span></span><br><span class="line">      win.fetch.post(<span class="string">'http://localhost:3000/'</span>, server.getHandler())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Our test checks the <code>fetches.calls()</code> array&#39;s length after the DOM gets updated, using <code>cy.then(cb)</code> to schedule the assertion.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'tracks number of GraphQL calls'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// just loads all todos</span></span><br><span class="line">  expect(fetches.calls()).to.have.length(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">'new todo&#123;enter&#125;'</span>)</span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">3</span>)</span><br><span class="line">    .contains(<span class="string">'new todo'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// mutation to add todo + query all todos again</span></span><br><span class="line">      expect(fetches.calls()).to.have.length(<span class="number">3</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>What if we want to see and test the actual GraphQL queries from our application? No problem, we can extract the important GraphQL information from each call and assert the expected data. We just need to see what the call <code>fetches.lastCall()</code> returns. Because Cypress runs the real browser, just open the DevTools, add <code>debugger</code> keyword to pause the execution and inspect the returned value:</p><p><img src="/blog/images/e2e-testing-graphql-using-cypress/last-call.png" alt="Inspecting GraphQL call recorded by fetch mock"></p><p>Perfect, we can write a tiny helper function to extract GraphQL operation name and variables - the important parts of the query. To make accessing <code>nth</code> call easier we need a helper method, and it should make it convenient to grab calls that have happened last.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parses array returned by "fetch-mock" to get GraphQL information</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> extractGraphQL = <span class="function"><span class="params">call</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// only interested in request body from [url, body] arguments</span></span><br><span class="line">  <span class="keyword">const</span> [, request] = call</span><br><span class="line">  <span class="comment">// parse query into JSON and pick two properties</span></span><br><span class="line">  <span class="keyword">return</span> Cypress._.pick(<span class="built_in">JSON</span>.parse(request.body), [</span><br><span class="line">    <span class="string">'operationName'</span>,</span><br><span class="line">    <span class="string">'variables'</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Extracts GraphQL object from fetch-mock calls</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k index of the call to return, pass -1 to get the last call</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> nthGraphQL = <span class="function">(<span class="params">k = <span class="number">-1</span></span>) =&gt;</span></span><br><span class="line">  cy.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> calls = fetches.calls()</span><br><span class="line">    <span class="keyword">const</span> nthCall = Cypress._.nth(calls, k)</span><br><span class="line">    <span class="keyword">if</span> (!nthCall) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Cannot find GraphQL call #<span class="subst">$&#123;k&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> extractGraphQL(nthCall)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Now we can confirm the calls that our web application sends to GraphQL endpoint</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'uses expected GraphQL operations'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// during the application load, app queries all todos</span></span><br><span class="line">  nthGraphQL().should(<span class="string">'deep.equal'</span>, &#123;</span><br><span class="line">    operationName: <span class="string">'allTodos'</span>,</span><br><span class="line">    variables: &#123;&#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">'new todo&#123;enter&#125;'</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">3</span>)</span><br><span class="line">    .contains(<span class="string">'new todo'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// addTodo mutation call</span></span><br><span class="line">  nthGraphQL(<span class="number">-2</span>).should(<span class="string">'deep.equal'</span>, &#123;</span><br><span class="line">    operationName: <span class="string">'AddTodo'</span>,</span><br><span class="line">    variables: &#123;</span><br><span class="line">      title: <span class="string">'new todo'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allTodos query call</span></span><br><span class="line">  nthGraphQL(<span class="number">-1</span>).should(<span class="string">'deep.equal'</span>, &#123;</span><br><span class="line">    operationName: <span class="string">'allTodos'</span>,</span><br><span class="line">    variables: &#123;&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, the test fails - because our application generates a random ID for each item.</p><p><img src="/blog/images/e2e-testing-graphql-using-cypress/random-id.png" alt="Random ID is a problem for deep equality"></p><p>Luckily, we can make our test deterministic using the same approach as in <a href="https://www.cypress.io/blog/2017/11/28/testing-vue-web-application-with-vuex-data-store-and-rest-backend/" target="_blank" rel="noopener">this post</a>. We can simply reach into the application&#39;s context and override <code>Math.random</code> method during tests. Then each new item will get a nice deterministic id our tests can compare against.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'uses expected GraphQL operations'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// application's random generator ignores first two digits</span></span><br><span class="line">  <span class="comment">// so our fake ids will be with 100, 101, 102, ...</span></span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">10100</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .its(<span class="string">'Math'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">Math</span> =&gt;</span> &#123;</span><br><span class="line">      cy.stub(<span class="built_in">Math</span>, <span class="string">'random'</span>).callsFake(<span class="function"><span class="params">()</span> =&gt;</span> counter++)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// during the application load, app queries all todos</span></span><br><span class="line">  nthGraphQL().should(<span class="string">'deep.equal'</span>, &#123;</span><br><span class="line">    operationName: <span class="string">'allTodos'</span>,</span><br><span class="line">    variables: &#123;&#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">'new todo&#123;enter&#125;'</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">3</span>)</span><br><span class="line">    .contains(<span class="string">'new todo'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// addTodo mutation call</span></span><br><span class="line">  nthGraphQL(<span class="number">-2</span>).should(<span class="string">'deep.equal'</span>, &#123;</span><br><span class="line">    operationName: <span class="string">'AddTodo'</span>,</span><br><span class="line">    variables: &#123;</span><br><span class="line">      id: <span class="number">100</span>, <span class="comment">// id is no longer random</span></span><br><span class="line">      title: <span class="string">'new todo'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allTodos query call</span></span><br><span class="line">  nthGraphQL(<span class="number">-1</span>).should(<span class="string">'deep.equal'</span>, &#123;</span><br><span class="line">    operationName: <span class="string">'allTodos'</span>,</span><br><span class="line">    variables: &#123;&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We could even assert that the random generator stub was really called, if we want, because Cypress keeps track of all <code>cy.spy</code> and <code>cy.stub</code> methods.</p><p><img src="/blog/images/e2e-testing-graphql-using-cypress/finished-test.png" alt="Finished test"></p><h2><span id="reset-fetch-mock-on-page-reload">Reset fetch mock on page reload</span></h2><p>If we decide to test how the web application &quot;remembers&quot; the new item on window reload, we will hit a problem. Imagine we add a new test:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'shows new item after reload'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// starts with new item</span></span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">'new todo&#123;enter&#125;'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// now has 3 items</span></span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">3</span>)</span><br><span class="line">    .contains(<span class="string">'new todo'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// shows 3 items after the user reloads the page?</span></span><br><span class="line">  cy.reload()</span><br><span class="line">  <span class="comment">// still 3 items after page reload</span></span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">3</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test fails to load mocked GraphQL server - because <code>cy.reload</code> deletes our stubbed <code>window.fetch</code> method we have set in <code>cy.visit</code> call. We need to set <code>window.fetch = ...</code> again, but <code>cy.reload</code> does not take an options object with <code>onBeforeLoad</code> callback like <code>cy.visit</code>. How can we attach the mocked <code>fetch</code> to the window object?</p><p>By using <code>cy.on(&#39;window:before:load&#39;, ...)</code> event. Here is an updated test that passes</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'shows new item after reload'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// starts with new item</span></span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">'new todo&#123;enter&#125;'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// now has 3 items</span></span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">3</span>)</span><br><span class="line">    .contains(<span class="string">'new todo'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// shows 3 items after the user reloads the page?</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// currently deletes the window.fetch mock</span></span><br><span class="line">  <span class="comment">// so we need to set it again before the window loads</span></span><br><span class="line">  cy.on(<span class="string">'window:before:load'</span>, win =&gt; &#123;</span><br><span class="line">    <span class="comment">// fetches was created in `cy.visit` callback</span></span><br><span class="line">    win.fetch = fetches</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.reload()</span><br><span class="line">  <span class="comment">// still 3 items after page reload</span></span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">3</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/e2e-testing-graphql-using-cypress/reload.png" alt="Reload test"></p><p>There is an entire <a href="https://on.cypress.io/catalog-of-events" target="_blank" rel="noopener">catalogue of evens</a> in Cypress documentation.</p><h2><span id="related-info">Related info</span></h2><ul><li>source code for this post in <a href="https://github.com/bahmutov/todo-graphql-example" target="_blank" rel="noopener">bahmutov/todo-graphql-example</a> and the direct link to the <a href="https://github.com/bahmutov/todo-graphql-example/blob/master/cypress/integration/spec.js" target="_blank" rel="noopener">cypress/integration/spec.js</a> file</li><li>my other <a href="../tags/graphql/">GraphQL blog posts</a></li><li><a href="https://www.cypress.io/blog/2018/11/14/testing-redux-store/" target="_blank" rel="noopener">Testing Redux Store</a></li><li><a href="https://www.cypress.io/blog/2017/11/28/testing-vue-web-application-with-vuex-data-store-and-rest-backend/" target="_blank" rel="noopener">Testing Vue web applications with Vuex data store &amp; REST backend</a></li><li><a href="https://github.com/marmelab/json-graphql-server" target="_blank" rel="noopener">json-graphql-server</a> is super useful for quickly making a demo GraphQL server based on simple data</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog post explains how Cypress.io test runner can test an application that uses GraphQL to load / save data on the server. The backe
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="graphql" scheme="https://glebbahmutov.com/blog/tags/graphql/"/>
    
  </entry>
  
  <entry>
    <title>Functional middleware</title>
    <link href="https://glebbahmutov.com/blog/functional-middleware/"/>
    <id>https://glebbahmutov.com/blog/functional-middleware/</id>
    <published>2018-12-03T05:00:00.000Z</published>
    <updated>2018-12-02T19:58:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>I had an Express server that was processing events from a payment system. For example, if a subscription was changed by the user, the payment system would send an event, which my server would process. The first step in every controller function was to take apart the <code>request</code> object to extract and check input parameters. If a parameter was missing or incorrect, the middleware would print a console message and return an error HTTP code. Otherwise everything would be ok, and the server would do something.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"><span class="keyword">const</span> onSubscriptionCreated = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use Ramda to safely get deep property</span></span><br><span class="line">  <span class="keyword">const</span> customer = R.path([<span class="string">'body'</span>, <span class="string">'content'</span>, <span class="string">'customer'</span>], req)</span><br><span class="line">  <span class="keyword">if</span> (!customer) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Missing customer in content'</span>, req.body)</span><br><span class="line">    <span class="keyword">return</span> res.sendStatus(<span class="number">400</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ... more checks like that</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// parameters are good</span></span><br><span class="line">  <span class="comment">// implement actual internal logic using Customer model ORM object</span></span><br><span class="line">  Customer.update(customer)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> res.sendStatus(<span class="number">200</span>)) <span class="comment">// all good</span></span><br><span class="line">    <span class="comment">// something is wrong, send error</span></span><br><span class="line">    .catch(<span class="function"><span class="params">()</span> =&gt;</span> res.sendStatus(<span class="number">500</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The same parameter logic was everywhere - checking the <code>request</code> object to have <code>body.content.customer</code> object (and all other checks) was in every middleware function. Unless I called every controller path with every combination of valid and invalid parameters, I could not get close to 100% of code coverage in my middleware tests.</p><p>Usually I would extract common code like that into its own function. But in this case the parameter check also <em>does control actions</em>. If a parameter is invalid, the code</p><ul><li>sends response status to the caller using <code>res.sendStatus(400)</code></li><li>returns from the middleware function early</li></ul><p>I could not simply factor this code out</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"><span class="keyword">const</span> getArguments = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use Ramda to safely get deep property</span></span><br><span class="line">  <span class="keyword">const</span> customer = R.path([<span class="string">'body'</span>, <span class="string">'content'</span>, <span class="string">'customer'</span>], req)</span><br><span class="line">  <span class="keyword">if</span> (!customer) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Missing customer in content'</span>, req.body)</span><br><span class="line">    <span class="comment">// hmm, this just returns from this function</span></span><br><span class="line">    <span class="comment">// not from the caller</span></span><br><span class="line">    <span class="keyword">return</span> res.sendStatus(<span class="number">400</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ... more checks like that</span></span><br><span class="line">  <span class="keyword">return</span> &#123;customer&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> onSubscriptionCreated = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// hmm, this does not work!</span></span><br><span class="line">  <span class="keyword">const</span> &#123;customer&#125; = getArguments(req, res)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// parameters are good</span></span><br><span class="line">  <span class="comment">// implement actual internal logic using Customer model ORM object</span></span><br><span class="line">  Customer.update(customer)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> res.sendStatus(<span class="number">200</span>)) <span class="comment">// all good</span></span><br><span class="line">    <span class="comment">// something is wrong, send error</span></span><br><span class="line">    .catch(<span class="function"><span class="params">()</span> =&gt;</span> res.sendStatus(<span class="number">500</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>My utility function <code>getArguments</code> needs to do both things: it should extract parameter, and &quot;flag&quot; the status. Then the caller would know - where all parameters good or not? I could implement the check in the caller using my own check, for example, by checking for <code>null</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getArguments = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use Ramda to safely get deep property</span></span><br><span class="line">  <span class="keyword">const</span> customer = R.path([<span class="string">'body'</span>, <span class="string">'content'</span>, <span class="string">'customer'</span>], req)</span><br><span class="line">  <span class="keyword">if</span> (!customer) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Missing customer in content'</span>, req.body)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ... more checks like that</span></span><br><span class="line">  <span class="keyword">return</span> &#123;customer&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> onSubscriptionCreated = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> params = getArguments(req, res)</span><br><span class="line">  <span class="keyword">if</span> (!params) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.sendStatus(<span class="number">400</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123;customer&#125; = params</span><br><span class="line">  <span class="comment">// all good</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nice, but what if <code>null</code> is an allowed value? We need something &quot;standard&quot; to avoid reinventing this wheel again and again. In functional programming encoding additional information around a value means we should return some &quot;box&quot; type that keeps the value and allows to use the value in a standard way. What do we need in our case?</p><ul><li>if parameters are good, then we need to call our <code>Customer.update(customer)...</code> code</li><li>if parameters are bad, we need to call <code>res.sendStatus(400)</code></li></ul><p>There are only two possibilities and this type is commonly called <code>Maybe</code>. I can use an implementation from <a href="https://github.com/origamitower/folktale#readme" target="_blank" rel="noopener">folktale</a>. My <code>getArguments</code> function will signal that all parameters are good by returning <code>Maybe.Just</code> object. If something is invalid, it will return <code>Maybe.Nothing</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Maybe = <span class="built_in">require</span>(<span class="string">'folktale/maybe'</span>)</span><br><span class="line"><span class="keyword">const</span> getArguments = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// use Ramda to safely get deep property</span></span><br><span class="line">  <span class="keyword">const</span> customer = R.path([<span class="string">'body'</span>, <span class="string">'content'</span>, <span class="string">'customer'</span>], req)</span><br><span class="line">  <span class="keyword">if</span> (!customer) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Missing customer in content'</span>, req.body)</span><br><span class="line">    <span class="keyword">return</span> Maybe.Nothing()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ... more checks like that</span></span><br><span class="line">  <span class="keyword">return</span> Maybe.Just(&#123;customer&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Super, the caller now &quot;knows&quot; that it should handle both cases, and there is an easy way to do this - by matching the returned type, almost like a <code>switch</code> statement using <code>Maybe.matchWith</code> method</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onSubscriptionCreated = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// little callback function that is only called</span></span><br><span class="line">  <span class="comment">// with good parameters</span></span><br><span class="line">  <span class="keyword">const</span> handleSub = <span class="function">(<span class="params">&#123; customer &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    Customer.update(customer)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> res.sendStatus(<span class="number">200</span>)) <span class="comment">// all good</span></span><br><span class="line">    <span class="comment">// something is wrong, send error</span></span><br><span class="line">    .catch(<span class="function"><span class="params">()</span> =&gt;</span> res.sendStatus(<span class="number">500</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// attach handlers to each type that is in Maybe</span></span><br><span class="line">  <span class="comment">// Maybe.Nothing and Maybe.Just</span></span><br><span class="line">  getArguments(req).matchWith(&#123;</span><br><span class="line">    Nothing: <span class="function"><span class="params">()</span> =&gt;</span> res.sendStatus(<span class="number">400</span>),</span><br><span class="line">    Just: handleSub</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Perfect, all our input checking logic is refactored into a single function, and we are using &quot;standard&quot; <a href="https://folktale.origamitower.com/api/v2.3.0/en/folktale.maybe.html" target="_blank" rel="noopener">Maybe</a> logic to continue processing based on the returned result. Our middleware is a little bit cleaner now, with each function doing only its job and not mixing input checks with sending a response for example.</p><h2><span id="other-libs">Other libs</span></h2><p>I like using <a href="https://github.com/origamitower/folktale#readme" target="_blank" rel="noopener">folktale</a>, but similar Maybe implementation can be found in pretty much every functional JavaScript (and other languages) library</p><ul><li>in <a href="https://github.com/monet/monet.js/blob/master/docs/MAYBE.md" target="_blank" rel="noopener">Monet.js</a></li><li>in <a href="https://github.com/sanctuary-js/sanctuary-maybe" target="_blank" rel="noopener">Sanctuary.js</a></li><li>in other implementations, see <a href="https://oliverjash.me/2017/04/10/why-use-a-maybe-type-in-javascript" target="_blank" rel="noopener">Why use a Maybe type in JavaScript?</a></li></ul><h2><span id="more-work">More work</span></h2><p>We have only split parameter extraction from acting on them. But we could do more work to make code cleaner and more reliable</p><ul><li>instead of <code>Maybe</code> return actual results of input argument validation (which could have multiple error messages), usually called <code>Result</code></li><li>separate parameter checks (which is a pure operation) from printing error messages (which is a side effect)</li><li>use <a href="../difference-between-promise-and-task/">Task instead of Promise</a> in <code>Customer.update(customer)</code> to make implementation pure</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I had an Express server that was processing events from a payment system. For example, if a subscription was changed by the user, the pay
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="functional" scheme="https://glebbahmutov.com/blog/tags/functional/"/>
    
  </entry>
  
  <entry>
    <title>Hyperapp state machine web app</title>
    <link href="https://glebbahmutov.com/blog/hyperapp-state-machine/"/>
    <id>https://glebbahmutov.com/blog/hyperapp-state-machine/</id>
    <published>2018-11-19T05:00:00.000Z</published>
    <updated>2018-11-19T13:52:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Writing apps is hard. It is hard for many reasons, but for me one of the main reasons is the difficulty of thinking about all the possible states the application can be in. The web app is not a collection of routes and elements, but a model that changes from one state to another - and the UI merely reflects the current state.</p><p>So how can we express this in the front end world using JavaScript libraries and frameworks? This post will show how to use two small libraries to create a really simple application</p><ul><li>we will model application state and transitions using <a href="https://github.com/davidkpiano/xstate" target="_blank" rel="noopener">xstate</a> state machine library</li><li>we will draw the user interface using <a href="https://github.com/jorgebucaran/hyperapp" target="_blank" rel="noopener">hyperapp</a> micro framework</li></ul><p>Let us start, you can find the code at <a href="https://github.com/bahmutov/lights-example" target="_blank" rel="noopener">bahmutov/lights-example</a>.</p><h2><span id="state-machine">State machine</span></h2><p>I have copied the state machine code straight from the <a href="https://github.com/davidkpiano/xstate" target="_blank" rel="noopener">xstate</a> example</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Machine &#125; <span class="keyword">from</span> <span class="string">'xstate'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Machine(&#123;</span><br><span class="line">  id: <span class="string">'light'</span>,</span><br><span class="line">  initial: <span class="string">'green'</span>,</span><br><span class="line">  states: &#123;</span><br><span class="line">    green: &#123;</span><br><span class="line">      on: &#123;</span><br><span class="line">        TIMER: <span class="string">'yellow'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    yellow: &#123;</span><br><span class="line">      on: &#123;</span><br><span class="line">        TIMER: <span class="string">'red'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    red: &#123;</span><br><span class="line">      on: &#123;</span><br><span class="line">        TIMER: <span class="string">'green'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The machine starts in the initial <code>green</code> state, and on <code>TIMER</code> event can go from <code>green</code> to <code>yellow</code> state. If we send the <code>TIMER</code> event again, it will go from <code>yellow</code> to <code>red</code>. Send <code>TIMER</code> again and it is back to <code>green</code> state, completing the cycle. You can visualize this state machine at <a href="https://statecharts.github.io/xstate-viz/" target="_blank" rel="noopener">https://statecharts.github.io/xstate-viz/</a></p><p><img src="/blog/images/hyperapp-state-machine/light-machine.png" alt="Light machine state chart"></p><h2><span id="application">Application</span></h2><p>Now that we have our state machine, let us write an application using Hyperapp JavaScript framework. The first thing we need is to decide what our <em>state</em> object would be. This is different from the <em>state machine</em> above. Just to keep things clear, our application&#39;s <em>state</em> object will have just a single property named <code>xstate</code> with our state machine. At the start, it will be the initial state of the state machine.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; app &#125; <span class="keyword">from</span> <span class="string">'hyperapp'</span></span><br><span class="line"><span class="keyword">import</span> &#123; actions &#125; <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"><span class="keyword">import</span> machine <span class="keyword">from</span> <span class="string">'./machine'</span></span><br><span class="line"><span class="keyword">import</span> &#123; view &#125; <span class="keyword">from</span> <span class="string">'./view'</span></span><br><span class="line"></span><br><span class="line">app(&#123; <span class="attr">xstate</span>: machine.initialState &#125;, actions, view, <span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure><p>The view function renders a single element and sets its class based on the current state&#39;s value</p><figure class="highlight js"><figcaption><span>view.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">'hyperapp'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> view = <span class="function">(<span class="params">&#123; xstate &#125;, actions</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span> <span class="attr">class</span>=<span class="string">&#123;xstate.value&#125;</span> <span class="attr">onclick</span>=<span class="string">&#123;actions.onclick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>When the user clicks on the element, action <code>onclick</code> is triggered, and it should &quot;move&quot; our application&#39;s machine from one state to the next.</p><figure class="highlight js"><figcaption><span>action.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> machine <span class="keyword">from</span> <span class="string">'./machine'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> onclick = <span class="function"><span class="params">()</span> =&gt;</span> (&#123; xstate &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> currentState = xstate.value</span><br><span class="line">  <span class="keyword">const</span> newState = machine.transition(currentState, <span class="string">'TIMER'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">'onclick, state changes from %s to %s'</span>,</span><br><span class="line">    currentState,</span><br><span class="line">    newState.value</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">xstate</span>: newState &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123; onclick &#125;</span><br></pre></td></tr></table></figure><p>Beautiful, the <code>xstate</code> object is passed by the Hyperapp framework and we change it according to the <code>./machine</code> rules and return it from the <code>onclick</code> action. Hyperapp then triggers the <code>view</code> function again passing the updated <code>{ xstate }</code> object and the process repeats.</p><h2><span id="page">Page</span></h2><p>First, our HTML page only includes a style and a script tag</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"app.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>I am going to serve it using <a href="https://github.com/parcel-bundler/parcel#readme" target="_blank" rel="noopener">Parcel</a> bundler and here is the magical web application in action. I am clicking on the page several times.</p><p><img src="/blog/images/hyperapp-state-machine/light-machine.gif" alt="Light machine application"></p><h2><span id="testing-from-state-machine">Testing from state machine</span></h2><p>The above web application renders user interface as a function of the current state. Literally, the function <code>view</code> takes <code>{ xstate }</code> as a parameter and returns virtual DOM node that should be shown to the user</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vDOM = view(&#123; xstate &#125;)</span><br></pre></td></tr></table></figure><p>How should we test this application? Well we could define our tests &quot;normally&quot; by looking at the application&#39;s DOM and driving the app. Using <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> I can write this test like</p><figure class="highlight js"><figcaption><span>cypress/integration/manual.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'changes color'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:1234'</span>)</span><br><span class="line">  cy</span><br><span class="line">    .get(<span class="string">'#app'</span>)</span><br><span class="line">    .should(<span class="string">'have.class'</span>, <span class="string">'green'</span>) <span class="comment">// initial</span></span><br><span class="line">    .click()</span><br><span class="line">    .should(<span class="string">'have.class'</span>, <span class="string">'yellow'</span>)</span><br><span class="line">    .click()</span><br><span class="line">    .should(<span class="string">'have.class'</span>, <span class="string">'red'</span>)</span><br><span class="line">    .click()</span><br><span class="line">    .should(<span class="string">'have.class'</span>, <span class="string">'green'</span>) <span class="comment">// back to initial</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>and it works, the application really rotates through the CSS classes</p><p><img src="/blog/images/hyperapp-state-machine/manual.gif" alt="Manual end-to-end test"></p><p>But how do we know that <em>these transitions</em> we wrote by looking at the application&#39;s HTML are actually correct? What if our web application renders the state incorrectly or moves the state to a wrong state when the user clicks? With a state machine we can do a neat trick: we can generate the end-to-end test from the state machine!</p><p>I will write a small utility script that loads the machine and then traverses all paths - and keeps only the ones from the initial state &quot;green&quot;.</p><figure class="highlight js"><figcaption><span>scripts/paths.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getShortestValuePaths &#125; <span class="keyword">from</span> <span class="string">'xstate/lib/graph'</span></span><br><span class="line"><span class="keyword">import</span> machine <span class="keyword">from</span> <span class="string">'../src/machine'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> paths = getShortestValuePaths(machine, &#123;</span><br><span class="line">  events: &#123;</span><br><span class="line">    TIMER: [&#123; <span class="attr">type</span>: <span class="string">'TIMER'</span> &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deserializeEventString</span> (<span class="params">eventString</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [type, payload] = eventString.split(<span class="string">' | '</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type,</span><br><span class="line">    ...(payload &amp;&amp; payload !== <span class="string">'undefined'</span> ? <span class="built_in">JSON</span>.parse(payload) : &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pathsFromGreen = <span class="built_in">Object</span>.keys(paths).filter(<span class="function"><span class="params">stateString</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log('state string', stateString)</span></span><br><span class="line">  <span class="keyword">const</span> result = deserializeEventString(stateString)</span><br><span class="line">  <span class="comment">// console.log('result', result)</span></span><br><span class="line">  <span class="keyword">return</span> result.type === <span class="string">'"green"'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(paths[pathsFromGreen[<span class="number">0</span>]])</span><br></pre></td></tr></table></figure><p>The result printed is</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ &#123; state: &apos;yellow&apos;, event: &apos;TIMER | &#123;&#125;&apos; &#125;,</span><br><span class="line">  &#123; state: &apos;red&apos;, event: &apos;TIMER | &#123;&#125;&apos; &#125;,</span><br><span class="line">  &#123; state: &apos;green&apos;, event: &apos;TIMER | &#123;&#125;&apos; &#125; ]</span><br></pre></td></tr></table></figure><p>Normally I would save this list into a JSON file, but for such a short list I can manually copy it to a new spec called <code>cypress/integration/auto.js</code>. But first, I will change my <code>view.js</code> to export a few utilities to share code between the application and the test, like <code>selector</code> and <code>getAppClass</code></p><figure class="highlight js"><figcaption><span>src/view.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">'hyperapp'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// we expose the selector to let the tests know</span></span><br><span class="line"><span class="comment">// how to find this element</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selector = <span class="string">'#app'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// in our simple application we set the CSS class</span></span><br><span class="line"><span class="comment">// to be the same as the name of the state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getAppClass = <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> view = <span class="function">(<span class="params">&#123; xstate &#125;, actions</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div id=<span class="string">'app'</span> <span class="class"><span class="keyword">class</span></span>=&#123;getAppClass(xstate.value)&#125; onclick=&#123;actions.onclick&#125; /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is my automated spec file. Notice how it uses imported helper methods from <code>view.js</code> to drive particular DOM implementation without repeating the code</p><figure class="highlight js"><figcaption><span>cypress/integration/auto.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"><span class="keyword">import</span> machine <span class="keyword">from</span> <span class="string">'../../src/machine'</span></span><br><span class="line"><span class="keyword">import</span> &#123; getAppClass, selector &#125; <span class="keyword">from</span> <span class="string">'../../src/view'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test generated from the state machine path traversal</span></span><br><span class="line">it(<span class="string">'changes color from state'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:1234'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// we start in the initial state</span></span><br><span class="line">  cy.get(selector).should(<span class="string">'have.class'</span>, getAppClass(machine.initialState.value))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> path = [</span><br><span class="line">    &#123; <span class="attr">state</span>: <span class="string">'yellow'</span>, <span class="attr">event</span>: <span class="string">'TIMER | &#123;&#125;'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">state</span>: <span class="string">'red'</span>, <span class="attr">event</span>: <span class="string">'TIMER | &#123;&#125;'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">state</span>: <span class="string">'green'</span>, <span class="attr">event</span>: <span class="string">'TIMER | &#123;&#125;'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">  path.forEach(<span class="function">(<span class="params">&#123; state, event &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// event name to Cypress method could be dynamic</span></span><br><span class="line">    <span class="comment">// in our case it is always "TIMER" -&gt; "cy.click()"</span></span><br><span class="line">    cy.log(<span class="string">`checking transition to <span class="subst">$&#123;state&#125;</span>`</span>)</span><br><span class="line">    cy.get(selector).click().should(<span class="string">'have.class'</span>, getAppClass(state))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Our test behaves the same way, but now it is derived from the state machine and its possible transitions. Plus it uses a little bit of the logic from the <code>view</code> code, thus our UI and our tests are derived like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vDOM = view(&#123; xstate &#125;)</span><br><span class="line">e2eTests = f(machine, view)</span><br></pre></td></tr></table></figure><p>and our tests now cover 100% of the possible states and transitions, no matter what code coverage metric says (for our bundle the e2e test <code>auto.js</code> covers about 66% of the total bundle code, which includes application code and hyperapp and xstate libraries).</p><h2><span id="related">Related</span></h2><ul><li><a href="../element-coverage/">Element coverage for end-to-end tests</a></li><li>My <a href="https://slides.com/bahmutov/decks/hyperapp" target="_blank" rel="noopener">Hyperapp presentations</a></li><li>My <a href="https://glebbahmutov.com/blog/tags/hyperapp/">Hyperapp blog posts</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Writing apps is hard. It is hard for many reasons, but for me one of the main reasons is the difficulty of thinking about all the possibl
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="hyperapp" scheme="https://glebbahmutov.com/blog/tags/hyperapp/"/>
    
      <category term="state machine" scheme="https://glebbahmutov.com/blog/tags/state-machine/"/>
    
  </entry>
  
  <entry>
    <title>Element coverage for end-to-end tests</title>
    <link href="https://glebbahmutov.com/blog/element-coverage/"/>
    <id>https://glebbahmutov.com/blog/element-coverage/</id>
    <published>2018-11-14T05:00:00.000Z</published>
    <updated>2018-11-15T05:22:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Let us take a simple TodoMVC application, from <a href="https://github.com/cypress-io/cypress-example-todomvc" target="_blank" rel="noopener">cypress-example-todomvc</a> for example, and add a single Cypress end-to-end test like this one</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// baseUrl in cypress.json is set to http://localhost:8888</span></span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">it(<span class="string">'works'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">'first todo&#123;enter&#125;'</span>)</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">'second todo&#123;enter&#125;'</span>)</span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes.</p><p><img src="/blog/images/element-coverage/added-two-items.png" alt="The above test passes, there are two items in the list"></p><p>But what did this test cover? <a href="../high-mpg-code-coverage/">Code coverage</a> is only useful for unit tests. In the final web application, the code reachable from the user interface is probably a very small part of the total bundle; plus there is a lot of vendor code and polyfill libraries - all rendering 100% code coverage a mirage.</p><p>What can we do instead of code coverage? Well, looking at the application the <em>page elements</em> are a natural candidate, isn&#39;t it? Did our test type into the input field? Yes, it did! Did the test click on the check box to mark a todo item completed? No, our test did not do that. Our tests also did not click on the filters &quot;All, Active, Completed&quot; at the bottom.</p><p>It would be nice to show the elements covered by the tests, so we can easily see how to extend a test, or maybe write another one, in order to cover the entire application&#39;s user interface.</p><p>If you are using <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a> like I do here, this is a cool experiment to try. You can find the code I am about to write in a branch <a href="https://github.com/cypress-io/cypress-example-todomvc/tree/mark-touched-dom-elements" target="_blank" rel="noopener">mark-touched-dom-elements</a> of <a href="https://github.com/cypress-io/cypress-example-todomvc" target="_blank" rel="noopener">cypress-example-todomvc</a>.</p><p>First, let us collect all elements the test types into using <a href="https://on.cypress.io" target="_blank" rel="noopener"><code>cy.type</code></a> command. We can detect the type command by <em>overwriting</em> it.</p><figure class="highlight js"><figcaption><span>cypress/support/commands.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.overwrite(<span class="string">'type'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">type, $el, text, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// collect $el reference? or its selector</span></span><br><span class="line">  <span class="built_in">console</span>.log($el.selector)</span><br><span class="line">  <span class="keyword">return</span> type($el, text, options)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The same test now prints the selector <code>.new-todo</code> twice in the DevTools console.</p><p><img src="/blog/images/element-coverage/overwrite-type.png" alt="We have typed into .new-todo element"></p><p>The jQuery property <code>.selector</code> has been deprecated, and is not very useful. Instead I found NPM package <a href="https://github.com/antonmedv/finder#readme" target="_blank" rel="noopener">@medv/finder</a> that is well-tested and produces quite nice selectors even for deeply nested elements. Let&#39;s use this module, and also let us collect all selectors we see.</p><figure class="highlight js"><figcaption><span>cypress/support/commands.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> finder = <span class="built_in">require</span>(<span class="string">'@medv/finder'</span>).default</span><br><span class="line"></span><br><span class="line">before(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.testedSelectors = []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getSelector = <span class="function">(<span class="params">$el</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> ($el.attr(<span class="string">'data-cy'</span>)) &#123;</span><br><span class="line">    <span class="comment">// prefer data-cy="..." attribute</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`[data-cy=<span class="subst">$&#123;$el.attr(<span class="string">'data-cy'</span>)&#125;</span>]`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// or use finder module</span></span><br><span class="line">  <span class="keyword">return</span> finder($el[<span class="number">0</span>], &#123;</span><br><span class="line">    <span class="comment">// a trick to point "finder" at the application's iframe</span></span><br><span class="line">    root: cy.state(<span class="string">'window'</span>).document.body,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cypress.Commands.overwrite(<span class="string">'type'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">type, $el, text, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> selector = getSelector($el)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.testedSelectors.push(selector)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type($el, text, options)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now that we have collected a list of selectors, we should do something after all tests finish. For example, we could highlight all those elements with a nice magenta border.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">after(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> selectors = Cypress._.uniq(<span class="built_in">window</span>.testedSelectors)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// eslint-disable-next-line no-console</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'tested the following selectors:'</span>, selectors)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// shortcut to get application's window context</span></span><br><span class="line">  <span class="comment">// without going through cy.window() command</span></span><br><span class="line">  <span class="keyword">const</span> win = cy.state(<span class="string">'window'</span>)</span><br><span class="line"></span><br><span class="line">  selectors.forEach(<span class="function">(<span class="params">selector</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> el = win.document.querySelector(selector)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (el) &#123;</span><br><span class="line">      el.style.opacity = <span class="number">1</span></span><br><span class="line">      el.style.border = <span class="string">'1px solid magenta'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs again, and we see the input element highlighted.</p><p><img src="/blog/images/element-coverage/typed.png" alt="See all page elements our test typed into"></p><p>Let us mark one item completed and see it. We are going to use <a href="https://on.cypress.io/check" target="_blank" rel="noopener"><code>cy.check</code></a> command in the test, and we will overwrite it in our <code>cypress/support/commands.js</code> file</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/integration/add_spec.js</span></span><br><span class="line">it(<span class="string">'works'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">'first todo&#123;enter&#125;'</span>)</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">'second todo&#123;enter&#125;'</span>)</span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">  .first()</span><br><span class="line">  .find(<span class="string">':checkbox'</span>).check()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// cypress/support/commands.js</span></span><br><span class="line">Cypress.Commands.overwrite(<span class="string">'check'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">check, $el, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> selector = getSelector($el)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.testedSelectors.push(selector)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> check($el, options)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The found selector &quot;li:nth-child(1) .toggle&quot; is not the most attractive one, but if we want a better selector we should set a data attribute on the element in our <code>render</code> function, right?</p><p><img src="/blog/images/element-coverage/checked.png" alt="Elements the test typed into and checked"></p><p>Finally, let us cover the filters at the bottom, since we now have both completed and unfinished items in the list.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/integration/add_spec.js</span></span><br><span class="line">it(<span class="string">'works'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">'first todo&#123;enter&#125;'</span>)</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">'second todo&#123;enter&#125;'</span>)</span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">  .first()</span><br><span class="line">  .find(<span class="string">':checkbox'</span>).check()</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'.filters a'</span>, <span class="string">'Active'</span>).click()</span><br><span class="line">  cy.url().should(<span class="string">'include'</span>, <span class="string">'active'</span>)</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'.filters a'</span>, <span class="string">'Completed'</span>).click()</span><br><span class="line">  cy.url().should(<span class="string">'include'</span>, <span class="string">'completed'</span>)</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'.filters a'</span>, <span class="string">'All'</span>).click()</span><br><span class="line">  cy.url().should(<span class="string">'include'</span>, <span class="string">'#/'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// cypress/support/commands.js</span></span><br><span class="line">Cypress.Commands.overwrite(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">click, $el, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> selector = getSelector($el)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.testedSelectors.push(selector)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> click($el, options)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now a lot of visual elements are covered by the test</p><p><img src="/blog/images/element-coverage/filter-covered.png" alt="Filter links are now covered by the test"></p><p>Even selectors look nice, because I have added attributes in <code>footer.jsx</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;a</span><br><span class="line">  href=<span class="string">"#/"</span></span><br><span class="line">  data-cy=<span class="string">"show-all"</span></span><br><span class="line">  className=&#123;cx(&#123;<span class="attr">selected</span>: nowShowing === app.ALL_TODOS&#125;)&#125;&gt;</span><br><span class="line">    All</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><p>Using <code>data-*</code> attributes for testing is our recommended <a href="https://on.cypress.io/best-practices#Selecting-Elements" target="_blank" rel="noopener">best practice</a> when selecting elements.</p><h2><span id="limitations">Limitations</span></h2><p>While seeing the elements covered by the test is nice, and you can even take a screenshot at the end using <a href="https://on.cypress.io/screenshot" target="_blank" rel="noopener"><code>cy.screenshot</code></a>, it is of limited utility. Because while it marks an element the test has acted upon (typed into, checked, clicked), it does not show <em>what</em> kind of interaction it was, or even if the interaction has covered all <em>possible</em> interactions. For example, our test <em>checked</em> an checkbox element, and we see this, our test has NOT <em>unchecked</em> it. To me, this screams to require <em>state coverage</em>, rather than element coverage.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let us take a simple TodoMVC application, from &lt;a href=&quot;https://github.com/cypress-io/cypress-example-todomvc&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Use GitHub instead of NPM</title>
    <link href="https://glebbahmutov.com/blog/use-github-instead-of-npm/"/>
    <id>https://glebbahmutov.com/blog/use-github-instead-of-npm/</id>
    <published>2018-10-23T04:00:00.000Z</published>
    <updated>2018-10-23T17:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s say you have some JavaScript code you want to share among several projects, but you don&#39;t want to create a private NPM package yet. Maybe you are just experimenting, and setting things up takes effort. Why bother if it might not work out? Here is how you can quickly push code to a private GitHub repository yet make it available to other projects.</p><h2><span id="private-repo">Private repo</span></h2><p>I made a private repository <code>bahmutov/private-module-example</code> on GitHub. It contains a small JavaScript export just for show.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this module will export stuff from "foo"'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  foo: <span class="built_in">require</span>(<span class="string">'./foo'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// src/foo.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">'foo'</span></span><br></pre></td></tr></table></figure><p>I can load this module locally from the project&#39;s root folder</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ node</span><br><span class="line">&gt; require(&apos;.&apos;)</span><br><span class="line">this module will export stuff from &quot;foo&quot;</span><br><span class="line">&#123; foo: &apos;foo&apos; &#125;</span><br><span class="line">&gt; .exit</span><br></pre></td></tr></table></figure><p>The <code>package.json</code> sets the <code>private: true</code> to avoid accidentally publishing this package to the NPM registry.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"private-module-example"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Private module installation example"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"src"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I pushed the code to the remote origin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 361 bytes | 361.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:bahmutov/private-module-example.git</span><br><span class="line">   b8613b3..a8a40d7  master -&gt; master</span><br></pre></td></tr></table></figure><p>Then I created a tag (same as version) and pushed it too</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git tag 1.0.0</span><br><span class="line">$ git push --tag</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:bahmutov/private-module-example.git</span><br><span class="line"> * [new tag]         1.0.0 -&gt; 1.0.0</span><br></pre></td></tr></table></figure><p>Great, I have 1 release in my private GitHub repository.</p><p><img src="/blog/images/use-github-instead-of-npm/tag.png" alt="Tag and release 1.0.0"></p><h2><span id="using-github-repository">Using GitHub repository</span></h2><p>I have created <em>another</em> private GitHub repository <code>bahmutov/private-module-example-user</code> - this repo will install the code from the first repository without going to NPM.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"private-module-example-user"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Private repo that uses another private repo as an NPM module"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The install command looks almost the same as &quot;standard&quot; <code>npm i &lt;package name@version&gt;</code>. Only instead of the package name, I can specify GitHub username and repository name, instead of the version, I can specify a commit SHA or a tag. I prefer tags.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -S bahmutov/private-module-example#1.0.0</span><br><span class="line">+ private-module-example@1.0.0</span><br><span class="line">added 1 package from 1 contributor and audited 1 package in 6.961s</span><br><span class="line">found 0 vulnerabilities</span><br></pre></td></tr></table></figure><p>My <code>package.json</code> reflects the installed dependency</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"private-module-example-user"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Private repo that uses another private repo as an NPM module"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"private-module-example"</span>: <span class="string">"github:bahmutov/private-module-example#1.0.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Great, but does it work? Let&#39;s open Node and load the dependency</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node</span><br><span class="line">&gt; require(&apos;private-module-example&apos;)</span><br><span class="line">this module will export stuff from &quot;foo&quot;</span><br><span class="line">&#123; foo: &apos;foo&apos; &#125;</span><br></pre></td></tr></table></figure><p>It is working.</p><h2><span id="continuous-integration-setup">Continuous Integration setup</span></h2><p>I will set up continuous integration (CI) server to run &quot;tests&quot; on <a href="https://circleci.com" target="_blank" rel="noopener">CircleCI</a>. Here is my <code>.circleci/config.yml</code> file</p><figure class="highlight yaml"><figcaption><span>.circleci/config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    docker:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="string">circleci/node:10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    working_directory:</span> <span class="string">~/repo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">checkout</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Download and cache dependencies</span></span><br><span class="line"><span class="attr">      - restore_cache:</span></span><br><span class="line"><span class="attr">          keys:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">v1-dependencies-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">"package.json"</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># fallback to using the latest cache if no exact match is found</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">v1-dependencies-</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - save_cache:</span></span><br><span class="line"><span class="attr">          paths:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">          key:</span> <span class="string">v1-dependencies-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">"package.json"</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">npm</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>And my test script will just load the <code>private-module-example</code> module. If the module has not been installed, the <code>npm test</code> would crash and burn.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"node -e \"console.log(require('private-module-example'))\""</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm t</span><br><span class="line"></span><br><span class="line">&gt; private-module-example-user@1.0.0 test /private-module-example-user</span><br><span class="line">&gt; node -e &quot;console.log(require(&apos;private-module-example&apos;))&quot;</span><br><span class="line"></span><br><span class="line">this module will export stuff from &quot;foo&quot;</span><br><span class="line">&#123; foo: &apos;foo&apos; &#125;</span><br></pre></td></tr></table></figure><p>Ok, push code to CircleCI and ... see if fail</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash -eo pipefail</span><br><span class="line">npm install</span><br><span class="line">npm ERR! Error while executing:</span><br><span class="line">npm ERR! /usr/bin/git ls-remote -h -t git://github.com/bahmutov/private-module-example.git</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! fatal: remote error:</span><br><span class="line">npm ERR!   Repository not found.</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! exited with error code: 128</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /home/circleci/.npm/_logs/2018-10-23T17_18_14_644Z-debug.log</span><br><span class="line">Exited with code 1</span><br></pre></td></tr></table></figure><p>When Circle connects the new project to the GitHub repository it created an SSH key <em>restricted</em> to that repository. Thus the same key cannot be used to clone <em>another</em> private repository. We need to change this. Go to the project&#39;s <code>Settings / Checkout SSH keys</code> and click the button twice.</p><p><img src="/blog/images/use-github-instead-of-npm/first-authorize.png" alt="First, authorize yourself with GitHub"></p><p>Then</p><p><img src="/blog/images/use-github-instead-of-npm/second-use-key.png" alt="Second, use the new key"></p><p>Now the build should be able to access clone NPM package from the private repository into this project.</p><p><img src="/blog/images/use-github-instead-of-npm/install-on-circle.png" alt="Successful build"></p><h2><span id="iterate">Iterate</span></h2><p>Now you can iterate on your first module, and when there are new features or fixes, increment <code>package.json</code> version (I suggest using <a href="https://github.com/bahmutov/next-ver" target="_blank" rel="noopener">next-ver</a> to compute the next version based on commit messages), tag the commit and push the code and tag to GitHub. Then you can point the user project at the new tag, and you are good to go. This avoids private NPM registry, but of course this adds complexity to the CI with the user checkout key. On NPM you would need to use <code>NPM_TOKEN</code> to authenticate and install your own private modules (and of course pay for private scope).</p><h2><span id="related">Related</span></h2><p>I use same approach if I need to fix 3rd party NPM module, read <a href="../fixing-the-internet-one-npm-package-at-a-time/">Fixing the Internet one NPM package at a time</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s say you have some JavaScript code you want to share among several projects, but you don&amp;#39;t want to create a private NPM pack
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
      <category term="git" scheme="https://glebbahmutov.com/blog/tags/git/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Cypress jump</title>
    <link href="https://glebbahmutov.com/blog/cypress-jump/"/>
    <id>https://glebbahmutov.com/blog/cypress-jump/</id>
    <published>2018-10-14T04:00:00.000Z</published>
    <updated>2018-10-14T04:34:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Crazy cool thing I found out about Cypress today:</p><ul><li>you can use JSX inside Cypress specs, just make sure to require React</li></ul><figure class="highlight jsx"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>)</span><br><span class="line"><span class="keyword">const</span> Welcome = <span class="function">(<span class="params">props</span>) =&gt;</span></span><br><span class="line">  &lt;p onClick=&#123;props.onClick&#125;&gt;Hello, &#123;props.name&#125;&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><ul><li>you can mount React component <em>from spec</em> into application</li></ul><figure class="highlight jsx"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'react-dom'</span>)</span><br><span class="line">it(<span class="string">'injects dynamic React component and it works'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>)</span><br><span class="line">  cy.get(<span class="string">'#app'</span>).then(<span class="function"><span class="params">el$</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> welcomeGleb = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">"Gleb"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    ReactDOM.render(welcomeGleb, el$[0])</span></span><br><span class="line"><span class="xml">  &#125;)</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure><p>and the application under test is a <em>static html</em> without ANY code</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>Some text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Some text after it<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>you can pass Cypress Sinon stub as a property and make assertions against it</li></ul><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'injects dynamic React component and it works'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>)</span><br><span class="line">  <span class="keyword">const</span> onClick = cy.stub().as(<span class="string">'click'</span>)</span><br><span class="line">  cy.get(<span class="string">'#app'</span>).then(<span class="function"><span class="params">el$</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> welcomeGleb = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">"Gleb"</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    ReactDOM.render(welcomeGleb, el$[0])</span></span><br><span class="line"><span class="xml">  &#125;)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  cy.log('Testing injected element by clicking on it')</span></span><br><span class="line"><span class="xml">  // notice that we are using text that is created by `welcomeGleb` element</span></span><br><span class="line"><span class="xml">  cy.contains('Hello, Gleb').click().click()</span></span><br><span class="line"><span class="xml">  cy.get('@click').should('have.been.calledTwice')</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure><p>and this crazy contraption somehow works!</p><p><img src="/blog/images/cypress-jump.png" alt="Working test with injected React component"></p><p>You can find the source code for this blog post in <a href="https://github.com/bahmutov/cypress-injects-react-element" target="_blank" rel="noopener">https://github.com/bahmutov/cypress-injects-react-element</a> repo.</p><p>In related news, check out <a href="https://github.com/bahmutov/cypress-react-unit-test" target="_blank" rel="noopener">cypress-react-unit-test</a> - maybe the example shown in this blog post will make <code>cypress-react-unit-test</code> obsolete?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Crazy cool thing I found out about Cypress today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you can use JSX inside Cypress specs, just make sure to require React&lt;/li&gt;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="reactjs" scheme="https://glebbahmutov.com/blog/tags/reactjs/"/>
    
  </entry>
  
  <entry>
    <title>Mocking GraphQL with Lunar in Cypress End-to-End Tests</title>
    <link href="https://glebbahmutov.com/blog/mock-graphql-with-lunar-in-cypress-tests/"/>
    <id>https://glebbahmutov.com/blog/mock-graphql-with-lunar-in-cypress-tests/</id>
    <published>2018-10-01T04:00:00.000Z</published>
    <updated>2018-10-03T01:59:28.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#server-setup">Server setup</a></li><li><a href="#end-to-end-tests">End-to-end Tests</a></li><li><a href="#show-graphql-requests">Show GraphQL requests</a></li><li><a href="#wait-on-graphql-call">Wait on GraphQL call</a></li><li><a href="#show-graphql-response">Show GraphQL response</a></li><li><a href="#using-decoded-blob-values">Using decoded Blob values</a></li><li><a href="#limits">Limits</a></li><li><a href="#update-1-mock-client-side">Update 1: Mock client-side</a></li><li><a href="#final-thoughts">Final thoughts</a></li></ul><!-- tocstop --><p><a href="http://www.reactboston.com/" target="_blank" rel="noopener">ReactBoston</a> was in town this weekend. While I have not attended, I saw lots of tweets about it. One of the tweets from <a href="https://twitter.com/swyx" target="_blank" rel="noopener">@swyx</a> caught my eye:</p><p><img src="/blog/images/lunar/tweet.png" alt="https://twitter.com/swyx/status/1046482557997584386"></p><p>I have recently spoke at Boston <a href="https://www.meetup.com/boston_JS/events/253882536/" target="_blank" rel="noopener">JS meetup hosted by ezCater</a> but I don&#39;t think I had pleasure speaking to <a href="https://twitter.com/mama_bau" target="_blank" rel="noopener">Hillary Bauer @mama_bau</a> or <a href="https://twitter.com/markjfaga" target="_blank" rel="noopener">Mark Faga @markjfaga</a>. But if you check out their presentation at <a href="https://github.com/mjfaga/react-boston-2018-lunar-launch" target="_blank" rel="noopener">https://github.com/mjfaga/react-boston-2018-lunar-launch</a> - it includes the complete example project and slides. They show how to solve a hard problem - mock a GraphQL backend from end-to-end tests. For the test runner they have picked <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a> of course - the open source test runner I work on!</p><p>So I was intrigued, especially because we don&#39;t have a good recommended way of stubbing GraphQL requests - it is coming as part of <a href="https://github.com/cypress-io/cypress/issues/687" target="_blank" rel="noopener">network stubbing rewrite</a>. So I took a look at the example project, and I loved what I saw. For this blog I forked the repo to <a href="https://github.com/bahmutov/react-boston-2018-lunar-launch" target="_blank" rel="noopener">https://github.com/bahmutov/react-boston-2018-lunar-launch</a> because I want to show some other tricks you can play to make e2e tests even better.</p><h2><span id="server-setup">Server setup</span></h2><p>By default you should start GraphQL API (runs on port 3001) and the front end site (runs on port 3000). First, you see list of users.</p><p><img src="/blog/images/lunar/users.png" alt="List of users"></p><p>Clicking on any username shows the list of favorite foods. For the first user the list shows</p><p><img src="/blog/images/lunar/first-user.png" alt="First user"></p><p>Note that this data is generated by the <a href="https://github.com/Marak/Faker.js#readme" target="_blank" rel="noopener">Faker</a> module in <a href="https://github.com/bahmutov/react-boston-2018-lunar-launch/blob/master/mocks/mocks.js" target="_blank" rel="noopener">mocks/mocks.js</a></p><figure class="highlight js"><figcaption><span>mocks/mocks.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable import/no-commonjs */</span></span><br><span class="line"><span class="keyword">const</span> &#123;MockList&#125; = <span class="built_in">require</span>(<span class="string">'apollo-server'</span>);</span><br><span class="line"><span class="keyword">const</span> faker = <span class="built_in">require</span>(<span class="string">'faker'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mocks = &#123;</span><br><span class="line">  FoodItem: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    name: faker.helpers.randomize([</span><br><span class="line">      <span class="string">'Chocolate Ice Cream'</span>,</span><br><span class="line">      <span class="string">'Peppers'</span>,</span><br><span class="line">      <span class="string">'Hummus'</span>,</span><br><span class="line">      <span class="string">'Sushi'</span>,</span><br><span class="line">      <span class="string">'Eggs Benedict'</span>,</span><br><span class="line">      <span class="string">'Pad Se Ew'</span>,</span><br><span class="line">    ]),</span><br><span class="line">  &#125;),</span><br><span class="line">  User: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    name: faker.name.findName(),</span><br><span class="line">    favoriteFoods: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> MockList(<span class="number">5</span>),</span><br><span class="line">  &#125;),</span><br><span class="line">  Query: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    users: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> MockList(<span class="number">3</span>),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mocks;</span><br></pre></td></tr></table></figure><p>Every time the GraphQL server starts, a new list of users is generated, and the order of foods is scrambled, which plays havoc with end-to-end tests.</p><h2><span id="end-to-end-tests">End-to-end Tests</span></h2><p>The tests were written using <a href="https://on.cypress.io" target="_blank" rel="noopener">Cypress.io</a> - which runs a real browser (Electron or Chrome) and shows the test steps on the left. You can find the tests in spec file <a href="https://github.com/bahmutov/react-boston-2018-lunar-launch/blob/master/cypress/integration/AddFavoriteFoodToUser.spec.js" target="_blank" rel="noopener">cypress/integration/AddFavoriteFoodToUser.spec.js</a> file. To execute tests have the application and API running and open Cypress with <code>npx cypress open</code> command. Then click on the spec filename <code>AddFavoriteFoodToUser.spec.js</code> and enjoy the fast running tests.</p><p><img src="/blog/images/lunar/lunar-example.gif" alt="Running tests"></p><p>These are true end-to-end tests - they load the app in the browser, click on DOM elements, type into input elements and assert the application shows the expected value after it fetches the data from the server. But the tests always pass, even if the data the server generates changes. How does it do it?</p><p>Let us take a look at the very first test - because it is the most interesting one. Here it is:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders the correct number of food items for the user'</span>, () =&gt; &#123;</span><br><span class="line">  cy.mock(&#123;</span><br><span class="line">    Query: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      user: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">        favoriteFoods: [</span><br><span class="line">          &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Spaghetti'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'WEEKLY'</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Coconut Water'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'DAILY'</span>&#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Navigate to page</span></span><br><span class="line">  cy.visit(<span class="string">'http://localhost:3000/user/1'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Validate page content</span></span><br><span class="line">  cy.get(<span class="string">'h2'</span>).contains(<span class="string">'favorite foods:'</span>);</span><br><span class="line">  cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>);</span><br><span class="line">  cy.contains(<span class="string">'li'</span>, <span class="string">'I like to eat Spaghetti on a weekly basis'</span>);</span><br><span class="line">  cy.contains(<span class="string">'li'</span>, <span class="string">'I like to eat Coconut Water on a daily basis'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>When the test starts, the test sends a GraphQL <em>mock</em> to the server using custom <code>cy.mock</code> command. Here is what this command looks like (from <a href="https://github.com/bahmutov/react-boston-2018-lunar-launch/blob/8701255ac066883ad1deb2a188465f51b596a1c7/cypress/support/commands.js" target="_blank" rel="noopener">cypress/support/commands.js</a> file)</p><figure class="highlight js"><figcaption><span>cypress/support/commands.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> host = <span class="string">'http://localhost:3001'</span>;</span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">'store'</span>, method =&gt; &#123;</span><br><span class="line">  cy.request(<span class="string">'POST'</span>, <span class="string">`<span class="subst">$&#123;host&#125;</span>/store/<span class="subst">$&#123;method&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">'mock'</span>, mocks =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> serializedMocks = <span class="built_in">Object</span>.keys(mocks).reduce(</span><br><span class="line">    (packet, key) =&gt; <span class="built_in">Object</span>.assign(packet, &#123;[key]: mocks[key].toString()&#125;),</span><br><span class="line">    &#123;&#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  cy.request(<span class="string">'POST'</span>, <span class="string">`<span class="subst">$&#123;host&#125;</span>/store/mock`</span>, serializedMocks);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The application GraphQL server loads <a href="https://github.com/ezcater/lunar-express#readme" target="_blank" rel="noopener">lunar-express</a> middleware, which exposes <code>/store/&lt;method&gt;</code> and <code>/store/mock</code> endpoints. Before each test our tests invoke <code>cy.store(&#39;reset&#39;)</code> command from <a href="https://github.com/bahmutov/react-boston-2018-lunar-launch/blob/8701255ac066883ad1deb2a188465f51b596a1c7/cypress/support/index.js" target="_blank" rel="noopener">cypress/support/index.js</a> file</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./commands'</span>;</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> cy.store(<span class="string">'reset'</span>));</span><br></pre></td></tr></table></figure><p>and before we visit the page we send mock GraphQL definitions with <code>cy.mock</code> to the server adding them to the resolvers.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inside a test</span></span><br><span class="line">cy.mock(&#123;</span><br><span class="line">  Query: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    user: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      favoriteFoods: [</span><br><span class="line">        &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Spaghetti'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'WEEKLY'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Coconut Water'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'DAILY'</span>&#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>When the app asks for data, it receives this mock data, the same 2 foods every time, no matter what the user id is. This is why the test can visit page <code>/users/1</code> and expect the DOM to always contain &quot;Spaghetti&quot; and &quot;Coconut Water&quot;, assuming the application logic uses the GraphQL response correctly.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// after cy.mock</span></span><br><span class="line"><span class="comment">// Navigate to page</span></span><br><span class="line">cy.visit(<span class="string">'http://localhost:3000/user/1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Validate page content</span></span><br><span class="line">cy.get(<span class="string">'h2'</span>).contains(<span class="string">'favorite foods:'</span>);</span><br><span class="line">cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>);</span><br><span class="line">cy.contains(<span class="string">'li'</span>, <span class="string">'I like to eat Spaghetti on a weekly basis'</span>);</span><br><span class="line">cy.contains(<span class="string">'li'</span>, <span class="string">'I like to eat Coconut Water on a daily basis'</span>);</span><br></pre></td></tr></table></figure><p>Great! Let us improve this test a little bit. And these improvements are not because the above code is bad - not at all. The mocking and tests are 100% solid, I love them. The improvements are further refinements that will make the tests a little bit tighter, but not fundamentally different.</p><h2><span id="show-graphql-requests">Show GraphQL requests</span></h2><p>When we look at the command report on the left side of Cypress, we can see that there were two requests to the server using <code>cy.request</code> and there was an XHR call to <code>/sockjs-node</code>. Cool, but where is the GraphQL request our application under test made? To see what happens, open DevTools and rerun the tests.</p><p><img src="/blog/images/lunar/xhr-calls.png" alt="XHR calls"></p><p>Notice that the call we <em>do see</em> to <code>/sockjs-node</code> is of type <code>xhr</code>, while the GraphQL call is of type <code>json</code>. Well, the <a href="https://github.com/cypress-io/cypress/issues/687" target="_blank" rel="noopener"><code>json</code> calls are invisible to Cypress</a> for now, just like any non-<code>xhr</code> call. So we need a way around it. The simplest way is to <em>remove <code>window.fetch</code></em> from our browser and force GraphQL client to fall back to XHR. There is an entire <a href="https://github.com/cypress-io/cypress-example-recipes#stubbing-windowfetch" target="_blank" rel="noopener">Cypress recipe</a> showing different ways of doing this. In our case we can react to <a href="https://on.cypress.io/catalog-of-events" target="_blank" rel="noopener"><code>window:before:load</code></a> event in <code>cypress/support/index.js</code> file.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./commands'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cypress does not stub "fetch" yet, only XHR</span></span><br><span class="line"><span class="comment">// here we delete window.fetch on every page load</span></span><br><span class="line"><span class="comment">// GraphQL client is thus forced to polyfill with XHR</span></span><br><span class="line">Cypress.on(<span class="string">'window:before:load'</span>, win =&gt; &#123;</span><br><span class="line">  <span class="keyword">delete</span> win.fetch</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> cy.store(<span class="string">'reset'</span>));</span><br></pre></td></tr></table></figure><p>Now &quot;magically&quot; the <code>POST /graphql</code> calls appear in the command log.</p><p><img src="/blog/images/lunar/graphql-xhr.png" alt="GraphQL XHR call"></p><h2><span id="wait-on-graphql-call">Wait on GraphQL call</span></h2><p>Now that our tests can &quot;see&quot; the GraphQL call from the application, we can make the test more precise. We can make our test wait for that call to happen, before we start checking the DOM. We will start observing XHR calls using <a href="https://on.cypress.io/server" target="_blank" rel="noopener"><code>cy.server</code></a> and will setup spy on route <code>POST /graphql</code> using <a href="https://on.cypress.io/route" target="_blank" rel="noopener"><code>cy.route</code></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders the correct number of food items for the user'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// cy.mock here</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// spy on GraphQL call</span></span><br><span class="line">  cy.server()</span><br><span class="line">  cy.route(<span class="string">'POST'</span>, <span class="string">'/graphql'</span>).as(<span class="string">'graphql'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Navigate to page</span></span><br><span class="line">  cy.visit(<span class="string">'http://localhost:3000/user/1'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait for GraphQL call to happen</span></span><br><span class="line">  cy.wait(<span class="string">'@graphql'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Validate page content</span></span><br><span class="line">  cy.get(<span class="string">'h2'</span>).contains(<span class="string">'favorite foods:'</span>);</span><br><span class="line">  <span class="comment">// the rest ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The command log has a new section on the top with all XHR spies and shows when the matching request happens</p><p><img src="/blog/images/lunar/wait.png" alt="Wait on GraphQL XHR call"></p><h2><span id="show-graphql-response">Show GraphQL response</span></h2><p>We can see the <code>WAIT @graphql</code> command in the log, but when we click on that command (while DevTools is open) we don&#39;t really get to inspect the response. It is just a <code>Blob</code> object</p><p><img src="/blog/images/lunar/blob.png" alt="Response is a Blob"></p><p>I would like to print the decoded returned value in the DevTools when I click on <code>WAIT @graphql</code> command. To do this, we can add a custom command like this</p><figure class="highlight js"><figcaption><span>cypress/support/commands.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(<span class="string">'blob'</span>, alias =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> cy.wait(alias, &#123;<span class="attr">log</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> Cypress._.get(r, <span class="string">'response.body'</span>))</span><br><span class="line">    .then(Cypress.Blob.blobToBase64String)</span><br><span class="line">    .then(<span class="function"><span class="params">x</span> =&gt;</span> atob(x))</span><br><span class="line">    .then(<span class="built_in">JSON</span>.parse)</span><br><span class="line">    .then(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">      Cypress.log(&#123;</span><br><span class="line">        name: <span class="string">'wait blob'</span>,</span><br><span class="line">        displayName: <span class="string">`Wait <span class="subst">$&#123;alias&#125;</span>`</span>,</span><br><span class="line">        consoleProps: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> x</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> x</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Note: I am using <code>.then(r =&gt; Cypress._.get(r, &#39;response.body&#39;))</code> and not <code>.its(&#39;response.body&#39;)</code> because <code>.then</code> calls do NOT show up in the command log, while <code>.its</code> calls always do. Since I want to only show <code>Cypress.log</code> output, I am using the longer callback function to avoid extra printing.</p><p>Now when we see <code>Wait @graphql</code> in the command log, we can click on it and see the response object</p><p><img src="/blog/images/lunar/see-blob.png" alt="Decoded Blob"></p><h2><span id="using-decoded-blob-values">Using decoded Blob values</span></h2><p>Now that we have decoded response from the Blob, we can actually confirm that the Lunar mock server is sending the expected values. For example, we could extract the names and frequencies of foods from the Blob and check them.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wait for GraphQL call to happen and check food items</span></span><br><span class="line">cy.blob(<span class="string">'@graphql'</span>).its(<span class="string">'data.user.favoriteFoods'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">list</span> =&gt;</span> Cypress._.map(list, x =&gt;</span><br><span class="line">    (&#123;<span class="attr">name</span>: x.foodItem.name, <span class="attr">eatingFrequency</span>: x.eatingFrequency&#125;)))</span><br><span class="line">  <span class="comment">// should be same values as in GraphQL mock</span></span><br><span class="line">  .should(<span class="string">'deep.equal'</span>, [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'Spaghetti'</span>, <span class="attr">eatingFrequency</span>: <span class="string">'WEEKLY'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'Coconut Water'</span>, <span class="attr">eatingFrequency</span>: <span class="string">'DAILY'</span>&#125;</span><br><span class="line">  ])</span><br></pre></td></tr></table></figure><p>It is just massaging the data using <a href="https://lodash.com/docs/" target="_blank" rel="noopener">Lodash</a> helpers bundled in <a href="https://on.cypress.io/_" target="_blank" rel="noopener">Cypress._</a>.</p><p>Or we can just grab the user name and use it to validate the heading text</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wait for GraphQL call to happen and grab user the name</span></span><br><span class="line">cy.blob(<span class="string">'@graphql'</span>).its(<span class="string">'data.user.name'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Validate page content</span></span><br><span class="line">    cy.contains(<span class="string">'h2'</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span>'s favorite foods:`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>);</span><br><span class="line">cy.contains(<span class="string">'li'</span>, <span class="string">'I like to eat Spaghetti on a weekly basis'</span>);</span><br><span class="line">cy.contains(<span class="string">'li'</span>, <span class="string">'I like to eat Coconut Water on a daily basis'</span>);</span><br></pre></td></tr></table></figure><p>Note that we get the <code>name</code> value in the callback, and then use it to validate <code>h2</code> element, but we don&#39;t need to put all other commands like <code>cy.get</code> or <code>cy.contains</code> into the <code>.then</code> callback. Cypress commands are queued automatically into the same queue. <code>cy.get(&#39;li&#39;)</code> will only run after <code>cy.then(...)</code> completes, which completes only when <code>cy.contains(&#39;h2&#39;, ...)</code> passes.</p><p><img src="/blog/images/lunar/use-name.png" alt="Use returned name to verify DOM"></p><h2><span id="limits">Limits</span></h2><p>The custom command <code>cy.mock</code> serializes the given mock object and sends it to the backend. Thus it can pass value like <code>name</code> for example if it is hard-coded property.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.mock(&#123;</span><br><span class="line">  Query: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    user: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      name: <span class="string">'Joe Smith'</span>,</span><br><span class="line">      favoriteFoods: [</span><br><span class="line">        &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Spaghetti'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'WEEKLY'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Coconut Water'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'DAILY'</span>&#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>but not if it is a variable outside the function&#39;s immediate closure</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'Joe Smith'</span></span><br><span class="line">cy.mock(&#123;</span><br><span class="line">  Query: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    user: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      name,</span><br><span class="line">      favoriteFoods: [</span><br><span class="line">        &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Spaghetti'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'WEEKLY'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Coconut Water'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'DAILY'</span>&#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/lunar/error.png" alt="Cannot use variables from outside the closure"></p><p>So you are limited to getting the data from the decoded GraphQL response or duplicate data between the mock and the rest of the test. But wait, there is more! The sent mock functions are actually <em>invoked</em> by the GraphQL server, thus they can use anything from the input parameters server-side. For example</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cy.mock(&#123;</span><br><span class="line">  Query: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    user: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      favoriteFoods: [],</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">  Mutation: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    addFavoriteFood: <span class="function">(<span class="params">parent, args</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="comment">// parent and args passed by the GraphQL server</span></span><br><span class="line">      foodItem: &#123;</span><br><span class="line">        name: args.name,</span><br><span class="line">      &#125;,</span><br><span class="line">      eatingFrequency: args.eatingFrequency,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2><span id="update-1-mock-client-side">Update 1: Mock client-side</span></h2><p>If you do not NOT want to include Lunar in your server code, and would like to completely mock GraphQL endpoint, you can stub the request before it even leaves the Cypress browser. See <a href="https://github.com/cypress-io/cypress-documentation/issues/122" target="_blank" rel="noopener">issue #122</a> and here is short example.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(url, &#123;</span><br><span class="line">  onBeforeLoad: <span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">    cy</span><br><span class="line">      <span class="comment">// stub `fetch`</span></span><br><span class="line">      .stub(win, <span class="string">'fetch'</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// your graphql endpoint</span></span><br><span class="line">      .withArgs(<span class="string">'/graphql'</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// call our stub</span></span><br><span class="line">      .callsFake(serverStub)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above code visits the page, but then right away overwrites <code>window.fetch</code> in the <em>application</em> iframe. And it only overwrites it using <a href="https://sinonjs.org/" target="_blank" rel="noopener">Sinon.js</a> bundled in Cypress when called with argument <code>/graphql</code>. Whenever application code tries to do <code>fetch(&#39;/graphql&#39;)</code> a fake function <code>serverStub</code> gets executed. Of course puts ALL logic client-side into a function <code>serverStub</code> that you will need to write.</p><h2><span id="final-thoughts">Final thoughts</span></h2><p>Absolutely hands down I recommend <a href="https://github.com/ezcater/lunar-core#readme" target="_blank" rel="noopener">lunar-core</a> for mocking GraphQL endpoints for end-to-end tests. You can find all above code from this post in <a href="https://github.com/bahmutov/react-boston-2018-lunar-launch" target="_blank" rel="noopener">https://github.com/bahmutov/react-boston-2018-lunar-launch</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#server-setup&quot;&gt;Server setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#end-to-end-tests&quot;&gt;End-to-end Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="graphql" scheme="https://glebbahmutov.com/blog/tags/graphql/"/>
    
  </entry>
  
  <entry>
    <title>Good logging</title>
    <link href="https://glebbahmutov.com/blog/good-logging/"/>
    <id>https://glebbahmutov.com/blog/good-logging/</id>
    <published>2018-09-27T04:00:00.000Z</published>
    <updated>2018-10-01T13:35:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Logging is hard. Here is my advice:</p><h3><span id="use-debug-module">Use <code>debug</code> module.</span></h3><p>Module <a href="https://github.com/visionmedia/debug#readme" target="_blank" rel="noopener"><code>debug</code></a> is <em>extremely</em> useful because it allows to dynamically turn on messages from various modules. All my NPM modules use it with convention <code>DEBUG=&#39;module name&#39;</code> to turn on messages for a particular module.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> x = <span class="number">42</span></span><br><span class="line">debug(<span class="string">'x ='</span>, x)</span><br></pre></td></tr></table></figure><p>By default the above program prints nothing. But if we turn on <code>debug</code> logging for module <code>foo</code> we see one log line</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo node .</span></span><br><span class="line">  foo x = 42 +0ms</span><br></pre></td></tr></table></figure><p>By default, if the terminal supports it, <code>debug</code> uses terminal colors to highlight log messages coming from different files, making visual scanning the logs a breeze.</p><h3><span id="format-statements">Format statements</span></h3><p>Instead of letting <code>debug</code> or <code>console.log</code> pick the &quot;best&quot; representation of the arguments, explicitly set the format for each. For example:</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> x = <span class="number">42.123</span></span><br><span class="line"><span class="comment">// prints "x" as an integer</span></span><br><span class="line">debug(<span class="string">'x = %i'</span>, x)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo node .</span></span><br><span class="line">  foo x = 42 +0ms</span><br></pre></td></tr></table></figure><p>Main format placeholders to remember (see <a href="https://nodejs.org/api/util.html#util_util_format_format_args" target="_blank" rel="noopener">Node documentation</a>):</p><ul><li><code>%s</code> - String.</li><li><code>%d</code> - Number (integer or floating point value).</li><li><code>%i</code> - Integer.</li><li><code>%f</code> - Floating point value.</li><li><code>%j</code> - JSON. Replaced with the string &#39;[Circular]&#39; if the argument contains circular references.</li><li><code>%o</code> - Object. A string representation of an object with generic JavaScript object formatting.</li></ul><p>If in doubt - use <code>%j</code> to print value serialized as JSON.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">foo</span>: &#123;<span class="attr">bar</span>: <span class="string">'baz'</span>&#125;&#125;</span><br><span class="line">debug(<span class="string">'x = %j'</span>, x)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo node .</span></span><br><span class="line">  foo x = &#123;"foo":&#123;"bar":"baz"&#125;&#125; +0ms</span><br></pre></td></tr></table></figure><p>Another format I like is <code>%o</code> that outputs argument as a JavaScript object, which to me is easier to quickly scan.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">foo</span>: &#123;<span class="attr">bar</span>: <span class="string">'baz'</span>&#125;&#125;</span><br><span class="line">debug(<span class="string">'x = %o'</span>, x)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo node .</span></span><br><span class="line">  foo x = &#123; foo: &#123; bar: 'baz' &#125; &#125; +0ms</span><br></pre></td></tr></table></figure><h3><span id="control-the-nesting-depth">Control the nesting depth</span></h3><p>If an object has properties nested deeper than default threshold, <code>%o</code> serialization can cut it off</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">foo</span>: &#123;<span class="attr">bar</span>: &#123;<span class="attr">q</span>: &#123;<span class="attr">x</span>: &#123;<span class="attr">y</span>: <span class="string">'baz'</span>&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">debug(<span class="string">'x = %o'</span>, x)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo node .</span></span><br><span class="line">  foo x = &#123; foo: &#123; bar: &#123; q: [Object] &#125; &#125; &#125; +0ms</span><br></pre></td></tr></table></figure><p>Luckily, <code>debug</code> module can read environment variable <code>DEBUG_DEPTH</code> to control the depth threshold</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo DEBUG_DEPTH=10 node .</span></span><br><span class="line">  foo x = &#123; foo: &#123; bar: &#123; q: &#123; x: &#123; y: 'baz' &#125; &#125; &#125; &#125; &#125; +0ms</span><br></pre></td></tr></table></figure><h3><span id="do-not-use-consolelog">Do not use <code>console.log</code></span></h3><p>So <code>console.log</code> has a problem with <code>%o</code> - it does not override depth threshold using an environment variable, and also it does NOT print the entire message on a single line. I will make the property names artificially long to show the problem</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">thisIsPropertyFoo</span>: &#123;<span class="attr">thisIsPropertyBar</span>: &#123;<span class="attr">thisIsPropertyQ</span>: &#123;<span class="attr">thisIsPropertyX</span>: &#123;<span class="attr">y</span>: <span class="string">'baz'</span>&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">debug(<span class="string">'x = %o'</span>, x)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'x = %o'</span>, x)</span><br></pre></td></tr></table></figure><p>Compare the first message from <code>debug</code> to the second message from <code>console.log</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo DEBUG_DEPTH=10 node .</span></span><br><span class="line">  foo x = &#123; thisIsPropertyFoo: &#123; thisIsPropertyBar: &#123; thisIsPropertyQ: &#123; thisIsPropertyX: &#123; y: 'baz' &#125; &#125; &#125; &#125; &#125; +0ms</span><br><span class="line">x = &#123; thisIsPropertyFoo:</span><br><span class="line">   &#123; thisIsPropertyBar: &#123; thisIsPropertyQ: &#123; thisIsPropertyX: &#123; y: 'baz' &#125; &#125; &#125; &#125; &#125;</span><br></pre></td></tr></table></figure><p>Notice how <code>console.log</code> has split the output into 2 lines. This is bad for external logging tools - because they will treat separate lines as separate messages, breaking context and search.</p><h3><span id="replace-consolelog-with-debug">Replace <code>console.log</code> with <code>debug</code></span></h3><p>There are two differences between <code>console.log</code> and <code>debug</code>. First, <code>debug</code> by default writes to STDERR stream, while <code>console.log</code> writes to STDOUT stream. This usually is not very crucial.</p><p>Second, <code>console.log</code> messages are ON by default, while <code>debug</code> messages are only enabled via an environment variable (or programmatically). Thus we need a way to <em>always</em> print some messages using <code>debug</code> API. Luckily this is easy to do.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> alwaysLog = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'*'</span>)</span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">foo</span>: &#123;<span class="attr">bar</span>: <span class="string">'baz'</span>&#125;&#125;</span><br><span class="line">debug(<span class="string">'x = %o'</span>, x)</span><br><span class="line">alwaysLog(<span class="string">'value x = %o'</span>, x)</span><br></pre></td></tr></table></figure><p>Running with <code>DEBUG=foo</code> environment variable prints everything</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo node .</span></span><br><span class="line">  foo x = &#123; foo: &#123; bar: 'baz' &#125; &#125; +0ms</span><br><span class="line">  * value x = &#123; foo: &#123; bar: 'baz' &#125; &#125; +0ms</span><br></pre></td></tr></table></figure><p>Running without <code>DEBUG</code> environment variable prints the second message only</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node .</span></span><br><span class="line">  * value x = &#123; foo: &#123; bar: 'baz' &#125; &#125; +0ms</span><br></pre></td></tr></table></figure><h3><span id="log-details-under-namespace">Log details under namespace</span></h3><p>In addition to module messages, you can log details useful to debugging using namespaces. For example</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> debugX = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo:x'</span>)</span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">foo</span>: &#123;<span class="attr">bar</span>: <span class="string">'baz'</span>&#125;&#125;</span><br><span class="line">debugX(<span class="string">'value x = %o'</span>, x)</span><br><span class="line">debug(<span class="string">'have x'</span>)</span><br></pre></td></tr></table></figure><p>By default we log high level debug messages only</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo node .</span></span><br><span class="line">  foo have x +0ms</span><br></pre></td></tr></table></figure><p>But if there is some problem, we can debug it printing the value <code>x</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo:x node .</span></span><br><span class="line">  foo:x value x = &#123; foo: &#123; bar: 'baz' &#125; &#125; +0ms</span><br></pre></td></tr></table></figure><p>Finally, we can print all messages with <code>foo</code> prefix using a wildcard</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo* node .</span></span><br><span class="line">  foo:x value x = &#123; foo: &#123; bar: 'baz' &#125; &#125; +0ms</span><br><span class="line">  foo have x +0ms</span><br></pre></td></tr></table></figure><h3><span id="expose-debug-function-as-a-module-method">Expose debug function as a module method</span></h3><p>To simplify debugging, if a file exports an object, you can attach the <code>debug</code> function to that object. This will significantly simplify unit testing. Make sure to call <code>debug</code> via <em>method reference</em> and not directly.</p><figure class="highlight js"><figcaption><span>foo.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sum = a + b</span><br><span class="line">  <span class="comment">// call `debug` via method reference!</span></span><br><span class="line">  api.debug(<span class="string">'sum %d'</span>, sum)</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> api = &#123;</span><br><span class="line">  add,</span><br><span class="line">  debug</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = api</span><br></pre></td></tr></table></figure><p>Now you can easily spy / stub <code>api.debug</code> from your unit tests using <a href="https://sinonjs.org/" target="_blank" rel="noopener">sinon.js</a> for example.</p><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> api = <span class="built_in">require</span>(<span class="string">'./foo'</span>)</span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  sinon.stub(api, <span class="string">'debug'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  api.debug.restore()</span><br><span class="line">&#125;)</span><br><span class="line">it(<span class="string">'computes sum'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = api.add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">  expect(result).to.equal(<span class="number">5</span>)</span><br><span class="line">  expect(api.debug).to.have.been.calledOnceWithExactly(<span class="string">'sum %d'</span>, <span class="number">5</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3><span id="log-promise-from-promise-chains">Log promise from promise chains</span></h3><p>To better log intermediate values in promise chains, I usually use <a href="https://ramdajs.com/docs/#tap" target="_blank" rel="noopener"><code>R.tap</code></a> with an extra function to ensure logging the entire object in a single line.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'api'</span>)</span><br><span class="line"><span class="keyword">const</span> debugOneLine = <span class="function">(<span class="params">x</span>) =&gt;</span> debug(<span class="string">'%o'</span>, x)</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// returns a promise</span></span><br><span class="line">  .then(R.tap(debugOneLine)) <span class="comment">// log resolved value and pass it along</span></span><br><span class="line">  .then(...) <span class="comment">// use resolved value</span></span><br></pre></td></tr></table></figure><p>If you use <a href="http://bluebirdjs.com" target="_blank" rel="noopener">Bluebird</a> promise library, it already has <a href="http://bluebirdjs.com/docs/api/tap.html" target="_blank" rel="noopener"><code>.tap</code></a> and <a href="http://bluebirdjs.com/docs/api/tapCatch.html" target="_blank" rel="noopener"><code>.tapCatch</code></a> methods on its promises</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'bluebird'</span>)</span><br><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'api'</span>)</span><br><span class="line"><span class="keyword">const</span> debugOneLine = <span class="function">(<span class="params">x</span>) =&gt;</span> debug(<span class="string">'%o'</span>, x)</span><br><span class="line">foo() <span class="comment">// returns a Bluebird promise instance</span></span><br><span class="line">  .tap(debugOneLine) <span class="comment">// logs the resolved value</span></span><br><span class="line">  .tapCatch(debugOneLine) <span class="comment">// logs the error</span></span><br><span class="line">  <span class="comment">// continue with the promise as usual</span></span><br></pre></td></tr></table></figure><h3><span id="log-values-from-tests">Log values from tests</span></h3><p>To simplify debugging failed tests I use namespace <code>test</code> inside unit and end-to-end tests.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'test'</span>)</span><br><span class="line">it(<span class="string">'works'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = foo()</span><br><span class="line">  debug(result)</span><br><span class="line">  assert(...)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Whenever the test fails, I can run it with <code>DEBUG=test npm t</code> to see the <code>result</code> variable. I do not care much for single line output because these logs are only used for debugging tests and not for production.</p><h2><span id="related">Related</span></h2><p>I will also consider switching from human-readable to JSON-by-default format using super fast <a href="https://getpino.io/" target="_blank" rel="noopener">pino</a> logger, especially because it has <code>debug</code> compatible module <a href="https://github.com/pinojs/pino-debug" target="_blank" rel="noopener">pino-debug</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Logging is hard. Here is my advice:&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;use-debug-module&quot;&gt;Use &lt;code&gt;debug&lt;/code&gt; module.&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;Module &lt;a href=&quot;http
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
  </entry>
  
</feed>
