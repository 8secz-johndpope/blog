<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2018-04-29T13:35:19.000Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Trying Redis</title>
    <link href="https://glebbahmutov.com/blog/trying-out-redis/"/>
    <id>https://glebbahmutov.com/blog/trying-out-redis/</id>
    <published>2018-04-28T04:00:00.000Z</published>
    <updated>2018-04-29T13:35:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have never had to manage or really use Redis in my professional life. Other people have set one up for me for <a href="../express-sessions/">session storage</a> or other needs. But recently I needed a quick cache for checking external urls, so I have decided to finally really use Redis.</p><p>The goal of Redis NoSQL DB is simple. Given a key and a value (almost any serializable value would work) write a value into the database. You can even set an expiration duration on the key - after certain time the value will be automatically deleted from the Redis database.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Redis set command</span><br><span class="line">set &lt;key&gt; &lt;value&gt;</span><br><span class="line">get &lt;key&gt;</span><br><span class="line">// you can expire values after a certain time</span><br><span class="line">set &lt;key&gt; &lt;value&gt; EX &lt;seconds&gt;</span><br><span class="line">// set command options (https://redis.io/commands/set)</span><br><span class="line">// EX seconds -- Set the specified expire time, in seconds.</span><br><span class="line">// PX milliseconds -- Set the specified expire time, in milliseconds.</span><br><span class="line">// NX -- Only set the key if it does not already exist.</span><br><span class="line">// XX -- Only set the key if it already exist.</span><br></pre></td></tr></table></figure><p>Using a popular Node Redis client <a href="https://github.com/luin/ioredis" target="_blank" rel="noopener">ioredis</a> this looks like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = process.env.REDIS_URL</span><br><span class="line"><span class="keyword">const</span> Redis = <span class="built_in">require</span>(<span class="string">'ioredis'</span>)</span><br><span class="line"><span class="keyword">const</span> redis = <span class="keyword">new</span> Redis(url)</span><br><span class="line"><span class="comment">// expire this value after 5 seconds</span></span><br><span class="line">redis.set(<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'ex'</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// getting value back is async</span></span><br><span class="line"><span class="keyword">const</span> value = <span class="keyword">await</span> redis.get(<span class="string">'foo'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(value)</span><br></pre></td></tr></table></figure><p>Great, so let&#39;s setup a shared Redis instance, I don&#39;t want to have it work just on my machine!</p><h2><span id="setting-up-remote-redis">Setting up remote Redis</span></h2><p>I have set up a free Redis machine at <a href="https://redislabs.com" target="_blank" rel="noopener">https://redislabs.com</a>. A total of 30MB should be plenty for my needs. To connect I will need the url with the password included.</p><p><img src="/blog/images/redis/redis-test.png" alt="Redis setup information"></p><p>I will place the full connection url into <code>~/.as-a/.as-a.ini</code> file like this</p><figure class="highlight ini"><figcaption><span>.as-a.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[redis-labs]</span></span><br><span class="line"><span class="attr">REDIS_URL</span>=redis://:&lt;password&gt;@&lt;url&gt;.redislabs.com:<span class="number">13654</span></span><br></pre></td></tr></table></figure><p>Using CLI tool <a href="https://github.com/bahmutov/as-a" target="_blank" rel="noopener">as-a</a> I can quickly run my script with <code>REDIS_URL</code> environment variable (or any other collection of variables)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ as-a redis-labs node .</span><br></pre></td></tr></table></figure><p>Here my first script that shows values stored and retrieved from a remote Redis server</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = process.env.REDIS_URL</span><br><span class="line"><span class="keyword">const</span> Redis = <span class="built_in">require</span>(<span class="string">'ioredis'</span>)</span><br><span class="line"><span class="keyword">const</span> redis = <span class="keyword">new</span> Redis(url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// expire this value after 5 seconds</span></span><br><span class="line">redis.set(<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'ex'</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">const</span> value = <span class="keyword">await</span> redis.get(<span class="string">'foo'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// trying to get a value that does not exist</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">await</span> redis.get(<span class="string">'bar'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bar is'</span>, bar) <span class="comment">// bar is null</span></span><br><span class="line"></span><br><span class="line">process.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>We can see the value under key <code>foo</code> only stored for 5 seconds. Comment out the line <code>redis.set(&#39;foo&#39;, &#39;bar&#39;, &#39;ex&#39;, 5)</code> and run the program again quickly - the string &quot;bar&quot; will be returned. But if we run the program again after 5 seconds, the <code>null</code> will appear. Here is a &quot;normal&quot; run, then run with the line commented out after 4 seconds, then another run after 4 more seconds.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ as-a redis-labs node .</span><br><span class="line">2018-04-27T19:48:40.644Z</span><br><span class="line">bar</span><br><span class="line">bar is null</span><br><span class="line"></span><br><span class="line">$ as-a redis-labs node .</span><br><span class="line">2018-04-27T19:48:44.053Z</span><br><span class="line">bar</span><br><span class="line">bar is null</span><br><span class="line"></span><br><span class="line">$ as-a redis-labs node .</span><br><span class="line">2018-04-27T19:48:47.958Z</span><br><span class="line">null</span><br><span class="line">bar is null</span><br></pre></td></tr></table></figure><p>The value has expired.</p><h2><span id="redis-vs-memory">Redis vs memory</span></h2><p>To simplify testing, instead of always going through the real Redis instance, I have switched to <a href="https://github.com/lukechilds/keyv" target="_blank" rel="noopener">keyv</a> that allows me to use either in-memory DB or Redis.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save keyv @keyv/redis</span><br></pre></td></tr></table></figure><p>The Keyv API for <code>set</code> and <code>get</code> is almost the same as &quot;classic&quot; Redis client and enough for my needs.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Keyv = <span class="built_in">require</span>(<span class="string">'keyv'</span>)</span><br><span class="line"><span class="comment">// if process.env.REDIS_URL is a `redis:...` url will use</span></span><br><span class="line"><span class="comment">// Redis client. Otherwise uses in-memory cache</span></span><br><span class="line"><span class="keyword">const</span> keyv = <span class="keyword">new</span> Keyv(process.env.REDIS_URL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> seconds = <span class="function">(<span class="params">n</span>) =&gt;</span> <span class="number">1000</span> * n</span><br><span class="line"></span><br><span class="line"><span class="comment">// keyv.set returns a promise!</span></span><br><span class="line"><span class="comment">// expire this value after 5 seconds</span></span><br><span class="line"><span class="keyword">await</span> keyv.set(<span class="string">'foo'</span>, <span class="string">'bar'</span>, seconds(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="keyword">await</span> keyv.get(<span class="string">'foo'</span>))</span><br><span class="line"></span><br><span class="line">setInterval(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="keyword">await</span> keyv.get(<span class="string">'foo'</span>))</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>Run this and see the value expire after 5 seconds.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">2018-04-27T20:18:05.746Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:18:06.751Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:18:07.754Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:18:08.760Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:18:09.762Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:18:10.767Z undefined</span><br><span class="line">2018-04-27T20:18:11.768Z undefined</span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p>Or against a Redis instance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ as-a redis-labs node .</span><br><span class="line">2018-04-27T20:19:04.430Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:19:05.470Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:19:06.472Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:19:07.476Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:19:08.479Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:19:09.482Z undefined</span><br><span class="line">2018-04-27T20:19:10.484Z undefined</span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p>Beautiful, but note that <code>keyv</code> returns <code>undefined</code> and not a <code>null</code>. This might be significant for some use cases, but not for mine.</p><h2><span id="do-not-prevent-node-from-exiting">Do not prevent Node from exiting</span></h2><p>By default, an open Redis connection will prevent the Node process from exiting, just like listening to a port prevents the process from terminating. The Redis client exposes <a href="https://github.com/NodeRedis/node_redis#clientunref" target="_blank" rel="noopener"><code>client.unref()</code></a> method. I have forked <a href="https://github.com/lukechilds/keyv-redis" target="_blank" rel="noopener">@keyv/redis</a> and modified its code to expose the actual client in the Keyv constructor. Now the following process just exits.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Keyv = <span class="built_in">require</span>(<span class="string">'keyv'</span>)</span><br><span class="line"><span class="keyword">const</span> keyv = <span class="keyword">new</span> Keyv(process.env.REDIS_URL)</span><br><span class="line">keyv.opts.store.client.unref()</span><br></pre></td></tr></table></figure><p>While the <a href="https://github.com/lukechilds/keyv-redis/pull/16" target="_blank" rel="noopener">pull request 16</a> stays open, or if it is declined, you can use my fork directly from GitHub.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S bahmutov/keyv-redis#5850d5999ca897ba832c751c0574d77c7b566034</span><br></pre></td></tr></table></figure><p>Running the above test program confirms normal process exit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ as-a redis-labs node .</span><br><span class="line">2018-04-27T21:23:45.445Z &apos;bar&apos;</span><br></pre></td></tr></table></figure><h2><span id="top-level-async-await">Top level async / await</span></h2><p>You have noticed that I am using <code>async</code> keyword at the top level of my program. To make this work, I recommend <a href="https://github.com/robertklep/top-level-await#readme" target="_blank" rel="noopener">top-level-await</a>. Just load this module from <code>index.js</code> and move &quot;actual&quot; source code into <code>app.js</code></p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'top-level-await'</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./app'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Keyv = <span class="built_in">require</span>(<span class="string">'keyv'</span>)</span><br><span class="line"><span class="keyword">const</span> keyv = <span class="keyword">new</span> Keyv(process.env.REDIS_URL)</span><br><span class="line"><span class="keyword">const</span> seconds = <span class="function">(<span class="params">n</span>) =&gt;</span> <span class="number">1000</span> * n</span><br><span class="line"><span class="comment">// expire this value after 5 seconds</span></span><br><span class="line"><span class="keyword">await</span> keyv.set(<span class="string">'foo'</span>, <span class="string">'bar'</span>, seconds(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="keyword">await</span> keyv.get(<span class="string">'foo'</span>))</span><br></pre></td></tr></table></figure><h2><span id="using-redis-for-caching">Using Redis for caching</span></h2><p>So now it is time to actually use Redis for a task. <a href="https://docs.cypress.io" target="_blank" rel="noopener">Cypress documentation</a> is an open source project that lives at <a href="https://github.com/cypress-io/cypress-documentation" target="_blank" rel="noopener">github.com/cypress-io/cypress-documentation</a>. The documentation uses <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> static generator to transform Markdown into a static site. We have extended Hexo with a few additional helpers. One of them transforms urls into anchor links. Here are a couple of examples, including links the Cypress redirection service <code>on.cypress.io</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// link to an external page</span><br><span class="line">&#123;% url &apos;https://github.com/stanleyhlng/mocha-multi-reporters&apos; %&#125;</span><br><span class="line">// link to https://on.cypress.io/visit</span><br><span class="line">&#123;% url &apos;visit&apos; visit %&#125;</span><br><span class="line">// link to https://on.cypress.io/configuration#Screenshots</span><br><span class="line">&#123;% url &apos;screenshotsFolder&apos; configuration#Screenshots %&#125;</span><br></pre></td></tr></table></figure><p>When generating the static documentation site, we want to validate the links to make sure they are still valid. There is an <a href="https://github.com/cypress-io/cypress-documentation/blob/87715357dbe46a1b3ef9979895417ea63e485254/lib/url_generator.js" target="_blank" rel="noopener">url helper</a> that does the check.</p><ul><li>if the url has no hash part, then we can check if the request <code>HEAD &lt;url&gt;</code> is responding with 200 status</li><li>if the url does have a hash part like <code>configuration#Screenshots</code> then we need to get the full page and check if there is an element with ID <code>screenshots</code></li></ul><p>Because urls repeat, caching the checks speeds up the site build a lot - there are almost 1800 urls in the docs as of April 2018! The caching right now uses a plain JavaScript object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cache validations</span></span><br><span class="line"><span class="keyword">const</span> cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateAndGetUrl</span> (<span class="params">sidebar, href, source, text, render</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do we already have a cache for this href?</span></span><br><span class="line">  <span class="keyword">const</span> cachedValue = cache[href]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if we got it, return it!</span></span><br><span class="line">  <span class="keyword">if</span> (cachedValue) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(cachedValue)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isExternalHref(href)) &#123;</span><br><span class="line">    <span class="comment">// cache this now even though</span></span><br><span class="line">    <span class="comment">// we haven't validated it yet</span></span><br><span class="line">    <span class="comment">// because it will just fail later</span></span><br><span class="line">    cache[href] = href</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (args.validate === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(href)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> validateExternalUrl(href, source)</span><br><span class="line">    .return(href)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// other code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Great, the code already is using Promises to do its work. Moving it to <code>Keyv</code> is very straightforward. Even better, without <code>REDIS_URL</code> it automatically falls back to in-memory cache which acts same way as using an object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Keyv = <span class="built_in">require</span>(<span class="string">'keyv'</span>)</span><br><span class="line"><span class="keyword">const</span> keyv = <span class="keyword">new</span> Keyv(process.env.REDIS_URL)</span><br><span class="line"><span class="keyword">if</span> (process.env.REDIS_URL) &#123;</span><br><span class="line">  debug(<span class="string">'using external Redis server to store HREF checks'</span>)</span><br><span class="line">  <span class="comment">// allow the process exit when done</span></span><br><span class="line">  <span class="comment">// otherwise Redis connection will block it forever</span></span><br><span class="line">  keyv.opts.store.client.unref()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  debug(<span class="string">'storing external HREF checks in memory'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateAndGetUrl</span> (<span class="params">sidebar, href, source, text, render</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do we already have a cache for this href?</span></span><br><span class="line">  <span class="keyword">return</span> keyv.get(href).then(<span class="function">(<span class="params">cachedValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// if we got it, return it!</span></span><br><span class="line">    <span class="keyword">if</span> (cachedValue) &#123;</span><br><span class="line">      debug(<span class="string">'key found %s -&gt; %s'</span>, href, cachedValue)</span><br><span class="line">      <span class="keyword">return</span> cachedValue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// rest of the code</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can see the <a href="https://github.com/cypress-io/cypress-documentation/pull/559" target="_blank" rel="noopener">pull request</a> with my changes.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have never had to manage or really use Redis in my professional life. Other people have set one up for me for &lt;a href=&quot;../express-sessi
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="db" scheme="https://glebbahmutov.com/blog/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>VuePress and some Cypress end-to-end testing tips</title>
    <link href="https://glebbahmutov.com/blog/vuepress-conditional-testing/"/>
    <id>https://glebbahmutov.com/blog/vuepress-conditional-testing/</id>
    <published>2018-04-23T04:00:00.000Z</published>
    <updated>2018-04-24T01:17:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently <a href="https://vuepress.vuejs.org/" target="_blank" rel="noopener">VuePress</a> static site generator came out. It is powered by Vue.js under the hood, and I must say - I like it. Everything just works - my Markdown is turned into a pretty and fast static site with almost zero configuration. Even better, the built &quot;production&quot; site scored really well in Chrome DevTools performance audit.</p><p>We can configure output title and description meta information. For example, here is the <code>src/.vuepress/config.js</code> file that defines the options I want.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// see for all options https://vuepress.vuejs.org/config/</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  title: <span class="string">'Try Vuepress'</span>,</span><br><span class="line">  description: <span class="string">'Just playing around'</span>,</span><br><span class="line">  dest: <span class="string">'dist'</span>,</span><br><span class="line">  base: <span class="string">'/try-vuepress/'</span>,</span><br><span class="line">  evergreen: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here are the only two Markdown pages in the site - both in <code>src</code> folder</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- src/README.md --&gt;</span></span></span><br><span class="line"><span class="section"># Hello VuePress</span></span><br><span class="line"></span><br><span class="line">This is an example page. There is also [<span class="string">about</span>](<span class="link">./about.html</span>) page.</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- src/about.md --&gt;</span></span></span><br><span class="line"><span class="section"># About</span></span><br><span class="line"></span><br><span class="line">This is the "about" page. It is important.</span><br></pre></td></tr></table></figure><p>Let us make sure the generated site is working in <em>dev</em> mode. I will install <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a> and will add a few tests.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D cypress</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"vuepress dev src"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"vuepress build src"</span>,</span><br><span class="line">    <span class="attr">"cy:open"</span>: <span class="string">"cypress open"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The local URL goes into <code>cypress.json</code></p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:8080/try-vuepress/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our first test is simple - it just makes sure the dev site is loading.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line">describe(<span class="string">'VuePress site'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">'loads'</span>, () =&gt; &#123;</span><br><span class="line">    cy.contains(<span class="string">'Hello VuePress'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Start the server, open Cypress and ... the test fails! Here is the message and the element it finds by content &quot;Hello VuePress&quot;.</p><p><img src="/blog/images/vuepress/failed-test.png" alt="Failed test"></p><p>Turns out there are links made automatically by VuePress that use <code>h1</code> page titles as content. We can see these links by changing their <code>display</code> property from the Elements tab.</p><p><img src="/blog/images/vuepress/sidebar.png" alt="Sidebar links"></p><p>This happens sometimes in testing: if you search by text content or a common class name, you will find a wrong element. We can always <a href="https://docs.cypress.io/guides/references/best-practices.html#Selecting-Elements" target="_blank" rel="noopener">use test ids</a> or just make our selector a little more specific. Adding <code>h1</code> element solves the problem.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'loads'</span>, () =&gt; &#123;</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'Hello VuePress'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can test going to the &quot;About&quot; page and back</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'goes to About page and back'</span>, () =&gt; &#123;</span><br><span class="line">  cy.contains(<span class="string">'.next'</span>, <span class="string">'About'</span>).click()</span><br><span class="line">  cy.url().should(<span class="string">'contain'</span>, <span class="string">'about.html'</span>)</span><br><span class="line">  cy.go(<span class="string">'back'</span>)</span><br><span class="line">  cy.url().should(<span class="string">'equal'</span>, Cypress.config(<span class="string">'baseUrl'</span>) + <span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s also test the text search VuePress provides for us. First, we will type our text into the search box. It is easy to find the search box selector using the Elements panel.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'finds the about page'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'.search-box input'</span>).type(<span class="string">'about'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, we see the list of found results (with a single &quot;About&quot; page), but as soon as we go to inspect it, the list disappears! Luckily, Cypress keeps DOM snapshots for each command. We can click on the <code>type(&#39;about&#39;)</code> command and pin the <em>after</em> snapshot. Now we can take a look at the DOM node in the Elements tab without &quot;scaring it away&quot;.</p><p><img src="/blog/images/vuepress/after-snapshot.png" alt="After command snapshot"></p><p>We can write the search results assertions in several ways. We want to make sure the list of results has at least 1 found item, and that the first result has the page title &quot;About&quot;.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'finds the about page'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'.search-box input'</span>).type(<span class="string">'about'</span>)</span><br><span class="line">  cy.get(<span class="string">'.suggestions'</span>).find(<span class="string">'li'</span>)</span><br><span class="line">    .should(<span class="string">'be.visible'</span>)</span><br><span class="line">    .and(<span class="string">'have.length.gte'</span>, <span class="number">1</span>)</span><br><span class="line">    .first()</span><br><span class="line">    .contains(<span class="string">'.page-title'</span>, <span class="string">'About'</span>)</span><br><span class="line">    .click()</span><br><span class="line">  cy.title().should(<span class="string">'contain'</span>, <span class="string">'About'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The alternating &quot;query / assertion&quot; pattern shown above is the best way to make sure Cypress successfully goes step by step. The test runner retries the &quot;query&quot; step until the &quot;assertion&quot; passes. Thus by explicitly looking for visible suggestions to have a few items we make sure the application really behaves the way we think it should behave during the test.</p><p><img src="/blog/images/vuepress/search-test.png" alt="Search test finishes in About page"></p><p>Hmm, our <code>cy.title()</code> assertion only compared part of the full title. The full title was &quot;Try Vuepress | About&quot; which is the concatenation of the blog&#39;s and the page&#39;s titles. But the blog&#39;s title is specified in the <code>src/.vuepress/config.js</code>. Do we need to duplicate the blog title and put it into the spec file? No, we can import any JavaScript directly from our test file, thus reusing application&#39;s configuration.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123;title&#125; <span class="keyword">from</span> <span class="string">'../../src/.vuepress/config'</span></span><br><span class="line">describe(<span class="string">'VuePress site'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'finds the about page'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// same test code</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    cy.title().should(<span class="string">'equal'</span>, <span class="string">`<span class="subst">$&#123;title&#125;</span> | About`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Our assertion is a lot stricter now!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently &lt;a href=&quot;https://vuepress.vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VuePress&lt;/a&gt; static site generator came out. It is powered 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="vuejs" scheme="https://glebbahmutov.com/blog/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Lock Down Sinon Stub</title>
    <link href="https://glebbahmutov.com/blog/lock-down-sinon-stub/"/>
    <id>https://glebbahmutov.com/blog/lock-down-sinon-stub/</id>
    <published>2018-04-07T04:00:00.000Z</published>
    <updated>2018-04-07T13:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>I like using <a href="http://sinonjs.org/" target="_blank" rel="noopener">sinon.js</a> for spying and stubbing on my code during testing. For example, here we have an object with a single method <code>say()</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  say: <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'hello'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'o.say()'</span>, o.say())</span><br><span class="line"><span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure><p>I can stub the method <code>o.say</code> to return a known value like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sinon = <span class="built_in">require</span>(<span class="string">'sinon'</span>)</span><br><span class="line">sinon.stub(o, <span class="string">'say'</span>).returns(<span class="number">42</span>)</span><br><span class="line">o.say()</span><br><span class="line"><span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>But during testing we might want to be more precise - if we stub <code>o.say()</code> when called with <em>a certain argument</em> our tests will be stricter. They will ensure that whatever part of the code calls the <code>o.say()</code> also calls it with expected arguments.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sinon.stub(o, <span class="string">'say'</span>)</span><br><span class="line">  .withArgs(<span class="string">'foo'</span>)</span><br><span class="line">  .returns(<span class="number">42</span>)</span><br><span class="line"><span class="built_in">console</span>.log(o.say(<span class="string">'foo'</span>))</span><br><span class="line"><span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>What happens if the stub is called with different arguments? Well, here is the &quot;bad&quot; part - Sinon just returns <code>undefined</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sinon.stub(o, <span class="string">'say'</span>)</span><br><span class="line">  .withArgs(<span class="string">'foo'</span>)</span><br><span class="line">  .returns(<span class="number">42</span>)</span><br><span class="line"><span class="built_in">console</span>.log(o.say(<span class="string">'foo'</span>))</span><br><span class="line"><span class="comment">// 42</span></span><br><span class="line"><span class="built_in">console</span>.log(o.say())</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>Hmm, does not seem too bad - and might be even considered a good default behavior. But I often was in a situation in a large unfamiliar codebase where after a small change, my tests would start failing with <em>very weird errors</em>. It was very hard to debug such cases, because often the original stubbed method was returning a promise - and now returning <code>undefined</code> caused all sorts of errors with weird stack traces!</p><p>We can lock down the stub by forcing it to throw an error for <em>every unknown argument</em> using <code>stub.throws()</code> method, we can even pass a text message to become a thrown error.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sinon.stub(o, <span class="string">'say'</span>)</span><br><span class="line">  .throws(<span class="string">'nope'</span>)</span><br><span class="line">  .withArgs(<span class="string">'foo'</span>).returns(<span class="number">42</span>)</span><br><span class="line">o.say(<span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// 42</span></span><br><span class="line">o.say(<span class="string">'bar'</span>)</span><br><span class="line"><span class="comment">// throws Error('nope')</span></span><br></pre></td></tr></table></figure><p>This is great! But the thrown error does NOT tell us what the arguments were that did not match the expected ones. In order to show the arguments that were used to call the stub (and that were unexpected) we can use <code>stub.callsFake()</code> to serialize the arguments. Now the calling code can be found and changed very quickly, even in an unfamiliar codebase.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throwError</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Cannot call this stub with argument <span class="subst">$&#123;a&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">sinon.stub(o, <span class="string">'say'</span>)</span><br><span class="line">  .callsFake(throwError) <span class="comment">// everything else</span></span><br><span class="line">  .withArgs(<span class="string">'foo'</span>).returns(<span class="number">42</span>)</span><br><span class="line">o.say(<span class="string">'bar'</span>)</span><br><span class="line"><span class="comment">// throws Error('Cannot call this stub with argument bar')</span></span><br></pre></td></tr></table></figure><p>I even wrote a utility <a href="https://github.com/bahmutov/not-allowed" target="_blank" rel="noopener">not-allowed</a> that does a good job serializing the arguments and throwing the error.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> notAllowed = <span class="built_in">require</span>(<span class="string">'not-allowed'</span>)</span><br><span class="line">sinon.stub(o, <span class="string">'say'</span>)</span><br><span class="line">  .callsFake(notAllowed)</span><br><span class="line">  .withArgs(<span class="string">'foo'</span>).returns(<span class="number">42</span>)</span><br><span class="line">o.say(<span class="string">'bar'</span>, <span class="string">'bar'</span>, <span class="number">42</span>)</span><br><span class="line"><span class="comment">// Error: Not allowed to call this function with arguments</span></span><br><span class="line"><span class="comment">//    foo bar 42</span></span><br></pre></td></tr></table></figure><p>Perfect, no confusion here.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I like using &lt;a href=&quot;http://sinonjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sinon.js&lt;/a&gt; for spying and stubbing on my code during testing.
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>How I Organize README</title>
    <link href="https://glebbahmutov.com/blog/how-i-organize-readme/"/>
    <id>https://glebbahmutov.com/blog/how-i-organize-readme/</id>
    <published>2018-03-24T04:00:00.000Z</published>
    <updated>2018-03-24T13:44:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have <a href="https://glebbahmutov.com/">a lot of projects</a>, mostly NPM modules. If you browser through <a href="https://www.npmjs.com/~bahmutov" target="_blank" rel="noopener">www.npmjs.com/~bahmutov</a> you may notice how uniform all my README files are. Every module has a README file that follows pretty much the same template (thanks to Yeoman <a href="https://github.com/bahmutov/generator-node-bahmutov" target="_blank" rel="noopener">generator-node-bahmutov</a> I use to scaffold new projects).</p><p><img src="../images/readme/readme.png" alt="Typical README with several must-have sections"></p><p>The main sections top to bottom are:</p><ul><li>head with name and description</li><li>badges</li><li>requirements and install instructions</li><li>how to load the code</li><li>quick example</li><li>legal matters</li></ul><p>Let me quickly describe what each section does.</p><h2><span id="head">Head</span></h2><p>Most people looking at the README <em>are not your users</em>. Maybe they were searching for something else and stumbled upon your repository. In either case, the first thing my README has to answer <em>for everyone</em> is &quot;what is this?&quot; The most important information everyone should see right away is module&#39;s name and description.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mocha-banner</span><br><span class="line"></span><br><span class="line">&gt; Terminal-wide banner with test name before each Mocha test</span><br></pre></td></tr></table></figure><p>People who are NOT looking for a Mocha utility will leave after reading these two lines. People who are looking for a big &quot;in your face&quot; messages to make their Mocha output easier to understand will continue reading.</p><h2><span id="badges">Badges</span></h2><p>No one wants to waste time learning and using an unreliable library. Having a few badges that tell the user that the project has CI system, has recently published version and follows certain conventions is a good way to earn user&#39;s trust. I wrote <a href="../project-status-badges/">about badges before</a> so here are the only 5 badges I always use.</p><p>I start with a large NPM badge with the main information: latest published version and when it was published.</p><p><a href="https://npmjs.org/package/mocha-banner" target="_blank" rel="noopener"><img src="https://nodei.co/npm/mocha-banner.svg?downloads=true" alt="NPM module stats"></a></p><p>Then I have 4 inline badges that signal the quality of the module.</p><table><thead><tr><th>badge</th><th>description</th></tr></thead><tbody><tr><td><a href="https://travis-ci.org/bahmutov/mocha-banner" target="_blank" rel="noopener"><img src="https://travis-ci.org/bahmutov/mocha-banner.svg?branch=master" alt="Build status"></a></td><td>I only use NPM modules with a CI system setup. I hope it stays green.</td></tr><tr><td><a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg" alt="semantic-release"></a></td><td>module uses <a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener">semantic-release</a> to publish.</td></tr><tr><td><a href="http://standardjs.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/code%20style-standard-brightgreen.svg" alt="js-standard-style"></a></td><td>linter catches silly JavaScript errors.</td></tr><tr><td><a href="https://renovateapp.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/renovate-app-blue.svg" alt="renovate-app badge"></a></td><td>this module <a href="../renovate-app/">has its dependencies updated automatically</a>.</td></tr></tbody></table><p>Here is the Markdown markup for these badges. I usually keep the urls at the bottom of the readme. Only the package name and username and repository names have to be updated in the urls.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[![NPM][npm-icon]][npm-url]</span><br><span class="line"></span><br><span class="line">[![Build status][ci-image]][ci-url]</span><br><span class="line">[![semantic-release][semantic-image]][semantic-url]</span><br><span class="line">[![js-standard-style][standard-image]][standard-url]</span><br><span class="line">[![renovate-app badge][renovate-badge]][renovate-app]</span><br><span class="line"></span><br><span class="line">[npm-icon]: https://nodei.co/npm/mocha-banner.svg?downloads=true</span><br><span class="line">[npm-url]: https://npmjs.org/package/mocha-banner</span><br><span class="line">[ci-image]: https://travis-ci.org/bahmutov/mocha-banner.svg?branch=master</span><br><span class="line">[ci-url]: https://travis-ci.org/bahmutov/mocha-banner</span><br><span class="line">[semantic-image]: https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg</span><br><span class="line">[semantic-url]: https://github.com/semantic-release/semantic-release</span><br><span class="line">[standard-image]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg</span><br><span class="line">[standard-url]: http://standardjs.com/</span><br><span class="line">[renovate-badge]: https://img.shields.io/badge/renovate-app-blue.svg</span><br><span class="line">[renovate-app]: https://renovateapp.com/</span><br></pre></td></tr></table></figure><h2><span id="requirements-and-install">Requirements and install</span></h2><p>This section tells what version of Node (and NPM) is required by this module. Projects that set strict engines option in their <code>.npmrc</code> will not be able to install dependencies that need newer versions of Node. Also I show the install command to let people know if the module is meant as a production or development dependency. Copy and paste into the terminal and go!</p><h2><span id="loading-code">Loading code</span></h2><p>Again, as a courtesy to the user, I want to quickly show how one can load the module. Is it a function or an object? Maybe the module is doing global registration?! Do not make me think, just show me so I can copy and paste into my code!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include somewhere at the beginning</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'mocha-banner'</span>).register()</span><br></pre></td></tr></table></figure><p>Helpful.</p><h2><span id="show-an-example">Show an example</span></h2><p>The reader is still trying to decide if your module is what they need. Showing the most basic &quot;hello, world&quot; example gives this last bit of information, hopefully. Just put the most typical basic example to showcase the main benefit or use of your library.</p><p><img src="../images/readme/example.png" alt="Example section"></p><h2><span id="legal">Legal</span></h2><p>At the bottom of the README I put links to my profile, this blog, etc. I also clearly tell what license this module has. Pretty much all my software is published under MIT license, and the users should know it. I also make sure the <code>package.json</code> file has the license specified to make life easier for audit tools like <a href="https://github.com/davglass/license-checker#readme" target="_blank" rel="noopener">license-checker</a>.</p><p><img src="../images/readme/legal.png" alt="Links and legal section at the bottom"></p><h2><span id="final-thoughts">Final thoughts</span></h2><p>The README should answer quickly the following questions</p><ul><li>what your library is doing?</li><li>can it be used in the user&#39;s application?</li><li>how it should be used?</li><li>are you allowed to use it?</li></ul><p>And that&#39;s it! Remember, you are not there to answer these questions, but your README text is.</p><h2><span id="more-information">More information</span></h2><ul><li>I have recently made a presentation at Confoo Canada about my NPM workflow, check out the <a href="https://slides.com/bahmutov/node-checklist" target="_blank" rel="noopener">slides</a></li><li>I love semantic release and have written a lot of blog posts about <a href="../tags/modular-development/">modular development</a></li><li>Automate good readmes using a <a href="http://yeoman.io/" target="_blank" rel="noopener">Yeoman</a> generator, like my <a href="https://github.com/bahmutov/generator-node-bahmutov" target="_blank" rel="noopener">generator-node-bahmutov</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have &lt;a href=&quot;https://glebbahmutov.com/&quot;&gt;a lot of projects&lt;/a&gt;, mostly NPM modules. If you browser through &lt;a href=&quot;https://www.npmjs.c
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
  </entry>
  
  <entry>
    <title>Painless Dependency Upgrades with Renovate App</title>
    <link href="https://glebbahmutov.com/blog/renovate-app/"/>
    <id>https://glebbahmutov.com/blog/renovate-app/</id>
    <published>2018-03-14T04:00:00.000Z</published>
    <updated>2018-03-16T14:07:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have <a href="https://www.npmjs.com/~bahmutov" target="_blank" rel="noopener">a lot of NPM packages</a>. Like &quot;more than a 400&quot; a lot. Every package falls behind its dependencies as soon as it is published to the NPM registry. Periodically I get new GitHub issues <a href="https://github.com/bahmutov/available-versions/pull/29" target="_blank" rel="noopener">like this</a> one asking me to upgrade a particular dependency and publish a new version to get around a bug or a known security issue.</p><p><img src="/blog/images/renovate-app/update-dependency-pr.png" alt="Pull request to update a vulnerable dependency"></p><p>Manual dependency upgrades are soooo boring. Grab the code, install dependency, increment version for a dependency, run the tests... Boring! So I have written a command line tool <a href="https://github.com/bahmutov/next-update" target="_blank" rel="noopener">next-update</a> to automate this process. The tool helps <em>a lot</em>. But it is still a hustle to run the tool - remember, the number of out of date dependencies is constantly growing, while my time is pretty much constant.</p><h2><span id="next-update-travis">next-update-travis</span></h2><p>So I have automated running <code>next-update</code> - by periodically running it as a <a href="../slow-updates/">Travis cron job</a>. Here is the tool called <a href="https://github.com/bahmutov/next-update-travis" target="_blank" rel="noopener">next-update-travis</a> in action - each Travis build marked &quot;Cron&quot; is the automated dependency update check. Successful updates are committed to <code>master</code> triggering another &quot;normal&quot; Travis build marked with an orange arrow in the screenshot below.</p><p><img src="/blog/images/renovate-app/updated-deps-build-history.png" alt="Updating dependencies using next-update-travis using Travis Cron job"></p><p>While that works, this approach lacks any flexibility. I could only test dependency upgrade and merge the result - I could not review it. Yes, I could change the code to open a pull request, but then the tool would require a lot more to be useful. It would need logic to NOT open multiple branches for the same dependency, merge some dependency upgrades but not others, etc. So I needed a more flexible solution.</p><h2><span id="greenkeeperio">greenkeeper.io</span></h2><p>My first impulse was to look at the service offered by my friends from <a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener">semantic-release</a> organization. After all - they have written the only tool I <em>always use</em> to publish my NPM packages! They must know how to organize the workflow that makes dependency updates painless. In fact they do have a great tool called <a href="https://greenkeeper.io/" target="_blank" rel="noopener">greenkeeper.io</a> to be installed as a GitHub application. Free for public repos, it monitors all versions of your dependencies and opens pull requests when a new version comes out.</p><p><img src="/blog/images/renovate-app/greenkeeper.png" alt="A typical pull request from Greenkeeper.io"></p><p>The onboarding process is <em>very intuitive</em>, and the updates start flowing a few seconds after installing the application. The pull requests are very intelligent and are tied to the CI statuses. Just review the changelog for a dependency included in the pull request and merge it! The app even merges multiple dependency version updates into a single pull request and rebases it when the master changes.</p><p>But many, many pull requests opened for a couple of my repositories soon overwhelmed me. Here is a screenshot of a relatively small project - see all these pull requests from Greenkeeper?! It looks even worse for the closed pull requests - 9 out of 15 closed PRs are dependency updates.</p><p><img src="/blog/images/renovate-app/greenkeeper-prs.png" alt="Many open Greenkeeper.io pull requests"></p><p>Often, I am looking at a pull request from Greenkeeper.io to merge a &quot;patch&quot; dependency upgrade and ask myself &quot;why can&#39;t Greenkeeper merge this pull request automatically?&quot; If my code is well tested, if the update is just a &quot;patch&quot; from a trusted library, and if the CI tests are passing - that should be a no-brainer! Yet there is no such option. So I need to continue my search.</p><h2><span id="greenkeeper-keeper">greenkeeper-keeper</span></h2><p>I found <a href="https://github.com/greenkeeper-keeper/meta" target="_blank" rel="noopener">greenkeeper-keeper</a> by the great <a href="https://matt.travi.org/" target="_blank" rel="noopener">Matt Travi</a> (Hi Matt!) that can automate merging of &quot;green&quot; pull requests from Greenkeeper. Yet I would need to run the <code>greenkeeper-keeper</code> server myself ... and I already have too many services running and would prefer to avoid adding anything else to my plate. But I know Matt is going to make an awesome tool and service for dependency management some time in the future.</p><h2><span id="renovateapp">RenovateApp</span></h2><p>Then I tried <a href="https://renovateapp.com/" target="_blank" rel="noopener">Renovate App</a> from <a href="https://github.com/rarkins" target="_blank" rel="noopener">Rhys Arkins</a> with whom I have a pleasure of talking from time to time about dependency management. Again, this application is a GitHub app, which means I can just select a few public repositories via GitHub configuration page - and it is up and running!</p><p><img src="/blog/images/renovate-app/renovate-repos.png" alt="Allow RenovateApp to work with a few repos"></p><p>A good example project where you can see Renovate App running is my <a href="https://github.com/bahmutov/snap-shot-it" target="_blank" rel="noopener">bahmutov/snap-shot-it</a>.</p><p>RenovateApp has a <a href="https://renovateapp.com/docs/configuration-reference/configuration-options" target="_blank" rel="noopener">huge number of configuration options</a>. But to start I placed a simple JSON file into my repositories (or I can just wait for the first pull request from the <code>renovate[bot]</code> to add this file to my repository). Here is the simplest configuration I tried</p><figure class="highlight json"><figcaption><span>renovate.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"config:base"</span>],</span><br><span class="line">  <span class="attr">"automerge"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"major"</span>: &#123;</span><br><span class="line">    <span class="attr">"automerge"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>My project will use mostly the default settings (<code>config:base</code>), but will allow Renovate to <em>automerge</em> passing pull requests after a short period of time. This short period of time is about 1 hour and is very convenient because I can look at the pull request and merge it myself quickly.</p><p>Each pull request from RenovateApp has the commit log between the current version of the dependency and the target one. For example see <a href="https://github.com/bahmutov/snap-shot-it/pull/42" target="_blank" rel="noopener">this pull request</a></p><p><img src="/blog/images/renovate-app/renovate-pr-notes.png" alt="Pull request has the relevant changelog for the dependency"></p><p>The pull requests are quickly adding up, but there are configuration options that allow limiting their total number and frequency to avoid too much noise.</p><p><img src="/blog/images/renovate-app/renovate-prs.png" alt="Open pull requests from the Renovate App"></p><p>Notice that some pull requests are <code>chore(...)</code> and some are <code>fix(...)</code>. By default (this can be configured), production dependency upgrades get message <code>fix(...)</code> triggering publishing of a new &quot;fix&quot; release of my NPM module (if I have configured semantic release). Updates to the <code>devDependencies</code> are only getting a <code>chore(...)</code> commit message, NOT triggering a new version release.</p><p>No need to worry about all these pull requests because ... most of them will be merged automatically!</p><p><img src="/blog/images/renovate-app/renovate-commits.png" alt="Passing PRs are merged automatically"></p><p>Look at the <code>renovate-bot</code> chugging along, moving code into the <code>master</code> without any effort! Of course I must <a href="../tags/testing/">set up good testing</a> for my repositories to avoid accidentally breaking things. The automerging is disabled for &quot;major&quot; dependency updates. Thus a relatively dangerous upgrade from Lodash 3.x.x to 4.x.x will require my review and approval, while the backwards-compatible minor and patch updates are merged by the Renovate bot. When <code>semantic-release</code> publishes a new version it even writes a comment under the pull request to tell the new NPM version; isn&#39;t it great when tools play nicely together?</p><p><img src="/blog/images/renovate-app/publish-note-on-pr.png" alt="Published version comment"></p><p>I have limited my initial exploration of Renovate App to just updating dependencies, but there are <a href="https://renovateapp.com/docs/" target="_blank" rel="noopener">a lot of other things it could do</a>. I hope to investigate the app further in the future. Renovate App looks like a winner.</p><p>Just to mark every repo that has Renovate installed I created a couple of badges that look like this <a href="https://renovateapp.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/renovate-app-blue.svg" alt="renovate-app badge"></a></p><p>Below is the Markdown markup.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[![renovate-app badge][renovate-badge]][renovate-app]</span><br><span class="line"></span><br><span class="line">[renovate-badge]: https://img.shields.io/badge/renovate-app-blue.svg</span><br><span class="line">[renovate-app]: https://renovateapp.com/</span><br></pre></td></tr></table></figure><p>Feel free to use these in your README files.</p><h2><span id="final-thoughts">Final thoughts</span></h2><ul><li><a href="https://github.com/bahmutov/next-update" target="_blank" rel="noopener">next-update</a> is my &quot;go to&quot; tool for upgrading dependencies from command line</li><li><a href="https://github.com/bahmutov/next-update-travis" target="_blank" rel="noopener">next-update-travis</a> is a great tool to keep dependencies up to date for small well tested projects</li><li><a href="https://greenkeeper.io/" target="_blank" rel="noopener">greenkeeper.io</a> is awesome if you plan to review every dependency update</li><li><a href="https://github.com/greenkeeper-keeper/meta" target="_blank" rel="noopener">greenkeeper-keeper</a> is a small add-on service to automerge passing dependency updates</li><li><a href="https://renovateapp.com/" target="_blank" rel="noopener">RenovateApp</a> seems like a tool I will be using from now on. Easy to use, powerful configuration, automatic merging <em>when configured</em> - this tool can completely automate the grunt work, leaving me to pursue more intellectual activities, like binge watching TV shows.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have &lt;a href=&quot;https://www.npmjs.com/~bahmutov&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;a lot of NPM packages&lt;/a&gt;. Like &amp;quot;more than a 400&amp;quo
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="modular development" scheme="https://glebbahmutov.com/blog/tags/modular-development/"/>
    
  </entry>
  
  <entry>
    <title>Debugging Mocha from Node using Chrome Inspector</title>
    <link href="https://glebbahmutov.com/blog/debugging-mocha-using-inspector/"/>
    <id>https://glebbahmutov.com/blog/debugging-mocha-using-inspector/</id>
    <published>2018-03-12T04:00:00.000Z</published>
    <updated>2018-03-13T02:42:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you are using Mocha test runner, you can easily debug the test execution using Node and Chrome DevTools inspector. I am using Mocha 3.5.3 and Node 8.9.4 in this demo.</p><p><strong>1.</strong> Break at the start of the Node process</p><p>Here is my test command (I am working on detecting <code>it.only</code> used inside the tests, thus my command for this demo is <code>only-test</code>)</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"only-test"</span>: <span class="string">"mocha --inspect-brk only-test/test.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.</strong> When starting the tests it pauses the execution and outputs the following message</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm run only-test</span><br><span class="line"></span><br><span class="line">&gt; snap-shot-it@0.0.0-development only-test /Users/gleb/git/snap-shot-it</span><br><span class="line">&gt; mocha --inspect-brk only-test/test.js</span><br><span class="line"></span><br><span class="line">Debugger listening on ws://127.0.0.1:9229/40045c70-8525-4d12-a565-11066bc604a3</span><br><span class="line">For help see https://nodejs.org/en/docs/inspector</span><br><span class="line">Debugger attached.</span><br></pre></td></tr></table></figure><p><strong>3.</strong> Open in Chrome special url <code>chrome://inspect</code> which shows that there is a &quot;remote target&quot; available to connect.</p><p><img src="/blog/images/inspect/inspect.png" alt="Chrome inspect"></p><p>If Chrome is already started, no problem, it will keep polling for remote devices and the Node process will appear once you start it.</p><p><strong>4.</strong> The execution pauses at the start of the first loaded script, which in this case is <code>_mocha</code></p><p><img src="/blog/images/inspect/break.png" alt="Break on start"></p><p>If you want to pause at your code, add <code>debugger</code> statement</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'before each'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(<span class="keyword">this</span>))</span><br><span class="line">  <span class="keyword">debugger</span></span><br><span class="line">  <span class="comment">// this._runnable.parent._onlyTests</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>5.</strong> Enjoy the full power of DevTools debugger while stepping through the unit tests!</p><p><img src="/blog/images/inspect/debugger.png" alt="Debugger statement"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you are using Mocha test runner, you can easily debug the test execution using Node and Chrome DevTools inspector. I am using Mocha 3.
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
      <category term="browser" scheme="https://glebbahmutov.com/blog/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>Subfolders as Dependencies</title>
    <link href="https://glebbahmutov.com/blog/subfolders-as-dependencies/"/>
    <id>https://glebbahmutov.com/blog/subfolders-as-dependencies/</id>
    <published>2018-03-03T05:00:00.000Z</published>
    <updated>2018-03-03T14:43:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine an NPM project when one file requires another file, maybe in a different directory. We have to use a relative path.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line">index.js</span><br><span class="line">subfolder/</span><br><span class="line">  foo.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>subfolder/foo.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'foo'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">require</span>(<span class="string">'./subfolder/foo'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'foo:'</span>, foo)</span><br></pre></td></tr></table></figure><p>Running <code>./index.js</code> prints &quot;foo&quot; as expected</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">foo: foo</span><br></pre></td></tr></table></figure><p>But in a larger project the paths become longer and longer. I hate seeing long require paths going up several levels before drilling down into a specific subfolder.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 😡 where is bar.js? Right, it is in a galaxy far far away</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="built_in">require</span>(<span class="string">'../../../src/lib/utils/bar'</span>)</span><br></pre></td></tr></table></figure><p>Luckily we can <em>easily</em> avoid this by creating &quot;dummy&quot; internal packages that can wrap entire folders. First, create a <code>subfolder/package.json</code> with some internal name.</p><figure class="highlight json"><figcaption><span>subfolder/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"@internal/foo"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"foo.js"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Second, install this <strong>subfolder</strong> as an NPM dependency. Yes, you can NPM install folders, tar files and event GitHub repos, <a href="https://docs.npmjs.com/cli/install" target="_blank" rel="noopener">see docs</a>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v8.9.4</span><br><span class="line">$ npm -v</span><br><span class="line">5.6.0</span><br><span class="line">$ npm i -S ./subfolder</span><br><span class="line">npm WARN subfolders@1.0.0 No description</span><br><span class="line">npm WARN subfolders@1.0.0 No repository field.</span><br><span class="line"></span><br><span class="line">+ @internal/foo@0.0.0</span><br><span class="line">added 1 package <span class="keyword">in</span> 0.204s</span><br></pre></td></tr></table></figure><p>Our subfolder is now linked as a dependency</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"subfolders"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"@internal/foo"</span>: <span class="string">"file:subfolder"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Third, change relative path to <code>subfolder/foo.js</code> to use the package name.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">require</span>(<span class="string">'@internal/foo'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'foo:'</span>, foo)</span><br></pre></td></tr></table></figure><p>Still works as expected</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">foo: foo</span><br></pre></td></tr></table></figure><p>Don&#39;t forget to include the subfolder in the list of distributed files</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"subfolders"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@internal/foo"</span>: <span class="string">"file:subfolder"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"files"</span>: [</span><br><span class="line">    <span class="string">"index.js"</span>,</span><br><span class="line">    <span class="string">"subfolder"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"size"</span>: <span class="string">"t=\"$(npm pack .)\"; wc -c \"$&#123;t&#125;\"; tar tvf \"$&#123;t&#125;\"; rm \"$&#123;t&#125;\";"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npm run size</span><br><span class="line"></span><br><span class="line">&gt; subfolders@1.0.0 size /subfolders</span><br><span class="line">&gt; t=<span class="string">"<span class="variable">$(npm pack .)</span>"</span>; wc -c <span class="string">"<span class="variable">$&#123;t&#125;</span>"</span>; tar tvf <span class="string">"<span class="variable">$&#123;t&#125;</span>"</span>; rm <span class="string">"<span class="variable">$&#123;t&#125;</span>"</span>;</span><br><span class="line"></span><br><span class="line">     586 subfolders-1.0.0.tgz</span><br><span class="line">-rw-r--r--  0 0      0         420 Mar  3 09:26 package/package.json</span><br><span class="line">-rw-r--r--  0 0      0         260 Mar  3 09:36 package/index.js</span><br><span class="line">-rw-r--r--  0 0      0          23 Mar  3 09:26 package/subfolder/foo.js</span><br><span class="line">-rw-r--r--  0 0      0          72 Mar  3 09:26 package/subfolder/package.json</span><br></pre></td></tr></table></figure><p>Let us try installing our package from another folder - do we get the <code>subfolder</code> dependency correctly?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /tmp/test-subfolder</span><br><span class="line">$ cd /tmp/test-subfolder</span><br><span class="line">$ npm init -y</span><br><span class="line">$ npm i -S /subfolders</span><br><span class="line">test-subfolder@1.0.0 /private/tmp/test-subfolder</span><br><span class="line">└─┬ subfolders@1.0.0</span><br><span class="line">  └── @internal/foo@0.0.0</span><br><span class="line"></span><br><span class="line">npm WARN test-subfolder@1.0.0 No description</span><br><span class="line">npm WARN test-subfolder@1.0.0 No repository field.</span><br><span class="line">$ ls node_modules/</span><br><span class="line">@internalsubfolders</span><br><span class="line">$ node -e &apos;require(&quot;subfolders&quot;)&apos;</span><br><span class="line">foo: foo</span><br></pre></td></tr></table></figure><p>Everything is working.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine an NPM project when one file requires another file, maybe in a different directory. We have to use a relative path.&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Parcel Bundler</title>
    <link href="https://glebbahmutov.com/blog/parcel/"/>
    <id>https://glebbahmutov.com/blog/parcel/</id>
    <published>2018-02-13T05:00:00.000Z</published>
    <updated>2018-02-15T03:39:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="getting-started">Getting started</span></h2><p><a href="https://parceljs.org/" target="_blank" rel="noopener">Parcel bundler</a> is a new bundler that can work without any configuration. Here is a quick look at this awesome tool. First, start an NPM package and install the bundler as a dev dependency.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm i -D parcel-bundler</span><br></pre></td></tr></table></figure><p>Let us make an HTML page that includes a JavaScript file.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"src/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>As you can see, it is including <code>src/main.js</code> file. We hope that file is a single bundle prepared for the browser - before ES6 modules land, the browser cannot usually load additional files. But our file does import code from other local files!</p><figure class="highlight js"><figcaption><span>src/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name&#125; <span class="keyword">from</span> <span class="string">'./utils'</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerText = <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>The second file will export the name constant<figure class="highlight js"><figcaption><span>src/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">'World'</span></span><br></pre></td></tr></table></figure></p><p>Let us load the HTML page in the browser. Here is a command to server the file using Parcel</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"parcel index.html"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we run <code>npm start</code> we get a server watching our files and serving the page at port <code>:1234</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm start</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> parcel-bundler-post@1.0.0 start /code/parcel-bundler-post</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> parcel index.html</span></span><br><span class="line"></span><br><span class="line">Server running at http://localhost:1234</span><br><span class="line">✨  Built in 450ms.</span><br></pre></td></tr></table></figure><p>We can open any browser and not only we see the <code>Hello World</code> message, we also can get source maps and hot module reload! Even though the source panel complains about the <code>import</code> syntax, the break points are working.</p><p><img src="../images/parcel/hello-world.png" alt="Hello World"></p><p>The served page is interesting - it is NOT the input <code>index.html</code> file. Instead Parcel serves a generated file <code>dist/index.html</code>. That file refers to <em>bundles</em> JavaScript internally, even uses hashes to bust the browser cache.</p><figure class="highlight html"><figcaption><span>dist/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/dist/9d1eab3205c8799f59b49243d0d1e069.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The JavaScript file <code>dist/9d1eab3205c8799f59b49243d0d1e069.js</code> is your typical single file produced from <code>src/main.js</code> by tracing all imports and bringing them together into single output file.</p><h2><span id="production">Production</span></h2><p>When you are happy with your application you can produce the &quot;production&quot; bundle that is minified and can be served from any static server. Here is the command</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"parcel build index.html --public-url ./"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now you can either open local file <code>dist/index.html</code> or use any static server on folder <code>dist</code>.</p><h2><span id="css">CSS</span></h2><p>What if our JavaScript code includes CSS files? Let&#39;s try it</p><figure class="highlight js"><figcaption><span>src/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./app.css'</span></span><br><span class="line"><span class="keyword">import</span> &#123;name&#125; <span class="keyword">from</span> <span class="string">'./utils'</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerText = <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>My design skills are sick, so here is my CSS</p><figure class="highlight css"><figcaption><span>src/app.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Same <code>npm start</code> command - and parcel now makes a <em>separate</em> CSS file in the <code>dist</code> folder and includes a link in the <code>dist/index.html</code> file!</p><figure class="highlight html"><figcaption><span>dist/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/dist/9d1eab3205c8799f59b49243d0d1e069.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/dist/9d1eab3205c8799f59b49243d0d1e069.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Ohh, and my page is classy.</p><p><img src="../images/parcel/antiquewhite.png" alt="Bundled CSS"></p><p>Nice!</p><p>Wait, did I say &quot;CSS&quot;? I meant - I want to use <a href="http://lesscss.org/" target="_blank" rel="noopener">Less</a>!</p><figure class="highlight js"><figcaption><span>src/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./app.less'</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><figcaption><span>src/app.less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@dominant:</span> antiquewhite;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@dominant</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nothing else needed to be done - Parcel does <a href="https://parceljs.org/assets.html#css" target="_blank" rel="noopener">CSS bundling as if by magic...</a>.</p><h2><span id="typescript">TypeScript</span></h2><p>Advantages of static types are obvious. So let&#39;s use TypeScript files! Point <code>index.html</code> at <code>src/main.ts</code>, rename our source files and sprinkle some type love there.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"src/main.ts"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>src/main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./app.less'</span></span><br><span class="line"><span class="keyword">import</span> &#123;name&#125; <span class="keyword">from</span> <span class="string">'./utils'</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerText = <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>src/utils.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name: <span class="built_in">string</span> = <span class="string">'World'</span></span><br></pre></td></tr></table></figure><p>Here is where the Parcel magic really arrives: the bundler detects missing preprocessor and installs the necessary dependencies automatically!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br><span class="line"></span><br><span class="line">&gt; parcel-bundler-post@1.0.0 start /code/parcel-bundler-post</span><br><span class="line">&gt; parcel index.html</span><br><span class="line"></span><br><span class="line">Server running at http://localhost:1234</span><br><span class="line">⏳  Building main.ts...</span><br><span class="line">npm WARN parcel-bundler-post@1.0.0 No description</span><br><span class="line">npm WARN parcel-bundler-post@1.0.0 No repository field.</span><br><span class="line"></span><br><span class="line">+ typescript@2.7.1</span><br><span class="line">added 1 package in 4.199s</span><br><span class="line">npm WARN parcel-bundler-post@1.0.0 No description</span><br><span class="line">npm WARN parcel-bundler-post@1.0.0 No repository field.</span><br><span class="line"></span><br><span class="line">+ typescript@2.7.1</span><br><span class="line">✨  Built in 6.21s.</span><br></pre></td></tr></table></figure><p>All installed, and the application is working. Talk about great dev experience!</p><h2><span id="api">API</span></h2><p>If you want to use the bundler&#39;s NPM module API to do your own bundling, the docs are not there yet. But luckily, the code is well organized and you should be able to figure out what to call by looking at how <a href="https://github.com/parcel-bundler/parcel/blob/95a6ebfd82ad29a8edb091943950f257320a04c9/src/cli.js" target="_blank" rel="noopener">Parcel CLI</a> uses its <a href="https://github.com/parcel-bundler/parcel/blob/95a6ebfd82ad29a8edb091943950f257320a04c9/src/Bundler.js" target="_blank" rel="noopener">main module</a>. Here is a quick example</p><figure class="highlight js"><figcaption><span>out.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ParcelBundler = <span class="built_in">require</span>(<span class="string">'parcel-bundler'</span>)</span><br><span class="line"><span class="keyword">const</span> bundler = <span class="keyword">new</span> ParcelBundler(<span class="string">'./index.html'</span>, &#123;<span class="attr">watch</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">bundler.bundle()</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bundled'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>If you execute this Node script with <code>node ./out.js</code> you will get a description of the produced bundle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ node ./out.js</span><br><span class="line">✨  Built in 1.01s.</span><br><span class="line">bundled</span><br><span class="line">Bundle &#123;</span><br><span class="line">  type: &apos;html&apos;,</span><br><span class="line">  name: &apos;dist/index.html&apos;,</span><br><span class="line">  parentBundle: undefined,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result describes the main output file <code>dist/index.html</code> and all linked resources (JS and CSS bundles). You can just grab the files in the <code>dist</code> folder and use them.</p><p>You can also bundle files in the <code>watch</code> mode and get notified whenever the source files are changed - Parcel will watch all source files for you.</p><figure class="highlight js"><figcaption><span>out.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ParcelBundler = <span class="built_in">require</span>(<span class="string">'parcel-bundler'</span>)</span><br><span class="line"><span class="keyword">const</span> bundler = <span class="keyword">new</span> ParcelBundler(<span class="string">'./index.html'</span>, &#123;<span class="attr">watch</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">bundler.on(<span class="string">'bundled'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'inputs changed, rebuilt bundle'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">bundler.bundle()</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bundled'</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Start this script, and once it is running change one of the source files, for example <code>src/utils.ts</code> - notice that the bundle has been automatically rebuilt.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ node ./out.js</span><br><span class="line">✨  Built in 1.12s.</span><br><span class="line">inputs changed, rebuilt bundle</span><br><span class="line">✨  Built in 178ms.</span><br><span class="line">inputs changed, rebuilt bundle</span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p>Great job, <a href="https://github.com/orgs/parcel-bundler/people" target="_blank" rel="noopener">Parcel team</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;getting-started&quot;&gt;Getting started&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://parceljs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Parcel bundler&lt;/
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="javascript" scheme="https://glebbahmutov.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Use Lenses in Hyperapp</title>
    <link href="https://glebbahmutov.com/blog/use-lenses-in-hyperapp/"/>
    <id>https://glebbahmutov.com/blog/use-lenses-in-hyperapp/</id>
    <published>2018-01-15T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you look at <a href="https://github.com/hyperapp/awesome" target="_blank" rel="noopener">Hyperapp examples</a> or even simplest counter example, you will see how it deals with state updates. Here is a typical example - incrementing and decrementing a counter.</p><p><img src="../images/hyperapp-module/hyperapp-import.jpg" alt="Hyperapp works inside script type=&quot;module&quot;"></p><p>Hyperapp is nice - it passes the complete state object to every action function, allowing every action to be pure if it wants to be. But the state object is the single source of truth, which means that sometimes actions have to work with properties deep inside the object. Even the above example - there is a lot of boilerplate in dealing with the <code>count</code> property.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  down: <span class="function"><span class="params">()</span> =&gt;</span> state =&gt; (&#123; <span class="attr">count</span>: state.count - <span class="number">1</span> &#125;),</span><br><span class="line">  up: <span class="function"><span class="params">()</span> =&gt;</span> state =&gt; (&#123; <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Every action has to get the desired property, compute its new value and return the new state object (or at least changed key). Here is how we can simplify this code using <a href="http://ramdajs.com/docs/#lens" target="_blank" rel="noopener">functional lenses</a> implemented in Ramda library.</p><p>First, notice that <code>up</code> action for example always works with property <code>count</code> of an object passed to it. We can create <em>a lens</em> that will &quot;look&quot; at the property <code>count</code> using <a href="http://ramdajs.com/docs/#lensProp" target="_blank" rel="noopener"><code>R.lensProp</code></a> function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;lensProp&#125; <span class="keyword">from</span> <span class="string">'ramda'</span></span><br><span class="line"><span class="keyword">const</span> countLens = lensProp(<span class="string">'count'</span>)</span><br></pre></td></tr></table></figure><p>If we have a lens, and we know <em>how</em> we want to change the value, we can create new function that will be ready to increment the <code>count</code> property.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;lensProp, over&#125; <span class="keyword">from</span> <span class="string">'ramda'</span></span><br><span class="line"><span class="keyword">const</span> incrementCount = over(lensProp(<span class="string">'count'</span>), x =&gt; x + <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>Of course, Ramda comes with increment function <a href="http://ramdajs.com/docs/#inc" target="_blank" rel="noopener"><code>R.inc</code></a>, so we don&#39;t have to write one ourselves</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;lensProp, over, inc&#125; <span class="keyword">from</span> <span class="string">'ramda'</span></span><br><span class="line"><span class="keyword">const</span> incrementCount = over(lensProp(<span class="string">'count'</span>), inc)</span><br></pre></td></tr></table></figure><p>Function <code>incrementCount</code> is waiting for an object to be passed in. That object should have <code>count</code> property, and it better be a number!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> incrementCount = over(lensProp(<span class="string">'count'</span>), inc)</span><br><span class="line">incrementCount(&#123; <span class="attr">count</span>: <span class="number">10</span> &#125;) <span class="comment">// &#123;count: 11&#125;</span></span><br></pre></td></tr></table></figure><p>Nice! We can create a &quot;decrement count&quot; function similarly. We can even reuse the same <code>over(lensProp(&#39;count&#39;))</code> functions, thanks to all Ramda methods being curried. My final code looks tight and reads almost English-like.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; lensProp, over, inc, dec &#125; <span class="keyword">from</span> <span class="string">'ramda'</span></span><br><span class="line"><span class="keyword">const</span> count = over(lensProp(<span class="string">'count'</span>))</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  down: <span class="function"><span class="params">()</span> =&gt;</span> count(dec),</span><br><span class="line">  up: <span class="function"><span class="params">()</span> =&gt;</span> count(inc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And that&#39;s how you can clean up actions mutating state in Hyperapp. You can find the change to my counter example in commit <a href="https://github.com/bahmutov/hyperapp-counter-jsx-example/commit/0e2915c9fddfa179c1d5d17cb3ffb8b996955916" target="_blank" rel="noopener">bahmutov/hyperapp-counter-jsx-example/commit/0e2915</a></p><h2><span id="related-blog-posts">Related blog posts</span></h2><ul><li><a href="../tags/hyperapp/">My Hyperapp posts</a></li><li><a href="../lenses/">Using functional lenses to modify objects by example</a></li><li><a href="../quick-refactoring/">Quick functional refactoring</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you look at &lt;a href=&quot;https://github.com/hyperapp/awesome&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hyperapp examples&lt;/a&gt; or even simplest counte
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="hyperapp" scheme="https://glebbahmutov.com/blog/tags/hyperapp/"/>
    
      <category term="ramda" scheme="https://glebbahmutov.com/blog/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Testing ES6 Module in Cypress Electron Browser</title>
    <link href="https://glebbahmutov.com/blog/testing-es6-module-in-cypress-electron/"/>
    <id>https://glebbahmutov.com/blog/testing-es6-module-in-cypress-electron/</id>
    <published>2018-01-14T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you have a tiny framework, importing it as ES6 module is super convenient for quick demos. For example <a href="https://hyperapp.js.org/" target="_blank" rel="noopener">Hyperapp</a> can be imported and used right away in most browsers. <a href="https://twitter.com/okwolf/status/950635170725445632" target="_blank" rel="noopener">Original tweet</a>.</p><p><img src="../images/hyperapp-module/hyperapp-import.jpg" alt="Hyperapp works inside script type=&quot;module&quot;"></p><p>This is awesome - importing ES6 modules works <a href="https://jakearchibald.com/2017/es-modules-in-browsers/" target="_blank" rel="noopener">with some caveats</a>. For other browsers we do want to build ES5 bundle as an alternative to <code>&lt;script type=&quot;module&quot;&gt;</code> syntax. But what about testing? Can we test the above Hyperapp without transpiling it?</p><p>If we take my favorite test runner <a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">Cypress</a> - and it is my favorite in part because I am building it, and in part because it is awesome - yes, you can. Cypress can control multiple browsers. Chrome already supports <code>&lt;script type=&quot;module&quot;&gt;</code> syntax. The built-in Electron browsers does not, and that&#39;s a shame - Cypress records video of the Electron browser on CI which is a great advantage when a test fails. In this blog post I will show how to add es6 module support to Electron browser.</p><p><strong>note:</strong> you can find the source code in the repository <a href="https://github.com/bahmutov/hyperapp-es6-module-cypress" target="_blank" rel="noopener">bahmutov/hyperapp-es6-module-cypress</a></p><p>I copied the example code from the tweet into <code>index.html</code>, and have written a simple test for the counter program.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">it(<span class="string">'loads'</span>, () =&gt; &#123;</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'0'</span>)</span><br><span class="line">  cy</span><br><span class="line">    .contains(<span class="string">'+'</span>)</span><br><span class="line">    .click()</span><br><span class="line">    .click()</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'2'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes when Cypress uses Chrome browser, but fails in Electron - because no code is executing. Electron simply ignores the <code>type=&quot;module&quot;</code> script it does not know how to handle.</p><p><img src="../images/hyperapp-module/module-does-not-run.png" alt="Electron skips ES6 module script"></p><p>We need to somehow transpile ES6 module code (and any other script it might load using <code>import</code> statement) into &quot;normal&quot; bundle. In Node I would use a bundler like <a href="https://rollupjs.org/" target="_blank" rel="noopener">rollup</a>, but what can I use in the browser? I found <a href="https://github.com/ModuleLoader/browser-es-module-loader#readme" target="_blank" rel="noopener">browser-es-module-loader</a> - while it warns that it is not suitable for production, this code is good enough to be used during testing. I cloned and built the repository. It produced two scripts that add ES6 module support to any browser; I placed these two scripts into the <code>dist</code> folder in my test repo. We need to load these scripts <em>before</em> loading any other code on the <code>index.html</code> page. Luckily this is easy to do - by using <code>onBeforeLoad</code> option in <a href="https://on.cypress.io/visit" target="_blank" rel="noopener"><code>cy.visit</code></a> method.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addScript = <span class="function">(<span class="params"><span class="built_in">document</span>, src</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// force immediate load</span></span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">`&lt;script src="<span class="subst">$&#123;src&#125;</span>"&gt;&lt;/script&gt;`</span>)</span><br><span class="line">&#125;</span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">    onBeforeLoad: <span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">      addScript(win.document, <span class="string">'dist/babel-browser-build.js'</span>) <span class="comment">// must be first</span></span><br><span class="line">      addScript(win.document, <span class="string">'dist/browser-es-module-loader.js'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>After the update, Electron browser suddenly &quot;speaks&quot; ES6 modules, and our Hyperapp application is executing, and the test passes.</p><p><img src="../images/hyperapp-module/app-is-running.png" alt="App is running in Electron"></p><h2><span id="related-info">Related info</span></h2><p>While enabling ES6 module support in Electron is nice, for wider code support, bundling code is still the way to go. In that case, end-to-end tests should run against the bundled code. For other tests, like unit tests, please consider &quot;framework-to-Cypress&quot; unit test bridges that allow loading individual components and testing them in the full browser environment.</p><ul><li><a href="https://github.com/bahmutov/cypress-hyperapp-unit-test" target="_blank" rel="noopener">cypress-hyperapp-unit-test</a></li><li><a href="https://github.com/bahmutov/cypress-svelte-unit-test" target="_blank" rel="noopener">cypress-svelte-unit-test</a></li><li><a href="https://github.com/bahmutov/cypress-react-unit-test" target="_blank" rel="noopener">cypress-react-unit-test</a></li><li><a href="https://github.com/bahmutov/cypress-vue-unit-test" target="_blank" rel="noopener">cypress-vue-unit-test</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you have a tiny framework, importing it as ES6 module is super convenient for quick demos. For example &lt;a href=&quot;https://hyperapp.js.or
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="es6" scheme="https://glebbahmutov.com/blog/tags/es6/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="hyperapp" scheme="https://glebbahmutov.com/blog/tags/hyperapp/"/>
    
  </entry>
  
  <entry>
    <title>Drive-by Testing Array Explorer</title>
    <link href="https://glebbahmutov.com/blog/drive-by-testing-array-explorer/"/>
    <id>https://glebbahmutov.com/blog/drive-by-testing-array-explorer/</id>
    <published>2018-01-08T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>TLDR; testing a popular web app using Cypress.</p><!-- toc --><ul><li><a href="#array-explorer">Array Explorer</a></li><li><a href="#the-setup">The setup</a></li><li><a href="#first-test">First test</a></li><li><a href="#second-test">Second test</a></li><li><a href="#covering-primary-methods">Covering primary methods</a></li><li><a href="#use-javascript">Use JavaScript</a></li><li><a href="#simplifying-test-using-aliases">Simplifying test using aliases</a></li><li><a href="#generating-tests">Generating tests</a></li><li><a href="#fake-time">Fake time</a></li><li><a href="#need-for-speed">Need for speed</a></li><li><a href="#how-do-you-say-test-in">How do you say test in ...</a></li><li><a href="#final-thoughts">Final thoughts</a></li></ul><!-- tocstop --><h2><span id="array-explorer">Array Explorer</span></h2><p>Array Explorer is a great resource for learning JavaScript array operations. You can see it in action yourself at <a href="https://sdras.github.io/array-explorer/" target="_blank" rel="noopener">https://sdras.github.io/array-explorer/</a>. Here is me adding items to an array and seeing the result and relevant documentation.</p><p><img src="/blog/images/array-explorer/array-explorer.gif" alt="Adding items to an array"></p><p>The source for this project is available at <a href="https://github.com/sdras/array-explorer" target="_blank" rel="noopener">github.com/sdras/array-explorer</a> and is written by wonderfully productive <a href="https://sarahdrasnerdesign.com/" target="_blank" rel="noopener">Sarah Drasner</a>. I have noticed that the project does not have any tests. This is a great opportunity to quickly write a few end-to-end tests using <a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">Cypress</a> test runner. Just a few high level tests can exercise the entire application <em>as if a real user was interacting with the page</em>.</p><p>Let us start testing!</p><p><strong>Hint:</strong> Sarah has a sister project <a href="https://github.com/sdras/object-explorer" target="_blank" rel="noopener">sdras/object-explorer</a> that <em>you</em> could test the same way! That would be a great practice for anyone trying out Cypress.</p><h2><span id="the-setup">The setup</span></h2><p>First, I need to setup Cypress. Luckily it only takes a minute.</p><ul><li>I forked the <code>sdras/array-explorer</code> repo to get my own copy</li><li>cloned the forked repository to local drive</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:bahmutov/array-explorer.git</span><br><span class="line">$ cd array-explorer</span><br><span class="line">$ git checkout -b add-tests</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>If we execute <code>npm start</code> right now we will get a local app running at <code>http://localhost:8080</code>. Let us start testing it.</p><ul><li>I installed Cypress as a dev dependency, and set the <code>test</code> script command.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"cypress run"</span>,</span><br><span class="line">    <span class="attr">"test:gui"</span>: <span class="string">"cypress open"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>During local development we will be running <code>npm run test:gui</code> which opens Cypress in GUI mode - it is really convenient to see what is going during our tests. On CI we will run Cypress tests in headless mode using <code>cypress run</code> command.</p><ul><li>when I opened Cypress using <code>npm run test:gui</code> for the very first time, it  scaffolded the test folder <code>cypress</code> and a configuration file <code>cypress.json</code>.</li></ul><p><img src="/blog/images/array-explorer/scaffold.png" alt="Opening project for the first time"></p><h2><span id="first-test">First test</span></h2><ul><li>We can rename new file <code>example_spec.js</code> to just <code>spec.js</code> and remove its contents to start from scratch. Notice that Cypress picks up file changes right away; click on the renamed file <code>spec.js</code> in Cypress file list. There no tests yet it says. Here is the first test I wrote.</li></ul><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'array-explorer'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">'http://localhost:8080'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">'loads'</span>, () =&gt; &#123;&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Cypress has noticed file changes and ran it right away. I see the local site in the Cypress iframe (the dev server <code>npm start</code> is still running). Everything is green!</p><h2><span id="second-test">Second test</span></h2><p>Let us confirm that the page is greeting us with the name of the project &quot;JavaScript Array Explorer&quot;. For finding unique text on the page, I usually use <a href="https://on.cypress.io/contains" target="_blank" rel="noopener"><code>cy.contains(text)</code></a> command. In this case this text might appear somewhere else on the page. To avoid accidents like this, let us make the selector more precise. Recently we have introduced <a href="https://github.com/cypress-io/cypress/issues/917" target="_blank" rel="noopener">CSS Selector Playground</a> tool. Click on its target icon next to the url bar and hover over the text to see its &quot;best&quot; selector - in this case it suggests using <code>h1</code> selector.</p><p><img src="/blog/images/array-explorer/greeting.png" alt="CSS Playground suggests using h1"></p><p>Let us update our first test to confirm that the text really greets us after load.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'greets us'</span>, () =&gt; &#123;</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'JavaScript Array Explorer'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Perfect, the test passes.</p><h2><span id="covering-primary-methods">Covering primary methods</span></h2><p>There are 7 primary methods Array Explorer teaches: from &quot;add items or other arrays&quot; to &quot;something else&quot;. We really should create suites of tests for each primary method. In this example I will write just a few example tests. Let me start with &quot;something else&quot; primary method, that has &quot;length of the array&quot; secondary option.</p><p>As suggested by the &quot;CSS Selector Playground&quot; helper (or by looking up in the DevTools), the first drop down choice can be queried with <code>#firstmethod</code> selector. The method options can be set in the <code>#methodoptions</code> drop down. Here is our test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">'something else'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'shows length of an array'</span>, () =&gt; &#123;</span><br><span class="line">    cy.get(<span class="string">'#firstmethod'</span>).select(<span class="string">'something else'</span>)</span><br><span class="line">    cy.get(<span class="string">'#methodoptions'</span>).select(<span class="string">'find the length of the array'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/array-explorer/array-length.png" alt="Array length"></p><p>While the test is running I see Cypress opening drop downs, finding the right choice, selecting it. If an element with a given selector was missing and did not appear for the command&#39;s timeout duration, an intelligent error message with a screenshot would appear. But so far everything is going great.</p><p>We need to add an assertion to the test. We have not confirmed that the app actually shows an example of the array length property. And we have not confirmed that the output text area is really showing the right answer. Let us do this. The app works in steps</p><ol><li>Code appears (with slow type effect) in the first box <code>.usage1</code></li><li>Then the answer appears in box <code>.usage2 &gt; .usage-code</code></li></ol><p>Under the hood, the Array Explorer has input and output code as text already in the DOM, just hidden. The input code is supposed to &quot;produce&quot; the output text - it has <code>console.log(...)</code> statements, but of course they are not actually executing. So in our &quot;length of array&quot; example the input looks like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">1</span>, <span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.length);</span><br></pre></td></tr></table></figure><p>The output text is <code>3</code> and is initially hidden. Only after delayed &quot;type&quot; effect it appears.</p><p>In our test, we can grab the input code as text, and the output text, and we should make sure the output value is visible <em>and correct</em>. To make sure the value is correct, I will <code>eval</code> the input text. Because the input uses <code>console.(...)</code> to &quot;print&quot; the result, before evaluating the code, I will set up a spy on <code>console.log</code> method using built-in [<code>cy.spy</code>][spy] method. Here is the entire test - it kind of looks scary, but it is really universal and can work with any array explorer example!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'shows length of an array'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'#firstmethod'</span>).select(<span class="string">'something else'</span>)</span><br><span class="line">  cy.get(<span class="string">'#methodoptions'</span>).select(<span class="string">'find the length of the array'</span>)</span><br><span class="line">  <span class="comment">// compute the output from input</span></span><br><span class="line">  <span class="keyword">let</span> output</span><br><span class="line">  cy</span><br><span class="line">    .get(<span class="string">'.exampleoutput2'</span>)</span><br><span class="line">    .invoke(<span class="string">'text'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">      output = t</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// set up spy on `console.log` before</span></span><br><span class="line">  <span class="comment">// we can call `eval(input code)`</span></span><br><span class="line">  cy.spy(<span class="built_in">console</span>, <span class="string">'log'</span>)</span><br><span class="line">  cy.get(<span class="string">'.usage1'</span>).then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> input = v.text()</span><br><span class="line">    <span class="comment">// evaluate the input code - we are already spying on console.log!</span></span><br><span class="line">    <span class="built_in">eval</span>(input)</span><br><span class="line">    <span class="comment">// the value comes from DOM - so it needs to be</span></span><br><span class="line">    <span class="comment">// converted before we can compare it to the</span></span><br><span class="line">    <span class="comment">// compute value</span></span><br><span class="line">    expect(<span class="built_in">console</span>.log).to.have.been.calledWith(<span class="built_in">JSON</span>.parse(output))</span><br><span class="line">    <span class="comment">// make sure the output becomes visible</span></span><br><span class="line">    cy</span><br><span class="line">      .get(<span class="string">'.exampleoutput2'</span>)</span><br><span class="line">      .should(<span class="string">'have.css'</span>, <span class="string">'opacity'</span>, <span class="string">'1'</span>)</span><br><span class="line">      <span class="comment">// and the right value appears</span></span><br><span class="line">      .and(<span class="string">'contain'</span>, <span class="built_in">String</span>(output))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Here is the test in action. Notice an interesting detail that goes to the heart of what makes Cypress great - the intelligent waiting for assertion to pass. The last statement of the test grab the output element and sets up TWO assertions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy</span><br><span class="line">  .get(<span class="string">'.exampleoutput2'</span>)</span><br><span class="line">  <span class="comment">// answer becomes visible</span></span><br><span class="line">  .should(<span class="string">'have.css'</span>, <span class="string">'opacity'</span>, <span class="string">'1'</span>)</span><br><span class="line">  <span class="comment">// and the right value appears</span></span><br><span class="line">  .and(<span class="string">'contain'</span>, <span class="built_in">String</span>(output))</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> <code>.and</code> is equivalent to <code>.should</code>. It improves readability when making multiple assertions about the same element.</p><p>The video below shows the <em>first</em> asserts waits until the type effect finishes and the app makes the answer visible. Then the second assertion verifies that the right value is in the element.</p><p><img src="/blog/images/array-explorer/array-length-test.gif" alt="Array length test"></p><p>Cypress fights the unpredictable nature of end-to-end tests by retrying commands for a period of time, and these options are very configurable. The default command timeout of 4 seconds works well for this example, but was too short for other ones. So I increased the command timeout by setting it in <code>cypress.json</code> file</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"viewportHeight"</span>: <span class="number">800</span>,</span><br><span class="line">  <span class="attr">"defaultCommandTimeout"</span>: <span class="number">10000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="use-javascript">Use JavaScript</span></h2><p>As my test grows in complexity to handle multiple output values and different edge cases, the code becomes difficult to understand. Luckily, it is just JavaScript. I can refactor the test code as much as I like. I could move utility functions out to separate files and just <code>require</code> or <code>import</code> them. I can bring any NPM module as a dependency and include in my test code.</p><p>Back to our test. We can factor out the logic for running the input code sample and comparing it to the output text box. Here is this function with its main parts.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> confirmInputAndOutput = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// get expected output text</span></span><br><span class="line">  <span class="comment">// spy on console.log method</span></span><br><span class="line">  <span class="comment">// get the input code sample</span></span><br><span class="line">  <span class="comment">// eval(input code sample)</span></span><br><span class="line">  <span class="comment">// compare console.log from the spy</span></span><br><span class="line">  <span class="comment">//   with expected output text values</span></span><br><span class="line">  <span class="comment">// check if output box appears and contains output text</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// example test</span></span><br><span class="line">it(<span class="string">'shows length of array'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'#firstmethod'</span>).select(<span class="string">'something else'</span>)</span><br><span class="line">  cy.get(<span class="string">'#methodoptions'</span>).select(<span class="string">'find the length of the array'</span>)</span><br><span class="line">  confirmInputAndOutput()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="simplifying-test-using-aliases">Simplifying test using aliases</span></h2><p>A very handy feature to make tests simpler is <a href="https://on.cypress.io/variables-and-aliases" target="_blank" rel="noopener">aliases</a>. Aliases allow saving reference to a DOM element, data or XHR stubs to use later. Here is a fragment of the function that gets the output text and saves several aliases for future use.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> confirmInputAndOutput = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy</span><br><span class="line">    .get(<span class="string">'.exampleoutput2'</span>).as(<span class="string">'output'</span>)</span><br><span class="line">    .invoke(<span class="string">'text'</span>).then(removeComments).as(<span class="string">'outputText'</span>)</span><br><span class="line">    .then(parseText).as(<span class="string">'outputValues'</span>)</span><br><span class="line">  <span class="comment">// the test goes on</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above example we save reference to the DOM element as alias <code>output</code>, raw text without comments as alias <code>outputText</code> and parsed JavaScript values as <code>outputValues</code>. Later we can use the aliased values like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eval(input code sample)</span></span><br><span class="line"><span class="comment">// confirm console.log with expected values happened in order</span></span><br><span class="line">cy.get(<span class="string">'@outputValues'</span>).then(<span class="function"><span class="params">outputValues</span> =&gt;</span> &#123;</span><br><span class="line">  outputValues.forEach(<span class="function">(<span class="params">value, k</span>) =&gt;</span> &#123;</span><br><span class="line">    expect(<span class="built_in">console</span>.log.getCall(k)).to.have.been.calledWith(value)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// make sure the output text actually appears</span></span><br><span class="line">cy.get(<span class="string">'@outputText'</span>).then(<span class="function"><span class="params">outputText</span> =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">'@output'</span>).should(<span class="string">'have.css'</span>, <span class="string">'opacity'</span>, <span class="string">'1'</span>)</span><br><span class="line">  <span class="comment">// the only difficulty is with multiline text where there might</span></span><br><span class="line">  <span class="comment">// be white space at the start of each line</span></span><br><span class="line">  outputText</span><br><span class="line">    .split(<span class="string">'\n'</span>)</span><br><span class="line">    .map(trim)</span><br><span class="line">    .forEach(<span class="function"><span class="params">line</span> =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">'@output'</span>).should(<span class="string">'contain'</span>, line)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Aliases are great way to avoid deep nesting or temporary variables.</p><h2><span id="generating-tests">Generating tests</span></h2><p>I wrote a couple of other tests: &quot;fill array ...&quot;, &quot;copy a sequence of elements ...&quot;. They all work the same way - set the desired method example and call <code>confirmInputAndOutput</code>. The spec file kind of looks boring.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">'something else'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">'#firstmethod'</span>).select(<span class="string">'something else'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'shows length of an array'</span>, () =&gt; &#123;</span><br><span class="line">    selectMethodOptions(<span class="string">'find the length of the array'</span>)</span><br><span class="line">    confirmInputAndOutput()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'fills array with given value'</span>, () =&gt; &#123;</span><br><span class="line">    selectMethodOptions(</span><br><span class="line">      <span class="string">'fill all the elements of the array with a static value'</span></span><br><span class="line">    )</span><br><span class="line">    confirmInputAndOutput()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'copy a sequence of array elements within the array'</span>, () =&gt; &#123;</span><br><span class="line">    selectMethodOptions(<span class="string">'copy a sequence of array elements within the array.'</span>)</span><br><span class="line">    confirmInputAndOutput()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>All tests are going to look like this. Can we generate the tests from a list of options? Yes we can. Instead of writing individual <code>it(..., () =&gt; {...})</code> calls, I placed all primary method names and corresponding option names into an object of arrays. A small helper function iterates over the arrays, creating tests.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> methods = &#123;</span><br><span class="line">  <span class="string">'order an array'</span>: [</span><br><span class="line">    <span class="string">'reverse the order of the array'</span>,</span><br><span class="line">    <span class="string">'sort the items of the array'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'something else'</span>: [</span><br><span class="line">    <span class="string">'find the length of the array'</span>,</span><br><span class="line">    <span class="string">'fill all the elements of the array with a static value'</span>,</span><br><span class="line">    <span class="string">'copy a sequence of array elements within the array.'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// a lot more methods ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(methods).forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">  context(method, () =&gt; &#123;</span><br><span class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">'#firstmethod'</span>).select(method)</span><br><span class="line">    &#125;)</span><br><span class="line">    methods[method].forEach(<span class="function"><span class="params">secondary</span> =&gt;</span> &#123;</span><br><span class="line">      it(secondary, () =&gt; &#123;</span><br><span class="line">        selectMethodOptions(secondary)</span><br><span class="line">        confirmInputAndOutput()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>One short spec file is running 20 tests checking all array method examples (except for &quot;find&quot; method that requires extra arguments)</p><h2><span id="fake-time">Fake time</span></h2><p>One test is failing. Can you spot the problem?</p><p><img src="/blog/images/array-explorer/failing-test.png" alt="Failing test"></p><p>The input code sample uses current date!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">1</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> date = [<span class="keyword">new</span> <span class="built_in">Date</span>()];</span><br><span class="line"><span class="keyword">const</span> arrString = arr.toLocaleString();</span><br><span class="line"><span class="keyword">const</span> dateString = date.toLocaleString();</span><br><span class="line"><span class="built_in">console</span>.log(arrString, dateString);</span><br></pre></td></tr></table></figure><p>The expected output is hardcoded to be &quot;12/26/2017, 6:54:49 PM&quot;, which will never match the evaluated input code. What can we do? Ordinarily, Cypress tests use <a href="https://on.cypress.io/clock" target="_blank" rel="noopener"><code>cy.clock</code></a> to control the time inside the running application like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'12/26/2017, 6:54:49 PM'</span>).getTime()</span><br><span class="line">  cy.clock(now)</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:8080'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>But our use case is different. It is NOT the application that is calling <code>new Date()</code>, but our unit test via <code>eval</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">`</span></span><br><span class="line"><span class="string">let arr = [5, 1, 8];</span></span><br><span class="line"><span class="string">let date = [new Date()];</span></span><br><span class="line"><span class="string">const arrString = arr.toLocaleString();</span></span><br><span class="line"><span class="string">const dateString = date.toLocaleString();</span></span><br><span class="line"><span class="string">console.log(arrString, dateString);</span></span><br><span class="line"><span class="string">`</span>)</span><br></pre></td></tr></table></figure><p>Thus our <em>test code</em> must fake the date. Luckily, Cypress has <a href="http://sinonjs.org/" target="_blank" rel="noopener">Sinon</a> bundled and available under <code>Cypress.sinon</code> property. Right before we evaluate our code we can fake the <code>Date</code> object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clock = Cypress.sinon.useFakeTimers(</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'12/26/2017, 6:54:49 PM'</span>).getTime()</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// evaluate the input code - we are already spying on console.log!</span></span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">'const Date = clock.Date;'</span> + sourceCode)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// don't forget to restore system clock</span></span><br><span class="line"><span class="comment">// otherwise good things will not happen</span></span><br><span class="line">clock.restore()</span><br></pre></td></tr></table></figure><p>Tricking <code>eval</code> to use local variable via closure is one of my <a href="../faking-lexical-scope/">favorite JS tricks</a>. Aside from this, I changed the original example a little bit. I split the single <code>console.log</code> to be two statements to better match what every example is doing and what my tests expect.</p><p><img src="/blog/images/array-explorer/faked-date.png" alt="Passing test after faking current time"></p><p><strong>Note</strong> the alises are highlighted when saved (pink and blue rounded labels <code>output</code> and <code>outputValues</code>). They are also highlighted with <code>@...</code> label when used.</p><h2><span id="need-for-speed">Need for speed</span></h2><p>The tests are passing, but there is one negative. They take too long to finish - 67 seconds! The main reason each tests takes a few seconds are the delays built into the app. There is half a second delay to let the user read the first line of the example code, then there is the &quot;type&quot; effect that uses <code>gsap</code> library to reveal the rest of the example code.</p><figure class="highlight js"><figcaption><span>AppCode.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">selectedUsage() &#123;</span><br><span class="line">  <span class="comment">// initial delay</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.typeOut()</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;,</span><br><span class="line">typeOut() &#123;</span><br><span class="line">  <span class="keyword">let</span> split = <span class="keyword">new</span> SplitText(<span class="keyword">this</span>.$refs.ex, &#123; <span class="attr">type</span>: <span class="string">'chars'</span> &#125;),</span><br><span class="line">    split2 = <span class="keyword">new</span> SplitText(<span class="keyword">this</span>.$refs.ex2, &#123; <span class="attr">type</span>: <span class="string">'chars'</span> &#125;),</span><br><span class="line">    tl = <span class="keyword">new</span> TimelineMax()</span><br><span class="line"></span><br><span class="line">  tl.add(<span class="string">'start'</span>)</span><br><span class="line">  <span class="comment">// animation keyframes</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <a href="https://github.com/greensock/GreenSock-JS" target="_blank" rel="noopener">gsap</a> is JavaScript animation library, so maybe if we can &quot;speed&quot; up application&#39;s timers we can zoom through the type animation and make our tests faster. While Sinon includes timers, I found <a href="https://github.com/sinonjs/lolex" target="_blank" rel="noopener">lolex</a> to be the most convenient library to work with fake timers. Luckily using this from our tests is very simple.</p><p>First, install <code>lolex</code> as a new dev dependency.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D lolex</span><br><span class="line">+ lolex@2.3.1</span><br></pre></td></tr></table></figure></p><p>Second, install fake timers into the application <em>before</em> the application loads. We can do this in the callback <code>onBeforeLoad</code> of the <a href="https://on.cypress.io/visit" target="_blank" rel="noopener"><code>cy.visit</code></a> method. It is important to pass the application&#39;s window as the target for stubbing timers.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fakeClock</span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:8080'</span>, &#123;</span><br><span class="line">    onBeforeLoad: <span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">      fakeClock = lolex.install(&#123;</span><br><span class="line">        target: win,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Inside the test logic we can manually advance the clock after the source code appears and the app called its <code>setTimeout</code> (which is now stubbed).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> confirmInputAndOutput = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy</span><br><span class="line">    .get(<span class="string">'.exampleoutput2'</span>).as(<span class="string">'output'</span>)</span><br><span class="line">    .invoke(<span class="string">'text'</span>).then(removeComments).as(<span class="string">'outputText'</span>)</span><br><span class="line">    .then(parseText).as(<span class="string">'outputValues'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fakeClock.tick(<span class="number">10000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// the test goes on</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The generous 10 second time jump completes the initial delay of 500ms and instantly zooms through any typing animation the app makes. The result is awesome - total time to finish all tests goes down from 67 seconds to 27 seconds!</p><h2><span id="how-do-you-say-test-in">How do you say test in ...</span></h2><p>The last thing I will do is write a test to make sure the language selector works. Because the language selection element does not have a good way to access it I have added <code>data-attr-cy</code> attribute</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selectedLanguage"</span> <span class="attr">data-attr-cy</span>=<span class="string">"language"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"(val, key) in languages"</span> <span class="attr">:value</span>=<span class="string">"key"</span>&gt;</span>&#123;&#123;val.long&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The test can use this data attribute to get the right selection element. After selecting the desired language (I am picking my native Russian), we use the same test logic as before.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'works in Russian'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'[data-attr-cy="language"'</span>).select(<span class="string">'Russian'</span>)</span><br><span class="line">  selectMethod(<span class="string">'удалить элементы'</span>) <span class="comment">// remove elements</span></span><br><span class="line">  selectMethodOptions(<span class="string">'первый элемент массива'</span>) <span class="comment">// first element of the array</span></span><br><span class="line">  confirmInputAndOutput()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/array-explorer/russian-test.png" alt="In Soviet Russia array removes you"></p><p><strong>Tip:</strong> we could have imported data for different languages directly from the <code>store/&lt;language&gt;</code> files. Then we could actually iterate and create full test suites for <em>every</em> language. After all, out tests are JavaScript and can share code with the web app itself!</p><h2><span id="final-thoughts">Final thoughts</span></h2><p>Here is the final result - the <a href="https://github.com/bahmutov/array-explorer/blob/9a07cc43734c150f170cececb5b3f76ce1af9851/cypress/integration/spec.js" target="_blank" rel="noopener">spec.js file</a> and the screen recording of the running tests. The tests take longer than 27 seconds because my laptop is choking a little bit during while doing full screen recording.</p><iframe width="853" height="480" src="https://www.youtube.com/embed/0t5rkNbN6sY?rel=0" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><p>I have opened a pull request <a href="https://github.com/sdras/array-explorer/pull/70" target="_blank" rel="noopener">sdras/array-explorer/pull/70</a> to merge these tests into the Array Explorer. Maybe these tests can inspire you to add tests to <a href="https://github.com/sdras/object-explorer" target="_blank" rel="noopener">sdras/object-explorer</a>?</p><p>You can find more information about Cypress from these links</p><ul><li><a href="https://www.cypress.io/" target="_blank" rel="noopener">https://www.cypress.io/</a></li><li><a href="https://on.cypress.io/intro" target="_blank" rel="noopener">https://on.cypress.io/intro</a></li><li><a href="https://www.cypress.io/blog/" target="_blank" rel="noopener">https://www.cypress.io/blog/</a></li><li><a href="../tags/cypress/">https://glebbahmutov.com/blog/tags/cypress/</a></li><li><a href="https://on.cypress.io/talks-media" target="_blank" rel="noopener">https://on.cypress.io/talks-media</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TLDR; testing a popular web app using Cypress.&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#array-explorer&quot;&gt;Array Explorer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="vuejs" scheme="https://glebbahmutov.com/blog/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Testing Vue CLI reload</title>
    <link href="https://glebbahmutov.com/blog/testing-vue-cli-reload/"/>
    <id>https://glebbahmutov.com/blog/testing-vue-cli-reload/</id>
    <published>2018-01-07T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="vue-cli-test">Vue-cli test</span></h2><p>Recently I came across <a href="https://github.com/vuejs/vue-cli/blob/15c2c78481ba15402c1b1e089961f4443e1aa6c9/packages/%40vue/cli-service/lib/__tests__/serve.spec.js" target="_blank" rel="noopener">vue-cli server reload test</a>. The test uses <a href="https://github.com/GoogleChrome/puppeteer#readme" target="_blank" rel="noopener">Puppeteer</a> to verify that vue-cli scaffolds a project correctly, that dev server is serving a Vue app, and that changing the app&#39;s source file reloads the page, and it shows updated text. Here is the main part of that test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> runTest = <span class="keyword">async</span> (url) =&gt; &#123;</span><br><span class="line">  <span class="comment">// some setup code omitted</span></span><br><span class="line">  <span class="keyword">const</span> browser = activeBrowser = <span class="keyword">await</span> puppeteer.launch(opts)</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">  <span class="keyword">await</span> page.goto(url)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> assertText = <span class="keyword">async</span> (selector, text) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">await</span> page.evaluate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">'h1'</span>).textContent</span><br><span class="line">    &#125;)</span><br><span class="line">    expect(value).toMatch(text)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> msg = <span class="string">`Welcome to Your Vue.js App`</span></span><br><span class="line">  <span class="keyword">await</span> assertText(<span class="string">'h1'</span>, msg)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// test hot reload</span></span><br><span class="line">  <span class="keyword">const</span> file = <span class="keyword">await</span> read(<span class="string">`src/App.vue`</span>)</span><br><span class="line">  <span class="keyword">await</span> write(<span class="string">`src/App.vue`</span>, file.replace(msg, <span class="string">`Updated`</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> nextUpdate() <span class="comment">// wait for child stdout update signal</span></span><br><span class="line">  <span class="keyword">await</span> sleep(<span class="number">1000</span>) <span class="comment">// give the client time to update, should happen in 1s</span></span><br><span class="line">  <span class="keyword">await</span> assertText(<span class="string">'h1'</span>, <span class="string">`Updated`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> browser.close()</span><br><span class="line">  activeBrowser = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above code certainly works. But even discounting all the code outside the function <code>runTest</code>, count how many lines of code are <em>related to the test</em> and how many lines of code are dealing with starting the browser, finding the element, waiting for the text and then cleaning up. Puppeteer is a great tool, but it is NOT a testing tool specifically; it is a general Chrome browser automation tool. Thus a tool <em>specifically designed</em> to be a testing tool around a real browser might be more convenient to use in this case.</p><h2><span id="cypress">Cypress</span></h2><p>One such tool that specifically focuses on solving browser management, element selection, automated retries and other developer experience issues common during testing is <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress.io</a> (full disclosure: I have joined Cypress team in 2017 after being a super happy user for almost a year). Let me try writing a similar server test using Cypress for comparison.</p><p>I prefer working on a new project rather than forking <code>vue-cli</code> to avoid distractions of a large code base. Let us create a new Vue project to use as a test playground. After installing <code>vue-cli</code> globally, I need to scaffold a project with hot module reloading (you can find finished project at <a href="https://github.com/bahmutov/test-vue-cli" target="_blank" rel="noopener">bahmutov/test-vue-cli</a>).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ vue list</span><br><span class="line"></span><br><span class="line">  Available official templates:</span><br><span class="line"></span><br><span class="line">  ★  browserify - A full-featured Browserify + vueify setup with hot-reload, linting &amp; unit testing.</span><br><span class="line">  ★  browserify-simple - A simple Browserify + vueify setup for quick prototyping.</span><br><span class="line">  ★  pwa - PWA template for vue-cli based on the webpack template</span><br><span class="line">  ★  simple - The simplest possible Vue setup in a single HTML file</span><br><span class="line">  ★  webpack - A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.</span><br><span class="line">  ★  webpack-simple - A simple Webpack + vue-loader setup for quick prototyping.</span><br></pre></td></tr></table></figure><p>Pick <code>webpack-simple</code> and run <code>vue init</code> with full template name (to get around 404 response I am getting today) <a href="https://github.com/vuejs-templates/webpack-simple" target="_blank" rel="noopener">vuejs-templates/webpack-simple</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ vue init vuejs-templates/webpack-simple</span><br><span class="line"></span><br><span class="line">? Generate project in current directory? Yes</span><br><span class="line">? Project name test-vue-cli</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author Gleb Bahmutov</span><br><span class="line">? License MIT</span><br><span class="line">? Use sass? No</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated &quot;test-vue-cli&quot;.</span><br><span class="line"></span><br><span class="line">   To get started:</span><br><span class="line"></span><br><span class="line">     npm install</span><br><span class="line">     npm run dev</span><br></pre></td></tr></table></figure><p>The project has been bootstrapped in the current folder. Install NPM dependencies and here are the files in the current folder</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l</span><br><span class="line">total 32</span><br><span class="line">-rw-r--r--    1  staff    327 Jan  7 14:27 README.md</span><br><span class="line">-rw-r--r--    1  staff    206 Jan  7 14:27 index.html</span><br><span class="line">drwxr-xr-x  640  staff  21760 Jan  7 14:29 node_modules</span><br><span class="line">-rw-r--r--    1  staff    855 Jan  7 14:27 package.json</span><br><span class="line">drwxr-xr-x    5  staff    170 Jan  7 14:27 src</span><br><span class="line">-rw-r--r--    1  staff   1600 Jan  7 14:27 webpack.config.js</span><br></pre></td></tr></table></figure><p>Install Cypress using <code>npm i -D cypress</code> and add two script commands.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"cross-env NODE_ENV=development webpack-dev-server --open --hot"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack --progress --hide-modules"</span>,</span><br><span class="line">    <span class="attr">"cypress:open"</span>: <span class="string">"cypress open"</span>,</span><br><span class="line">    <span class="attr">"cypress:run"</span>: <span class="string">"cypress run"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Open Cypress once with <code>npm run cypress:open</code> to scaffold its folder <code>cypress</code>.</p><p><img src="/blog/images/test-vue-cli/scaffold.png" alt="Scaffolding Cypress on first run"></p><p>I prefer deleting the created <code>example_spec.js</code> with many many examples of tests and starting from scratch. Let us verify that our default application shows the expected text &quot;Welcome to Your Vue.js App&quot; in element <code>h1</code>.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'serves'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:8080'</span>)</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'Welcome to Your Vue.js App'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Start the dev server with <code>npm run dev</code> and open Cypress with <code>npm run cypress:open</code>. We have a passing test!</p><p><img src="/blog/images/test-vue-cli/first-test.png" alt="First test"></p><p>Now let us read the <code>src/App.vue</code> file, change the message passed to the Vue component and check that the browser shows the updated message. We are going to use <a href="https://on.cypress.io/readfile" target="_blank" rel="noopener"><code>cy.readFile</code></a> and <a href="https://on.cypress.io/writefile" target="_blank" rel="noopener"><code>cy.writeFile</code></a> methods.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line"><span class="keyword">const</span> setNewText = <span class="function"><span class="params">source</span> =&gt;</span> source.replace(message, <span class="string">'Updated'</span>)</span><br><span class="line">it(<span class="string">'serves'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:8080'</span>)</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, message)</span><br><span class="line">  cy</span><br><span class="line">    .readFile(<span class="string">'src/App.vue'</span>)</span><br><span class="line">    .then(setNewText)</span><br><span class="line">    .then(<span class="function"><span class="params">source</span> =&gt;</span> cy.writeFile(<span class="string">'src/App.vue'</span>, source))</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'Updated'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes, of course. We can see each step of the test in the command log on the left.</p><p><img src="/blog/images/test-vue-cli/updated.png" alt="Updated text test"></p><p>Here is the important part. Cypress is really optimized for testing. Do you want to see why the first assertion <code>cy.contains(&#39;h1&#39;, message)</code> passed? Hover over or click on step 2 to see the state of the DOM <em>at that moment</em>. We are finding the right text at the right location on the page - not accidentally matching some other text that might be on the page.</p><p><img src="/blog/images/test-vue-cli/contains.png" alt="Contains text"></p><p>Click on the next test command - <code>READFILE</code>. It shows a popup message &quot;Printed output to your console&quot;. Open the DevTools (Cypress is after all just an Electron app, or it can control Chrome browser) to see the file read and its contents.</p><p><img src="/blog/images/test-vue-cli/read-file.png" alt="cy.readFile"></p><p>Isn&#39;t this convenient during working with tests to see all data related to each step of the test?</p><h2><span id="dealing-with-initial-state">Dealing with initial state</span></h2><p>There is one more note that I must make. You should strive to make each test independent from any other test, even independent from <em>its previous run</em>. In our case we have <em>changed</em> the file <code>src/App.vue</code>, and if we reload the test, it fails to find the original text &quot;Welcome to Your Vue.js App&quot;. Our previous run changed the source file, and our test did not start from the clean state.</p><p><img src="/blog/images/test-vue-cli/failed.png" alt="Running test again fails"></p><p>Again, the above screenshot shows the difference between a general browser automation tool and Cypress. The reason for the failure is communicated very clearly; Cypress team pays a lot of attention to good error messages. It should be enough to look at the screenshot to immediately see the problem. In this case the app shows &quot;Updated&quot; where &quot;Welcome ...&quot; text should have been.</p><p>By the way, Cypress takes video of the entire test run by default, and screenshot after failures automatically when running on CI with <code>npm run cypress:run</code> command; there is nothing to configure.</p><p>Ok, let us fix the test. We can modify the <code>App.vue</code> file <em>after</em> the test - but that is an <a href="https://on.cypress.io/best-practices#Using-after-or-afterEach-hooks" target="_blank" rel="noopener">anti-pattern to avoid</a>. You never know if the test failed or crashed - the clean up after the test is <em>not guaranteed</em>. So let us make sure the test starts with expected file.</p><p>There are many things we could do in this case, but I pick using a fixture. Copy the original <code>src/App.vue</code> to <code>cypress/fixtures/App.vue</code>. Before our test, load the fixture and save it as <code>src/App.vue</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">'App.vue'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">source</span> =&gt;</span> cy.writeFile(<span class="string">'src/App.vue'</span>, source))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line"><span class="keyword">const</span> setNewText = <span class="function"><span class="params">source</span> =&gt;</span> source.replace(message, <span class="string">'Updated'</span>)</span><br><span class="line">it(<span class="string">'serves'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:8080'</span>)</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, message)</span><br><span class="line">  cy</span><br><span class="line">    .readFile(<span class="string">'src/App.vue'</span>)</span><br><span class="line">    .then(setNewText)</span><br><span class="line">    .then(<span class="function"><span class="params">source</span> =&gt;</span> cy.writeFile(<span class="string">'src/App.vue'</span>, source))</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'Updated'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test reliably passes any time we run it. Even better, we can add back our very first original &quot;message&quot; test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Vue server'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> message = <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line">  <span class="keyword">const</span> setNewText = <span class="function"><span class="params">source</span> =&gt;</span> source.replace(message, <span class="string">'Updated'</span>)</span><br><span class="line">  <span class="keyword">const</span> saveSource = <span class="function"><span class="params">source</span> =&gt;</span> cy.writeFile(<span class="string">'src/App.vue'</span>, source)</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.fixture(<span class="string">'App.vue'</span>).then(saveSource)</span><br><span class="line">    cy.visit(<span class="string">'http://localhost:8080'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">'serves'</span>, () =&gt; &#123;</span><br><span class="line">    cy.contains(<span class="string">'h1'</span>, message)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">'reloads on change'</span>, () =&gt; &#123;</span><br><span class="line">    cy</span><br><span class="line">      .readFile(<span class="string">'src/App.vue'</span>)</span><br><span class="line">      .then(setNewText)</span><br><span class="line">      .then(saveSource)</span><br><span class="line">    cy.contains(<span class="string">'h1'</span>, <span class="string">'Updated'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This way we will know exactly which dev server feature is broken if a test fails. First test tells us if the dev server is serving the bundled application. Second test tells us if the hot module replacement is working.</p><p><img src="/blog/images/test-vue-cli/two-tests.png" alt="Two tests"></p><h2><span id="starting-the-server">Starting the server</span></h2><p>The <a href="https://github.com/vuejs/vue-cli/blob/15c2c78481ba15402c1b1e089961f4443e1aa6c9/packages/%40vue/cli-service/lib/__tests__/serve.spec.js" target="_blank" rel="noopener">original Vue test</a> also starts the dev server, grabs the output URL and runs the test. We believe starting and stopping server <em>inside</em> Cypress is an anti-pattern. Instead we recommend using <a href="https://github.com/bahmutov/start-server-and-test" target="_blank" rel="noopener">start-server-and-test</a> utility.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test"</span>: <span class="string">"start-server-and-test dev http://localhost:8080 cypress:run"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>npm test</code> command starts the dev server, waits for the given url to respond with 200, then runs Cypress without GUI, and then shuts down the server. The url is hardcoded, but we could add extracting url from the first command&#39;s output to <code>start-server-and-test</code> tool if needed. For now I will just move the url from the spec file to <code>cypress.json</code> file.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">'App.vue'</span>).then(saveSource)</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"defaultCommandTimeout"</span>: <span class="number">10000</span>,</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:8080"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At runtime, we can even overwrite the base url using command line arguments or environment variable. For example, if the server is running at port 3000 we can run out tests against that port with this command.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CYPRESS_baseUrl=http://localhost:3000 npm run cypress:run</span><br></pre></td></tr></table></figure><h2><span id="final-thoughts">Final thoughts</span></h2><p>The <a href="https://github.com/vuejs/vue-cli/blob/15c2c78481ba15402c1b1e089961f4443e1aa6c9/packages/%40vue/cli-service/lib/__tests__/serve.spec.js" target="_blank" rel="noopener">Vue test</a> has 60 lines, including several blank ones. Almost equivalent Cypress test is 20 lines. But I think the smaller test size does not tell the whole story.</p><p>Puppeteer is a great general purpose Chrome automation tool, but lacks anything to make testing web applications easier. Cypress has smart selector API, automatic command retries, GUI with full interactive command history, server and object mocking, helpful errors, site blacklisting, command customization, plugins API, great CI support, screenshots and video recording, <a href="https://www.cypress.io/dashboard/" target="_blank" rel="noopener">central dashboard</a> and many other things currently on the <a href="https://on.cypress.io/roadmap" target="_blank" rel="noopener">roadmap</a>.</p><p>Give Cypress 5 minutes, and I guarantee that you will not want to use any other tool for E2E testing. After all, here is what NASA <a href="https://twitter.com/CollinEstes/status/949382099722752000" target="_blank" rel="noopener">says about Cypress</a></p><p><img src="/blog/images/test-vue-cli/nasa.png" alt="NASA tweets"></p><h3><span id="where-to-start">Where to start</span></h3><ul><li><a href="https://www.cypress.io/" target="_blank" rel="noopener">https://www.cypress.io/</a></li><li><a href="https://on.cypress.io/intro" target="_blank" rel="noopener">https://on.cypress.io/intro</a></li><li><a href="https://on.cypress.io/why-cypress" target="_blank" rel="noopener">https://on.cypress.io/why-cypress</a></li><li><a href="https://on.cypress.io/tutorials" target="_blank" rel="noopener">https://on.cypress.io/tutorials</a></li><li><a href="https://on.cypress.io/talks-media" target="_blank" rel="noopener">https://on.cypress.io/talks-media</a></li><li><a href="https://on.cypress.io/key-differences" target="_blank" rel="noopener">https://on.cypress.io/key-differences</a></li><li><a href="https://github.com/bahmutov/test-vue-cli" target="_blank" rel="noopener">https://github.com/bahmutov/test-vue-cli</a> has the source code for this blog post</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;vue-cli-test&quot;&gt;Vue-cli test&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Recently I came across &lt;a href=&quot;https://github.com/vuejs/vue-cli/blob/15c2c78481ba154
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="vuejs" scheme="https://glebbahmutov.com/blog/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Quick functional refactoring</title>
    <link href="https://glebbahmutov.com/blog/quick-refactoring/"/>
    <id>https://glebbahmutov.com/blog/quick-refactoring/</id>
    <published>2018-01-05T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>I was writing a small program to drive <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress test runner</a> via its <a href="https://on.cypress.io/command-line#Module-API" target="_blank" rel="noopener">module api</a> to run the same spec file against multiple apps. There is a list of application names and we go through each app one by one.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'console.table'</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'bluebird'</span>)</span><br><span class="line"><span class="built_in">Promise</span>.mapSeries(apps, testApp)</span><br><span class="line">  .then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// results is array of objects</span></span><br><span class="line">    <span class="comment">// example:</span></span><br><span class="line">    <span class="comment">// [&#123;</span></span><br><span class="line">    <span class="comment">//   tests: 21,</span></span><br><span class="line">    <span class="comment">//   passes: 21,</span></span><br><span class="line">    <span class="comment">//   pending: 0,</span></span><br><span class="line">    <span class="comment">//   failures: 0,</span></span><br><span class="line">    <span class="comment">//   duration: '35 seconds',</span></span><br><span class="line">    <span class="comment">//   screenshots: 0,</span></span><br><span class="line">    <span class="comment">//   video: false,</span></span><br><span class="line">    <span class="comment">//   version: '1.4.1'</span></span><br><span class="line">    <span class="comment">// &#125;, ...]</span></span><br><span class="line">    <span class="built_in">console</span>.table(<span class="string">'App results'</span>, results)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The <code>testApp</code> function calls Cypress module to actually run the tests.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">'cypress'</span>)</span><br><span class="line"><span class="keyword">const</span> testApp = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> cypress</span><br><span class="line">    .run(&#123;</span><br><span class="line">      browser: args.browser,</span><br><span class="line">      env: &#123;</span><br><span class="line">        app</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ok, so let&#39;s run it with two different apps, what do we see?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TodoMVC results</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">tests  passes  pending  failures  duration    screenshots  video  version</span><br><span class="line">-----  ------  -------  --------  ----------  -----------  -----  -------</span><br><span class="line">21     21      0        0         33 seconds  0            false  1.4.1</span><br><span class="line">29     29      0        0         37 seconds  0            false  1.4.1</span><br></pre></td></tr></table></figure><p>Hmm, not really useful. There are columns that are going to be the same: screenshots, video and version. And there is the most important column missing - the name of the app for each row! I also want to highlight the number of failures if there are any. Any value above zero in the <code>failures</code> column should be displayed in red, while zero should be displayed in green.</p><p>Ok, we are good programmers so we separate changing the shape of the object from changing colors. We can attach transforms to the promise returned from <code>cypress.run</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testApp = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> cypress</span><br><span class="line">    .run(&#123;</span><br><span class="line">      browser: args.browser,</span><br><span class="line">      env: &#123;</span><br><span class="line">        app</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(addInfo)</span><br><span class="line">    .then(addColors)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The function is <code>addInfo</code> that will remove some properties and add others. We can write it in my usual &quot;procedural&quot; style. That&#39;s how I usually start my code - just get the thing working.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testApp = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> addInfo = <span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">delete</span> results.screenshots</span><br><span class="line">    <span class="keyword">delete</span> results.video</span><br><span class="line">    <span class="keyword">delete</span> results.version</span><br><span class="line">    results.app = app</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cypress</span><br><span class="line">    .run(...)</span><br><span class="line">    .then(addInfo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hmm, is this function <code>testResults</code> doing what I think it should be doing? How can I test it - it is deep inside the <code>testApp</code> closure, hard to reach to test it. The only reason it has to be there is because it needs variable <code>app</code>. Let us solve this problem - let us move <code>addInfo</code> outside. We can pass the <code>app</code> name as an argument.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addInfo = <span class="function">(<span class="params">results, app</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">delete</span> results.screenshots</span><br><span class="line">  <span class="keyword">delete</span> results.video</span><br><span class="line">  <span class="keyword">delete</span> results.version</span><br><span class="line">  results.app = app</span><br><span class="line">  <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hmm, but using this function is a little inconvenient.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> cypress</span><br><span class="line">  .run(...)</span><br><span class="line">  .then(<span class="function"><span class="params">results</span> =&gt;</span> addInfo(results, app))</span><br></pre></td></tr></table></figure><p>See what I mean? We know <code>app</code> right away, but have to wait until the <code>cypress.run</code> promise resolves to get the <code>results</code> value. In situations like this, when we know one argument <em>much earlier</em> than the other arguments, <a href="../put-callback-first-for-elegance/">we should place first</a> in the functions signature. So this order would be preferred. Now we can do partial application right in <code>.then</code> callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addInfo = <span class="function">(<span class="params">app, results</span>) =&gt;</span> &#123; ... &#125;</span><br><span class="line">cypress.run(...)</span><br><span class="line">  .then(addInfo.bind(<span class="literal">null</span>, app))</span><br></pre></td></tr></table></figure><p>Great, JavaScript can even do <a href="../binding-vs-partial-application/">partial application</a> in ES5, but we can shorten our code using a helper library like <a href="http://ramdajs.com/docs/" target="_blank" rel="noopener">Ramda</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line">cypress.run(...)</span><br><span class="line">  .then(R.partial(addInfo, app))</span><br></pre></td></tr></table></figure><p>But we can make this even more convenient by currying the <code>addInfo</code> function - in ES6 it is so simple to do, no extras required.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addInfo = <span class="function"><span class="params">app</span> =&gt;</span> results =&gt; &#123;...&#125;</span><br><span class="line"><span class="comment">// look how it is easy now</span></span><br><span class="line">cypress.run(...)</span><br><span class="line">  .then(addInfo(app))</span><br></pre></td></tr></table></figure><p>Easy peasy.</p><p>Let us look inside the function <code>addInfo</code> itself. The point of functional refactoring is to split unrelated operations into many small single purpose functions and then compose back <a href="http://slides.com/bahmutov/fun-javascript-workshop#/" target="_blank" rel="noopener">slides</a>. We currently have two different things going on - deleting some properties and adding a new one.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// deleting</span></span><br><span class="line"><span class="keyword">delete</span> results.screenshots</span><br><span class="line"><span class="keyword">delete</span> results.video</span><br><span class="line"><span class="keyword">delete</span> results.version</span><br><span class="line"><span class="comment">// adding</span></span><br><span class="line">results.app = app</span><br></pre></td></tr></table></figure><p>Deleting a list of properties from an object is so common, there is a function in Ramda that does exactly that <a href="http://ramdajs.com/docs/#omit" target="_blank" rel="noopener">R.omit</a>. And it is already designed &quot;the right way&quot; - the names of properties we know is at first position, and the function is curried.We can even move it out of <code>addInfo</code> into its own <code>.then(...)</code> step.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cypress.run(...)</span><br><span class="line">  .then(R.omit([<span class="string">'screenshots'</span>, <span class="string">'video'</span>, <span class="string">'version'</span>]))</span><br><span class="line">  .then(addInfo(app))</span><br></pre></td></tr></table></figure><p>Now let&#39;s add the <code>app</code> property. There is no built-in method for this - and you will see why shortly (there is more general and powerful one). We could make our own tiny function just for this. That is what I do a lot - writing tiny functions when I do not want to bring heavy guns.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setProp = <span class="function"><span class="params">name</span> =&gt;</span> value =&gt; <span class="function"><span class="params">object</span> =&gt;</span> &#123;</span><br><span class="line">  object[name] = value</span><br><span class="line">  <span class="keyword">return</span> object</span><br><span class="line">&#125;</span><br><span class="line">cypress.run(...)</span><br><span class="line">  .then(R.omit([<span class="string">'screenshots'</span>, <span class="string">'video'</span>, <span class="string">'version'</span>]))</span><br><span class="line">  .then(setProp(<span class="string">'app'</span>, app))</span><br></pre></td></tr></table></figure><p>Great, we have triple function <code>setProp</code>! But it is not as polished as <code>R.omit</code>. We can notice this by inspecting the input and output objects.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = R.omit([<span class="string">'foo'</span>])(input)</span><br><span class="line">result === input <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>R.omit</code> does not mutate the input object - it creates a new one without the listed properties. Our function <code>setProp</code> mutates the object - making it harder to rely on it. Any object passed into <code>setProp</code> will be forever changed. Or not, you really cannot tell in JavaScript. So lets look at what Ramda can give us. Working with object properties is done via <em>lenses</em>. First we create a lens to look at specific property <code>app</code>. Then we use a different function to set a specific value via this lens on an object <em>that will arrive later</em>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lens = R.lensProp(<span class="string">'app'</span>)</span><br><span class="line">cypress.run(...)</span><br><span class="line">  .then(R.omit([<span class="string">'screenshots'</span>, <span class="string">'video'</span>, <span class="string">'version'</span>]))</span><br><span class="line">  .then(R.set(lens, app))</span><br></pre></td></tr></table></figure><p>We don&#39;t need to make <code>lens</code> object separately, we can just make it in place when needed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cypress.run(...)</span><br><span class="line">  .then(R.omit([<span class="string">'screenshots'</span>, <span class="string">'video'</span>, <span class="string">'version'</span>]))</span><br><span class="line">  .then(R.set(R.lensProp(<span class="string">'app'</span>), app))</span><br></pre></td></tr></table></figure><p>Perfect, remember why we have started this? So that our function <code>appInfo</code> is testable. Look what has happened now - we have eliminated <code>appInfo</code> completely. Instead we have two very simple functions from a well tested and widely used library. It is very unlikely that anything will go wrong in <code>R.omit</code> or <code>R.set</code> functions, so we don&#39;t have to worry.</p><p>Next we should look at the <code>addColors</code> function. My original implementation is using <a href="https://github.com/chalk/chalk#readme" target="_blank" rel="noopener">chalk</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addColors = <span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">  results.failures = results.failures</span><br><span class="line">    ? chalk.red(results.failures)</span><br><span class="line">    : chalk.green(results.failures)</span><br><span class="line">  <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice the similarity to our previous refactoring - we are working with specific property on an object that is yet to arrive. So we will make a lens to &quot;look&quot; at the property <code>failures</code> and we are going to modify its value and will put it back into the object. Or rather we will make a new object with updated property (thanks immutability).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> failuresLens = R.lensProp(<span class="string">'failures'</span>)</span><br><span class="line"><span class="keyword">const</span> colorFailures = <span class="function"><span class="params">n</span> =&gt;</span> (n ? chalk.red(n) : chalk.green(n))</span><br><span class="line"><span class="keyword">const</span> addColors = <span class="function"><span class="params">results</span> =&gt;</span> R.over(failuresLens, colorFailures, results)</span><br></pre></td></tr></table></figure><p>Notice how we split the function into its atomic operations? And the great thing - the last line is NOT needed - all it does is passing <code>results</code> as the last argument to <code>R.over</code>. Since every function in Ramda is curried, we can get rid of it. Plus we can create the lens in place, bringing our logic to super simple two-liner.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colorFailures = <span class="function"><span class="params">n</span> =&gt;</span> (n ? chalk.red(n) : chalk.green(n))</span><br><span class="line"><span class="keyword">const</span> addColors = R.over(R.lensProp(<span class="string">'failures'</span>), colorFailures)</span><br></pre></td></tr></table></figure><p>So here is our final code - pure functions, passing and modifying data along the chain.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colorFailures = <span class="function"><span class="params">n</span> =&gt;</span> (n ? chalk.red(n) : chalk.green(n))</span><br><span class="line"><span class="keyword">const</span> addColors = R.over(R.lensProp(<span class="string">'failures'</span>), colorFailures)</span><br><span class="line"><span class="keyword">return</span> cypress</span><br><span class="line">  .run(...)</span><br><span class="line">  .then(R.omit([<span class="string">'screenshots'</span>, <span class="string">'video'</span>, <span class="string">'version'</span>]))</span><br><span class="line">  .then(R.set(R.lensProp(<span class="string">'app'</span>), app))</span><br><span class="line">  .then(addColors)</span><br></pre></td></tr></table></figure><p>And here the result - nice little table we got here.</p><p><img src="/blog/images/todomvc-table.png" alt="Results"></p><p>PS: you do not have to code every object transform by hand. I wrote a tiny utility <a href="https://github.com/bahmutov/change-by-example" target="_blank" rel="noopener">change-by-example</a> that given two objects computes the transformation using Ramda functions and <a href="../lenses/">especially lenses</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I was writing a small program to drive &lt;a href=&quot;https://www.cypress.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cypress test runner&lt;/a&gt; via its &lt;
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="functional" scheme="https://glebbahmutov.com/blog/tags/functional/"/>
    
  </entry>
  
  <entry>
    <title>JSON schema for the win</title>
    <link href="https://glebbahmutov.com/blog/json-schema-for-the-win/"/>
    <id>https://glebbahmutov.com/blog/json-schema-for-the-win/</id>
    <published>2017-12-21T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have noticed a curious thing while editing <code>tsconfig.json</code> file the other day. I was usingVSCode and there was an IntelliSense popup as I started entering a property name in a JSONobject.</p><p><img src="/blog/images/json-schema/tsconfig-vscode.png" alt="IntelliSense popup in tsconfig.json"></p><p>Then I have noticed the same happening while editing <code>package.json</code>. Here is me hovering overthe property <code>main</code>. Seems accurate.</p><p><img src="/blog/images/json-schema/package-vscode.png" alt="IntelliSense popup in package.json"></p><p>The editor was quite helpful - not only it is displaying suggestions, it also highlights aserrors places where I am trying to enter invalid values.</p><p><img src="/blog/images/json-schema/wrong-value.png" alt="Entering a number for main"></p><p>The editor &quot;knows&quot; that <code>main</code> property should have a string value, and not a number.</p><p>So I have decided to investigate how the editor knows what properties are supposed to bein the <code>tsconfig.json</code> or <code>package.json</code>? Searching around I found VSCode<a href="https://code.visualstudio.com/docs/languages/json" target="_blank" rel="noopener">Json editing docs</a>. Turns out the secretto the IntelliSense &quot;superpowers&quot; is that the editor finds schema for the JSON file by name.For <code>tsconfig.json</code> there is a public schema at<a href="json.schemastore.org/tsconfig">json.schemastore.org/tsconfig</a>. It describes every property,here is a small part</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"JSON schema for the TypeScript compiler's configuration file"</span>,</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"http://json-schema.org/draft-04/schema#"</span>,</span><br><span class="line">  <span class="attr">"definitions"</span>: &#123;</span><br><span class="line">    <span class="attr">"filesDefinition"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"files"</span>: &#123;</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"If no 'files' or 'include' property ..."</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">          <span class="attr">"items"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are a lot of schemas for widely used <code>JSON</code> files on<a href="http://schemastore.org/json/" target="_blank" rel="noopener">schemastore.org/json/</a> and you can add your own by makinga <a href="https://github.com/schemastore/schemastore/#contribute" target="_blank" rel="noopener">pull request</a>.</p><h2><span id="cypressjson-schema">Cypress.json schema</span></h2><p>I have been working a lot on <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress test runner</a> - after all, it ismy job. All Cypress options can be configured inside the <code>cypress.json</code> file in the userproject. Guess what - <a href="https://on.cypress.io/configuration" target="_blank" rel="noopener">there are LOT of options</a>.I constantly had to look up configuration names and allowed values myself!</p><p>A JSON schema would be super helpful. So I wrote one, by mostly copying the propertydescriptions from the documentation and pasting them into the JSON file. You can findthe result <a href="https://github.com/cypress-io/cypress/blob/ad0357dce072db27c0d45de55d429ed2c0d2c347/cli/schema/cypress.schema.json" target="_blank" rel="noopener">here</a>.</p><p>I have opened a pull request <a href="https://github.com/SchemaStore/schemastore/pull/384" target="_blank" rel="noopener">#384</a>to add a schema for <code>cypress.json</code> file. This pull request is a little unusual. Instead ofuploading a static JSON file to the <code>schemastore</code>, I only added a record to their catalogto point at JSON schema file stored in our<a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">https://github.com/cypress-io/cypress</a> repo.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"cypress.json"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Cypress.io test runner configuration file"</span>,</span><br><span class="line">  <span class="attr">"fileMatch"</span>: [ <span class="string">"cypress.json"</span> ],</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"https://raw.githubusercontent.com/cypress-io/cypress/develop/cli/schema/cypress.schema.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While waiting for the Schemastore pull request to be accepted, I wanted to start using theschema file. Luckily, VSCode allows me to configure my own settings right away.</p><p>Open &quot;Preferences&quot; - &quot;Settings&quot; - &quot;User Settings&quot;. Then add a new section to the object.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"json.schemas"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"fileMatch"</span>: [</span><br><span class="line">        <span class="string">"/cypress.json"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://raw.githubusercontent.com/cypress-io/cypress/develop/cli/schema/cypress.schema.json"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Boom! Open any <code>cypress.json</code> file and start enjoying life in the fast lane.</p><iframe width="720" height="405" src="https://www.youtube.com/embed/G164ULdJ-70?rel=0" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><p>If you do not have public JSON schema that works for everyone (for example if you have multipleversions of config files), you can distribute the JSON schema file with your JSON file andpoint at it using a property in the JSON file itself. For example, in the <code>cypress.json</code>you could do</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:8000"</span>,</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"../node_modules/cypress/schema/cypress.schema.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VSCode and other editors are smart enough to find and apply schema file from the relative pathor from URL specified in the <code>$schema</code> property.</p><p>Happy coding!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have noticed a curious thing while editing &lt;code&gt;tsconfig.json&lt;/code&gt; file the other day. I was using
VSCode and there was an IntelliSe
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Sync callbacks</title>
    <link href="https://glebbahmutov.com/blog/sync-callbacks/"/>
    <id>https://glebbahmutov.com/blog/sync-callbacks/</id>
    <published>2017-12-19T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>One thing that always trips me up in JavaScript is its event-driven nature.A piece of code written &quot;normally&quot; does not execute linearly. When we startlearning JS language, we see examples like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'x ='</span>, x)</span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = identity(<span class="string">'foo'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'result ='</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapped = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(identity)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'mapped ='</span>, mapped)</span><br></pre></td></tr></table></figure><p>In what order does this execute? In the order written - from top line to the bottom line.We see this in the printed values</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = foo</span><br><span class="line">result = foo</span><br><span class="line">x = 1</span><br><span class="line">x = 2</span><br><span class="line">x = 3</span><br><span class="line">mapped = [ 1, 2, 3 ]</span><br></pre></td></tr></table></figure><p>This is relatively easy to understand. But things become much more complicated when youwrite &quot;regular&quot; Node or browser code. It is difficult because all the sudden, the callbacksthat look absolutely the same are NOT called synchronously. Instead they will be called some time in the future. Here is the &quot;simple&quot; code that causes all the confusion in the world.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncIdentity</span>(<span class="params">x, cb</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'returning x ='</span>, x)</span><br><span class="line">    cb(x)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = asyncIdentity(<span class="string">'foo'</span>, (arg) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'callback value ='</span>, arg)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'result ='</span>, result)</span><br></pre></td></tr></table></figure><p>To the outside caller function <code>asyncIdentity</code> looks almost the same as our previousfunction <code>identity</code>. But look a the program&#39;s output - the order of statements is NOTwhat you would expect by reading the source code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = undefined</span><br><span class="line">returning x = foo</span><br><span class="line">callback value = foo</span><br></pre></td></tr></table></figure><p>Instead of executing the callback right away, the <em>last statement</em> <code>console.log(&#39;result =&#39;, result)</code> is executed instead. And notice that we no longer get anyresult - there is no concept of result available immediately. Instead the computed value will bepassed to the callback function by scheduling it to run - to the back of the event queue it goes!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'returning x ='</span>, x)</span><br><span class="line">  cb(x)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>If only this function did not use <code>setTimeout</code>! Then it would not cause any problems in tracingthe flow of run time calls.</p><p>We get around callbacks. We now got Promises - a way to schedule computation to receive a computed value eventually and call callbacks using <code>.then</code> method, rather than byconvention.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promisedIdentity</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'returning x ='</span>, x)</span><br><span class="line">      resolve(x)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">promisedIdentity(<span class="string">'foo'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'callback value ='</span>, arg)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>This program acts &quot;more sensibly&quot;. The output shows that the code inside <code>promisedIdentity</code>first runs, then the callback inside &quot;then&quot; executes. Since &quot;then&quot; callback is below the promisewe almost read the program top to bottom, like a regular synchronous program. This is much betterthan jumping up and down when reading a source code with callbacks.</p><p>Small aside. There is now <code>async / await</code> to force asynchronous code to read &quot;normally&quot;. I donot like this construct at all, and would prefer moving towards better structure than Promise - like <a href="http://folktale.origamitower.com/api/v2.0.0/en/folktale.concurrency.task.html" target="_blank" rel="noopener">Task</a>.</p><p>Coming full circle, I am now finding myself struggling with using objects like <a href="http://folktale.origamitower.com/api/v2.0.0/en/folktale.maybe.html" target="_blank" rel="noopener">Maybe</a>, all because theyuse callbacks that I expect to be asynchronous; and I am trying to attach my code torun as a callback, rather than get the value out (like we have done with array <code>const mapped = [1, 2, 3].map(identity)</code>).</p><p>For example, if I want to get a valid value, and multiply it by 2, I could have an <code>if</code> statement</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = ... <span class="comment">// comes from somewhere</span></span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">x</span> =&gt;</span> x + x</span><br><span class="line"><span class="keyword">let</span> result</span><br><span class="line"><span class="keyword">if</span> (x !== <span class="literal">undefined</span> and x !== <span class="literal">null</span>) &#123;</span><br><span class="line">    result = double(x)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = <span class="string">'default value'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><p>But <code>Maybe</code> is a much better way to work with values that might be invalid.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Maybe = <span class="built_in">require</span>(<span class="string">'folktale/maybe'</span>)</span><br><span class="line"><span class="keyword">const</span> x = Maybe.fromNullable(...) <span class="comment">// value comes from somewhere</span></span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">x</span> =&gt;</span> x + x</span><br><span class="line"><span class="keyword">const</span> result = x.map(double).getOrElse(<span class="string">'default value'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><p>Notice how much this looks both like a Promise but the right analogy is <code>Array.map</code>.The callback <code>.map(double)</code> runs synchronously, and the value <code>result</code> is returned synchronously. I often forget it and make my life harder by moving actions torun in a callback</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while this works - this is huge overkill</span></span><br><span class="line"><span class="keyword">const</span> Maybe = <span class="built_in">require</span>(<span class="string">'folktale/maybe'</span>)</span><br><span class="line"><span class="keyword">const</span> x = Maybe.fromNullable() <span class="comment">// value comes from somewhere</span></span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">x</span> =&gt;</span> x + x</span><br><span class="line">x.map(double)</span><br><span class="line">  .orElse(<span class="function"><span class="params">_</span> =&gt;</span> Maybe.of(<span class="string">'default value'</span>))</span><br><span class="line">  .map(<span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure><p>The above, while works, also runs synchronously, but tries to &quot;fix&quot; the undefined valueusing <code>.orElse(_ =&gt; Maybe.of(&#39;default value&#39;))</code> before merging &quot;valid&quot; and &quot;nothing&quot; code paths and calling <code>.map(console.log)</code>.</p><p>Too bad JavaScript does not tell us (except for now present <code>async</code> keyword) if the callback will be called synchronously vs asynchronously. I have to remember that a lot of times itjust runs in sync and the code reads top to bottom.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One thing that always trips me up in JavaScript is its event-driven nature.
A piece of code written &amp;quot;normally&amp;quot; does not execute
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://glebbahmutov.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Split CI Jobs</title>
    <link href="https://glebbahmutov.com/blog/split-ci-jobs/"/>
    <id>https://glebbahmutov.com/blog/split-ci-jobs/</id>
    <published>2017-12-13T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Who loves waiting on CI to finish testing multiple files? Not me. Luckily modern CIs support isolation and running multiple test jobs in many containers, splitting single sequence of test jobs into parallel runs. My favorite system for doing this is GitLabCI, but the same can be done in many other popular CIs. This blog post shows how to set up parallel test runs in CircleCI (v2) and on TravisCI. If I do not write this down I will forget and will have to reinvent this in the future, I am sure!</p><h2><span id="example-setup">Example setup</span></h2><p>Imagine you have a single repository with many folders with tests. The <a href="https://github.com/cypress-io/cypress-example-recipes" target="_blank" rel="noopener">cypress/cypress-example-recipes</a> is a good example. Different recipes are subfolders in the <code>examples</code> folder - there are more than 20 folders!</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> exa -l examples</span></span><br><span class="line">drwxr-xr-x - irinakous 13 Dec 16:28 blogs__codepen-demo</span><br><span class="line">drwxr-xr-x - irinakous 13 Dec 16:28 blogs__direct-control-angular</span><br><span class="line">drwxr-xr-x - irinakous 28 Nov 11:16 blogs__e2e-api-testing</span><br><span class="line">drwxr-xr-x - irinakous 13 Dec 10:12 blogs__e2e-snapshots</span><br><span class="line">...</span><br><span class="line">drwxr-xr-x - irinakous 28 Nov 11:16 testing-dom__tab-handling-links</span><br><span class="line">drwxr-xr-x - irinakous 28 Nov 11:16 unit-testing__application-code</span><br><span class="line">drwxr-xr-x - irinakous 28 Nov 11:16 unit-testing__react-enzyme</span><br></pre></td></tr></table></figure><p>A single script going through every folder, running end-to-end tests takes about 15 minutes. There are two test services where we run tests: <a href="https://circleci.com/gh/cypress-io/workflows/cypress-example-recipes" target="_blank" rel="noopener">on Circle</a> and <a href="https://travis-ci.org/cypress-io/cypress-example-recipes" target="_blank" rel="noopener">on Travis</a>. First, let us convert sequence to parallel jobs on Circle CI.</p><h2><span id="circle">Circle</span></h2><p>CircleCI v2 has introduces <a href="https://circleci.com/docs/2.0/workflows/" target="_blank" rel="noopener">workflows</a> that are extremely powerful. Think of a workflow as a series of jobs; for our purposes every job is independent. Here is how we can define a workflow - we will name each job after a folder.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># when adding new example subfolder with a recipe</span></span><br><span class="line">  <span class="comment"># add its name here to "create" CircleCI job</span></span><br><span class="line"><span class="attr">  all-recipes:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">blogs__codepen-demo</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">blogs__direct-control-angular</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">unit-testing__react-enzyme</span></span><br></pre></td></tr></table></figure><p>Now we need to define each job. We need to specify the Docker container the job should run in, any environment variables to set and the actual job steps. While we could copy and paste these steps, in reality all our test job are the same - only the folder is different. So we can use YAML template feature to create common job definition and only substitute the <em>job name</em>. Here is how it looks:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line"><span class="attr">  parallelism:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  working_directory:</span> <span class="string">~/app</span></span><br><span class="line"><span class="attr">  docker:</span></span><br><span class="line"><span class="attr">    - image:</span> <span class="string">cypress/browsers:chrome63</span></span><br><span class="line"><span class="attr">      environment:</span></span><br><span class="line">        <span class="comment">## this enables colors + fixes failing unit tests</span></span><br><span class="line"><span class="attr">        TERM:</span> <span class="string">xterm</span></span><br><span class="line">        <span class="comment"># avoid million NPM install messages</span></span><br><span class="line"><span class="attr">        npm_config_loglevel:</span> <span class="string">warn</span></span><br><span class="line">        <span class="comment"># allow installing when the main user is root</span></span><br><span class="line"><span class="attr">        npm_config_unsafe_perm:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  steps:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">checkout</span></span><br><span class="line">    <span class="comment"># npm module caching</span></span><br><span class="line"><span class="attr">    - restore_cache:</span></span><br><span class="line"><span class="attr">        key:</span> <span class="string">root-deps</span></span><br><span class="line"><span class="attr">    - run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">    - run:</span> <span class="string">npm</span> <span class="string">prune</span></span><br><span class="line"><span class="attr">    - save_cache:</span></span><br><span class="line"><span class="attr">        key:</span> <span class="string">root-deps-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">"package.json"</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">node_modules</span></span><br><span class="line">    <span class="comment"># starting server and running tests</span></span><br><span class="line"><span class="attr">    - run:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">start</span> <span class="string">the</span> <span class="string">server</span></span><br><span class="line"><span class="attr">        background:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd examples/$CIRCLE_JOB</span></span><br><span class="line"><span class="string">          npm run start</span></span><br><span class="line"><span class="string"></span><span class="attr">    - run:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">Cypress</span> <span class="string">tests</span></span><br><span class="line"><span class="attr">        command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd examples/$CIRCLE_JOB</span></span><br><span class="line"><span class="string">          npm run cypress:run -- --record</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># define a new job with defailts for each "examples/*" subfolder</span></span><br><span class="line"><span class="attr">  blogs__codepen-demo:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">  blogs__direct-control-angular:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">  unit-testing__react-enzyme:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br></pre></td></tr></table></figure><p>Note that every job in the workflow automatically receives the name (as we defined it) in the environment variable <code>CIRCLE_JOB</code> - which we used to change into the right folder. You can see the exact <a href="https://github.com/cypress-io/cypress-example-recipes/blob/f7c63e6f75d1a2ba2c9e497967fdacc5249edaaa/circle.yml" target="_blank" rel="noopener">cicle.yml file</a> at the moment of this writing.</p><h2><span id="travis">Travis</span></h2><p>TravisCI has recently introduced <a href="https://docs.travis-ci.com/user/build-stages" target="_blank" rel="noopener">build stages</a>. Personally I do not think they are as easy to use as CircleCI workflows, they are suitable for our task. Again we will put all common test steps into a template. Because there is no predefined environment variable with the folder name, I will pass it as an environment variable <code>DIR</code>.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># common build steps for each recipe</span></span><br><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cd</span> <span class="string">examples/$DIR</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">start</span> <span class="bullet">--</span> <span class="bullet">--silent</span> <span class="string">&amp;</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">run</span> <span class="attr">cypress:run</span> <span class="bullet">--</span> <span class="bullet">--record</span></span><br></pre></td></tr></table></figure><p>Now to the test job definitions. They all belong to the same stage named <code>test</code>, thus they will run in parallel. Instead of job&#39;s name, I am setting environment variable <code>DIR</code> to the folder name.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  include:</span></span><br><span class="line">    <span class="comment"># define a separate script for each "examples/*" folder</span></span><br><span class="line">    <span class="comment"># this will run it in a separate job on TravisCI</span></span><br><span class="line"><span class="attr">    - stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">DIR=blogs__codepen-demo</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">    - stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">DIR=blogs__direct-control-angular</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">    - stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">DIR=blogs__e2e-api-testing</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"><span class="attr">    - stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">DIR=unit-testing__react-enzyme</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br></pre></td></tr></table></figure><p>You can find the exact <a href="https://github.com/cypress-io/cypress-example-recipes/blob/f7c63e6f75d1a2ba2c9e497967fdacc5249edaaa/.travis.yml" target="_blank" rel="noopener">.travis.yml file here</a>. Here is how <a href="https://travis-ci.org/cypress-io/cypress-example-recipes" target="_blank" rel="noopener">TravisCI shows</a> the progress of the test run - some jobs have finished, others are running and more jobs are queued up.</p><p><img src="/blog/images/travis-jobs.png" alt="Travis jobs"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Who loves waiting on CI to finish testing multiple files? Not me. Luckily modern CIs support isolation and running multiple test jobs in 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Testing Svelte Store</title>
    <link href="https://glebbahmutov.com/blog/testing-svelte-store/"/>
    <id>https://glebbahmutov.com/blog/testing-svelte-store/</id>
    <published>2017-11-26T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://sveltejs.com/" target="_blank" rel="noopener">Svelte.js</a> is a very interesting &quot;disappearing&quot; framework for writing web applications. Recently, the framework&#39;s crew came out with a simple centralized data store to be used with Svelte apps. The initial &quot;Hello World&quot; example application had a bug 🙃 immediately fixed by a <a href="https://github.com/sveltejs/template-store/pull/1" target="_blank" rel="noopener">pull request</a>. But this immediately showed me an opportunity to write a few end to end tests to prevent any future problems. Of course I picked <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress.io</a> (full disclosure, I am VP of Engineering at Cypress) - an open source MIT-licensed test runner.</p><p>Before (and if) my pull request with E2E tests is merged into the main repo <a href="https://github.com/sveltejs/template-store" target="_blank" rel="noopener">sveltejs/template-store</a>, you can find the source and tests in <a href="https://github.com/bahmutov/template-store" target="_blank" rel="noopener">bahmutov/template-store</a> repository.</p><p>To run the web application we need to execute <code>npm run dev</code> - this runs a static web server and <a href="https://rollupjs.org/" target="_blank" rel="noopener">Rollup bundler</a> in watch mode. By default the app runs at <code>http://localhost:5000</code>. I have installed Cypress with <code>npm i -D cypress</code> (or just with <code>yarn add cypress</code>) and opened it once with <code>$(npm bin)/cypress open</code>. This scaffolded an empty settings file <code>cypress.json</code> in the project root. I have added the following two options there to avoid hard coding the test url. Also, because I do not plan to use <a href="https://on.cypress.io/dashboard-service" target="_blank" rel="noopener">Cypress SaaS dashboard</a> I have disabled recoding video during E2E test runs.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:5000"</span>,</span><br><span class="line">  <span class="attr">"videoRecording"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The simplest test case is to load the page and make sure the default greetings are displayed. I wrote file <a href="https://github.com/bahmutov/template-store/blob/master/cypress/integration/spec.js" target="_blank" rel="noopener">cypress/integration/spec.js</a> with the following two tests.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Template store app'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'starts with "world"'</span>, () =&gt; &#123;</span><br><span class="line">    cy.contains(<span class="string">'h1'</span>, <span class="string">'Hello world!'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'contains greeting'</span>, () =&gt; &#123;</span><br><span class="line">    cy.contains(<span class="string">"It's nice to see you, world."</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The tests confirm the application loads and renders the expected initial text.</p><p><img src="/blog/images/template-store/start-tests.png" alt="Starting tests"></p><p>The data store reacts to the changed data, and the application should update the DOM if the store&#39;s data changes. Let us test it. First, we need to get the store reference. Because the website we are testing runs inside an iframe, we need to get the window reference. This will get us the <code>window.app</code> variable. The store is attached to the <code>app</code> object. A small utility function helps us avoid any boilerplate.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getStore = <span class="function"><span class="params">()</span> =&gt;</span> cy.window().its(<span class="string">'app.store'</span>)</span><br><span class="line">it(<span class="string">'can change name'</span>, () =&gt; &#123;</span><br><span class="line">  getStore().then(<span class="function"><span class="params">store</span> =&gt;</span> &#123;</span><br><span class="line">    store.set(&#123; <span class="attr">name</span>: <span class="string">'Cypress'</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'Hello Cypress!'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/template-store/store-update.png" alt="Changing the store updates the DOM"></p><p>In this implementation, the store uses <code>localStorage</code> to persist the data, see <a href="https://github.com/sveltejs/template-store/blob/master/src/main.js" target="_blank" rel="noopener">main.js</a> and <a href="https://github.com/sveltejs/template-store/blob/master/src/useLocalStorage.js" target="_blank" rel="noopener">useLocalStorage.js</a>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useLocalStorage.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useLocalStorage</span>(<span class="params">store, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> json = localStorage.getItem(key);</span><br><span class="line">  <span class="keyword">if</span> (json) &#123;</span><br><span class="line">    store.set(<span class="built_in">JSON</span>.parse(json));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  store.onchange(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    localStorage.setItem(key, <span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> useLocalStorage <span class="keyword">from</span> <span class="string">'./useLocalStorage.js'</span></span><br><span class="line">useLocalStorage(store, <span class="string">'my-app'</span>)</span><br></pre></td></tr></table></figure><p>Let us test that updating the store really updates the item in the <code>localStorage</code>. This web application places its data under key <code>my-app</code>, which we can grab from our E2E tests.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'uses localStorage as backup'</span>, () =&gt; &#123;</span><br><span class="line">  getStore().then(<span class="function"><span class="params">store</span> =&gt;</span> &#123;</span><br><span class="line">    store.set(&#123; <span class="attr">name</span>: <span class="string">'Cypress'</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> serialized = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    name: <span class="string">'Cypress'</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy</span><br><span class="line">    .window()</span><br><span class="line">    .its(<span class="string">'localStorage.my-app'</span>)</span><br><span class="line">    .should(<span class="string">'equal'</span>, serialized)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Great, but how do we test the initial data load? In Cypress runner each test run starts from nothing - the <code>localStorage</code> is blown away between each unit test. How do we set the <code>localStorage</code> to test that the store loads correctly? By using <a href="https://on.cypress.io/api/visit" target="_blank" rel="noopener"><code>cy.visit()</code></a> options we can control the <code>window</code> state before loading the website. I will place this test outside the <code>describe(&#39;Template store app&#39;, ...)</code> block because we want a different site visit behavior.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'reads store from localStorage on load'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">    onBeforeLoad: <span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> serialized = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        name: <span class="string">'Local User'</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      win.localStorage.setItem(<span class="string">'my-app'</span>, serialized)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'Hello Local User!'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/template-store/store-load.png" alt="Store load before page loads"></p><p>Great, our application is loading correctly. From now on we can be safe refactoring and adding new features - as long as the E2E tests are passing.</p><h2><span id="resources">Resources</span></h2><ul><li><a href="https://on.cypress.io" target="_blank" rel="noopener">Cypress docs</a></li><li><a href="https://www.cypress.io/blog/" target="_blank" rel="noopener">Cypress blog</a></li><li><a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">Cypress GitHub</a></li><li><a href="https://gitter.im/cypress-io/cypress" target="_blank" rel="noopener">Cypress Gitter</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://sveltejs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Svelte.js&lt;/a&gt; is a very interesting &amp;quot;disappearing&amp;quot; framework for 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Vue Vuex REST TodoMVC example</title>
    <link href="https://glebbahmutov.com/blog/vue-vuex-rest-todomvx/"/>
    <id>https://glebbahmutov.com/blog/vue-vuex-rest-todomvx/</id>
    <published>2017-11-20T05:00:00.000Z</published>
    <updated>2018-02-14T02:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>I could not find a good example of a TodoMVC that uses in-memory data store(like <a href="https://redux.js.org/" target="_blank" rel="noopener">Redux</a> or <a href="https://vuex.vuejs.org/en/" target="_blank" rel="noopener">Vuex</a>)that is synchronized against a REST backend, so I put together this example. It is based onthe <a href="https://github.com/vuejs/vue/tree/dev/examples/todomvc" target="_blank" rel="noopener">simplest TodoMVC using Vue.js</a> which does not require any buildsteps to run. You can find my code in the<a href="https://github.com/bahmutov/vue-vuex-todomvc" target="_blank" rel="noopener">bahmutov/vue-vuex-todomvc</a> repo.</p><h2><span id="the-problem">The problem</span></h2><p>We need to add / remove Todo items in the list and store them on the backend.Our front end framework should work against a data store, but the data storeshould make calls to actually store the data on the backend.Each Todo item will have a title, a completed boolean flag and a randomid, generated on the client. Here is a typical todo item:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"learn Italian"</span>,</span><br><span class="line">  <span class="attr">"completed"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"6552b6dc4b"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are a LOT of front end solutions to this problem at <a href="http://todomvc.com/" target="_blank" rel="noopener">todomvc.com</a>excepts they all use browser&#39;s <code>localStorage</code> to keep the data. I wanted to have a more realisticscenario where a server is actually serving the items.</p><p>The web application should do the following 3 things:</p><ol><li>On startup, get the list of items from the server</li><li>When adding an item, it should first post the item to the server, and only then shouldadd the item to the client&#39;s data store</li><li>On deleting an item, it should delete the item from the server, and if it has beendeleted on the server, then it should delete it on the client side.</li></ol><p>In all cases, the server keeps &quot;the true state&quot;; the client-side data store is secondary, andit is updated only if the server has acknowledged the operation.</p><h2><span id="rest-backend">REST backend</span></h2><p>To implement the backend I chose the <a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">json-server</a> to create the REST backend withzero code. Just install it using <code>npm i -S json-server</code> command,create a JSON file with the contents shown below and start the server</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"todos"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"vue-vuex-todomvc"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Simple TodoMVC with Vue and Vuex"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"db"</span>: <span class="string">"json-server --static . --watch data.json"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"json-server"</span>: <span class="string">"0.12.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The server will serve the current folder, which allows us to load the <code>index.html</code> pagefrom <code>localhost:3000</code>.It also watches the <code>data.json</code> file, if we change its contents, the server is automaticallyrestarted. We can use this feature to reset items before each test for example.</p><p>We can now GET list of items from the <code>localhost:3000/todos</code> endpoints,and we can add new items to it by making a POST request.We can delete a particular item by making <code>DELETE /todos/:id</code> request.</p><h2><span id="vuex-store">Vuex store</span></h2><p>The store is pretty simple, here is its data, and the two getters that we expect to be used fromthe application.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [],</span><br><span class="line">    newTodo: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    newTodo: <span class="function"><span class="params">state</span> =&gt;</span> state.newTodo,</span><br><span class="line">    todos: <span class="function"><span class="params">state</span> =&gt;</span> state.todos</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can also have additional state there, like &quot;loading&quot; indicator, but for this tutorial I am goingto skip these details.See <a href="https://github.com/bahmutov/vue-vuex-todomvc/blob/master/app.js" target="_blank" rel="noopener">app.js</a>for the entire store.</p><p>In addition, the store is going to have mutations and actions. Mutation methods can changethe &quot;state&quot; object, and will trigger the Vue DOM updates. Thus these methods are synchronous.For example, here are mutations to set the todos array, add a single todo item, andto clear the &quot;newTodo&quot; text.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// state</span></span><br><span class="line">  <span class="comment">// getters</span></span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_TODOS (state, todos) &#123;</span><br><span class="line">      state.todos = todos</span><br><span class="line">    &#125;,</span><br><span class="line">    ADD_TODO (state, todoObject) &#123;</span><br><span class="line">      state.todos.push(todoObject)</span><br><span class="line">    &#125;,</span><br><span class="line">    CLEAR_NEW_TODO (state) &#123;</span><br><span class="line">      state.newTodo = <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// other mutations are done the same way</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Actions on the other hand are not mutating the state yet. Actions are called by the outsideapplication code (think UI component code), and can perform asynchronous operations and thencall mutations to actually set the new data. Here are three actions to fetch the list oftodos from the server and set it on the state, and to clear the &quot;newTodo&quot; string.</p><p>I am using <a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a> library to make XHR calls to the backend.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// state</span></span><br><span class="line">  <span class="comment">// getters</span></span><br><span class="line">  <span class="comment">// mutations</span></span><br><span class="line">  actions: &#123;</span><br><span class="line">    loadTodos (&#123; commit &#125;) &#123;</span><br><span class="line">      axios</span><br><span class="line">        .get(<span class="string">'/todos'</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">r</span> =&gt;</span> r.data)</span><br><span class="line">        .then(<span class="function"><span class="params">todos</span> =&gt;</span> &#123;</span><br><span class="line">          commit(<span class="string">'SET_TODOS'</span>, todos)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    addTodo (&#123; commit, state &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!state.newTodo) &#123;</span><br><span class="line">        <span class="comment">// do not add empty todos</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> todo = &#123;</span><br><span class="line">        title: state.newTodo,</span><br><span class="line">        completed: <span class="literal">false</span>,</span><br><span class="line">        id: randomId()</span><br><span class="line">      &#125;</span><br><span class="line">      axios.post(<span class="string">'/todos'</span>, todo).then(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'ADD_TODO'</span>, todo)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    clearNewTodo (&#123; commit &#125;) &#123;</span><br><span class="line">      commit(<span class="string">'CLEAR_NEW_TODO'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Not every action is asynchronous, and a single action can trigger multiple mutations. For example,if we were setting &quot;loading&quot; state before making an API call, we could do something like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">loadTodos (&#123; commit &#125;) &#123;</span><br><span class="line">  commit(<span class="string">'SET_LOADING'</span>, <span class="literal">true</span>)</span><br><span class="line">  axios</span><br><span class="line">    .get(<span class="string">'/todos'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> r.data)</span><br><span class="line">    .then(<span class="function"><span class="params">todos</span> =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">'SET_TODOS'</span>, todos)</span><br><span class="line">      commit(<span class="string">'SET_LOADING'</span>, <span class="literal">false</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Great, how is our store used from the Vue component?</p><h2><span id="vue-component">Vue component</span></h2><p>First, we tell Vue framework to use Vuex data store.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure><p>Second, when creating a component, we set the store on it. We trigger actions on the storefrom the Vue component by <em>dispatching</em> them. And we read the data from the store byconnecting computed properties to the store&#39;s getters.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  el: <span class="string">'.todoapp'</span>,</span><br><span class="line">  <span class="comment">// load todos on start</span></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">'loadTodos'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// be able to get the data</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    newTodo () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.newTodo</span><br><span class="line">    &#125;,</span><br><span class="line">    todos () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.todos</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>All commands from the DOM elements should go via component&#39;s methods. In this case we have justa few methods.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  el: <span class="string">'.todoapp'</span>,</span><br><span class="line">  <span class="comment">// created</span></span><br><span class="line">  <span class="comment">// computed</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    setNewTodo (e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.dispatch(<span class="string">'setNewTodo'</span>, e.target.value)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    addTodo (e) &#123;</span><br><span class="line">      e.target.value = <span class="string">''</span></span><br><span class="line">      <span class="keyword">this</span>.$store.dispatch(<span class="string">'addTodo'</span>)</span><br><span class="line">      <span class="keyword">this</span>.$store.dispatch(<span class="string">'clearNewTodo'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    removeTodo (todo) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.dispatch(<span class="string">'removeTodo'</span>, todo)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>These methods are triggered by the DOM events, defined using Vue template language.For example, method &quot;removeTodo&quot; is called when the user clicks on the &quot;class=destroy&quot; elementon each item in the list.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"main"</span> <span class="attr">v-show</span>=<span class="string">"todos.length"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"todo"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"todo.id"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">"&#123; completed: todo.completed &#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"todo.completed"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; todo.title &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span> @<span class="attr">click</span>=<span class="string">"removeTodo(todo)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And that&#39;s it - we have an application, where the DOM events are dispatched to the store;inside the store&#39;s actions we can make REST calls to the backend. The store after receivingthe response mutates the state. Vue connects everything together - whenever the data in thestore changes, the &quot;getters&quot; are going to change, which changes the &quot;computed&quot; properties,triggering the DOM update to show the changed data.</p><p>In an ASCII diagram, it would be a cycle of calls triggered from the DOM, going viaactions to the backend, then back to the action code, etc.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  DOM ----- event -----&gt; component&apos;s method ---- store.dispatch ----&gt; store</span><br><span class="line">    ^                                                                 action</span><br><span class="line">    |                                                                    |</span><br><span class="line">    |                                                                    |</span><br><span class="line">component&apos;s                                                          REST calls</span><br><span class="line"> computed           Vue =&gt; Vuex =&gt; Backend =&gt; Vuex =&gt; Vue              to the</span><br><span class="line">properties                        data flow                           backend</span><br><span class="line">    ^                                                                    |</span><br><span class="line">    |                                                                    |</span><br><span class="line"> getter                                                                  v</span><br><span class="line">    |                                                               back to the</span><br><span class="line"> state.foo = &quot;bar&quot; &lt;---------- mutation &lt;---------- commit -------- action code</span><br></pre></td></tr></table></figure><p>Hope it is clear now.</p><h3><span id="links">Links</span></h3><ul><li><a href="https://vuejs.org/" target="_blank" rel="noopener">Vue.js</a></li><li><a href="https://vuex.vuejs.org/en/" target="_blank" rel="noopener">Vuex</a></li><li><a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">json-server</a></li><li>Source code in <a href="https://github.com/bahmutov/vue-vuex-todomvc" target="_blank" rel="noopener">bahmutov/vue-vuex-todomvc</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I could not find a good example of a TodoMVC that uses in-memory data store
(like &lt;a href=&quot;https://redux.js.org/&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="vuejs" scheme="https://glebbahmutov.com/blog/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Making small Docker image</title>
    <link href="https://glebbahmutov.com/blog/making-small-docker-image/"/>
    <id>https://glebbahmutov.com/blog/making-small-docker-image/</id>
    <published>2017-11-18T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker is great, Node is awesome. But installing the entire world via <code>npm install</code> quicklybecomes tired.</p><p>Here is an example: a tiny HTTP server that responds with the string <code>hello world</code> to anyone asking.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">'Hello World from Node\n'</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'responding with hello'</span>)</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span> &#125;)</span><br><span class="line">  response.end(message)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">1337</span></span><br><span class="line">server.listen(port)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at port'</span>, port)</span><br><span class="line"><span class="built_in">console</span>.log(message)</span><br></pre></td></tr></table></figure><p>You can find this code in <a href="https://github.com/bahmutov/hello-world" target="_blank" rel="noopener">bahmutov/hello-world</a> repo.The server code cannot be simpler. It only uses built-in module <code>http</code>, it can run <em>withoutinstalling any dependencies</em>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf node_modules/</span><br><span class="line">$ npm start</span><br><span class="line"></span><br><span class="line">&gt; hello-world@0.0.0 start /Users/irinakous/git/hello-world</span><br><span class="line">&gt; node index.js</span><br><span class="line"></span><br><span class="line">Server running at port 1337</span><br><span class="line">Hello World from Node</span><br><span class="line">$ curl localhost:1337</span><br><span class="line">Hello World from Node</span><br></pre></td></tr></table></figure><p>Great, but a solid development process requires linting, testing, pre-commit git hooksand <a href="https://github.com/bahmutov/npm-module-checklist" target="_blank" rel="noopener">lots of other steps</a> in order for me to workfaster and safer. So in the <code>hello-world</code> own<a href="https://github.com/bahmutov/hello-world/blob/master/package.json" target="_blank" rel="noopener">package.json</a> you will finda few development dependencies. There is linting with <code>standard</code> and code formattingwith <code>prettier-standard</code>, there is unit testing with <code>mocha</code> and a few utilities like<code>pre-git</code>, <code>git-issues</code>, <code>axios</code> and <code>start-server-and-test</code>. In total I have 8 developmentdependencies. How bad can installing 8 dependencies be? I am using Node 6.8 with NPM 4.6.1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ time npm install</span><br><span class="line">real  0m53.399s</span><br></pre></td></tr></table></figure><p>Ok, so I had to wait a little. How large is the <code>node_modules</code> folder?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ du -h node_modules</span><br><span class="line">171M  node_modules/</span><br></pre></td></tr></table></figure><p>Get out! <strong>171 megabytes</strong> for 8 npm modules. If we were NOT installing these dependencies thedeployment would be instant, and we could fit a million copies of the app on a regular hard drive.</p><p>The problem is more apparent when we build a Docker image for running this application.A simple Dockerfile would look like <a href="https://github.com/bahmutov/hello-world/blob/master/Dockerfile-simple" target="_blank" rel="noopener">this</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM mhart/alpine-node:6</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line">RUN npm install</span><br><span class="line">RUN npm run lint</span><br><span class="line">RUN npm run ci</span><br><span class="line"></span><br><span class="line">EXPOSE 1337</span><br><span class="line">CMD [&quot;node&quot;, &quot;index.js&quot;]</span><br></pre></td></tr></table></figure><p>I am starting this image from the (almost) smallest Node image <a href="https://github.com/mhart/alpine-node" target="_blank" rel="noopener">mhart/alpine-node</a>, but I still must install developmentdependencies to perform linting and unit testing before I can be sure the code works asexpected.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t gleb/hello-world:simple -f Dockerfile-simple .</span><br><span class="line">Sending build context to Docker daemon  14.85kB</span><br><span class="line">Step 1/8 : FROM mhart/alpine-node:6</span><br><span class="line">6: Pulling from mhart/alpine-node</span><br><span class="line">...</span><br><span class="line">Successfully built aed28e2bde45</span><br><span class="line">Successfully tagged gleb/hello-world:simple</span><br></pre></td></tr></table></figure><p>Each command in the Dockerfile creates a separate layer in the final image. We can seethe size &quot;contribution&quot; of each command by looking at the size of the corresponding layer.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">history</span> gleb/hello-world:simple</span><br><span class="line">IMAGE               CREATED              CREATED BY                                      SIZE</span><br><span class="line">aed28e2bde45        15 seconds ago       <span class="comment">#(nop)  CMD ["node" "index.js"]      0B                  </span></span><br><span class="line">e79e1f4c23b9        16 seconds ago       <span class="comment">#(nop)  EXPOSE 1337                  0B                  </span></span><br><span class="line">785237a55314        16 seconds ago       npm run ci                           0B                  </span><br><span class="line">06f2ea0fd8fc        24 seconds ago       npm run lint                         319B                </span><br><span class="line">c668b02912e8        33 seconds ago       npm install                          152MB               </span><br><span class="line">4c2a151942b4        About a minute ago   <span class="comment">#(nop) COPY dir:18037759bbd287408…   5.08kB              </span></span><br><span class="line">9efcee73a9de        About a minute ago   <span class="comment">#(nop) WORKDIR /app                  0B                  </span></span><br><span class="line">ab6c449798d3        10 days ago          apk add --no-cache curl make gcc …   44.6MB              </span><br><span class="line">&lt;missing&gt;           10 days ago          <span class="comment">#(nop)  ENV VERSION=v6.12.0 NPM_V…   0B                  </span></span><br><span class="line">&lt;missing&gt;           2 weeks ago          <span class="comment">#(nop)  CMD ["/bin/sh"]              0B                  </span></span><br><span class="line">&lt;missing&gt;           2 weeks ago          <span class="comment">#(nop) ADD file:90342832e4e7931e4…   4.81MB</span></span><br></pre></td></tr></table></figure><p>The <code>&lt;missing&gt;</code> are layers of the Docker image <code>mhart/alpine-node:6</code> we based our simpleDockerfile on - we only know the final image hash <code>ab6c449798d3</code>. Above that we see the layerfor each line of the Dockerfile, and the <code>npm install</code> is by far the largest and heaviestdisk grabber clocking at 152MB. The total image size is above 200MB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker images gleb/hello-world:simple</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">gleb/hello-world    simple              aed28e2bde45        7 minutes ago       202MB</span><br></pre></td></tr></table></figure><p>How do we make the Docker image smaller? We could go through each NPM dependencyand make sure it only includes what is really needed; see <a href="../smaller-published-NPM-modules/">Smaller published NPM modules</a> blog post how tomeasure and control the published module size. But there is a better way.</p><h2><span id="multi-stage-builds-for-the-win">Multi-stage builds for the win</span></h2><p>Docker v17 has introduced ability to build multiple Docker images in the same Dockerfile,and copy specific folder from one image into another one. The <a href="https://docs.docker.com/engine/userguide/eng-image/multistage-build/" target="_blank" rel="noopener">official docs</a>give a pretty good introduction to this feature. Let us see how we can take advantageof multi-stage builds to avoid including development dependencies in the finaloutput image while still doing testing.</p><p>We are going to have 3 named images inside same Dockerfile.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BASE ---&gt; TEST (dev dependencies, runs tests)</span><br><span class="line">   \</span><br><span class="line">    ----&gt; PROD (expose port, run command)</span><br></pre></td></tr></table></figure><p>The <code>BASE</code> image will have our source files, including <code>package.json</code>. We are going toinstall development dependencies and run tests inside <code>TEST</code> image derived from <code>BASE</code>. But weare going to ignore <code>TEST</code> (unless tests fail). Instead we are going to produce imagenamed <code>PROD</code> that just adds exposed port and run command to the bare <code>BASE</code> image.</p><p>Here is the <a href="https://github.com/bahmutov/hello-world/blob/master/Dockerfile" target="_blank" rel="noopener">Dockefile</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># base image with just our source files</span></span><br><span class="line">FROM mhart/alpine-node:6 as BASE</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line"><span class="comment"># test image installs development dependencies</span></span><br><span class="line"><span class="comment"># and runs testing commands</span></span><br><span class="line">FROM BASE as TEST</span><br><span class="line">RUN npm install</span><br><span class="line">RUN npm run lint</span><br><span class="line">RUN npm run ci</span><br><span class="line"></span><br><span class="line"><span class="comment"># final production image</span></span><br><span class="line">FROM BASE as PROD</span><br><span class="line">EXPOSE 1337</span><br><span class="line">CMD [<span class="string">"node"</span>, <span class="string">"index.js"</span>]</span><br></pre></td></tr></table></figure><p>Building looks exactly like a regular build.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t gleb/hello-world:multi-stage .</span><br></pre></td></tr></table></figure><p>We can confirm that the output image does NOT have disk destroying layers with <code>node_modules</code>folder</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">history</span> gleb/hello-world:multi-stage</span><br><span class="line">IMAGE               CREATED              CREATED BY                                      SIZE</span><br><span class="line">44dcd42b11f4        About a minute ago   <span class="comment">#(nop)  CMD ["node" "index.js"]      0B                  </span></span><br><span class="line">fcb01074c9e3        About a minute ago   <span class="comment">#(nop)  EXPOSE 1337                  0B                  </span></span><br><span class="line">2d61e482fc59        2 minutes ago        <span class="comment">#(nop) COPY dir:dacd77af96552c3f3…   5.4kB               </span></span><br><span class="line">9efcee73a9de        16 minutes ago       <span class="comment">#(nop) WORKDIR /app                  0B                  </span></span><br><span class="line">ab6c449798d3        10 days ago          apk add --no-cache curl make gcc …   44.6MB              </span><br><span class="line">&lt;missing&gt;           10 days ago          <span class="comment">#(nop)  ENV VERSION=v6.12.0 NPM_V…   0B                  </span></span><br><span class="line">&lt;missing&gt;           2 weeks ago          <span class="comment">#(nop)  CMD ["/bin/sh"]              0B                  </span></span><br><span class="line">&lt;missing&gt;           2 weeks ago          <span class="comment">#(nop) ADD file:90342832e4e7931e4…   4.81MB</span></span><br></pre></td></tr></table></figure><p>The best way to see how much space we saved is by comparing the two images side by side</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker images gleb/hello-world</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">gleb/hello-world    multi-stage         44dcd42b11f4        7 minutes ago       49.4MB</span><br><span class="line">gleb/hello-world    simple              aed28e2bde45        21 minutes ago      202MB</span><br></pre></td></tr></table></figure><p>Great, the new image is 1/4 size of the previous one.</p><p>But can we do better? Yes we can.</p><h2><span id="bare-node-image">Bare Node image</span></h2><p>When we are running our <code>hello-world</code> server, we are never going to execute <code>npm</code> commands.So why should we include <code>npm</code> in the Docker image? Luckily for us, <code>mhart/alpine-node</code> hasDocker images with &quot;base&quot; Node, without <em>any other tools</em>.</p><p>So our Dockerfile has to be a little bit different. Our <code>TEST</code> image will be based on thesame &quot;full&quot; Node image which includes NPM. Our <code>BASE</code> and <code>PROD</code> images are going to be basedon the &quot;bare&quot; Node image with just the runtime, without NPM tool.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># &quot;bare&quot; base image with just our source files</span><br><span class="line"># which only has Node runtime - not even NPM!</span><br><span class="line">FROM mhart/alpine-node:base-6 as BASE</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line"># test image installs development dependencies</span><br><span class="line"># and runs testing commands</span><br><span class="line"># derived from Node image that _includes_ NPM</span><br><span class="line">FROM mhart/alpine-node:6 as TEST</span><br><span class="line">WORKDIR /app</span><br><span class="line"># Copy files _from_ BASE</span><br><span class="line"># To avoid accidentally creating different</span><br><span class="line"># testing environment from production</span><br><span class="line">COPY --from=BASE /app .</span><br><span class="line">RUN npm install</span><br><span class="line">RUN npm run lint</span><br><span class="line">RUN npm run ci</span><br><span class="line"></span><br><span class="line"># final production image</span><br><span class="line">FROM BASE as PROD</span><br><span class="line">EXPOSE 1337</span><br><span class="line">CMD [&quot;node&quot;, &quot;index.js&quot;]</span><br></pre></td></tr></table></figure><p>Notice that after building <code>BASE</code> we <em>copy source files</em> into <code>TEST</code> using <code>COPY --from=BASE</code>syntax. We have to copy a folder because we no longer derive the <code>TEST</code> image from the <code>BASE</code> image. I prefer to copy the source folder from the <code>BASE</code> image rather than from thelocal current folder to avoid accidentally diverging images - we really must test the code weare going to run, and not build the app twice.</p><p>The build command is the same</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t gleb/hello-world:bare -f Dockerfile-bare .</span><br></pre></td></tr></table></figure><p>The tests pass, and the image is yet smaller again, by 11MB!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker images gleb/hello-world</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">gleb/hello-world    bare                78cdddcd77ac        23 seconds ago      37.9MB</span><br><span class="line">gleb/hello-world    multi-stage         44dcd42b11f4        17 minutes ago      49.4MB</span><br><span class="line">gleb/hello-world    simple              aed28e2bde45        31 minutes ago      202MB</span><br></pre></td></tr></table></figure><h2><span id="final-thoughts">Final thoughts</span></h2><p>We can shave off 80% of the Node application Docker image by NOT keeping the developmenttools after the tests pass. Of course in the &quot;normal&quot; application there would be production dependencies, which means the space savings are not going to be as impressive.But still, I expect that a significant chunk of the image are dev dependencies, passivelytaking up space.</p><p>When building application that does include production dependencies, you will need to installthem, then copy the folder to the &quot;bare&quot; image, and the <a href="https://github.com/mhart/alpine-node" target="_blank" rel="noopener">mhart/alpine-node</a> README shows how to do this.</p><p>Keep shrinking!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker is great, Node is awesome. But installing the entire world via &lt;code&gt;npm install&lt;/code&gt; quickly
becomes tired.&lt;/p&gt;
&lt;p&gt;Here is an e
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="docker" scheme="https://glebbahmutov.com/blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Local overrides</title>
    <link href="https://glebbahmutov.com/blog/local-overrides/"/>
    <id>https://glebbahmutov.com/blog/local-overrides/</id>
    <published>2017-11-07T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently Google Chrome has shown local overrides feature in Chrome Canary. Here is thevideo, the relevant feature starts at minute 4</p><iframe width="560" height="315" src="https://www.youtube.com/embed/7-XnEMrQnn4?start=240" frameborder="0" allowfullscreen></iframe><p>Here is how to use this feature to change the background color of <a href="https://news.ycombinator.com/news" target="_blank" rel="noopener">https://news.ycombinator.com/news</a> for example.</p><ol><li>Open Chrome Canary (I have version 64)</li><li>Load <code>https://news.ycombinator.com/news</code> and open DevTools</li><li>Open &quot;Sources&quot; tab and then &quot;Overrides&quot; column.</li></ol><p><img src="/blog/images/local-overrides/sources-overrides.png" alt="Soures - Overrides"></p><ol><li>Check &quot;Enable Network Overrides&quot; and select any folder on the local disk. This folder will keep changes files.</li><li>Click &quot;Allow&quot; when asked to allow Chrome Canary browser to have full access to the new folder</li><li>Select &quot;Sources&quot; - &quot;Network&quot; tab and find the &quot;index.html&quot; document. Edit whatever you want there, for example I changed <code>&lt;table bgcolor=&quot;ping&quot;&gt;</code> in the HTML markup.</li><li>Click &quot;Ctrl-S&quot; to save the update file. Notice a purple dot appears next to the file name.</li><li>Reload the page and see the override making the page pink.</li></ol><p><img src="/blog/images/local-overrides/pink.png" alt="Pink Hacker News"></p><p>Just as you can override HTML, you can add local modifications to CSS and JavaScript files.</p><p>Note: in order for local overrides to work, you must have DevTools opened and &quot;Network enabled&quot;which you can quickly trigger from the command palette </p><p><img src="/blog/images/local-overrides/enable-network-overrides.png" alt="Enable network overrides using commands"></p><p>On Mac press &quot;Cmd + Shift + p&quot; and start typing part of the command.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently Google Chrome has shown local overrides feature in Chrome Canary. Here is the
video, the relevant feature starts at minute 4&lt;/p&gt;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="browser" scheme="https://glebbahmutov.com/blog/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>DevOps Testing Panel</title>
    <link href="https://glebbahmutov.com/blog/devops-testing/"/>
    <id>https://glebbahmutov.com/blog/devops-testing/</id>
    <published>2017-09-28T04:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Last night I had an honor of being on the panel hosted by <a href="https://www.meetup.com/Boston-Devops/" target="_blank" rel="noopener">Boston DevOps meetup</a>dedicated to <a href="https://www.meetup.com/Boston-Devops/events/243117130/" target="_blank" rel="noopener">Testing</a>. Thanks to <a href="https://www.cloudhealthtech.com/" target="_blank" rel="noopener">CloudHealth</a> for hosting!</p><p><img src="/blog/images/devops-testing/devops-testing-panel.jpeg" alt="4 companies - 4 tshirts in the same color"></p><p>I loved every question and the answers given byother panelists. Unfortunately, there was no recording of the event, but at least hereare some of my answers as I remember them now.</p><blockquote><p><strong>Q:</strong> Types of testing</p></blockquote><p>There is a testing pyramid; its shape is determined by the tools we have. It is sosimple to write unit tests - so a lot of them are written. It is harder to write end toend tests, so there are a few of them at the very top of the pyramid. It should really be a <a href="../testing-trapezoid/">testing trapezoid</a>.</p><blockquote><p><strong>Q:</strong> What is the difference between quality and testing?</p></blockquote><p>Quality is a property, and testing is an action. There are many ways to achievequality, testing is one of the ways. My favorite two ways of building high quality software:</p><ol><li>Having well-rested engineers. No one can avoid making costly mistakes while  putting in 70 hour work weeks for months.</li><li>Taking pride in your work. There is a difference in mass produced widgets vs artisan work. A &quot;crafty&quot; person loves what he or she is doing, and will ensure that the built product is well done.</li></ol><blockquote><p><strong>Q:</strong> Language-specific testing</p></blockquote><p>Some languages require more testing, for example JavaScript (love it or hate it) dominatesthe world, but requires additional unit tests just because it is a dynamic scriptinglanguage. As a second consideration, I think writing tests in the same language as the main code is strongly preferred.</p><blockquote><p><strong>Q:</strong> How do you ensure that your testing data accurately reflects real world production data?</p></blockquote><p>Use whatever data fits the expected use case, according to your professional judgment.Then use crash reporting software in production. As soon as the real world case appears thatyou have not considered, and it crashes the system, add it as another test data case.</p><blockquote><p><strong>Q:</strong> What advice can you give a QA tester to improve personal career?</p></blockquote><p>QA is not just about finding what is broken. It is about building what is right for thecustomer; and thus QA is a very creative role. Do not be afraid to take on moreresponsibility and insert yourself early in the process, bringing value to the product,rather than delaying it due to testing. It is a human-centric profession, which hasa lot of leeway how to collect requirements, stated and unstated, and how to communicatethese requirements and track them through the process. Some time investment will be necessary,but local meetup scene is very valuable in this regard. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Last night I had an honor of being on the panel hosted by &lt;a href=&quot;https://www.meetup.com/Boston-Devops/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>Test Runners</title>
    <link href="https://glebbahmutov.com/blog/test-runners/"/>
    <id>https://glebbahmutov.com/blog/test-runners/</id>
    <published>2017-09-08T04:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Even old things can be improved. Consider a wood axe. Simple, right? Humans have been choppingtrees for thousands of years, yet there was undiscovered improvement. This guy has improved the axe touse all that angular momentum to chop wood easier and quicker. Notice the very unusual shape of theblade - it is mean to cut and then rotate to push the sides of the split apart.</p><iframe src="https://www.youtube.com/embed/Xlh-QuHBydU?ecver=2" width="640" height="360" frameborder="0" allowfullscreen></iframe><p>What does this teach us? There is room to improve everything. JavaScript test runners especiallyhave a lot of room to grow! Consider a simple runner like QUnit or Mocha. Each runner does two things:collects all user&#39;s unit functions, then executes them. Yet there is so much more we can do to maketest writing and running more pleasant and productive.</p><p>I will take a look at 5 test runners and the new features they bring: Ava, Jest, Rocha, Focha and Locha.Ava and Jest are well known (and I love them both), and the later 3 are my own wrappers around mygo-to test runner Mocha. Each test runner has something interesting to offer, and I hope that throughcross-pollination of ideas the testing experience in JavaScript would improve.</p><h2><span id="ava">Ava</span></h2><p><a href="https://github.com/avajs/ava" target="_blank" rel="noopener">Ava</a> came onto the scene suddenly and with a splash. It introducedES6 code transpiling by default, allowing everyone to unit test modern JavaScript code. It also introduceda nice feature that was unavailable in other test runners (as far as I know).</p><blockquote><p>Each spec file is running in its own Ava test runner instance.</p></blockquote><p>This means, whatever one spec file is doing is unaffecting the other spec files. There is no sharedmemory, or module system - every test runner was spawn as a separate process, isolating the testsfrom one file from tests in another.</p><p>The isolation helps with finding inter dependencies among tests, and it also allows to run tests inparallel (which really means &quot;faster&quot;). And it almost happened ;) But the requirement to transpileeverything in each subprocess during Node 0.12 and 4 days meant the parallel speed advantageswere kind of moot for small &quot;trial&quot; projects.</p><p>Luckily, today with Node 6/8 the transpile is almost never necessary, and Ava test runs aresuper fast.</p><h2><span id="jest">Jest</span></h2><h3><span id="snapshot-testing">Snapshot testing</span></h3><p><a href="https://facebook.github.io/jest/" target="_blank" rel="noopener">Jest</a> test runner has introduced a bunch of features that I love.In particular I am awed by its snapshot testing feature. No longer I have to write many assertionsto compare the entire result with expected value; I don&#39;t even have to compute the expected value.</p><blockquote><p>Instead I just need to say that the computation should match the snapshot.</p></blockquote><p>For larger things like DOM component rendering creating the expected value by hand is almost impossible!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'../Link.react'</span>;</span><br><span class="line"><span class="keyword">import</span> renderer <span class="keyword">from</span> <span class="string">'react-test-renderer'</span>;</span><br><span class="line">it(<span class="string">'renders correctly'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> tree = renderer.create(</span><br><span class="line">    &lt;Link page=<span class="string">"http://www.facebook.com"</span>&gt;Facebook&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">  ).toJSON();</span></span><br><span class="line"><span class="regexp">  expect(tree).toMatchSnapshot();</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>The snapshot assertion <code>expect(tree).toMatchSnapshot()</code> will try to load previous value froma snapshot file. If Jest cannot find the snapshot file,that means it has never ran before. Jest will save whatever the computed<code>tree</code> object is, and you should commit the snapshot file in the code repository, just likea regular test fixture file. It is a plain JavaScript file after all.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// snapshot file</span></span><br><span class="line">exports[<span class="string">`renders correctly 1`</span>] = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;a</span></span><br><span class="line"><span class="string">  className="normal"</span></span><br><span class="line"><span class="string">  href="http://www.facebook.com"</span></span><br><span class="line"><span class="string">  onMouseEnter=&#123;[Function]&#125;</span></span><br><span class="line"><span class="string">  onMouseLeave=&#123;[Function]&#125;</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">  Facebook</span></span><br><span class="line"><span class="string">&lt;/a&gt;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>Next time it runs locally or on CI, if the <code>tree</code> has been rendered differently, Jest can show you abeautiful error message</p><p><img src="https://facebook.github.io/jest/img/content/failedSnapshotTest.png" alt="Jest snapshot mismatch"></p><p>I loved snapshot testing so much, I really wanted it inside my Mocha tests. While a test runnerlike Ava just <a href="https://github.com/avajs/ava/releases/tag/v0.18.0" target="_blank" rel="noopener">grabbed the Jest snapshot module</a>(see what I mean about test ecosystem tools borrowing ideas from each other?), I had a strong&quot;Not Invented Here&quot; syndrome. So I wrote my own <a href="https://github.com/bahmutov/snap-shot" target="_blank" rel="noopener">snap-shot</a>library that can work with pretty much any test framework as a zero-configuration add-on.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> snapshot = <span class="built_in">require</span>(<span class="string">'snap-shot'</span>)</span><br><span class="line"><span class="comment">// Mocha</span></span><br><span class="line">it(<span class="string">'is 42'</span>, () =&gt; &#123;</span><br><span class="line">  snapshot(<span class="number">42</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The <code>snap-shot</code> works without integration with the test runner, and thus it had to overcome amajor problem. When a test calls <code>snapshot(value)</code>, how do you know the test file and the testname so you can look up the previously saved snapshot? <code>snap-shot</code> works by inspecting thestack trace when it is called and then by finding the spec file, and then by inspectingits AST to find the <code>it(name, cb)</code> statement. You can find details in<a href="https://glebbahmutov.com/blog/snapshot-testing/">this blog post</a>and in <a href="https://slides.com/bahmutov/snapshot-testing-the-hard-way" target="_blank" rel="noopener">these slides</a>.</p><p>This works 90% of the time, but has problems finding the right test in heavily transpiled JavaScriptcode or other languages like CoffeeScript and TypeScript. I spent some time trying to solve thisproblem, but then have decided to limit myself to BDD frameworks (like Jest, Mocha, etc).These test runners have a couple of standard methods available to test code, like <code>beforeEach</code>and <code>afterEach</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'runs before each test'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">it(<span class="string">'works'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'works'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">it(<span class="string">'does not'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'oops'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'runs after each test'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Result<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">runs before each test</span><br><span class="line">works</span><br><span class="line">  ✓ works</span><br><span class="line">runs after each test</span><br><span class="line">runs before each test</span><br><span class="line">  1) does not</span><br><span class="line">runs after each test</span><br><span class="line"></span><br><span class="line">  1 passing (14ms)</span><br><span class="line">  1 failing</span><br><span class="line"></span><br><span class="line">  1)  does not:</span><br><span class="line">     Error: oops</span><br><span class="line">      at Context.it (spec.js:8:9)</span><br></pre></td></tr></table></figure></p><p>By relying on the global functions like <code>beforeEach</code>, I could write a snapshot utility that actuallyworks in any language - because it would find its &quot;owner&quot; test during runtime and not by staticsource inspection. So I made <a href="https://github.com/bahmutov/snap-shot-it" target="_blank" rel="noopener">snap-shot-it</a> - it registers<code>beforeEach</code> callback to grab the current test about to be executed. If the test calls <code>snapshot</code>then inside <code>snap-shot-it</code> it can find the test&#39;s name, spec file, etc without any hunting.</p><p>Beautiful, but why spend so much time writing a utility that already exists? Because I want simple1 page module that is not relying on a particular framework. I also want to learn and experiment,and <code>snap-shot</code>, <code>snap-shot-it</code> produces another cool collection of tools. By factoring outsaving, loading and comparing snapshot values into<a href="https://github.com/bahmutov/snap-shot-core" target="_blank" rel="noopener">snap-shot-core</a> I have been able to implement additionalfeatures.</p><p>Have a data you want to snapshot, but the actual values change? Only the shape of the data stays thesame? Example: top selling item returned by the API - the name and SKU numbers change, but the objectmust have name and SKU. No problem - <a href="https://github.com/bahmutov/schema-shot" target="_blank" rel="noopener">schema-shot</a> to therescue. Have a list and it keeps growing, so the snapshot should only check a subset?No problem - <a href="https://github.com/bahmutov/subset-shot" target="_blank" rel="noopener">subset-shot</a> has you covered. Have a functionthat produces a lot of data and want to use that as a snapshot? Perfect opportunity touse <a href="https://github.com/bahmutov/snap-shot-it#data-driven-testing" target="_blank" rel="noopener">data-driven snapshot</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// checks if n is prime</span></span><br><span class="line"><span class="keyword">const</span> isPrime = <span class="function"><span class="params">n</span> =&gt;</span> ...</span><br><span class="line">it(<span class="string">'tests prime'</span>, () =&gt; &#123;</span><br><span class="line">  snapshot(isPrime, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Produces snapshot that has<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">exports[<span class="string">'tests prime 1'</span>] = &#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"isPrime"</span>,</span><br><span class="line">  <span class="string">"behavior"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"given"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">"expect"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"given"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="string">"expect"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"given"</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="string">"expect"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"given"</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="string">"expect"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"given"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="string">"expect"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In summary, snapshot testing is really useful, and now there is a variety of snapshot choices;I described <a href="../picking-snapshot-library/">the alternatives</a>.</p><h3><span id="code-coverage-for-faster-testing">Code coverage for faster testing</span></h3><p>In addition, Jest has another cool feature. It collects code coverage by default (yey zero config!)and thus is able to track which test files cover which source files. When a test or a source filechanges, Jest can rerun <em>the affected test files</em> which means super fast feedback loop.</p><blockquote><p>Jest can run tests for changed files by using collected code coverage</p></blockquote><p>Full proud disclosure - I wrote <a href="https://github.com/bahmutov/untested" target="_blank" rel="noopener">untested</a> 5 years ago(Jan 2013). <code>untested</code> orders your unit tests by code coverage so you can test faster, it even supportsbrowser based tests through <a href="https://github.com/bahmutov/lasso" target="_blank" rel="noopener">lasso</a>. It is kind of cool to seeideas that were prototypes for a long time used in production to test millions of files.</p><p><strong>update</strong> as this <a href="https://twitter.com/ArtemGovorov/status/906337464373067781" target="_blank" rel="noopener">twitter thread</a>notes I was mistaken thinking Jest uses code coverage to track test dependencies. InsteadJest uses file to file dependencies. If the test file &quot;a-spec.js&quot; loads &quot;a.js&quot; then when file&quot;a.js&quot; changes, test file &quot;a-spec.js&quot; will rerun all its tests. On the other hand, a testrunner like <a href="https://wallabyjs.com/" target="_blank" rel="noopener">Wallaby.js</a> actually does track code coverage for eachtest and can accurately rerun only the affected individual tests.</p><h2><span id="rocha">Rocha</span></h2><p>Each unit test should be independent from the other unit tests. Easy to say, right?But it is so easy for one test to leave changed global state, affecting the result ofanother test. In this file, one of the tests changes value <code>foo</code>, making the thirdtest pass.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'example'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> foo</span><br><span class="line">  it(<span class="string">'runs test 1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo = <span class="number">42</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'polluted the environment'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">'runs test 2'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">  it(<span class="string">'runs test 3'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.assert(foo === <span class="number">42</span>, <span class="string">'foo is 42'</span>, foo)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Yet if we run the third test by itself, it stops working, because nothing set <code>foo = 42</code> before itruns. The flaky tests are hard to debug, because isolating the tests literally breaks it or removesthe source of the flake.</p><p>This is why I wrote <a href="https://github.com/bahmutov/rocha" target="_blank" rel="noopener">rocha</a> - a &quot;random&quot; Mocha test runner.Before running the tests, Rocha randomly changes the order of unit tests, hopefully breakingthe &quot;happy test order&quot;, and instead flushing out inter-test dependencies. The above testsshow the difference between Mocha and Rocha</p><h3><span id="running-tests-using-mocha">Running tests using Mocha</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; mocha spec/tricky-spec.js</span><br><span class="line">  example</span><br><span class="line">polluted the environment</span><br><span class="line">    ✓ runs test 1</span><br><span class="line">    ✓ runs test 2</span><br><span class="line">    ✓ runs test 3</span><br><span class="line">  3 passing (8ms)</span><br></pre></td></tr></table></figure><blockquote><p>Rocha shuffles your tests to flush out inter-test dependencies</p></blockquote><h3><span id="running-tests-using-rocha">Running tests using Rocha</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; rocha spec/tricky-spec.js</span><br><span class="line">shuffling 3 unit tests in &quot;example&quot;</span><br><span class="line">  example</span><br><span class="line">    1) runs test 3</span><br><span class="line">polluted the environment</span><br><span class="line">    ✓ runs test 1</span><br><span class="line">    ✓ runs test 2</span><br><span class="line">  2 passing (10ms)</span><br><span class="line">  1 failing</span><br><span class="line">  1) example runs test 3:</span><br><span class="line">      AssertionError: foo is 42 undefined</span><br></pre></td></tr></table></figure><p>Perfect, we caught the flaky test. Maybe not right away, maybe after a few runs, when each runused a different reshufle. But what happens when we try to investigate the problem - will itdisappear because the tests will be shuffled again? No. When tests fail, Rocha will save thefailing test order, and on next run will set it to be the same again. A developer can rerunthe &quot;bad&quot; test order until the problem is discovered and fixed.</p><h2><span id="focha">Focha</span></h2><p>Imagine you have 100 of tests. If each test runs for 10 seconds that&#39;s 1000 seconds which isapproximately 15 minutes. That&#39;s a long time to wait to find out if all tests are passing.What usually happens is:</p><ul><li>a few tests break on CI</li><li>you push a fix</li></ul><p>and now you wait for CI to finish running through the 100 tests just to find out iftest <code>#66</code> that was failing before starts passing again. Wouldn&#39;t it be more useful tofind previously failing tests first?</p><blockquote><p>Focha runs tests that previously failed first so you find out if you have fixed them sooner</p></blockquote><p>Similarly to <code>rocha</code>, <a href="https://github.com/bahmutov/focha" target="_blank" rel="noopener">Focha</a>is a wrapper around Mocha that concentrates oncollecting failing tests (the &quot;F&quot; in &quot;Focha&quot;). When all tests finish, Focha savesfailing tests (if any have failed) in a JSON file or sends it to a REST apiendpoint.</p><p>Next time Focha runs, it loads and runs just the failing tests. Thus you findout if the test <code>#66</code> has been fixed in 10 seconds rather than in 15 minutes.If the previously failing tests pass, then you call <code>focha --all</code> to run all tests</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    "scripts": "focha *-spec.js &amp;&amp; focha --all *-spec.js"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Useful!</p><h2><span id="locha">Locha</span></h2><p>Finally, there is <a href="https://github.com/bahmutov/locha" target="_blank" rel="noopener">Locha</a> - the &quot;L&quot;oud Mocha.Imagine a test that exercises a complex pieceof code. That code probably has a lot of logging statements. I love using<a href="https://github.com/visionmedia/debug#readme" target="_blank" rel="noopener">debug</a> module so I can enablelog messages through an environment variable.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG=my-module npm test</span><br></pre></td></tr></table></figure><p>Being able to easily turn on verbose logging leads to a dilemma - do you enable alllogging in CI by default just in case a test fails?That&#39;s not good - each test can generate 10 - 100 - 1000 log messages!In our testing at Cypress the CI testlog output was overwhelming CircleCI and TravisCI UI, and we could only download theraw text file if we wanted to see it! But if we disabled the log messages, when a testfailed we had absolutely no idea what went wrong, which is also not good.</p><p>Locha gives you a happy compromise. It runs all your tests with minimal default logging,but if any test fails, it reruns the <em>failing tests only</em> with extra environment variables.Take a look at this test file.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'failing'</span>)</span><br><span class="line">describe(<span class="string">'failing spec'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'A'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`in "<span class="subst">$&#123;<span class="keyword">this</span>.test.fullTitle()&#125;</span>"`</span>)</span><br><span class="line"></span><br><span class="line">    debug(<span class="string">'a lot of'</span>)</span><br><span class="line">    debug(<span class="string">'verbose'</span>)</span><br><span class="line">    debug(<span class="string">'messages'</span>)</span><br><span class="line">    debug(<span class="string">'in debug'</span>)</span><br><span class="line">    debug(<span class="string">'mode in test A'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'B'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`in "<span class="subst">$&#123;<span class="keyword">this</span>.test.fullTitle()&#125;</span>"`</span>)</span><br><span class="line"></span><br><span class="line">    debug(<span class="string">'a lot of'</span>)</span><br><span class="line">    debug(<span class="string">'verbose'</span>)</span><br><span class="line">    debug(<span class="string">'messages'</span>)</span><br><span class="line">    debug(<span class="string">'in debug'</span>)</span><br><span class="line">    debug(<span class="string">'mode in test B'</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'B fails'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>It has a log of <code>debug</code> statements, but they will only output messages to the consoleif we run the tests with <code>DEBUG=failing npm test</code> command. By default, the tests are prettyquiet. One of the tests is failing. Here is the output from the Locha test runner</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ npm run demo</span><br><span class="line">&gt; $(npm bin)/locha test.js --env DEBUG:failing</span><br><span class="line"></span><br><span class="line">  failing spec</span><br><span class="line">in &quot;failing spec A&quot;</span><br><span class="line">    ✓ A</span><br><span class="line">in &quot;failing spec B&quot;</span><br><span class="line">    1) B</span><br><span class="line"></span><br><span class="line">  1 passing (14ms)</span><br><span class="line">  1 failing</span><br><span class="line"></span><br><span class="line">  1) failing spec B:</span><br><span class="line">     Error: B fails</span><br><span class="line">      at Context.&lt;anonymous&gt; (test.js:21:11)</span><br><span class="line"></span><br><span class="line">mocha finished with 1 failure</span><br><span class="line">Failed first time, rerunning 1 test</span><br><span class="line"></span><br><span class="line">  failing spec</span><br><span class="line">in &quot;failing spec B&quot;</span><br><span class="line">  failing a lot of +0ms</span><br><span class="line">  failing verbose +1ms</span><br><span class="line">  failing messages +1ms</span><br><span class="line">  failing in debug +0ms</span><br><span class="line">  failing mode in test B +0ms</span><br><span class="line">    1) B</span><br><span class="line"></span><br><span class="line">  0 passing (5ms)</span><br><span class="line">  1 failing</span><br><span class="line"></span><br><span class="line">  1) failing spec B:</span><br><span class="line">     Error: B fails</span><br><span class="line">      at Context.&lt;anonymous&gt; (test.js:21:11)</span><br><span class="line">mocha finished with 1 failure</span><br></pre></td></tr></table></figure><p>Do you see two test runs? First one executed two unit tests, and only the <code>console.log</code>statements were visible. During the first run, test &quot;B&quot; failed, and Locha has executed justthis test in the second round. During this round Locha has added the environment variableswe have passed as a CLI flag <code>--env DEBUG:failing</code> to the mix. Thus the second roundis pretty &quot;loud&quot;, and allows us to debug the failure, or at least get an idea why it happens.</p><blockquote><p>Locha keeps passing tests&#39; output to a minimum and makes failing tests very verbose</p></blockquote><h2><span id="final-thoughts">Final thoughts</span></h2><p>Making a useful testing tool is tricky, but there is definitely room for improvements.The entire testing and quality assurance process in JavaScript is still a chore, and ahindrance. We must do better, and have more useful information from our tests fasterto avoid introducing bugs into the code.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Even old things can be improved. Consider a wood axe. Simple, right? Humans have been chopping
trees for thousands of years, yet there wa
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>Tests, closures and arrow functions</title>
    <link href="https://glebbahmutov.com/blog/test-closures/"/>
    <id>https://glebbahmutov.com/blog/test-closures/</id>
    <published>2017-08-30T04:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine a <a href="https://mochajs.org/" target="_blank" rel="noopener">Mocha</a> test file like this</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'my tests'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'works'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// everything works fine</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The single test named &quot;works&quot; is synchronous; it passes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ cat package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;test-closures&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;mocha spec.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;mocha&quot;: &quot;^3.5.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ npm it</span><br><span class="line">&gt; mocha spec.js</span><br><span class="line"></span><br><span class="line">  my tests</span><br><span class="line">    ✓ works</span><br><span class="line"></span><br><span class="line">  1 passing (9ms)</span><br></pre></td></tr></table></figure><p>What if the test is asynchronous? We need to either return a promise or accept <code>done</code> testcallback parameter. Let us use <code>done</code> - it is simpler to call from a <code>setTimeout</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'my tests'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'works'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// everything works fine</span></span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">'passes after 500ms'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">    setTimeout(done, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm t</span><br><span class="line">&gt; mocha spec.js</span><br><span class="line"></span><br><span class="line">  my tests</span><br><span class="line">    ✓ works</span><br><span class="line">    ✓ passes after 500ms (502ms)</span><br><span class="line"></span><br><span class="line">  2 passing (512ms)</span><br></pre></td></tr></table></figure><p>Great. What if the test takes 3 seconds?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'passes after 3000ms'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  setTimeout(done, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm t</span><br><span class="line">  1) passes after 3000ms</span><br><span class="line">  2 passing (3s)</span><br><span class="line">  1 failing</span><br><span class="line"></span><br><span class="line">  1) my tests passes after 3000ms:</span><br><span class="line">     Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; </span><br><span class="line">     if returning a Promise, ensure it resolves.</span><br></pre></td></tr></table></figure><p>Mocha uses 2 second <a href="https://mochajs.org/#timeouts" target="_blank" rel="noopener">test limit by default</a>. Let us increase the timeout to 3.5 secondsin that one test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'passes after 3000ms'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.timeout(<span class="number">3500</span>)</span><br><span class="line">  setTimeout(done, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">✓ passes after 3000ms (3002ms)</span><br></pre></td></tr></table></figure><p>Great, the test is passing. Does Mocha pass anything else into the test callback function?We can check by printing <code>arguments</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'passes after 3000ms'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test arguments'</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  <span class="keyword">this</span>.timeout(<span class="number">3500</span>)</span><br><span class="line">  setTimeout(done, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test arguments &#123; &apos;0&apos;: [Function] &#125;</span><br><span class="line">✓ passes after 3000ms (3010ms)</span><br></pre></td></tr></table></figure><p>Seems, the test callback only gets the <code>done</code> parameter and nothing else. Are there any othermethods the test callback can call on its context besides <code>this.timeout</code>? Let us print the<code>this</code> variable inside the test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'passes after 3000ms'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test arguments'</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this'</span>, <span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.timeout(<span class="number">3500</span>)</span><br><span class="line">  setTimeout(done, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Converting circular structure to JSON</span><br><span class="line">  at Object.stringify (native)</span><br><span class="line">  at formatValue (util.js:352:36)</span><br><span class="line">  at inspect (util.js:186:10)</span><br><span class="line">  at exports.format (util.js:130:20)</span><br><span class="line">  at Console.log (console.js:43:37)</span><br><span class="line">  at Context.&lt;anonymous&gt; (spec.js:10:13)</span><br></pre></td></tr></table></figure><p>Hmm, not good. If we try printing using <code>console.log(&#39;this %j&#39;, this)</code> we are not gettingmuch more information, but at least we are not crashing</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test arguments &#123; &apos;0&apos;: [Function] &#125;</span><br><span class="line">this [Circular]</span><br></pre></td></tr></table></figure><p>Ok, let us print the keys of the object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inside the test</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this'</span>, <span class="built_in">Object</span>.keys(<span class="keyword">this</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this [ &apos;_runnable&apos;, &apos;test&apos; ]</span><br></pre></td></tr></table></figure><p>We are getting something! The <code>test</code> property is especially interesting. It has the name,the test callback and other properties describing the current test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'passes after 3000ms'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test arguments'</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this.test'</span>, <span class="keyword">this</span>.test)</span><br><span class="line">  <span class="keyword">this</span>.timeout(<span class="number">3500</span>)</span><br><span class="line">  setTimeout(done, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">test arguments &#123; &apos;0&apos;: [Function] &#125;</span><br><span class="line">this.test &#123;</span><br><span class="line">  &quot;title&quot;: &quot;passes after 3000ms&quot;,</span><br><span class="line">  &quot;body&quot;: &quot;function (done) &#123;\n    console.log(&apos;test arguments&apos;, arguments)\n  ...  &#125;&quot;,</span><br><span class="line">  &quot;async&quot;: 1,</span><br><span class="line">  &quot;sync&quot;: false,</span><br><span class="line">  &quot;timedOut&quot;: false,</span><br><span class="line">  &quot;pending&quot;: false,</span><br><span class="line">  &quot;type&quot;: &quot;test&quot;,</span><br><span class="line">  &quot;file&quot;: &quot;/test-closures/spec.js&quot;,</span><br><span class="line">  &quot;parent&quot;: &quot;#&lt;Suite&gt;&quot;,</span><br><span class="line">  &quot;ctx&quot;: &quot;#&lt;Context&gt;&quot;,</span><br><span class="line">  &quot;timer&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Via <code>this.test</code> we have access to the test&#39;s code (<code>this.test.body</code>), the test title, its file,its parent suite of tests, etc. This comes in very handy when extending Mocha with <a href="https://github.com/bahmutov/snap-shot-it" target="_blank" rel="noopener">snap-shot testing</a> for example.</p><h2><span id="test-closures">Test closures</span></h2><p>But what happens if we get tired of writing &quot;long&quot; callback functions and instead usearrow functions?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'passes after 3000ms'</span>, (done) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test arguments'</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'this.test'</span>, <span class="keyword">this</span>.test)</span><br><span class="line">  <span class="keyword">this</span>.timeout(<span class="number">3500</span>)</span><br><span class="line">  setTimeout(done, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test arguments &#123;&#125;</span><br><span class="line">this.test undefined</span><br><span class="line">  1) passes after 3000ms</span><br><span class="line">  Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure &quot;done()&quot; is called; </span><br><span class="line">    if returning a Promise, ensure it resolves.</span><br></pre></td></tr></table></figure><p>Everything breaks! Why is <code>this</code> still an object, but <code>this.timeout</code> has no effect, and the property <code>this.test</code> is <code>undefined</code>?</p><p>When you use a &quot;normal&quot; callback function, Mocha creates a Test instance and binds it as <code>this</code>when calling your callback. It could be something like this behind the scene</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> allTests = []</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">it</span>(<span class="params">name, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> test = <span class="keyword">new</span> Mocha.Test(&#123;</span><br><span class="line">    name: <span class="string">'passes after 3000ms'</span>,</span><br><span class="line">    body: cb.toString(),</span><br><span class="line">    cb: cb,</span><br><span class="line">    timeout: <span class="function">(<span class="params">ms</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// change current test's time limit</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  allTests.push(test)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// running all tests</span></span><br><span class="line">allTests.forEach(<span class="function"><span class="params">test</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> done = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// continue current test</span></span><br><span class="line">  &#125;</span><br><span class="line">  test.cb.call(test, done)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>By using <code>test.cb.call(test, ...)</code> the test runner sets <code>this</code> inside the test callback functionto the full &quot;Mocha.Test&quot; instance. What happens when you use arrow function as a test callback?The arrow functions bind the <code>this</code> context to whatever was outside their closure. If you areunsure what JavaScript closures are, read <a href="../javascript-closures/">this blog post</a>. In ourexample, inside the callback <code>this</code> will be whatever it was outside the callback&#39;s source codein our spec file, which is &quot;describe&quot; callback function!</p><p><img src="/blog/images/test-closures/this-in-test-callback.png" alt="This inside the arrow test callback"></p><p>The function surrounding our test arrow callback as written in the <code>spec.js</code> file isthe <code>describe</code> callback &quot;full&quot; function. Mocha test runner creates a special context whenexecuting each <code>describe</code> callback, thus the spec, instead of proper <code>Mocha.Test</code> instancegets something like <code>Mocha.Describe</code> instance! This leads to the confusion and produces thedummy <code>this.timeout</code> method that does nothing.</p><p>Even worse, what happens if the <code>describe</code> function uses arrow function as callback?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'my tests'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'passes after 3000ms'</span>, (done) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test arguments'</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this.test'</span>, <span class="keyword">this</span>.test)</span><br><span class="line">    <span class="keyword">this</span>.timeout(<span class="number">3500</span>)</span><br><span class="line">    setTimeout(done, <span class="number">3000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm t</span><br><span class="line">test arguments &#123; &apos;0&apos;: &#123;&#125;,</span><br><span class="line">  &apos;1&apos;: </span><br><span class="line">   &#123; [Function: require]</span><br><span class="line">     resolve: [Function: resolve],</span><br><span class="line">     ... lots of text</span><br><span class="line">this.test undefined</span><br><span class="line">  1) passes after 3000ms</span><br><span class="line">  TypeError: this.timeout is not a function</span><br></pre></td></tr></table></figure><p>That is unexpected. The <code>this.timeout()</code> call used <code>this</code> which due to arrow function callbackpoints at <code>this</code> inside the <code>describe</code> callback; which itself points <em>outside</em> because it is acallback function. When you point outside the outer function what do you get? In JavaScriptthis differs. If you are inside a proper function, the outside context would bea <em>global</em> object (Node) or <em>window</em> object (browser). So if we wrap our <code>describe</code> in a dummy function <code>foo</code>, we would get <code>this === global</code> inside each test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  describe(<span class="string">'my tests'</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'passes after 3000ms'</span>, (done) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'test arguments'</span>, <span class="built_in">arguments</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'this === global'</span>, <span class="keyword">this</span> === global)</span><br><span class="line">      <span class="comment">// this.timeout(3500)</span></span><br><span class="line">      setTimeout(done, <span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test arguments &#123;&#125;</span><br><span class="line">this === global true</span><br></pre></td></tr></table></figure><p>My general advice when dealing with scope madness like this (no pun intended) is to usethe strict mode to prevent default context pointing at <code>global</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  describe(<span class="string">'my tests'</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'passes after 3000ms'</span>, (done) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'test arguments'</span>, <span class="built_in">arguments</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'this'</span>, <span class="keyword">this</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'this === global'</span>, <span class="keyword">this</span> === global)</span><br><span class="line">      <span class="comment">// this.timeout(3500)</span></span><br><span class="line">      setTimeout(done, <span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test arguments &#123;&#125;</span><br><span class="line">this undefined</span><br><span class="line">this === global false</span><br></pre></td></tr></table></figure><p>But: if we do not use our outside <code>foo</code> function, using <code>strict</code> mode has no effect!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line">describe(<span class="string">'my tests'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'passes after 3000ms'</span>, (done) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test arguments'</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this'</span>, <span class="keyword">this</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this === global'</span>, <span class="keyword">this</span> === global)</span><br><span class="line">    <span class="comment">// this.timeout(3500)</span></span><br><span class="line">    setTimeout(done, <span class="number">3000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test arguments &#123; &apos;0&apos;: &#123;&#125;,</span><br><span class="line">  &apos;1&apos;: </span><br><span class="line">   &#123; [Function: require]</span><br><span class="line">     resolve: [Function: resolve],</span><br><span class="line">     ... lots of text</span><br><span class="line">  &apos;3&apos;: &apos;/test-closures/spec.js&apos;,</span><br><span class="line">  &apos;4&apos;: &apos;/test-closures&apos; &#125;</span><br><span class="line">this &#123;&#125;</span><br><span class="line">this === global false</span><br></pre></td></tr></table></figure><p>I think I can speak for everyone when I say &quot;WTF&quot;.</p><p>What is this empty context <code>{}</code> object we are getting? What is this huge <code>arguments</code> objectwe are seeing in the arrow function? Why does everyone have to be so complicated?</p><p>Well, it is still due to the JavaScript closure scope rules. First, about the weird <code>arguments</code> object. When you use the arrow functionyou &quot;lose&quot; your immediate arguments and instead your <code>arguments</code> points at the first full closurefunction&#39;s <code>arguments</code> object!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> bar = <span class="function">(<span class="params">myArg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'inside bar arguments'</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'myArg'</span>, myArg)</span><br><span class="line">  &#125;</span><br><span class="line">  bar(<span class="string">'bar'</span>)</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>Notice how we are passing arguments to <code>foo</code> and <code>bar</code>. What are the <code>arguments</code> inside<code>bar</code> arrow function?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node index.js </span><br><span class="line">inside bar arguments &#123; &apos;0&apos;: 1, &apos;1&apos;: 2, &apos;2&apos;: 3 &#125;</span><br><span class="line">myArg bar</span><br></pre></td></tr></table></figure><p>They are <code>arguments</code> of <code>foo()</code>! Ok, a little crazy, but I guess if <code>this</code> points at theoutside full function&#39;s closure, <code>arguments</code> might as well. So what are the magical 5 arguments our <code>spec</code> callback function got? Where are they coming from? Well, this is fromNode&#39;s <code>require</code> function (for full code example see <a href="../hacking-node-require/">Hacking Node require</a>). Every timea JS file is loaded by Node, it does the following</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const source = fs.readFileSync(filename, &apos;utf8&apos;)</span><br><span class="line">const module = eval(&apos;(function (exports, require, module, __filename, __dirname) &#123; &apos; + </span><br><span class="line">  source + &apos;\n&#125;()&apos;)</span><br></pre></td></tr></table></figure><p>The <code>require</code> wraps the <code>spec.js</code> in a full function, passing 5 parameters - that iswhere &quot;magical&quot; variables <code>__filename</code> and <code>__describe</code> are coming from! If we do not havea proper function inside out tests of our own, the arrow functions &quot;find&quot; the outside function from <code>require</code> and use its context (bypassing <code>use strict</code> command) and evengetting its <code>arguments</code> object.</p><p>What a mess. And all because the Mocha test runner uses <code>this</code> to let the test codeset its time limit. </p><h2><span id="final-thoughts">Final thoughts</span></h2><p>A couple of points to finish this discussion.</p><ul><li><p>Whenever I need a custom timeout in one of my test callbacks, I make sure to use &quot;proper&quot;callback function.</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'my tests'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'passes after 3000ms'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.timeout(<span class="number">3500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Other test frameworks like <a href="https://www.npmjs.com/package/tape" target="_blank" rel="noopener">Tape</a> and <a href="https://github.com/avajs/ava" target="_blank" rel="noopener">Ava</a> avoid using <code>this</code> and pass youand explicit argument. Simple and safe, see <a href="../picking-javascript-testing-framework/">my test framework recommendations</a></p></li><li><code>this</code> keyword in JavaScript will burn you one day. Then it will burn you again and againand again. If Dante Alighieri were alive today, he would put writing object-oriented JavaScriptamong one of the first levels of Hell for sure.</li></ul><p><img src="/blog/images/test-closures/dante-comedy.jpg" alt="Dante pointing at JavaScript developers"></p><p>  Please avoid the eternal suffering by using <a href="../tags/functional/">functional programming</a>   with its emphasis of pure functions.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine a &lt;a href=&quot;https://mochajs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mocha&lt;/a&gt; test file like this&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;f
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>Semantic Action</title>
    <link href="https://glebbahmutov.com/blog/semantic-action/"/>
    <id>https://glebbahmutov.com/blog/semantic-action/</id>
    <published>2017-08-18T04:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="semantic-release">Semantic release</span></h2><p>I love <a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener">semantic-release</a> and use it for every one of myown NPM packages. I do not publish a new version to NPM from local box.Instead, the CI publishes a new version but only if the tests pass and thereare changes to publish. CI determines if there are changes (and what theversion bump should be) based on commit messages. There are severalconventions, but I follow the simplest one from <a href="https://github.com/bahmutov/simple-commit-message" target="_blank" rel="noopener">simple-commit-message</a>.</p><ul><li>If there is a commit with <code>patch: something ...</code> or <code>fix: something</code> - the3rd number <code>z</code> in the version&#39;s triple <code>x.y.z</code> should be incremented by one.</li><li>If a commit has form <code>feat: ....</code> or <code>minor: ...</code> then the second numberis incremented.</li><li>Finally, if the commit starts with <code>major: ...</code> or <code>break: ...</code> then thisis a major API change, thus the package gets <code>x+1.y.z</code> bump</li><li>If there are multiple commits, the largest one wins.</li></ul><p>Usually I push every 1-2 commits to the master, releasing new versions often.Thanks to <a href="https://github.com/bahmutov/github-post-release" target="_blank" rel="noopener">gitub-post-release</a> plugin, every publishedNPM version gets a corresponding GitHub release with nice release summary.</p><iframe width="860" height="480" src="https://www.youtube.com/embed/t3Yns-nAI5g?rel=0" frameborder="0" allowfullscreen></iframe><p>Any issue closed by the commits as part of the release also gets a commentto notify users that the new version that solves the issue has been published.</p><p><img src="/blog/images/semantic-action/issue-comment.png" alt="Issue comment"></p><p>I love love love <code>semantic-release</code>. I even created my own Yeoman generatorfor Node projects that has <a href="https://github.com/bahmutov/generator-node-bahmutov#semantic-release" target="_blank" rel="noopener">yo node-bahmutov:release</a> command. Itruns <code>semantic-release-cli setup</code> and installs my own release plugins I oftenneed. Overall, I almost never think about the <em>publishing mechanics</em>, insteadI spend time thinking about what the roadmap should be,what features to implement and in what order they should be released. TheNPM release is just shipping and handling - it just happens.</p><p><img src="/blog/images/semantic-action/box.jpg" alt="Shipping a new version"></p><p>Yet I found myself limited by what <code>semantic-release</code> can do. Partly becausethe project itself has been dormant (hope we can reinvigorate it with<a href="https://twitter.com/gr2m" target="_blank" rel="noopener">Gregor</a> and <a href="https://gitlab.com/hutson" target="_blank" rel="noopener">Hutson</a>),but partly because it is really closely tied to TravisCI, GitHub and NPMregistry.</p><h2><span id="semantic-action">Semantic action</span></h2><p>What I really want to do is to drive <em>any action</em> based on semantic analysisof commit messages. Not everything we do is a new NPM module version; oftenwe need to deploy a static website or a server. To do this we need to make<code>semantic-release</code> a little more generic. So I forked it into<a href="https://github.com/bahmutov/semantic-action" target="_blank" rel="noopener">semantic-action</a> to freely experiment and change - thebeauty of open source is that it freely allows everyone to play andadapt other projects to your needs.</p><p>Any automation is a replacement for a manual step. So what do we do manuallythat might benefit from <code>semantic-action</code>? The simplest thing that I oftendo is publishing a static <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> blog, just like this one. Seethis repo <a href="https://github.com/bahmutov/test-semantic-deploy" target="_blank" rel="noopener">test-semantic-action</a> for the source codefor the simplest case; it is deployed to GitHub static pages hosted at<a href="https://glebbahmutov.com/test-semantic-deploy/">https://glebbahmutov.com/test-semantic-deploy/</a>.</p><p>You can see the deploy command in the <a href="https://github.com/bahmutov/test-semantic-deploy/blob/master/.circleci/config.yml" target="_blank" rel="noopener">.circleci/config.yml</a>executed on CircleCI.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">semantic-deploy</span> <span class="string">||</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>That is it - the CI command is super simple, because we already connectedthe CI to GitHub via SSH keys, so the new static content can be pushed.But if you look at the <a href="https://circleci.com/gh/bahmutov/test-semantic-deploy/38" target="_blank" rel="noopener">CircleCI log</a> there is a lot going on,even discounting verbose logging I have turned on. The NPM script commandhas 3 parts:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"deploy"</span>: <span class="string">"hexo deploy"</span>,</span><br><span class="line">    <span class="attr">"semantic-deploy"</span>: <span class="string">"semantic-action pre &amp;&amp; npm run deploy &amp;&amp; semantic-action post"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice the &quot;pre&quot; and &quot;post&quot; scripts - they are controlled by <code>semantic-action</code>and can be customized by using <a href="https://github.com/semantic-release/semantic-release#plugins" target="_blank" rel="noopener">plugins</a>.</p><h3><span id="pre-is-the-safety-switch">Pre is the safety switch</span></h3><p>The &quot;pre&quot; step looks at the environment and tries to decide if a semanticaction is necessary. Usually the &quot;pre&quot; step will halt if theenvironment variable <code>CI</code> is undefined - forcing us to only run this actionon the continuous integration server.The original <code>semantic-release</code> also looks for <code>NPM_TOKEN</code> and<code>GH_TOKEN</code> environment variables, because it assumes we are going to publishto NPM registry and upload the release notes on GitHub.My <code>semantic-action</code> removes this check, because we are not necessarilypublishing to NPM, and if there is such action, the action itself would check.</p><p>The most important thing the &quot;pre&quot; step does - it inspects the commits since<em>the previous semantic action</em> to decide if there are <a href="https://github.com/bahmutov/new-public-commits" target="_blank" rel="noopener">new public commits</a>.For this, it needs two things:</p><ol><li><p>Commit SHA when the semantic action ran last time. <code>semantic-release</code> usedthe version tag fetched from NPM registry to find it. In my case Iextracted this to a plugin. For example, if you deploy commit SHA withyour static site as a json file, you can fetch it during &quot;pre&quot; step.Just tell it in the &quot;release&quot; object of the <a href="https://github.com/bahmutov/test-semantic-deploy/blob/master/package.json" target="_blank" rel="noopener">package.json</a>to use <a href="https://github.com/bahmutov/url-to-sha" target="_blank" rel="noopener">url-to-sha</a> plugin and point at the deployed URL</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"release"</span>: &#123;</span><br><span class="line">    <span class="attr">"getLastRelease"</span>: &#123;</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"url-to-sha"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://glebbahmutov.com/test-semantic-deploy/build.json"</span>,</span><br><span class="line">      <span class="attr">"property"</span>: <span class="string">"id"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I generate the <code>build.json</code> file during the deployment using<a href="https://github.com/bahmutov/git-last" target="_blank" rel="noopener">git-last</a> module and NPM script command</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"postgenerate"</span>: <span class="string">"git-last -f public/build.json &amp;&amp; cat public/build.json"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can see the deployed version yourself</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://glebbahmutov.com/<span class="built_in">test</span>-semantic-deploy/build.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="string">"60839bb21998cb30772c01b3a0f6efe17d1892aa"</span>,</span><br><span class="line">  <span class="string">"short"</span>: <span class="string">"60839bb"</span>,</span><br><span class="line">  <span class="string">"savedAt"</span>: <span class="string">"2017-08-04T05:57:38.675Z"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.3.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> I find having such easy way to see what I have deployed that most of my servers have <a href="https://github.com/bahmutov/version-middleware" target="_blank" rel="noopener">version-middleware</a> installed.</p></li><li><p>List of commits since the last action commit SHA. This is pretty standardand just uses Git command.</p></li></ol><h3><span id="action">Action</span></h3><p>Between &quot;pre&quot; and &quot;post&quot; lies the real action. The command could beanything - <code>npm publish</code>, <code>hexo deploy</code>,<a href="https://github.com/bahmutov/now-pipeline" target="_blank" rel="noopener">immutable deploy using now</a>, <code>git push api@heroku.git</code> - anycommand that you execute manually is fair game for automation.Could be even a very simple tedious task - create a tag in therepo to mark when specific feature or fix commit was pushed.</p><h3><span id="post-is-for-notifications">Post is for notifications</span></h3><p>The &quot;post&quot; step is for running tasks after semantic action has happened.For example we might want to upload other artifacts to storage or to Docker Hub,or push a new tag, or send an email, or post a GIF to a Slack channel.</p><p>In the coming months I hope to have a flexible declarative way (all via aJSON object in the <code>package.json</code> file) to execute arbitrary deploymentactions based on commits and files affected by these commits. For examplefor larger monorepos we might want to deploy static documentation but onlyif the semantic commits have touched files in the <code>docs</code> folder.</p><p>If I can borrow an image from <code>semantic-release</code><a href="https://github.com/semantic-release/semantic-release#license" target="_blank" rel="noopener">README</a>:</p><p><img src="/blog/images/semantic-action/kill-all-humans.png" alt="Automate all the things"></p><h2><span id="links">Links</span></h2><ul><li><a href="https://github.com/bahmutov/semantic-action" target="_blank" rel="noopener">semantic-action</a></li><li><a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener">semantic-release</a></li><li><a href="https://github.com/bahmutov/test-semantic-deploy" target="_blank" rel="noopener">test-semantic-action</a> shows static deploy with<code>semantic-action</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;semantic-release&quot;&gt;Semantic release&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;I love &lt;a href=&quot;https://github.com/semantic-release/semantic-release&quot; target=
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="modular development" scheme="https://glebbahmutov.com/blog/tags/modular-development/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
      <category term="git" scheme="https://glebbahmutov.com/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Use a little bit of FP</title>
    <link href="https://glebbahmutov.com/blog/use-a-little-bit-of-fp/"/>
    <id>https://glebbahmutov.com/blog/use-a-little-bit-of-fp/</id>
    <published>2017-08-17T04:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Here are a couple of examples where I brought tiny functional programming bitsinto existing code bases. One is an internal API and another is a tinysnapshot testing utility.</p><h2><span id="maybe-for-server-code">Maybe for server code</span></h2><p>At <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress.io</a> we have an API. This is your typical API with acontroller object routing requests to data model layer.For example there is an endpoint that returns user information.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller</span></span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'./models/user'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAddress</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.params.id</span><br><span class="line">  <span class="comment">// check authenticated and authorized</span></span><br><span class="line">  User.get(id)</span><br><span class="line">    .then(<span class="function"><span class="params">info</span> =&gt;</span> &#123;</span><br><span class="line">      res.json(info)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The model class <code>User</code> has a method <code>get(id)</code> which constructs user informationfrom several sources.To construct full user information from promise-returning functions, we use<a href="http://bluebirdjs.com/docs/api/promise.props.html" target="_blank" rel="noopener">Bluebird.props</a> function; it is super helpful.Before you say anything: I know, I should be using GraphQL and asyncfunctions for this, but I am not.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model class</span></span><br><span class="line"><span class="keyword">const</span> Bluebird = <span class="built_in">require</span>(<span class="string">'bluebird'</span>)</span><br><span class="line">User.get = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  Bluebird.props(&#123;</span><br><span class="line">    basic: getBasicUserInfo(),</span><br><span class="line">    address: getAddress(),</span><br><span class="line">    history: getHistory()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAddress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// "address" is nested inside the result object</span></span><br><span class="line">  <span class="keyword">return</span> db.fetch(...)</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> result.customer.address</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Everything is working, but we have decided to make everything the API returnsbe camel cased for consistency.So we convert the result of <code>getAddress</code> using<a href="https://github.com/bahmutov/object-to-camel-case" target="_blank" rel="noopener">object-to-camel-case</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectToCamelCase = <span class="built_in">require</span>(<span class="string">'object-to-camel-case'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAddress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// "address" is nested inside the result object</span></span><br><span class="line">  <span class="keyword">return</span> db.fetch(...)</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> result.customer.address</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(objectToCamelCase)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is a problem. Sometimes a customer has no address in our system. Or maybewe are missing a customer record for this user completely! So we need toprotect <code>result.customer.address</code> getter.</p><p>No problem, <a href="http://ramdajs.com/docs/#path" target="_blank" rel="noopener">Ramda.path</a> to the rescue!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectToCamelCase = <span class="built_in">require</span>(<span class="string">'object-to-camel-case'</span>)</span><br><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAddress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// "address" is nested inside the result object</span></span><br><span class="line">  <span class="keyword">return</span> db.fetch(...)</span><br><span class="line">    .then(R.path([<span class="string">'customer'</span>, <span class="string">'address'</span>]))</span><br><span class="line">    .then(objectToCamelCase)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But if the <code>address</code> or <code>customer</code> really are missing, we will pass <code>undefined</code>into <code>objectToCamelCase()</code> and it crashes. So we need an <code>if</code> statement.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectToCamelCase = <span class="built_in">require</span>(<span class="string">'object-to-camel-case'</span>)</span><br><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAddress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// "address" is nested inside the result object</span></span><br><span class="line">  <span class="keyword">return</span> db.fetch(...)</span><br><span class="line">    .then(R.path([<span class="string">'customer'</span>, <span class="string">'address'</span>]))</span><br><span class="line">    .then(<span class="function"><span class="params">address</span> =&gt;</span> address ? objectToCamelCase(address) : address)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That is one nasty <code>if</code> statement, that can only be marginally improved bypicking a shorter non-descriptive variable name instead of <code>address</code>.Plus there might be other places where we need to guard againsta non-existent address.</p><p>We might return an empty object, that is simple with <a href="http://ramdajs.com/docs/#pathOr" target="_blank" rel="noopener">Ramda.pathOr</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectToCamelCase = <span class="built_in">require</span>(<span class="string">'object-to-camel-case'</span>)</span><br><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAddress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// "address" is nested inside the result object</span></span><br><span class="line">  <span class="keyword">return</span> db.fetch(...)</span><br><span class="line">    .then(R.pathOr(&#123;&#125;, [<span class="string">'customer'</span>, <span class="string">'address'</span>]))</span><br><span class="line">    .then(objectToCamelCase)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This just pushes the problem to the edge of the computation (really to theclient making the server request), making a check for existing addressmore complex.</p><p>What we really need is an easy and unambiguous way to signal that the result ofa database query maybe empty. And if it is empty, we should skip any furthercomputations over the data. Here is where <code>Maybe</code> comes in handy.There are several libraries that implement it, but I will pick<a href="http://folktale.origamitower.com/" target="_blank" rel="noopener">folktale</a> since it seems complete and popular.</p><h3><span id="adding-maybe">Adding Maybe</span></h3><p>Let us make our model return address wrapped in a <code>Maybe</code> instance. Install<code>folktale</code> using <code>npm i -S folktale</code> and use <code>Maybe.fromNullable</code> to wrapthe address.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectToCamelCase = <span class="built_in">require</span>(<span class="string">'object-to-camel-case'</span>)</span><br><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"><span class="keyword">const</span> Maybe = <span class="built_in">require</span>(<span class="string">'folktale/maybe'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAddress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// "address" is nested inside the result object</span></span><br><span class="line">  <span class="keyword">return</span> db.fetch(...)</span><br><span class="line">    .then(R.path([<span class="string">'customer'</span>, <span class="string">'address'</span>]))</span><br><span class="line">    .then(Maybe.fromNullable)</span><br><span class="line">    <span class="comment">// what should we do now?</span></span><br><span class="line">    <span class="comment">// next callback function will receive a Maybe(address) object</span></span><br><span class="line">    .then(objectToCamelCase)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Instead of calling <code>objectToCamelCase</code> directly on the wrapped data, we call<code>(x) =&gt; x.map(objectToCamelCase)</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectToCamelCase = <span class="built_in">require</span>(<span class="string">'object-to-camel-case'</span>)</span><br><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"><span class="keyword">const</span> Maybe = <span class="built_in">require</span>(<span class="string">'folktale/maybe'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAddress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// "address" is nested inside the result object</span></span><br><span class="line">  <span class="keyword">return</span> db.fetch(...)</span><br><span class="line">    .then(R.path([<span class="string">'customer'</span>, <span class="string">'address'</span>]))</span><br><span class="line">    .then(Maybe.fromNullable)</span><br><span class="line">    .then(<span class="function"><span class="params">maybe</span> =&gt;</span> maybe.map(objectToCamelCase))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Because <a href="http://ramdajs.com/docs/#map" target="_blank" rel="noopener">Ramda.map</a> can call <code>.map(cb)</code> on anything with a <code>map</code>method, we can shorten the last line:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectToCamelCase = <span class="built_in">require</span>(<span class="string">'object-to-camel-case'</span>)</span><br><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"><span class="keyword">const</span> Maybe = <span class="built_in">require</span>(<span class="string">'folktale/maybe'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAddress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// "address" is nested inside the result object</span></span><br><span class="line">  <span class="keyword">return</span> db.fetch(...)</span><br><span class="line">    .then(R.path([<span class="string">'customer'</span>, <span class="string">'address'</span>]))</span><br><span class="line">    .then(Maybe.fromNullable)</span><br><span class="line">    .then(R.map(objectToCamelCase))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So our model function resolves a promise with a <code>Maybe</code> instance. How doesour controller change then? It needs to convert to plain values beforeserializing the result and sending it back to the client. Controller canalso decide what to do for the cases when <code>Maybe</code> is of type <code>Nothing</code> -when there is no address. A good function to use in this caseis <a href="http://ramdajs.com/docs/#evolve" target="_blank" rel="noopener">Ramda.evolve</a>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller</span></span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'./models/user'</span>)</span><br><span class="line"><span class="keyword">const</span> toPlainValues = R.evolve(&#123;</span><br><span class="line">  <span class="comment">// we could use default value here, but null is ok too</span></span><br><span class="line">  address: <span class="function"><span class="params">maybe</span> =&gt;</span> maybe.getOrElse()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAddress</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.params.id</span><br><span class="line">  <span class="comment">// check authenticated and authorized</span></span><br><span class="line">  User.get(id)</span><br><span class="line">    .then(toPlainValues)</span><br><span class="line">    <span class="comment">// shortcut to res.json</span></span><br><span class="line">    .then(res.json.bind(res))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Function <code>toPlainValues</code> will extract actual value from <code>address</code> property(or return default value <code>undefined</code> from <code>getOrElse()</code>), leaving otherproperties unchanged. Then the plain object is sent as JSON to the client.</p><p>What about tests? Well if we mock data returned from the model instance inour tests, we probably already have:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller-test.js</span></span><br><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line">it(<span class="string">'returns address'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> info = &#123;</span><br><span class="line">    basic: &#123;</span><br><span class="line">      first: <span class="string">'Joe'</span>,</span><br><span class="line">      last: <span class="string">'Smith'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    address: &#123;</span><br><span class="line">      city: <span class="string">'Boston'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sinon.stub(User, <span class="string">'get'</span>).resolves(info)</span><br><span class="line">  superTest(app)</span><br><span class="line">    .get(<span class="string">'/user'</span>)</span><br><span class="line">    .expect(<span class="number">200</span>)</span><br><span class="line">    .then(R.prop(<span class="string">'body'</span>))</span><br><span class="line">    .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// check user.address</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test can easily return <code>Maybe address</code> from the stub</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Maybe = <span class="built_in">require</span>(<span class="string">'folktale/maybe'</span>)</span><br><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  basic: &#123;</span><br><span class="line">    first: <span class="string">'Joe'</span>,</span><br><span class="line">    last: <span class="string">'Smith'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  address: Maybe.of(&#123;</span><br><span class="line">    city: <span class="string">'Boston'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Testing data wrapped in a <code>Maybe</code> is as simple as it was before.</p><h3><span id="chaining-to-prevent-nesting">Chaining to prevent nesting</span></h3><p>What if we want to extract a zip code from the address? Let me just show thisseparately. We can wrap &quot;plain&quot; <code>getAddress</code> to return a Maybe by composing<code>Maybe.fromNullable</code> with <code>getAddress</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"><span class="keyword">const</span> Maybe = <span class="built_in">require</span>(<span class="string">'folktale/maybe'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getAddress = R.path([<span class="string">'customer'</span>, <span class="string">'address'</span>])</span><br><span class="line"><span class="keyword">const</span> getMaybeAddress = R.compose(Maybe.fromNullable, getAddress)</span><br><span class="line"><span class="built_in">console</span>.log(getMaybeAddress(&#123;</span><br><span class="line">  customer: &#123;</span><br><span class="line">    address: &#123;</span><br><span class="line">      city: <span class="string">'Boston'</span>,</span><br><span class="line">      zip: <span class="number">22222</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">//&gt; folktale:Maybe.Just(&#123; value: &#123;city: 'Boston', zip: 22222&#125; &#125;)</span></span><br></pre></td></tr></table></figure><p>Let us grab the zip code - we can use <code>Maybe.map</code> for this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getZipCode = R.prop(<span class="string">'zip'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getMaybeAddress(&#123;</span><br><span class="line">  customer: &#123;</span><br><span class="line">    address: &#123;</span><br><span class="line">      city: <span class="string">'Boston'</span>,</span><br><span class="line">      zip: <span class="number">22222</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).map(getZipCode))</span><br><span class="line"><span class="comment">//&gt; folktale:Maybe.Just(&#123; value: 22222 &#125;)</span></span><br></pre></td></tr></table></figure><p>But the zip code might be missing. In that case we will get a <code>Maybe</code> withan <code>undefined</code> value.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(getMaybeAddress(&#123;</span><br><span class="line">  customer: &#123;</span><br><span class="line">    address: &#123;</span><br><span class="line">      city: <span class="string">'Unknown'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).map(getZipCode))</span><br><span class="line"><span class="comment">//&gt; folktale:Maybe.Just(&#123; value: undefined &#125;)</span></span><br></pre></td></tr></table></figure><p>This might be ok, but we probably want to be safe against an undefinedzip code. What if we return a <code>Maybe (zipcode)</code>? We get a problem - we wouldget a nested <code>Maybe</code> inside a <code>Maybe</code> 😬</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getMaybeZipCode = R.compose(Maybe.fromNullable, getZipCode)</span><br><span class="line"><span class="built_in">console</span>.log(getMaybeAddress(&#123;</span><br><span class="line">  customer: &#123;</span><br><span class="line">    address: &#123;</span><br><span class="line">      city: <span class="string">'Unknown'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).map(getMaybeZipCode))</span><br><span class="line"><span class="comment">//&gt; folktale:Maybe.Just(&#123; value: folktale:Maybe.Nothing(&#123;  &#125;) &#125;)</span></span><br></pre></td></tr></table></figure><p>The trick to prevent nesting wrappers of the same time is to call <code>.chain(cb)</code>instead of <code>.map(cb)</code> if the function <code>cb</code> returns result already wrapped!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(getMaybeAddress(&#123;</span><br><span class="line">  customer: &#123;</span><br><span class="line">    address: &#123;</span><br><span class="line">      city: <span class="string">'Unknown'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).chain(getMaybeZipCode))</span><br><span class="line"><span class="comment">//&gt; folktale:Maybe.Nothing(&#123;  &#125;)</span></span><br></pre></td></tr></table></figure><p>The above is what we want. Let us rewrite it for clarity to separate logic(functions) from data. Again, Ramda has us covered with<a href="http://ramdajs.com/docs/#chain" target="_blank" rel="noopener">Ramda.chain</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getZip = R.pipe(</span><br><span class="line">  getMaybeAddress,</span><br><span class="line">  R.chain(getMaybeZipCode)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(getZip(&#123;</span><br><span class="line">  customer: &#123;</span><br><span class="line">    address: &#123;</span><br><span class="line">      city: <span class="string">'Unknown'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">//&gt; folktale:Maybe.Nothing(&#123;  &#125;)</span></span><br></pre></td></tr></table></figure><p>Easy peasy. Just remember: if you are returning a plain value, then use <code>.map</code>,and you are returning a <code>Maybe</code> use <code>.chain</code>.</p><h2><span id="result-either-for-utility-functions">Result (Either) for utility functions</span></h2><p>When writing a snapshot testing utility <a href="https://github.com/bahmutov/snap-shot-core" target="_blank" rel="noopener">snap-shot-core</a> Ineeded a function to compare two values.In a simplest case, we could write something like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span> (<span class="params">&#123;expected, value&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> e = <span class="built_in">JSON</span>.stringify(expected)</span><br><span class="line">  <span class="keyword">const</span> v = <span class="built_in">JSON</span>.stringify(value)</span><br><span class="line">  <span class="keyword">if</span> (e === v) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      valid: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    valid: <span class="literal">false</span>,</span><br><span class="line">    message: <span class="string">`<span class="subst">$&#123;e&#125;</span> !== <span class="subst">$&#123;v&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the values are different we really want a more useful message with thedifference. I have made <a href="https://github.com/bahmutov/snap-shot-compare" target="_blank" rel="noopener">snap-shot-compare</a> that uses3rd party libs for object and text comparison that generate excellent diffs.But the library still adheres to the convention. It returns an object withat least one property <code>{valid: true|false}</code>. If <code>valid === false</code> then thereshould be a <code>message</code> property with the difference text. Again, just like inthe previous case with <code>Maybe</code> we have a &quot;magic&quot; value we are returning.Only now we not only want to control <code>if - else</code>, but pass the <code>message</code>data.</p><p>Folktale library has a wrapper for this case, and it is called <a href="http://folktale.origamitower.com/api/v2.0.0/en/folktale.result.html" target="_blank" rel="noopener">Result</a>.Other libraries might call it <code>Either</code>. Let us return a <code>Result</code> from the<code>compare</code> function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Result = <span class="built_in">require</span>(<span class="string">'folktale/result'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span> (<span class="params">&#123;expected, value&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> e = <span class="built_in">JSON</span>.stringify(expected)</span><br><span class="line">  <span class="keyword">const</span> v = <span class="built_in">JSON</span>.stringify(value)</span><br><span class="line">  <span class="keyword">if</span> (e === v) &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.Ok()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Result.Error(<span class="string">`<span class="subst">$&#123;e&#125;</span> !== <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can easily test this logic, here a simple test that confirms that a<code>Result</code> instance is returned.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// spec.js</span></span><br><span class="line"><span class="keyword">const</span> Result = <span class="built_in">require</span>(<span class="string">'folktale/result'</span>)</span><br><span class="line"><span class="keyword">const</span> la = <span class="built_in">require</span>(<span class="string">'lazy-ass'</span>)</span><br><span class="line">describe(<span class="string">'compare'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;compare&#125; = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'returns Result'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> expected = <span class="string">'foo'</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="string">'foo'</span></span><br><span class="line">    <span class="keyword">const</span> r = compare(&#123;expected, value&#125;)</span><br><span class="line">    la(Result.hasInstance(r))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>But what about actual values? It is easy to capture the entire instanceas a snapshot (talk about a chicken and an egg problem here!)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> snapshot = <span class="built_in">require</span>(<span class="string">'snap-shot-it'</span>)</span><br><span class="line">it(<span class="string">'has error (snapshot)'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> expected = <span class="string">'foo'</span></span><br><span class="line">  <span class="keyword">const</span> value = <span class="string">'bar'</span></span><br><span class="line">  snapshot(compare(&#123;expected, value&#125;))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ DRY=1 npm test</span><br><span class="line">saving snapshot &quot;compare has error (snapshot) 1&quot; for file src/utils-spec.js</span><br><span class="line">&#123; &apos;@@type&apos;: &apos;folktale:Result&apos;,</span><br><span class="line">  &apos;@@tag&apos;: &apos;Error&apos;,</span><br><span class="line">  &apos;@@value&apos;: &#123; value: &apos;&quot;foo&quot; !== &quot;bar&quot;&apos; &#125; &#125;</span><br></pre></td></tr></table></figure><p>While this certainly works for a test, I prefer not to store theinternal implementation details in the snapshot. Instead we will getto the error value by passing <code>snapshot</code> as a callback to <code>.orElse()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'snapshots error value'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> expected = <span class="string">'foo'</span></span><br><span class="line">  <span class="keyword">const</span> value = <span class="string">'bar'</span></span><br><span class="line">  compare(&#123;expected, value&#125;).orElse(snapshot)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ DRY=1 npm test</span><br><span class="line">saving snapshot &quot;compare snapshots error value 1&quot; for file src/utils-spec.js</span><br><span class="line">&quot;foo&quot; !== &quot;bar&quot;</span><br></pre></td></tr></table></figure><p>That is perfect, except for a tiny detail. If for some reason <code>compare()</code>returns <code>Result.Ok</code> our <code>snapshot</code> callback will not be triggered at all.Thus we need to guard against a successful <code>Result</code> - it is a mistake,and the test shoud fail.Make a utility function and use it as callback to the &quot;happy&quot; path.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> raise = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Should not reach this'</span>)</span><br><span class="line">&#125;</span><br><span class="line">it(<span class="string">'snapshots error value'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> expected = <span class="string">'foo'</span></span><br><span class="line">  <span class="keyword">const</span> value = <span class="string">'bar'</span></span><br><span class="line">  compare(&#123;expected, value&#125;)</span><br><span class="line">    <span class="comment">// prevents Result.Ok() from skipping error snapshot</span></span><br><span class="line">    .map(raise)</span><br><span class="line">    .orElse(snapshot)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>note</strong> despite being similar to promises, all callbacks to <code>.map()</code> and othermethods in <code>Maybe</code> and <code>Result</code> are executed synchronously, just like<code>[].map()</code> returns a new array synchronously.</p><p>Using the returned <code>Result</code>, and raising an exception is simple. Again wecan use the <code>orElse</code> callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compare(&#123;expected, value&#125;).orElse(<span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">  debug(<span class="string">'Test "%s" snapshot difference'</span>, specName)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If you want to see all changes that went into moving to <code>Result</code> in thissmall utility package, take a look at the pull request<a href="https://github.com/bahmutov/snap-shot-core/pull/21/files" target="_blank" rel="noopener">#12</a>. Becausethe change really affected the API of the module, I committed it as<code>major</code> breaking change. The bumped version is now<a href="https://github.com/bahmutov/snap-shot-core/releases/tag/v2.0.0" target="_blank" rel="noopener">2.0.0</a>.</p><h2><span id="final-thoughts">Final thoughts</span></h2><p>We have added a little bit of functional programming to our server code, andto a utility package. Each change made the result of the computation a littleless ambiguous, and removed some complexity.These are very small changes, but it is a beachhead - we must start slow.Only by showing benefits we can win hearts and minds of other developers.</p><p><em>Aside:</em> using <code>Maybe</code> and <code>Result</code> is orthogonal to switching from JavaScriptto TypeScript. I believe adding static type checking improves your code,but this benefit is different from replacing <code>if - else</code> statements with<code>Maybe</code> type.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Here are a couple of examples where I brought tiny functional programming bits
into existing code bases. One is an internal API and anoth
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="functional" scheme="https://glebbahmutov.com/blog/tags/functional/"/>
    
  </entry>
  
  <entry>
    <title>Slow updates</title>
    <link href="https://glebbahmutov.com/blog/slow-updates/"/>
    <id>https://glebbahmutov.com/blog/slow-updates/</id>
    <published>2017-08-16T04:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>NPM packages fall behind in their dependencies. There is a constant tickingof new versions being published; unless a module has 0 dependencies, it willend up out of date pretty quickly.</p><p>Being behind has downsides:</p><ul><li>your package has bugs that have already been fixed;this includes security issues</li><li>you are not using the latest features, sometimes missing out on betterperformance</li><li>the documentation you consult is gets out of sync with the versionyou are using</li></ul><p>There are solutions that automate dependency upgrades. For example, theseservices integrate with CI and GitHub and open pull requests when newversions of dependencies are published.</p><ul><li><a href="https://greenkeeper.io/" target="_blank" rel="noopener">greenkeeper.io</a> is fast testing of availabledependency updates via pull requests (that need to be manually reviewed and merged)</li><li><a href="https://github.com/greenkeeper-keeper/meta" target="_blank" rel="noopener">greenkeeper-keeper</a> is a serviceto automatically merge Greenkeeper pull requests.</li><li><a href="https://github.com/singapore/renovate" target="_blank" rel="noopener">renovate</a> keeps dependencies up todate automatically by testing and merging pull requests (an alternativeto greenkeeper.io + greenkeeper-keeper)</li></ul><p>The above services all work like an <em>avalanche</em> - a new dependency versiontriggers an update, leading to multiple pull requests if you have severalmodules and they all have dependencies.I even had to turn off Greenkeeper.io on my projects - the high number of pullrequests for every single patch update was polluting my GitHub feed.</p><p>Other services automate pull requests, but they all require you to runa service that watches dependencies and integrates with GitHub and CI pullrequest mechanism. I thought that was too much hassle, especially when mymost commonly used continuous integration service TravisCI introduced<a href="https://docs.travis-ci.com/user/cron-jobs/" target="_blank" rel="noopener">cron jobs</a>. Here is the solutionI came up with that does not require any external setup and seems towork pretty well for me.</p><ol><li><p>Use <a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener">semantic-release</a> to publish NPM modules from CI.Its setup could not be simpler:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g semantic-release-cli</span><br><span class="line">semantic-release-cli setup</span><br></pre></td></tr></table></figure><p>Answer a couple of questions and it sets Travis CI with <code>NPM_TOKEN</code>(to authenticate with NPM registry) and <code>GH_TOKEN</code> (to publish tag andrelease notes to GitHub). Takes less than 30 seconds.</p></li><li><p>Enable <code>cron</code> job on Travis CI. Select weekly or monthly interval - unlessyou really want to check for new updates daily, bumping dependenciesinfrequently solves my main problem - falling very far behind the latestversions.</p><p> <img src="/blog/images/slow-updates/cron-job.png" alt="Travis cron job"></p></li><li><p>Install <a href="https://github.com/bahmutov/next-update-travis" target="_blank" rel="noopener">next-update-travis</a> as a dev dependency.This creates a shell script that you should invoke from your <code>.travis.yml</code></p><ul><li><p>it only runs for <code>cron</code> jobs, so it is ok to just add it to the regularscript steps</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">./next-update-travis.sh</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">test</span></span><br></pre></td></tr></table></figure></li></ul><p>The shell script uses <a href="https://github.com/bahmutov/next-update" target="_blank" rel="noopener">next-update</a> to test new versions ofdependencies. There are lots of options to control which modules are allowedto be upgraded, which modules are black listed, the test command, etc.You can allow patches and features only (the default),and <a href="https://github.com/bahmutov/next-update/issues/107" target="_blank" rel="noopener">in the future</a> even test updatesthat were successful for other people.</p></li></ol><p>That is it. From now on, Travis periodically tests new versions, and if thetests still pass (you must have tests, ok?) the changed <code>package.json</code> iscommitted and pushed to GitHub. We already have <code>GH_TOKEN</code> setup by thesemantic-release, so zero extra setup is needed. The Travis log shows a steadystream of updates.</p><p>  <img src="/blog/images/slow-updates/updated-deps-build-history.png" alt="Travis job history"></p><p>Each week for example, a successful <code>cron</code> job pushes update <code>package.json</code>which triggers a regular build. Slow and steady wins the race.</p><p>Just one more thing - I add a badge to README to remind me that this projectstays up to date.</p><p><a href="https://github.com/bahmutov/next-update-travis#readme" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/next--update--travis-weekly-green.svg" alt="next-update-travis badge"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;NPM packages fall behind in their dependencies. There is a constant ticking
of new versions being published; unless a module has 0 depend
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="modular development" scheme="https://glebbahmutov.com/blog/tags/modular-development/"/>
    
  </entry>
  
  <entry>
    <title>Kliesli composition</title>
    <link href="https://glebbahmutov.com/blog/kleisli/"/>
    <id>https://glebbahmutov.com/blog/kleisli/</id>
    <published>2017-08-15T04:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/images/kleisli/power-cable.jpeg" alt="Cable inside a cable"></p><p>Please read <a href="https://medium.com/@luijar/kliesli-compositions-in-javascript-7e1a7218f0c4" target="_blank" rel="noopener">Kliesli Compositions in JavaScript</a>by <a href="https://medium.com/@luijar" target="_blank" rel="noopener">Luis Atencio</a> first. This blog post is justa refactoring of the code for clarity. While Luis does an admirable job showingthe composition (a compliment), the final code is not as clear as it could be.We can even say that the code by putting type unwrapping and wrapping insideeach composed function strays away from the functional principles ofsimplicity and composability. See last part for comparison, but hope you readmy derivation before jumping to the end.</p><h2><span id="the-example">The example</span></h2><p>Imagine you have a text file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat text.txt</span><br><span class="line">word word another word</span><br></pre></td></tr></table></figure><p>Imagine you want to count words in this single line text file. Do not handleany errors while coding it. Instead concentrate on making the programfrom small easy to understand functions. You might write a function to read the file,then another function to decode it, then another function to split text intowords. Final function could count the words and return a number, which theprogram can print. In code this is simple:</p><figure class="highlight js"><figcaption><span>happy-path.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> read = <span class="function"><span class="params">path</span> =&gt;</span></span><br><span class="line">  fs.readFileSync(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> check = <span class="function"><span class="params">buffer</span> =&gt;</span></span><br><span class="line">  buffer.length &gt; <span class="number">0</span> ? buffer : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> decode = <span class="function"><span class="params">encoding</span> =&gt;</span> buffer =&gt;</span><br><span class="line">  buffer.toString(encoding)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="function"><span class="params">text</span> =&gt;</span></span><br><span class="line">  text.split(<span class="string">' '</span>).length</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> processFile = <span class="function"><span class="params">path</span> =&gt;</span></span><br><span class="line">  count(decode(<span class="string">'utf8'</span>)(check(read(path))))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(processFile(<span class="string">'./text.txt'</span>))</span><br></pre></td></tr></table></figure><p>When we run this program with an existing, non-empty file, things are great</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat text.txt</span><br><span class="line">word word another word</span><br><span class="line">$ node happy-path.js</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>Yet, this program is extremely brittle. It does not handle any errors thatmight happen in the real world. The file might not exist or it might be empty.This program is also less than performant because it reads the file in blockingmanner using <code>fs.readFileSync</code> instead of using a callback. But if we used acallback, we could not easily perform composition <code>check(read(path))</code>.</p><h2><span id="composition-of-functions">Composition of functions</span></h2><p>Let us start with an observation that the function <code>processFile</code> is reallya seriest of nested function calls. The only variable in the function is<code>path</code> and that goes inside the &quot;deepest&quot; nested call <code>read(path)</code>. We coulddraw what happens to the data in <code>processFile</code> as a data processing pipeline</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> processFile = <span class="function"><span class="params">path</span> =&gt;</span></span><br><span class="line">  count(decode(<span class="string">'utf8'</span>)(check(read(path))))</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// string =&gt; buffer =&gt; buffer|null =&gt; string =&gt; number</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      read      check         decode     count</span></span><br></pre></td></tr></table></figure><p>Note the flow of data goes from the most nested function <code>read</code> that executesfirst all the way to <code>count</code> that executes last.  Each function expected asingle argument and returns a single result. Well,except for <code>decode</code>, but that one due to being split into a function returninga function is really making a function we really want on the fly:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> decodeUtf8 = decode(<span class="string">'utf8'</span>)</span><br><span class="line"><span class="keyword">const</span> processFile = <span class="function"><span class="params">path</span> =&gt;</span></span><br><span class="line">  count(decodeUtf8(check(read(path))))</span><br></pre></td></tr></table></figure><p>Function <code>read</code> takes a string argument, and function <code>count</code> returns a number.Thus the composed function <code>processFile</code> expects a string and returns a number.</p><p>We wrote <code>processFile</code> but really is is just a series of function calls,each grabbing the result of the previous step and calling the next functionin the list. People have been writing functions to do this for us for a longtime. <a href="http://ramdajs.com/" target="_blank" rel="noopener">Ramda</a> for example has <a href="http://ramdajs.com/docs/#compose" target="_blank" rel="noopener">R.compose</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"><span class="keyword">const</span> processFile = R.compose(</span><br><span class="line">  count,</span><br><span class="line">  decode(<span class="string">'utf8'</span>),</span><br><span class="line">  check,</span><br><span class="line">  read</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(processFile(<span class="string">'./text.txt'</span>))</span><br></pre></td></tr></table></figure><p>Note that we have constructed <code>processFile</code> without even defining thevariable <code>path</code> (this is called <a href="../point-free-programming-is-not-pointless/">pointfree style</a>).I personally prefer the <a href="http://ramdajs.com/docs/#pipe" target="_blank" rel="noopener">R.pipe</a> function that reverses theorder of composed functions. I think it reads more naturally top to bottom.In addition, we can write type of the result at each step; types usuallystart with an upper case letter.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> processFile = R.pipe(</span><br><span class="line">  read,            <span class="comment">// String -&gt; Buffer</span></span><br><span class="line">  check,           <span class="comment">// Buffer -&gt; Buffer | Null</span></span><br><span class="line">  decode(<span class="string">'utf8'</span>),  <span class="comment">// Buffer -&gt; String</span></span><br><span class="line">  count            <span class="comment">// String -&gt; Number</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>By taking the input to first step <code>read</code> (that is <code>string</code>) and output ofthe last step <code>count</code> (that is of type <code>number</code>) we can write the input andoutput types for the composed function <code>processFile</code>. We could write it likethis:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// processFile :: String -&gt; Number</span></span><br><span class="line"><span class="keyword">const</span> processFile = ...</span><br></pre></td></tr></table></figure><p>Ok we can create the program function out of small building blocks on thefly, but the program really cannot handle any errors! It will crash and burnbadly in a very common case - if the input file does not exist.</p><h2><span id="task">Task</span></h2><p>Let us kill two birds with one stone. Let us make the program asynchronousby reading a file using a callback, and let us handle any errors reading thefile. Instead of passing &quot;plain&quot; values from one function to another, the<code>read</code> will return the contents of the file, but stored inside a &quot;Task&quot;object. I will use <a href="https://github.com/folktale/data.task#readme" target="_blank" rel="noopener">data.task</a> for this. Almost verbatim from the<a href="https://github.com/folktale/data.task#example" target="_blank" rel="noopener">data.task example</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// read :: String -&gt; Task(Error, Buffer)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Task(<span class="function"><span class="keyword">function</span>(<span class="params">reject, resolve</span>) </span>&#123;</span><br><span class="line">    fs.readFile(path, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error)  reject(error)</span><br><span class="line">      <span class="keyword">else</span>        resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Calling <code>read</code> with a string returns you a &quot;Task&quot;. And that &quot;Task&quot; laterwill have either an Error or a Buffer. Due to its asynchronous nature, wecan no longer run <code>check</code> or <code>decode</code> or even print the file contents rightaway. Instead we need to attach actions we want to executes as callbacksto the Task object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// read :: String -&gt; Task(Error, Buffer)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Task(<span class="function"><span class="keyword">function</span>(<span class="params">reject, resolve</span>) </span>&#123;</span><br><span class="line">    fs.readFile(path, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error)  reject(error)</span><br><span class="line">      <span class="keyword">else</span>        resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// note double error; decode is a function returning a function</span></span><br><span class="line"><span class="comment">// decode :: String -&gt; Buffer -&gt; String</span></span><br><span class="line"><span class="keyword">const</span> decode = <span class="function"><span class="params">encoding</span> =&gt;</span> buffer =&gt;</span><br><span class="line">  buffer.toString(encoding)</span><br><span class="line"></span><br><span class="line">read(<span class="string">'./text.txt'</span>)</span><br><span class="line">  .map(decode(<span class="string">'utf8'</span>))</span><br><span class="line">  .fork(<span class="built_in">console</span>.log, <span class="built_in">console</span>.error)</span><br><span class="line"><span class="comment">// word word another word</span></span><br></pre></td></tr></table></figure><p>This is kind of interesting: <code>Task.map</code> expects a function that <em>knows nothingabout working with a Task</em>. Instead the callback function to <code>Task.map</code>receives the value from inside Task (whenever it becomes available).The &quot;plain&quot; value returned by the callback function <code>decode(&#39;utf8&#39;)</code> isautomatically placed <em>back into a Task object</em>.</p><p>The result of <code>Task.map(...)</code> is another Task. We can keep &quot;mapping&quot; overprevious result.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// read :: String -&gt; Task(Error, Buffer)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Task(<span class="function"><span class="keyword">function</span>(<span class="params">reject, resolve</span>) </span>&#123;</span><br><span class="line">    fs.readFile(path, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error)  reject(error)</span><br><span class="line">      <span class="keyword">else</span>        resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// decode :: String -&gt; Buffer -&gt; String</span></span><br><span class="line"><span class="keyword">const</span> decode = <span class="function"><span class="params">encoding</span> =&gt;</span> buffer =&gt;</span><br><span class="line">  buffer.toString(encoding)</span><br><span class="line"></span><br><span class="line"><span class="comment">// check :: Buffer -&gt; Buffer | Null</span></span><br><span class="line"><span class="keyword">const</span> check = <span class="function"><span class="params">buffer</span> =&gt;</span></span><br><span class="line">  buffer.length &gt; <span class="number">0</span> ? buffer : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// count :: String -&gt; Number</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="function"><span class="params">text</span> =&gt;</span></span><br><span class="line">  text.split(<span class="string">' '</span>).length</span><br><span class="line"></span><br><span class="line">read(<span class="string">'./text.txt'</span>)</span><br><span class="line">  .map(decode(<span class="string">'utf8'</span>))</span><br><span class="line">  .map(check)</span><br><span class="line">  .map(count)</span><br><span class="line">  .fork(<span class="built_in">console</span>.log, <span class="built_in">console</span>.error)</span><br></pre></td></tr></table></figure><p>Here is a cool thing about a Task. As you might have guessed each <code>Task.map</code>method call returns another Task instance, but <em>nothing is executed</em> until<code>Task.fork</code> is called.</p><p>We can demonstrate this by interspersing log statements with mapping calls</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> t1 = read(<span class="string">'./text.txt'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'t1'</span>)</span><br><span class="line"><span class="keyword">const</span> t2 = t1.map(decode(<span class="string">'utf8'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'t2'</span>)</span><br><span class="line"><span class="keyword">const</span> t3 = t2.map(check)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'t3'</span>)</span><br><span class="line"><span class="keyword">const</span> t4 = t3.map(count)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'t4'</span>)</span><br><span class="line">t4.fork(<span class="built_in">console</span>.log, <span class="built_in">console</span>.error)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">t1</span></span><br><span class="line"><span class="comment">t2</span></span><br><span class="line"><span class="comment">t3</span></span><br><span class="line"><span class="comment">t4</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>And we can demonstrate that no Tasks are executed by commenting out <code>.fork()</code>call and adding a log statement to <code>read</code> function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// read :: String -&gt; Task(Error, Buffer)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Task(<span class="function"><span class="keyword">function</span>(<span class="params">reject, resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'read task'</span>)</span><br><span class="line">    fs.readFile(path, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error)  reject(error)</span><br><span class="line">      <span class="keyword">else</span>        resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'t4'</span>)</span><br><span class="line"><span class="comment">// t4.fork(console.log, console.error)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">t1</span></span><br><span class="line"><span class="comment">t2</span></span><br><span class="line"><span class="comment">t3</span></span><br><span class="line"><span class="comment">t4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>Delayed execution is the main benefit of Tasks - you can keep adding morecomputations until you are happy with the chain, and only then call <code>Task.fork</code>to actually run it. Promises on the other hand are eager - as soon as youhave created a Promise <a href="../difference-between-promise-and-task/">it starts running</a>.</p><h2><span id="composing-task-with-plain-functions">Composing Task with plain functions</span></h2><p>Now that we got our very first function <code>read</code> returning a Task, but we lost theability to compose functions using <code>R.compose</code> or <code>R.pipe</code>. How can we composea Task - it is no longer a &quot;plain&quot; value we can pass to the next function inthe chain. Luckily, Ramda has a composition function just for this case.If every function in the chain expects a &quot;plain&quot; input but returns a Task,all functions can be composed again using a library utility<a href="http://ramdajs.com/docs/#composeK" target="_blank" rel="noopener">R.composeK</a> or <a href="http://ramdajs.com/docs/#pipeK" target="_blank" rel="noopener">R.pipeK</a> (the K stands forKliesli composition, but I am not linking a reference url because the Wikipediaarticle will scare you away for good). Think of this as a composition forfunctions that all return same wrapped type like Task.</p><p>To compose, each individual function in the chain <em>must</em> return result oftype Task. The simplest case to wrap a &quot;plain&quot; value in a Task is to call<code>Task.of(x)</code> factory function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// decode :: String -&gt; Buffer -&gt; Task(String)</span></span><br><span class="line"><span class="keyword">const</span> decode = <span class="function"><span class="params">encoding</span> =&gt;</span> buffer =&gt;</span><br><span class="line">  Task.of(buffer.toString(encoding))</span><br><span class="line"></span><br><span class="line"><span class="comment">// check :: Buffer -&gt; Task(Buffer | Null)</span></span><br><span class="line"><span class="keyword">const</span> check = <span class="function"><span class="params">buffer</span> =&gt;</span></span><br><span class="line">  Task.of(buffer.length &gt; <span class="number">0</span> ? buffer : <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// count :: String -&gt; Task(Number)</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="function"><span class="params">text</span> =&gt;</span></span><br><span class="line">  Task.of(text.split(<span class="string">' '</span>).length)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> processFile = R.pipeK(</span><br><span class="line">  read,           <span class="comment">// String -&gt; Task(Error, Buffer)</span></span><br><span class="line">  check,          <span class="comment">// Buffer -&gt; Task(Buffer | Null)</span></span><br><span class="line">  decode(<span class="string">'utf8'</span>), <span class="comment">// Buffer -&gt; Task(String)</span></span><br><span class="line">  count           <span class="comment">// String -&gt; Task(Number)</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">processFile(<span class="string">'./text.txt'</span>)</span><br><span class="line">  .fork(<span class="built_in">console</span>.log, <span class="built_in">console</span>.error)</span><br></pre></td></tr></table></figure><p>If we decide to draw pipeline <code>processFile</code>, I would visualize it asa series of pipe segments. Each segment that we write expected &quot;plain&quot; valuebut outputs <code>Task</code> object. Yet except for <code>read</code> no other function we wrotedeals with or needs an actual Task object! No other function is asynchronous,so hard-coding <code>Task.of(result)</code> inside each function is short sighed. Itmakes a function harder to read and harder to test. We only returned a Taskfrom each so we could use these functions with <code>R.pipeK</code>.</p><p>I prefer <em>adapting</em> a function to each particular case, rather than changingit (see my <a href="../my-favorite-functional-adaptors/">favorite adaptors</a>). Thus Iwill change the <code>check</code>, <code>decode(&#39;utf8&#39;)</code> and <code>count</code> functions back to theiroriginal &quot;simple&quot; form, and will convert the result into a Task on the fly.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// decode :: String -&gt; Buffer -&gt; String</span></span><br><span class="line"><span class="keyword">const</span> decode = <span class="function"><span class="params">encoding</span> =&gt;</span> buffer =&gt;</span><br><span class="line">  buffer.toString(encoding)</span><br><span class="line"></span><br><span class="line"><span class="comment">// check :: Buffer -&gt; Buffer | Null</span></span><br><span class="line"><span class="keyword">const</span> check = <span class="function"><span class="params">buffer</span> =&gt;</span></span><br><span class="line">  buffer.length &gt; <span class="number">0</span> ? buffer : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// count :: String -&gt; Number</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="function"><span class="params">text</span> =&gt;</span></span><br><span class="line">  text.split(<span class="string">' '</span>).length</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> processFile = R.pipeK(</span><br><span class="line">  read,                            <span class="comment">// String -&gt; Task(Error, Buffer)</span></span><br><span class="line">  x =&gt; Task.of(check(x)),          <span class="comment">// Buffer -&gt; Task(Buffer | Null)</span></span><br><span class="line">  x =&gt; Task.of(decode(<span class="string">'utf8'</span>)(x)), <span class="comment">// Buffer -&gt; Task(String)</span></span><br><span class="line">  x =&gt; Task.of(count(x))           <span class="comment">// String -&gt; Task(Number)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Individual functions <code>decode</code>, <code>check</code> and <code>count</code> are simple again, butour pipeline is a little heavy. We notice that <code>x =&gt; Task.of(check(x))</code> forexample is functional composition itself!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> processFile = R.pipeK(</span><br><span class="line">  read,                               <span class="comment">// String -&gt; Task(Error, Buffer)</span></span><br><span class="line">  R.compose(Task.of, check),          <span class="comment">// Buffer -&gt; Task(Buffer | Null)</span></span><br><span class="line">  R.compose(Task.of, decode(<span class="string">'utf8'</span>)), <span class="comment">// Buffer -&gt; Task(String)</span></span><br><span class="line">  R.compose(Task.of, count)           <span class="comment">// String -&gt; Task(Number)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Notice the repeated <code>R.compose(Task.of, _)</code> syntax. We could partially applythe first argument here to shorten it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asTask = R.partial(R.compose, [Task.of])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> processFile = R.pipeK(</span><br><span class="line">  read,                   <span class="comment">// String -&gt; Task(Error, Buffer)</span></span><br><span class="line">  asTask(check),          <span class="comment">// Buffer -&gt; Task(Buffer | Null)</span></span><br><span class="line">  asTask(decode(<span class="string">'utf8'</span>)), <span class="comment">// Buffer -&gt; Task(String)</span></span><br><span class="line">  asTask(count)           <span class="comment">// String -&gt; Task(Number)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>We could avoid even using <code>R.partial</code> if <code>R.compose</code> were curried, but itis hard to curry a function with unknown number of arguments. Luckily, Ramdaincludes <a href="http://ramdajs.com/docs/#o" target="_blank" rel="noopener">R.o</a> which is a curried compose! That is the function thatmakes our code tiny in this case.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asTask = R.o(Task.of)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> processFile = R.pipeK(</span><br><span class="line">  read,                   <span class="comment">// String -&gt; Task(Error, Buffer)</span></span><br><span class="line">  asTask(check),          <span class="comment">// Buffer -&gt; Task(Buffer | Null)</span></span><br><span class="line">  asTask(decode(<span class="string">'utf8'</span>)), <span class="comment">// Buffer -&gt; Task(String)</span></span><br><span class="line">  asTask(count)           <span class="comment">// String -&gt; Task(Number)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Perfect. We are composing functions, some of which return an actual Task, butmost do not, and we are adapting the return value on the fly so the pipe lineholds. The actual &quot;flow&quot; is still, aside from the <code>read</code> function, just&quot;plain&quot; values along the &quot;happy&quot; path.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------</span><br><span class="line">                  Task &quot;pipe&quot;</span><br><span class="line"></span><br><span class="line">read -&gt; check -&gt; decode -&gt; count       happy path &quot;pipe&quot;  -&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------</span><br></pre></td></tr></table></figure><p>What happens if there is a file read error? In that case, the control flowwill skip the &quot;happy path pipe&quot;, and will go directly to the error callbackfunction in the <code>.fork(onError, onSuccess)</code> execution.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------</span><br><span class="line">                  Task &quot;pipe&quot;</span><br><span class="line"></span><br><span class="line">read -&gt; check -&gt; decode -&gt; count       happy path &quot;pipe&quot;   -&gt; onSuccess</span><br><span class="line">     \</span><br><span class="line">      -&gt;   ~~~~~~ to the error callback ~~~~~~~~~~~~~~~~~~ -&gt; onError</span><br><span class="line">---------------------------------------------------------</span><br></pre></td></tr></table></figure><p>I like thinking of Task / Promises / Either making little railway tracks,and the data moving along the tracks like box cars. Sometimes due to an error,the box car jumps to an error track where it will keep rolling until someonehandles the lost car. Watch<a href="https://vimeo.com/113588389" target="_blank" rel="noopener">Functional programming design patterns by Scott Wlaschin</a>for a good talk using this analogy.</p><p>Notice that <code>check</code>, <code>decode</code> and <code>count</code> do not take advantage of the fullTask pipeline, unlike <code>read</code>. Also, they probably should not - they aresynchronous functions and their problem is a different one. Take <code>check</code>for example: it returns <code>null</code> value to indicate an empty file. But what ifthe <code>null</code> value was a legitimate one? Would it return <code>-1</code> or some magicconstant to indicate a problem? Or would it throw an Error? And how could wecompose these functions safely in that case?</p><h2><span id="either-pipeline">Either pipeline</span></h2><p>Let us take a look at <code>check</code> function. Again, just like <code>read</code>, it should notreturn a &quot;plain&quot; special value to indicate a problem. Instead it should returnan object that, just like Task, allows mapping over the inner value.This wrapper is called <code>Either</code>, it is commonly used to replace multiple<a href="../if-else-vs-either-monad-vs-frp/">if-else</a> branchesand there many libraries that implement it.I will use <a href="https://github.com/folktale/data.either#readme" target="_blank" rel="noopener">data.either</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Either = <span class="built_in">require</span>(<span class="string">'data.either'</span>)</span><br><span class="line"><span class="comment">// check : Buffer -&gt; Either(Buffer)</span></span><br><span class="line"><span class="keyword">const</span> check = <span class="function"><span class="params">buffer</span> =&gt;</span></span><br><span class="line">  buffer.length &gt; <span class="number">0</span></span><br><span class="line">    ? Either.Right(buffer)         <span class="comment">// success ✅</span></span><br><span class="line">    : Either.Left(<span class="string">'File is empty'</span>) <span class="comment">// failure ☢️</span></span><br></pre></td></tr></table></figure><p>Great, what about <code>decode</code> and <code>count</code>? They too could just return <code>Either</code>,and we could compose all 3 functions into single pipeline using <code>R.pipeK</code>,only this time the result would be an <code>Either(...)</code> object.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// decode : String -&gt; Buffer -&gt; Either(String)</span><br><span class="line">const decode = encoding =&gt; buffer =&gt; Either.of(</span><br><span class="line">  buffer.toString(encoding)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// count :: String -&gt; Either(Number)</span><br><span class="line">const count = text =&gt; Either.of(</span><br><span class="line">  text.split(&apos; &apos;).length</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// processBuffer :: Buffer -&gt; Either(Number)</span><br><span class="line">const processBuffer = R.pipeK(</span><br><span class="line">  check,          // Either(Buffer)</span><br><span class="line">  decode(&apos;utf8&apos;), // Either(String)</span><br><span class="line">  count           // Either(Number)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>The way to get the value from <code>Either</code> is to NOT ignore possible errors, andfor example provide default value.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  processBuffer(Buffer.from(<span class="string">'foo bar'</span>, <span class="string">'utf8'</span>))</span><br><span class="line">    .getOrElse(<span class="string">'Hmm, an error'</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>An <code>Either</code> is especially useful here, because a function like <code>decode</code> mightreceive an invalid encoding; <code>Either</code> allows us to avoid crashing.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// decode : String -&gt; Buffer -&gt; Either(String)</span></span><br><span class="line"><span class="keyword">const</span> decode = <span class="function"><span class="params">encoding</span> =&gt;</span> buffer =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Either.Right(buffer.toString(encoding))</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> Either.Left(<span class="string">'Could not decode using '</span> + encoding)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// processBuffer :: Buffer -&gt; Either(Number)</span></span><br><span class="line"><span class="keyword">const</span> processBuffer = R.pipeK(</span><br><span class="line">  check,          <span class="comment">// Either(Buffer)</span></span><br><span class="line">  decode(<span class="string">'ffff'</span>), <span class="comment">// Either(String)</span></span><br><span class="line">  count           <span class="comment">// Either(Number)</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  processBuffer(Buffer.from(<span class="string">'foo bar'</span>, <span class="string">'utf8'</span>))</span><br><span class="line">    .getOrElse(<span class="string">'Hmm, an error'</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// Hmm, an error</span></span><br></pre></td></tr></table></figure><p>We could do the same trick and NOT hard code returned <code>Either</code> type in <code>count</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// count :: String -&gt; Number</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="function"><span class="params">text</span> =&gt;</span></span><br><span class="line">  text.split(<span class="string">' '</span>).length</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asEither = R.o(Either.of)</span><br><span class="line"></span><br><span class="line"><span class="comment">// processBuffer :: Buffer -&gt; Either(Number)</span></span><br><span class="line"><span class="keyword">const</span> processBuffer = R.pipeK(</span><br><span class="line">  check,          <span class="comment">// Either(Buffer)</span></span><br><span class="line">  decode(<span class="string">'utf8'</span>), <span class="comment">// Either(String)</span></span><br><span class="line">  asEither(count) <span class="comment">// Either(Number)</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  processBuffer(Buffer.from(<span class="string">'foo bar'</span>, <span class="string">'utf8'</span>))</span><br><span class="line">    .getOrElse(<span class="string">'Hmm, an error'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>In a sense we have constructed a pipeline where each function (well, except<code>count</code> but that only gets called with a valid string input) is safe.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------------</span><br><span class="line">            Either &quot;pipe&quot;</span><br><span class="line">check -&gt; decode -&gt; count</span><br><span class="line"></span><br><span class="line">-----------------------------------------</span><br></pre></td></tr></table></figure><p>From <code>check</code> and from <code>decode</code>, if there is an error, the control will &quot;jump&quot;to the error track.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------------</span><br><span class="line">            Either &quot;pipe&quot;</span><br><span class="line">check -&gt; decode -&gt; count  -&gt; Right(n)</span><br><span class="line">    \      \</span><br><span class="line">     \-&gt; ~~~&gt; ~~~~~~~~~~~ -&gt; Left(error)</span><br><span class="line">-----------------------------------------</span><br></pre></td></tr></table></figure><p>Do you like my ASCII drawing skills?!</p><h2><span id="combining-pipes">Combining pipes</span></h2><p>Finally, let us connect the two pipelines we have composed.We cannot combine Task and Either segments of the pipeline sequentiallyunfortunately.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">------------=====-----------------</span><br><span class="line">            ----&gt;            ----&gt;</span><br><span class="line">   Task        |     Either</span><br><span class="line">            ~~~~&gt;            ~~~~&gt;</span><br><span class="line">------------=====-----------------</span><br></pre></td></tr></table></figure><p>To see why, think about when you are going to call <code>Task.fork</code> - is beforecreating the first Either? No, that cannot be right, we want the final objectto be a Task, so we can call <code>Task.fork</code> on it when we are ready to use it.The opposite is not true - we could convert an Either into a Task, see<a href="https://egghead.io/lessons/javascript-applying-natural-transformations-in-everyday-work" target="_blank" rel="noopener">Natural Transformation video</a> for example.</p><p>Ok, back to our code.</p><p>We have to stick the Either pipeline <strong>inside</strong> the Task pipeline.The <code>read</code> function will start the outer Task pipe. The result of <code>read</code>will be passed to the inner Either pipe <code>check -&gt; decode -&gt; count</code>.The output of the outer Task pipe that <code>Task.fork</code> will pass to the callbackfunction will be an <code>Either</code> object returned by the Either pipe. As a diagramit would look like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------</span><br><span class="line">                   Task &quot;pipe&quot;</span><br><span class="line">         ------------------------------------------------</span><br><span class="line">read -&gt;   check -&gt; decode -&gt; count ---- success Number -&gt;</span><br><span class="line">  \           \      \                Either &quot;pipe&quot;</span><br><span class="line">   \           \-&gt; ~~~&gt; ~~~~~~~ buffer error ~~~~~~~~~ -&gt;</span><br><span class="line">    \    ------------------------------------------------</span><br><span class="line">     -&gt; ~~~~~~~~~~~~~~ file read error ~~~~~~~~~~~~~~~ -&gt;</span><br><span class="line">---------------------------------------------------------</span><br></pre></td></tr></table></figure><p>The Either pipeline is the same as before (<code>decode</code> does not check the encodinghere).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// check : Buffer -&gt; Either(Buffer)</span></span><br><span class="line"><span class="keyword">const</span> check = <span class="function"><span class="params">buffer</span> =&gt;</span></span><br><span class="line">  buffer.length &gt; <span class="number">0</span></span><br><span class="line">    ? Either.Right(buffer)         <span class="comment">// success!</span></span><br><span class="line">    : Either.Left(<span class="string">'File is empty'</span>) <span class="comment">// failure</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// decode : String -&gt; Buffer -&gt; String</span></span><br><span class="line"><span class="keyword">const</span> decode = <span class="function"><span class="params">encoding</span> =&gt;</span> buffer =&gt;</span><br><span class="line">  buffer.toString(encoding)</span><br><span class="line"></span><br><span class="line"><span class="comment">// count :: String -&gt; Number</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="function"><span class="params">text</span> =&gt;</span></span><br><span class="line">  text.split(<span class="string">' '</span>).length</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asEither = R.o(Either.of)</span><br><span class="line"></span><br><span class="line"><span class="comment">// processBuffer :: Buffer -&gt; Either(Number)</span></span><br><span class="line"><span class="keyword">const</span> processBuffer = R.pipeK(</span><br><span class="line">  check,                    <span class="comment">// Either(Buffer)</span></span><br><span class="line">  asEither(decode(<span class="string">'utf8'</span>)), <span class="comment">// Either(String)</span></span><br><span class="line">  asEither(count)           <span class="comment">// Either(Number)</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Now we need to combine <code>read</code> and <code>processBuffer</code> as a Task-returningfunctions, and we can use the same <code>asTask</code> approach, because <code>processBuffer</code>is a &quot;regular&quot; function we can adapt.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// read : String -&gt; Task(Error, Buffer)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Task(<span class="function"><span class="keyword">function</span>(<span class="params">reject, resolve</span>) </span>&#123;</span><br><span class="line">    fs.readFile(path, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error)  reject(error)</span><br><span class="line">      <span class="keyword">else</span>        resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asTask = R.o(Task.of)</span><br><span class="line"></span><br><span class="line"><span class="comment">// processFile :: String -&gt; Task(Either(Number))</span></span><br><span class="line"><span class="keyword">const</span> processFile = R.pipeK(</span><br><span class="line">  read,                  <span class="comment">// Task(Error, Buffer)</span></span><br><span class="line">  asTask(processBuffer)  <span class="comment">// Task(Either(Number))</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>How do we get result from the output of <code>processFile</code> which is<code>Task(Either(Number))</code>? In two steps: first calling <code>.fork</code> then <code>.getOrElse</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">processFile(<span class="string">'./text.txt'</span>)</span><br><span class="line">  .fork(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(err),</span><br><span class="line">    e =&gt; <span class="built_in">console</span>.log(e.getOrElse(<span class="number">0</span>))</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>The double-pipe insulation handles missing file, access errors, empty fileand could be easily extended to cover invalid encodings and other errors.All we need is to return an <code>Either</code> - we are already making this thefunction&#39;s return type anyway in preparation for <code>R.pipeK</code> anyway.</p><h2><span id="comparison-to-the-original-blog-post-example">Comparison to the original blog post example</span></h2><p>To finish this blog post I want to go back to the Luis Atencio and his example.Because Luis only uses single composition to make the Task pipe, it looksdeceptively simple (I will switch <code>compose</code> to <code>pipe</code> for easier comparison)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// processFile :: String -&gt; Task(Error, Either)</span></span><br><span class="line"><span class="keyword">const</span> processFile = R.pipeK(</span><br><span class="line">  read,</span><br><span class="line">  check,</span><br><span class="line">  decode(<span class="string">'utf8'</span>),</span><br><span class="line">  count</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Yet, and this is a big one - this forces each function <code>check</code>, <code>decode</code>and <code>count</code> to receive what an <code>Either</code> as argument, and return <code>Task</code> result.This makes the code inside the <code>count</code> function for example<em>unwrap the argument</em> to get to the plain string value.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// count :: String -&gt; Task(_, String)</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="function"><span class="params">text</span> =&gt;</span> Task.of(text.map(<span class="function"><span class="params">t</span> =&gt;</span> t.split(<span class="string">' '</span>).length))</span><br></pre></td></tr></table></figure><p>Note the type signature - it is incorrect, the function <code>count</code> receivesa <code>Either(String)</code>, not <code>String</code>. That is why it has to do <code>text.map</code> to getthe actual string <code>t</code>. Similarly there is no reason (other than forcing thefunction to be compatible with a Task pipeline) for <code>count</code> to return a Task!</p><p>Let us compare the <code>count</code> that fits into a Task pipe with our version ofthe same function that goes into Either pipe, but adapts the return valuetype externally using <code>asEither</code> composition. I will keep the same variablenames for honest comparison.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// count :: Either(String) -&gt; Task(_, String)</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="function"><span class="params">text</span> =&gt;</span> Task.of(text.map(<span class="function"><span class="params">t</span> =&gt;</span> t.split(<span class="string">' '</span>).length))</span><br><span class="line"><span class="comment">// count :: String -&gt; Number</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="function"><span class="params">t</span> =&gt;</span> t.split(<span class="string">' '</span>).length</span><br></pre></td></tr></table></figure><p>First version has 65 characters, second has 38. We saved almost 50% of code(and a lot of complexity) by keeping <code>count</code> focused on what it should<em>actually</em> do - split a string into an array and return its length. Leavethe marshaling of arguments and returns to others.</p><h2><span id="final-thoughts">Final thoughts</span></h2><p>Thanks to Luis Atencio for great examples. Go buy his book<a href="https://www.manning.com/books/functional-programming-in-javascript" target="_blank" rel="noopener">Functional Programming in JavaScript</a> - it is excellent and practical.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/blog/images/kleisli/power-cable.jpeg&quot; alt=&quot;Cable inside a cable&quot;&gt;&lt;/p&gt;
&lt;p&gt;Please read &lt;a href=&quot;https://medium.com/@luijar/klies
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="functional" scheme="https://glebbahmutov.com/blog/tags/functional/"/>
    
  </entry>
  
  <entry>
    <title>Releasing for old Node</title>
    <link href="https://glebbahmutov.com/blog/releasing-for-old-node/"/>
    <id>https://glebbahmutov.com/blog/releasing-for-old-node/</id>
    <published>2017-08-07T04:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>I like modern Nodejs. <a href="../parameter-destructuring/">Destructuring</a> isprobably my favorite feature.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;map, prop&#125; = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br></pre></td></tr></table></figure><p>Yet, this syntax breaks for anyone using Node 4 (some people) or Node 0.12(why are they still using it?!) So I usually get requests to remove an ES6feature because Node 4 users cannot use one of my modules. Or a requestto <a href="https://github.com/bahmutov/am-i-a-dependency/issues/2" target="_blank" rel="noopener">downgrade Node engine</a> declared in the <code>package.json</code> file.</p><p>One can quickly check if a module at least loads on Node 4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvm use 4</span><br><span class="line">rm -rf node_modules</span><br><span class="line">NODE_ENV=production npm install</span><br><span class="line">node .</span><br></pre></td></tr></table></figure><p>If the module does not load on Node 4, it is probably using one of themissing / behind a flag features. We should make our module Node 4-compatible,right?</p><p>Here is a problem. I could set up transpiler and build Node 4-compatiblesource code before publishing. Yet this does not fully solve the problem.Often the offending code is NOT my own, but instead comes from one ofmany many dependencies used during development and semantic release!</p><p>So there are really four problems:</p><ol><li>making sure my own code is Node 4 compatible. Self-discipline andtranspiling help.</li><li>running tests should use Node 6 because the testing tools keep improving.I am not going to downgrade my <a href="https://github.com/bahmutov/snap-shot" target="_blank" rel="noopener">snap-shot</a>!</li><li>I still want to test if the package can <em>be used from Node</em>. Note thatthis is not even a subset of all tests, but rather is a <code>demo</code> script.</li><li>finally, the publishing to NPM registry should use Node 6. While I use<a href="https://github.com/bahmutov/semantic-action" target="_blank" rel="noopener">semantic-release</a> and [semantic-action][semantic-action]which run on Node 4, their plugins might not.</li></ol><p>Here is my typical project setup, <a href="https://github.com/bahmutov/simple-changelog" target="_blank" rel="noopener">simple-changelog</a> isa good example.</p><ol><li><p><code>package.json</code> and <code>README.md</code> say that this module works on Node 4</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"engines"</span>: &#123;</span><br><span class="line">    <span class="attr">"node"</span>: <span class="string">"&gt;=4"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Travis CI runs against both Node 4 and 6. For example see<a href="https://github.com/bahmutov/simple-changelog/blob/master/.travis.yml" target="_blank" rel="noopener">.travis.yml</a> file.</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'4'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'6'</span></span><br></pre></td></tr></table></figure><p>Some of the modules do not really like NPM@2 that comes with Node 4, so Iinstall NPM@3 before installing dependencies</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">-g</span> <span class="string">npm@3</span></span><br></pre></td></tr></table></figure></li><li><p>BUT the Travis CI only runs the &quot;demo&quot; step on all Node versions.It only runs the unit tests on Node 6. While this might miss a few edge cases,it allows to keep upgrading all <code>devDependencies</code> without holding back.To only run a command on Node 6 I use <a href="https://github.com/mysticatea/if-node-version#readme" target="_blank" rel="noopener">if-node-version</a></p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">demo</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">$(npm</span> <span class="string">bin)/if-node-version</span> <span class="string">"&gt;=6"</span> <span class="string">npm</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p> A demo could be complex or just <code>node .</code> to make sure there are no obvious syntax incompatibilities.</p></li><li><p>Publishing to NPM should also happen from Node 6. Because Travis sometimesgets confused by multiple jobs with error<code>This test run is not the build leader</code> (see <a href="https://github.com/semantic-release/semantic-release/issues/390" target="_blank" rel="noopener">issue</a>) weneed to hack the command a little bit, since we are limiting it to Node 6anyway (I assume that you only have single Node 6 version in the buildmatrix)</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">TRAVIS_JOB_NUMBER=WORKAROUND.1</span> <span class="string">$(npm</span> <span class="string">bin)/if-node-version</span> <span class="string">"&gt;=6"</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">semantic-release</span></span><br></pre></td></tr></table></figure></li></ol><p>That&#39;s it. While dirty, this approach of Node 4 for a demo + Node 6 foreverything else seems to satisfy most of my own and my users&#39; needs.</p><h2><span id="transpiling">Transpiling</span></h2><p>What if you really wanted to transpile your own source code? The setup using<a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a> is very simple. Create <code>.babelrc</code> file and use <code>env</code> presetand specify target version of Node 4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [&quot;env&quot;, &#123;</span><br><span class="line">      &quot;targets&quot;: &#123;</span><br><span class="line">        &quot;node&quot;: &quot;4&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Setup transpile command in the <code>package.json</code> to grab the entire folderand (optionally) copy some files without transpiling them.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"transpile"</span>: <span class="string">"babel es6 --out-dir src --ignore templates/* --copy-files"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"files"</span>: [<span class="string">"src"</span>],</span><br><span class="line">  <span class="attr">"semantic-release"</span>: <span class="string">"semantic-release pre &amp;&amp; npm run transpile &amp;&amp; npm publish &amp;&amp; semantic-release post"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above long command run the <code>transpile</code> step before publishing to NPM andincludes just <code>src</code> folder in the distribution.</p><h2><span id="3rd-party-modules">3rd Party Modules</span></h2><p>What about all the 3rd party modules? How can we make them compatible withNode 4? Can we open an issue for each module and expect things to be fixed forus? Without paying money for this?</p><p>I always think that a customer can ask for IE6 support, but will have to payfor it. I am interested in modern tools, and if you want to support somethingI am not interested in doing, well, it should then pay my bills.</p><p>After talking to <a href="https://twitter.com/fold_left" target="_blank" rel="noopener">Jamie Mason</a> about it, we have decided that themost transparent solution for this would be to implement on-demand NPM registryproxy service that would transpile source files to Node 4. That&#39;s a greatidea, Jamie! It might be a little extra effort to implement, but could work.</p><p>This service would sit between you and the public registry. Every time you askfor a package with specific version, it would fetch it from the public registry,test against Node 4, and if it does not load, would transpile the files.Of course, the transpiled bundle will be stored for the future.</p><p>Anyone thinks it is a bad idea? I can see enterprise customers paying forthis...</p><h2><span id="related">Related</span></h2><ul><li><a href="https://glebbahmutov.com/blog/precompiled-javascript/">Precompiled JavaScript</a></li><li><a href="https://glebbahmutov.com/blog/javascript-needs-compile-step/">JavaScript needs compile step on install</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I like modern Nodejs. &lt;a href=&quot;../parameter-destructuring/&quot;&gt;Destructuring&lt;/a&gt; is
probably my favorite feature.&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>SSH Deploy from CI</title>
    <link href="https://glebbahmutov.com/blog/ssh-deploy-from-ci/"/>
    <id>https://glebbahmutov.com/blog/ssh-deploy-from-ci/</id>
    <published>2017-08-04T04:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Often we want to deploy a static site (like this <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> blog) to GitHubpages. Often we cannot use access token, and just need SSH.We can do it from a local terminal via SSH, but how do we deploy from a CI?</p><p>Turns out it is simple to do from CIs that allow SSH deploy keys.<a href="https://circleci.com/" target="_blank" rel="noopener">CircleCI</a> is one of them. Once you have a GitHub repository,create a CircleCI project. This will create a <em>read-only</em> SSH key to checkoutthe repository. Delete it! Instead you need to add a new <em>read-write</em> SSHkey that will be used to checkout code and to upload GitHub pages.</p><ol><li><p>Create a new dedicated SSH key for this particular CI project to be usedwith this repository. This way the security of other projects will notbe jeopardized by reusing the same SSH key.See <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#generating-a-new-ssh-key" target="_blank" rel="noopener">How to create SSH key</a>.</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p> <strong>important:</strong> set empty password when creating the key.</p><p> <strong>very important:</strong> do not overwrite your regular <code>~/.ssh/id_rsa</code> file! I prefer to save the new SSH key in the current folder with some random name, like <code>foo</code>. This will write two files: the private key file <code>foo</code> and the corresponding public key file <code>foo.pub</code> You should delete these files after uploading them to GitHub (public file) and to CI (private file).</p></li><li><p>You can add the newly created <em>public SSH key</em> (file ending with <code>.pub</code>)to the GitHub repository at<code>https://github.com/&lt;username&gt;/&lt;repo name&gt;/settings/keys</code>.</p><p> <strong>important:</strong> - make sure the new key has write access.</p></li><li><p>You can delete and upload new <em>private SSH key</em> to CircleCI at<code>https://circleci.com/gh/&lt;username&gt;/&lt;project name&gt;/edit#ssh</code> page.</p></li><li>Delete the local files - if you need to redo the link, just generate anotherSSH key.</li></ol><p>That&#39;s it. Now things like <code>git push git@github.com:&lt;username&gt;/&lt;repo name&gt;.git</code>should work, because the local CircleCI process can authenticate and ispermitted to push code to this particular GitHub repository.</p><h2><span id="related-projects-and-blog-posts">Related projects and blog posts</span></h2><ul><li><a href="https://github.com/bahmutov/test-semantic-deploy" target="_blank" rel="noopener">test-semantic-deploy</a> publishes Hexo blog fromCircleCI to GitHub pages.</li><li><a href="../deployed-commit/">Deployed commit</a> shows how to include the commit versionin the deployed site or application</li><li><a href="../how-to-setup-semantic-release-on-circle-ci">How to setup semantic release on Circle CI</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Often we want to deploy a static site (like this &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; blog) to GitHub
pages
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Quick and dirty CURL use</title>
    <link href="https://glebbahmutov.com/blog/quick-curl-from-terminal/"/>
    <id>https://glebbahmutov.com/blog/quick-curl-from-terminal/</id>
    <published>2017-08-03T04:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes I want to execute an HTTP request against a website or API, butwith some changes. Maybe I am developing a new feature, or doing exploratorytesting, or maybe just some hacking. Making a request is not that simple.With cookies and tokens, the request cannot be written from scratch anymore.The requests are so much longer than <code>GET /foo</code> that even my favorite terminaltool <a href="https://httpie.org/" target="_blank" rel="noopener">httpie</a> does not help.</p><p>Here is an example. I have a small repo <a href="https://github.com/bahmutov/express-sessions-tutorial" target="_blank" rel="noopener">express-sessions-tutorial</a>showing sessions / CSRF token setup. There are only two pages: index and form.The index page sets the session cookie, and the form page sets both thecookie and a unique token to prevent replay attack. Just clone the repo,install the dependencies and start the server <code>npm start</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:bahmutov/express-sessions-tutorial.git</span><br><span class="line">cd express-sessions-tutorial</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><p>Then open <code>localhost:3000</code></p><p><img src="/blog/images/quick-curl/index-and-form.png" alt="Index and form pages"></p><p>Can I increment the session counter by loading the page from the terminal?Well, I need to send the <code>GET /</code> request, but with session token. The requestin DevTools is giant!</p><p><img src="/blog/images/quick-curl/index-page-request.png" alt="Index page request"></p><p>Instead of typing the cookies by hand, you can copy the entire request rightfrom the DevTools Network panel.</p><p><img src="/blog/images/quick-curl/copy-as-curl.png" alt="Copy request as CURL"></p><p>But what if we want to modify the request in the terminal? Can we load theform page for example with the same cookie? And how to do this quickly?Entering all the info into a full fledged HTTP client app like Postman is justtoo much effort.</p><p>Luckily, terminal has a <em>quick edit and run last command</em> feature. Here is ascreenshot of the terminal where we first run <code>ls</code> command and then editthe previous command to replace <code>ls</code> with <code>cat</code> and run it again.</p><p><img src="/blog/images/quick-curl/edit-and-run.png" alt="Quickly edit and run last command"></p><p>We can use the same <code>^text^new text</code> to change the loooooong curl command.For example we can go the <code>form</code> page as a user from the <code>index</code> page.</p><p><img src="/blog/images/quick-curl/curl-with-edit.png" alt="Run updates CURL command"></p><p>Mission accomplished.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sometimes I want to execute an HTTP request against a website or API, but
with some changes. Maybe I am developing a new feature, or doin
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
  </entry>
  
</feed>
