<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2019-10-22T01:13:35.000Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cambridge MA elections</title>
    <link href="https://glebbahmutov.com/blog/cambridge-elections/"/>
    <id>https://glebbahmutov.com/blog/cambridge-elections/</id>
    <published>2019-10-21T04:00:00.000Z</published>
    <updated>2019-10-22T01:13:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>I had a chance to attend candidate forum before local elections to Cambridge, Massachusetts. All candidates appeal to me, but the climate catastrophe is the number one issue that should be on everyone&#39;s mind right now. So in this light, here are the candidates that do put the Earth&#39;s climate as their number one priority.</p><ul><li><a href="https://votequinton.com/" target="_blank" rel="noopener">Quinton Zondervan</a> <a href="https://twitter.com/qzondervan" target="_blank" rel="noopener">@qzondervan</a> is my number one choice. I fully support his <a href="https://votequinton.com/climate-platform-2019/" target="_blank" rel="noopener">Equitable Climate Response</a>, it is what we urgently need today to survive.</li><li><a href="https://pattynolan.org/" target="_blank" rel="noopener">Patty Nolan</a> <a href="https://twitter.com/PattyNolan1" target="_blank" rel="noopener">@PattyNolan1</a> shares my sense of urgency in regards to climate, read her <a href="https://pattynolan.org/priorities/#climatecrisis" target="_blank" rel="noopener">climate crisis</a> essay. Absolutely wonderful candidate.</li><li><a href="https://www.johnpitkin.org/" target="_blank" rel="noopener">John Pitkin</a> is an environmentalist, who I feel deserves to be on the council, watch his <a href="https://environmentaljusticetv.wordpress.com/2019/10/20/your-political-alternatives-john-pitkin-candidate-for-cambridge-city-council-ev-n-328-cctv/" target="_blank" rel="noopener">Cambridge TV interview</a>.</li><li><a href="https://www.vote1ilan.net/" target="_blank" rel="noopener">Ilan Levy</a> <a href="https://twitter.com/vote1ilan" target="_blank" rel="noopener">@vote1ilan</a> has a great understanding of why climate takes the back seat to the development, and what we need to do to change the city&#39;s policies.</li></ul><p><img src="/blog/images/sign.jpeg" alt="My sign in support of the candidates"></p><p>I loved many other candidates and their platforms: <a href="https://www.voteadriane.com/" target="_blank" rel="noopener">Adriane Musgrave</a> <a href="https://twitter.com/abmusgrave" target="_blank" rel="noopener">@abmusgrave</a>, <a href="https://www.marcmcgovern.com/" target="_blank" rel="noopener">Marc McGovern</a> <a href="https://twitter.com/MarcGov" target="_blank" rel="noopener">@MarcGov</a> (what a great name for an elected politician), and I will vote for them - but after I put the above 4 candidates as my numbers 1 through 4. City of Cambridge has <a href="https://en.wikipedia.org/wiki/Ranked_voting" target="_blank" rel="noopener">ranked voting</a> which is an excellent system.</p><p>Voting in local elections is something every can do - and the people you elect directly affect your town and your life. Please vote with the climate emergency as number one issue this election cycle. Cambridge is a unique rich city with major tech corporations located in it - it should lead in green renewable energy and carbon draw-down.</p><p>Related: <a href="../climate-emergency/">Climate Emergency</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I had a chance to attend candidate forum before local elections to Cambridge, Massachusetts. All candidates appeal to me, but the climate
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/tags/climate/"/>
    
  </entry>
  
  <entry>
    <title>Testing Angular application via App Actions</title>
    <link href="https://glebbahmutov.com/blog/testing-angular-application-via-app-actions/"/>
    <id>https://glebbahmutov.com/blog/testing-angular-application-via-app-actions/</id>
    <published>2019-09-14T04:00:00.000Z</published>
    <updated>2019-09-14T13:41:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>You can find the entire source code for this example at <a href="https://github.com/bahmutov/angular-heroes-app-actions" target="_blank" rel="noopener">bahmutov/angular-heroes-app-actions</a>.</p><h2><span id="introduction">Introduction</span></h2><p>In my previous blog posts I have shown how end-to-end tests do not always have to go through the user interface to interact with the application <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/" target="_blank" rel="noopener">1</a>, <a href="../realworld-app-action/">2</a>, <a href="https://www.cypress.io/blog/2019/02/28/shrink-the-untestable-code-with-app-actions-and-effects/" target="_blank" rel="noopener">3</a>. Those examples used Vue, React and Overmind.js front-end libraries. In this blog post I will show how to access application state directly from the test code for Angular 8 application. We will access the state both to make assertions against it during test, and to dispatch actions against it. This allows us to be both quick and build our tests on top of the component&#39;s API, not on top of the page DOM.</p><!-- toc --><ul><li><a href="#regular-test">Regular test</a></li><li><a href="#exposing-heroes-component">Exposing Heroes component</a></li><li><a href="#asserting-application-state">Asserting application state</a></li><li><a href="#changing-data-inside-the-component">Changing data inside the component</a></li><li><a href="#triggering-application-update">Triggering application update</a></li><li><a href="#tests-using-app-actions">Tests using app actions</a><ul><li><a href="#avoid-setup-using-ui">Avoid setup using UI</a></li><li><a href="#prefer-controlling-app-directly">Prefer controlling app directly</a></li><li><a href="#avoiding-race-conditions">Avoiding race conditions</a></li></ul></li><li><a href="#fixing-typescript">Fixing TypeScript</a></li><li><a href="#conclusions">Conclusions</a><ul><li><a href="#see-more">See more</a></li></ul></li></ul><!-- tocstop --><h2><span id="regular-test">Regular test</span></h2><p>But first, let me give an example of a &quot;normal&quot; end-to-end test. We will write these tests first to cover individual features of the app, simulating the behavior of a normal human user. Let&#39;s take a user story like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- user goes to /heroes view</span><br><span class="line">- user sees list of heroes</span><br><span class="line">- &quot;Dr Nice&quot; is at the top of the list</span><br><span class="line">- user does not like &quot;Dr Nice&quot; and deletes him from the list</span><br><span class="line">- &quot;Dr Nice&quot; is gone</span><br><span class="line">- when the user reloads the page, &quot;Dr Nice&quot; appears again</span><br></pre></td></tr></table></figure><p>Here is the corresponding Cypress test, reading almost as naturally as the English sentences above.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'Returns deleted hero after reload'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  cy.get(<span class="string">'ul.heroes li'</span>).should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">    .first().should(<span class="string">'include.text'</span>, <span class="string">'Dr Nice'</span>)</span><br><span class="line">    .find(<span class="string">'.delete'</span>).click()</span><br><span class="line">  cy.get(<span class="string">'ul.heroes li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">9</span>).and(<span class="string">'not.include.text'</span>, <span class="string">'Dr Nice'</span>)</span><br><span class="line">  cy.reload()</span><br><span class="line">  <span class="comment">// Dr Nice is back</span></span><br><span class="line">  cy.get(<span class="string">'ul.heroes li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">    .first().should(<span class="string">'include.text'</span>, <span class="string">'Dr Nice'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/angular-app-actions/delete-and-reload.gif" alt="Deleting a hero and reloading the page test"></p><p>This test uses the application through the user interface and confirms the &quot;delete&quot; behavior. We now that the UI element <code>&lt;button class=&quot;delete&quot;&gt;</code> is really working. Let&#39;s never press it again.</p><p>When writing other tests, we can bypass clicking on &quot;Delete&quot; button, instead we can call the underlying component&#39;s &quot;delete&quot; method. This will allow us to build up better application&#39;s internal API, which are public methods in each component, rather than try to come up with a page object that encapsulates <code>cy.find(&#39;.delete&#39;).click()</code> commands.</p><p>But first we will need to somehow expose a reference to a component we want to control, so our test can even get to the component.</p><h2><span id="exposing-heroes-component">Exposing Heroes component</span></h2><p>To reach inside the application from our test, we need to pass a reference to a component or service from the app to the spec. The easiest way to do this is by attaching the reference to the <code>window</code> object. Let&#39;s pass reference to the Heroes component.</p><figure class="highlight ts"><figcaption><span>heroes.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-heroes'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./heroes.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./heroes.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroesComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  heroes: Hero[];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> heroService: HeroService</span>) &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">      <span class="comment">// @ts-ignore</span></span><br><span class="line">      <span class="built_in">window</span>.HeroesComponent = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the rest of the component</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If our application is running inside Cypress tests, we will set <code>window.HeroesComponent</code>. Notice <code>// @ts-ignore</code> directives - I need to use them because normally <code>window</code> object has neither <code>Cypress</code>, nor <code>HeroesComponent</code> property. The beauty of TypeScript. We will fix this later.</p><p>From our tests, we can reach into the application&#39;s <code>window</code> and use the property <code>HeroesComponent</code> <em>when it gets set</em>. We will do this via assertions taking advantage of <a href="https://on.cypress.io/retry-ability" target="_blank" rel="noopener">retry-ability</a>. Imagine the <code>window</code> starting without <code>HeroesComponent</code> and we want to wait until the property gets set. We need to use <code>should</code> assertion - it will get retried and retried until our application starts and <code>window.HeroesComponent = this</code> is executed.</p><figure class="highlight js"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'sets reference to HeroesComponent'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  cy.window()</span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'HeroesComponent'</span>) <span class="comment">// yields window.HeroesComponent</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The assertion &quot;have.property&quot; automatically yields that property to the next command in the chain. Thus we can check and assert the number of heroes initially.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'starts with 10 heroes'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  cy.window()</span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'HeroesComponent'</span>) <span class="comment">// yields window.HeroesComponent</span></span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'heroes'</span>) <span class="comment">// yields window.HeroesComponent.heroes array</span></span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If you click on any <code>SHOULD</code> command in the Command Log on the left, the yielded object will be printed to the DevTools console. You can see what the application state was at each step, which makes it simple to understand the test and application behavior.</p><p><img src="/blog/images/angular-app-actions/heroes-component.png" alt="The HeroesComponent"></p><p>It is a good idea to factor out the access to the application&#39;s component into a utility function for reuse.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getHeroesComponent = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'HeroesComponent'</span>) <span class="comment">// yields window.HeroesComponent</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">'starts with 10 heroes'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  getHeroesComponent()</span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'heroes'</span>) <span class="comment">// yields window.HeroesComponent.heroes array</span></span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Or if you prefer to a custom command</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(<span class="string">'getHeroesComponent'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// yields window.HeroesComponent</span></span><br><span class="line">  <span class="keyword">return</span> cy.window().should(<span class="string">'have.property'</span>, <span class="string">'HeroesComponent'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'starts with 10 heroes (custom command)'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  cy.getHeroesComponent()</span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'heroes'</span>) <span class="comment">// yields window.HeroesComponent.heroes array</span></span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I am not a big fan of custom commands, because at least in TypeScript specs you need to either add <code>// @ts-ignore</code> or have a separate TS files that extends <code>cy</code> with new commands, see <a href="https://on.cypress.io/typescript" target="_blank" rel="noopener">Cypress TypeScript page</a>.</p><h2><span id="asserting-application-state">Asserting application state</span></h2><p>Let&#39;s use the reference to the component to check its state. We will take the same test as before and will add a few more assertions to confirm the first hero in the list before and after &quot;delete&quot;, and after page reload.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'Returns deleted hero after reload - with assertions against data'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  <span class="comment">// confirm the data in the component</span></span><br><span class="line">  getHeroes().should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    .its(<span class="string">'0'</span>)</span><br><span class="line">    .should(<span class="string">'deep.equal'</span>, &#123;</span><br><span class="line">      id: <span class="number">11</span>,</span><br><span class="line">      name: <span class="string">'Dr Nice'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// confirm the UI</span></span><br><span class="line">  cy.get(<span class="string">'ul.heroes li'</span>).should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">    .first().should(<span class="string">'include.text'</span>, <span class="string">'Dr Nice'</span>)</span><br><span class="line">    .find(<span class="string">'.delete'</span>).click()</span><br><span class="line">  cy.get(<span class="string">'ul.heroes li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">9</span>).and(<span class="string">'not.include.text'</span>, <span class="string">'Dr Nice'</span>)</span><br><span class="line">  <span class="comment">// confirm the data in the component</span></span><br><span class="line">  getHeroes()</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    .its(<span class="string">'0'</span>).should(<span class="string">'deep.equal'</span>, &#123;</span><br><span class="line">      id: <span class="number">12</span>,</span><br><span class="line">      name: <span class="string">'Narco'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  cy.reload()</span><br><span class="line">  <span class="comment">// Dr Nice is back</span></span><br><span class="line">  cy.get(<span class="string">'ul.heroes li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">    .first().should(<span class="string">'include.text'</span>, <span class="string">'Dr Nice'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Having assertions against the internal application data ties your tests to the implementation, so judge if it is necessary yourself. If the application&#39;s implementation has reached maturity, and won&#39;t change much in the future, it is probably ok, as it allows you to lock down the internal data details.</p><h2><span id="changing-data-inside-the-component">Changing data inside the component</span></h2><p>We know how to access data inside a component, now let&#39;s change it. Let&#39;s set the number of heroes to zero for example.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'sets zero heroes'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  cy.getHeroesComponent()</span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'heroes'</span>) <span class="comment">// yields window.HeroesComponent.heroes array</span></span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">heroes</span> =&gt;</span> &#123;</span><br><span class="line">      heroes.length = <span class="number">0</span></span><br><span class="line">      cy.log(<span class="string">'cleared heroes'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, the test claims that is has cleared the list of heroes, but the app still shows all of them.</p><p><img src="/blog/images/angular-app-actions/after-clear.png" alt="Application still shows all heroes"></p><h2><span id="triggering-application-update">Triggering application update</span></h2><p>So far we have changed the data inside the application, yet the user interface does not refresh - the application has no idea that it needs to re-render. Let&#39;s force the update. To do this, we need to get a reference to <a href="https://angular.io/api/core/ApplicationRef" target="_blank" rel="noopener">ApplicationRef</a> instance, so we can call <a href="https://angular.io/api/core/ApplicationRef#tick" target="_blank" rel="noopener"><code>appRef.tick()</code></a> method.</p><p>In order to do this, we will change how the application bootstraps in <code>app.module.ts</code>. Usually we just list component to be bootstrapped like this:</p><figure class="highlight ts"><figcaption><span>app.module.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  bootstrap: [ AppComponent ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>But we will implement the bootstrap interface <a href="https://angular.io/api/core/DoBootstrap" target="_blank" rel="noopener">DoBootstrap</a> ourselves - because the callback gets the <code>ApplicationRef</code> argument we want to access later. Here is the small change.</p><figure class="highlight ts"><figcaption><span>app.module.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule, DoBootstrap, ApplicationRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="comment">// instead of elements to bootstrap</span></span><br><span class="line">  <span class="comment">// just put app component in the entry components list</span></span><br><span class="line">  entryComponents: [AppComponent]</span><br><span class="line">  <span class="comment">// and remove the "bootstrap" property</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule <span class="keyword">implements</span> DoBootstrap &#123;</span><br><span class="line">  ngDoBootstrap(appRef: ApplicationRef) &#123;</span><br><span class="line">    <span class="comment">// bootstrap AppComponent ourselves</span></span><br><span class="line">    appRef.bootstrap(AppComponent)</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">      <span class="comment">// and save the application reference!</span></span><br><span class="line">      <span class="comment">// @ts-ignore</span></span><br><span class="line">      <span class="built_in">window</span>.appRef = appRef</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can force the application re-render from the DevTools console.</p><p><img src="/blog/images/angular-app-actions/app-ref-tick.gif" alt="Using application reference tick to re-render DOM"></p><p>If we can control our application from DevTools console, we can control it from Cypress - it is just JavaScript.</p><h2><span id="tests-using-app-actions">Tests using app actions</span></h2><h3><span id="avoid-setup-using-ui">Avoid setup using UI</span></h3><p>What happens when there are no heroes and the user does a search? Let&#39;s test it. Our test needs to delete all heroes from the app and then search. Hmm, deleting heroes is complicated because we don&#39;t know how many heroes the application loads. Of course Cypress has a way to click multiple buttons like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'deletes all heroes through UI'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  <span class="comment">// confirm the heroes have loaded and select "delete" buttons</span></span><br><span class="line">  cy.get(<span class="string">'ul.heroes li button.delete'</span>)</span><br><span class="line">    .should(<span class="string">'have.length.gt'</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// and delete all heroes</span></span><br><span class="line">    .click(&#123; <span class="attr">multiple</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This works, because our application shows ALL items on the same page. Cypress just licks each delete button one by one.</p><p><img src="/blog/images/angular-app-actions/multiple-click.gif" alt="Deleting Heroes by clicking"></p><p>But I advise against this type of test, because in general a test that performs a variable number of steps is prone to be flaky and hard to understand and debug in the future. We call such tests <a href="https://on.cypress.io/conditional-testing" target="_blank" rel="noopener">non-deterministic</a> and advise against them. The test should always follow the same scenario - it should prepare the data beforehand to always follow the same path.</p><p>Imagine our application changes, and starts with zero heroes. The test will FAIL because it cannot click zero delete buttons! Imagine the test starts with 100 heroes. The test will take a long time just to delete a hundred items by clicking a hundred buttons. What if the application paginates the list? Deleting of heroes through the user interface suddenly becomes a hard problem by itself, and any test that needs to have zero heroes becomes flaky and complicated.</p><h3><span id="prefer-controlling-app-directly">Prefer controlling app directly</span></h3><p>There is a better way.</p><p>Let&#39;s avoid the unknown number of clicks problem. We can clear the list by reaching inside the application and just setting the length of list of heroes to zero.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getHeroesComponent = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'HeroesComponent'</span>) <span class="comment">// yields window.HeroesComponent</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * yields window.HeroesComponent.heroes array</span></span><br><span class="line"><span class="comment"> * @example</span></span><br><span class="line"><span class="comment"> *  // starts with 10 heroes</span></span><br><span class="line"><span class="comment"> *  cy.visit('/heroes').should('have.length', 10)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getHeroes = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  getHeroesComponent().should(<span class="string">'have.property'</span>, <span class="string">'heroes'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets the length of heroes array to 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> clearHeroes = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  getHeroes()</span><br><span class="line">    .then(<span class="function"><span class="params">heroes</span> =&gt;</span> &#123;</span><br><span class="line">      cy.log(<span class="string">`clearing <span class="subst">$&#123;heroes.length&#125;</span> heroes`</span>)</span><br><span class="line">      <span class="comment">// @ts-ignore</span></span><br><span class="line">      heroes.length = <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'deletes all heroes through app action'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  <span class="comment">// confirm the heroes have loaded - because the array has items</span></span><br><span class="line">  getHeroes().should(<span class="string">'have.length.gt'</span>, <span class="number">0</span>)</span><br><span class="line">  clearHeroes()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Great, we are settings <code>heroes.length</code> to zero, we need to re-render the application, right. So let&#39;s add <code>appRef.tick()</code> call. We will add utility function to access <code>window.appRef</code> and then to call <code>tick</code> method.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getAppRef = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  cy.window().should(<span class="string">'have.property'</span>, <span class="string">'appRef'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calls `appRef.tick()` to force UI refresh</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> tick = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  getAppRef()</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    .invoke(<span class="string">'tick'</span>)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'deletes all heroes through app action'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  <span class="comment">// confirm the heroes have loaded - because the array has items</span></span><br><span class="line">  getHeroes().should(<span class="string">'have.length.gt'</span>, <span class="number">0</span>)</span><br><span class="line">  clearHeroes()</span><br><span class="line">  tick()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes.</p><p><img src="/blog/images/angular-app-actions/clear-heroes.gif" alt="Deleting Heroes by app action"></p><p>There is nothing non-deterministic about this test. It will just work, assuming the initial list has more than zero items. It is also faster that going through the DOM, although in this case the difference is small in absolute terms - 1 second vs 2 seconds.</p><h3><span id="avoiding-race-conditions">Avoiding race conditions</span></h3><p>Let&#39;s extend the test. After clearing the list of heroes using app action, let&#39;s add a new hero, again using an app action and then confirm the new hero shows up in the UI. We are using the same helper functions plus a new one - <code>addHero</code></p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds a new hero.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> addHero = <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span></span><br><span class="line">  cy.window()</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    .its(<span class="string">'HeroesComponent'</span>)</span><br><span class="line">    .invoke(<span class="string">'add'</span>, name)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'shows new hero'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  clearHeroes()</span><br><span class="line">  tick()</span><br><span class="line"></span><br><span class="line">  addHero(<span class="string">'Gleb'</span>) <span class="comment">// the world needs a new hero</span></span><br><span class="line">  tick()</span><br><span class="line">  cy.contains(<span class="string">'.heroes li'</span>, <span class="string">'Gleb'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Ohhh, the test fails, guess I am no hero.</p><p><img src="/blog/images/angular-app-actions/cannot-find-new-hero.png" alt="The new hero does not appear"></p><p>Hmm, there is something weird going on. The list has been cleared, and the UI has refreshed after that. But where is the new hero? Even more suspicious is an observation that if while the <code>cy.contains</code> command is spinning trying to find the new text, I click &quot;Clear&quot; button, the new record suddenly appears, and the test passes.</p><p><img src="/blog/images/angular-app-actions/click-clear.gif" alt="Clicking clear suddenly brings the new record to UI"></p><p>Seems like our <code>tick()</code> action did NOT refresh the user interface after adding a new item, yet it did work when clearing the list of heroes. What is the difference between the two actions? Let&#39;s look at the code.</p><p>When we are clearing heroes, we are just setting <code>heroes.length = 0</code>. This is a synchronous action, thus when the test executes <code>tick()</code> the list has zero items. But the <code>addHero</code> app action calls the following code in the component:</p><figure class="highlight ts"><figcaption><span>heroes.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">  name = name.trim();</span><br><span class="line">  <span class="keyword">if</span> (!name) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">  <span class="keyword">this</span>.heroService.addHero(&#123; name &#125; <span class="keyword">as</span> Hero)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">hero</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.heroes.push(hero);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hmm, there is an Observable there - this is an asynchronous method, and if we call <code>tick()</code> from the test ... which runs in the same event loop as the application code, we refresh the UI <em>before</em> the asynchronous <code>subscribe</code> callback even runs! We have a race condition between the test calling <code>tick()</code> and calling application code.</p><p>We can try solving this problem in several ways, depending on how much we can modify our application code or slow down our tests.</p><ol><li>Add delays to app actions that involve asynchronous application methods. For example <code>addName</code> test function can just delay the next test command.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addHero = <span class="function">(<span class="params">name: string</span>) =&gt;</span></span><br><span class="line">  cy.window()</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    .its(<span class="string">'HeroesComponent'</span>)</span><br><span class="line">    .invoke(<span class="string">'add'</span>, name)</span><br><span class="line">    .wait(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>Ughh, waiting an entire second? Might be too slow for the interactive mode when Cypress is running locally, yet not enough for running tests on CI, leading to flaky tests.</p><ol start="2"><li>Wait until the heroes list increases its length by 1, which means the application code has finished running <code>this.heroes.push(hero)</code>. Here is how to save the initial length of array, then call app action, then use <code>should(cb)</code> to retry until the array gets an extra item.</li></ol><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds a new hero. Waits for number of heroes to increase by 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> addHero = <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// first, save the number of items in the list</span></span><br><span class="line">  <span class="comment">// save under alias "n", available in the test context "this.n"</span></span><br><span class="line">  getHeroes().its(<span class="string">'length'</span>).as(<span class="string">'n'</span>)</span><br><span class="line">  cy.window()</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    .its(<span class="string">'HeroesComponent'</span>)</span><br><span class="line">    .invoke(<span class="string">'add'</span>, name)</span><br><span class="line">  <span class="comment">// now retry reading "heroes" array until its length has increased by 1</span></span><br><span class="line">  getHeroes().should(<span class="function"><span class="keyword">function</span> (<span class="params">heroes</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// use "function () &#123;...&#125;" callback to make sure</span></span><br><span class="line">    <span class="comment">// "this" points at the test context</span></span><br><span class="line">    <span class="comment">// and we can access previously saved alias "n"</span></span><br><span class="line">    expect(heroes).to.have.length(<span class="keyword">this</span>.n + <span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'shows new hero'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  clearHeroes()</span><br><span class="line">  tick()</span><br><span class="line"></span><br><span class="line">  addHero(<span class="string">'Gleb'</span>) <span class="comment">// the world needs a new hero</span></span><br><span class="line">  tick()</span><br><span class="line">  cy.contains(<span class="string">'.heroes li'</span>, <span class="string">'Gleb'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test works, and it is as fast it can be.</p><p><img src="/blog/images/angular-app-actions/retry-length-plus-1.png" alt="Waiting until array increases its length by one"></p><ol start="3"><li>Refactor application code to signal when its data has finished updating. Simply, let&#39;s return a promise from component&#39;s method <code>addName</code>. Then the Cypress test can wait for this promise to resolve.</li></ol><figure class="highlight ts"><figcaption><span>heroes.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">add(name: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  name = name.trim();</span><br><span class="line">  <span class="keyword">if</span> (!name) &#123; <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(); &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.heroService.addHero(&#123; name &#125; <span class="keyword">as</span> Hero)</span><br><span class="line">    .subscribe(<span class="function"><span class="params">hero</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.heroes.push(hero);</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cypress automatically waits for promise returned from <code>cy.invoke(...)</code> to resolve, thus our test becomes really simple.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds a new hero. If the application method "add(name)" returns a promise,</span></span><br><span class="line"><span class="comment"> * the Cypress test command chain automatically waits for the promise to resolve.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> addHero = <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span></span><br><span class="line">  cy.window()</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    .its(<span class="string">'HeroesComponent'</span>)</span><br><span class="line">    .invoke(<span class="string">'add'</span>, name)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'shows new hero'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  clearHeroes()</span><br><span class="line">  tick()</span><br><span class="line"></span><br><span class="line">  addHero(<span class="string">'Gleb'</span>) <span class="comment">// the world needs a new hero</span></span><br><span class="line">  tick()</span><br><span class="line">  cy.contains(<span class="string">'.heroes li'</span>, <span class="string">'Gleb'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/angular-app-actions/resolve.gif" alt="Cypress test waits for application&#39;s promise to resolve"></p><h2><span id="fixing-typescript">Fixing TypeScript</span></h2><p>Let&#39;s tell TypeScript that <code>window</code> object can have our new properties set. Create a new file <code>src/index.d.ts</code> and describe new properties that the application can add to the <code>window</code> object.</p><figure class="highlight ts"><figcaption><span>src/index.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HeroesComponent &#125; <span class="keyword">from</span> <span class="string">'./app/heroes/heroes.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ApplicationRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">declare</span> global &#123;</span><br><span class="line">  <span class="keyword">interface</span> Window &#123;</span><br><span class="line">    Cypress?: unknown</span><br><span class="line">    appRef?: ApplicationRef</span><br><span class="line">    HeroesComponent?: HeroesComponent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The file <code>src/index.d.ts</code> will be automatically loaded by TypeScript compiler while process <code>.ts</code> files in <code>src</code> folder, so the <code>window</code> object will be updated. Great, now we can remove all <code>// @ts-ignore</code> from the source code to be simply:</p><figure class="highlight ts"><figcaption><span>src/heroes.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> heroService: HeroService</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">    <span class="built_in">window</span>.HeroesComponent = <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now let&#39;s tell our spec files that these new properties are available on the <code>window</code>. Include the <code>src/index.d.ts</code> from the <code>cypress/tsconfig.json</code> file:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"../tsconfig.json"</span>,</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"*/*.ts"</span>,</span><br><span class="line">    <span class="string">"../node_modules/cypress"</span>,</span><br><span class="line">    <span class="string">"../src/index.d.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now when we write a test, the window will have optional application properties, like this:</p><p><img src="/blog/images/angular-app-actions/window-prop.png" alt="IntelliSense shows the new HeroComponent property exists"></p><p>Let&#39;s cast the property returned by the <code>getHeroes()</code> utility function so that our specs &quot;know&quot; what kind of object they are asserting.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ApplicationRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Hero &#125; <span class="keyword">from</span> <span class="string">"app/hero"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * yields window.HeroesComponent.heroes array</span></span><br><span class="line"><span class="comment"> * @example</span></span><br><span class="line"><span class="comment"> *  // starts with 10 heroes</span></span><br><span class="line"><span class="comment"> *  cy.visit('/heroes').should('have.length', 10)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getHeroes = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  getHeroesComponent().should(<span class="string">'have.property'</span>, <span class="string">'heroes'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">list</span> =&gt;</span> &lt;Hero[]&gt;&lt;unknown&gt;list) <span class="comment">// make the type work</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getAppRef = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  cy.window().should(<span class="string">'have.property'</span>, <span class="string">'appRef'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">x</span> =&gt;</span> &lt;ApplicationRef&gt;&lt;unknown&gt;x) <span class="comment">// make the type work</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calls `appRef.tick()` to force UI refresh</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> tick = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  getAppRef()</span><br><span class="line">    .invoke(<span class="string">'tick'</span>)</span><br></pre></td></tr></table></figure><p>Now we can remove all <code>// @ts-ignore</code> from the spec file. When we have types, even hovering over <code>getAppRef().invoke</code> method correctly shows only the methods available on the <code>ApplicationRef</code> type.</p><p><img src="/blog/images/angular-app-actions/appref.gif" alt="TypeScript provides intelligent code completion for `cy.invoke` over ApplicationRef"></p><p>Finally, let&#39;s add a custom command we have added <code>cy.getHeroesComponent()</code> to TypeScript. As shown in <a href="https://on.cypress.io/typescript" target="_blank" rel="noopener">Cypress TypeScript documentation</a>, to add new commands to the global <code>cy</code> object type we need to create <code>cypress/support/index.d.ts</code></p><figure class="highlight ts"><figcaption><span>cypress/support/index.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> Cypress &#123;</span><br><span class="line">  <span class="keyword">interface</span> Chainable &#123;</span><br><span class="line">    getHeroesComponent(): Chainable&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For some reason I could not import <code>HeroesComponent</code> and return <code>Chainable&lt;HeroesComponent&gt;</code> - TypeScript compiler would complain about generic interface. The beauty of TypeScript.</p><h2><span id="conclusions">Conclusions</span></h2><p>In this blog post I have shown how to expose an Angular component instance and access it from Cypress tests. Using the instance reference we can check the internal application&#39;s state, and also trigger data changes, bypassing user interface. I have also shown how to trigger user interface updates by getting a reference to the application during bootstrap. We have seen several solutions to race conditions between the app and the test runner. Finally I have shown how to fix TypeScript errors when we extend global <code>window</code> and <code>cy</code> objects with custom properties.</p><h3><span id="see-more">See more</span></h3><ul><li>Find the source code from this blog post at <a href="https://github.com/bahmutov/angular-heroes-app-actions" target="_blank" rel="noopener">bahmutov/angular-heroes-app-actions</a></li><li>Read <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/" target="_blank" rel="noopener">Stop using page objects and start using app actions</a></li><li>See more <a href="https://github.com/cypress-io/cypress-example-recipes" target="_blank" rel="noopener">Cypress recipes</a> and read my <a href="../tags/cypress/">blog posts about Cypress</a> and the official <a href="https://www.cypress.io/blog/" target="_blank" rel="noopener">Cypress blog</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;You can find the entire source code for this example at &lt;a href=&quot;https://github.com/bahmutov/angular-heroes-app-actions&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Visual diffing flow for your pretty CLI applications</title>
    <link href="https://glebbahmutov.com/blog/visual-diffing-for-CLI-apps/"/>
    <id>https://glebbahmutov.com/blog/visual-diffing-for-CLI-apps/</id>
    <published>2019-09-11T04:00:00.000Z</published>
    <updated>2019-09-11T03:17:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> you can find the example source code in repo <a href="https://github.com/bahmutov/percy-for-cli-example" target="_blank" rel="noopener">bahmutov/percy-for-cli-example</a>.</p><p>I have been a big fan of <a href="https://on.cypress.io/visual-testing" target="_blank" rel="noopener">visual testing</a> for web applications. Since reliable rendering of web pages and comparing images is complicated, I am a big fan of just using an existing 3rd party service like <a href="https://percy.io" target="_blank" rel="noopener">Percy.io</a> and <a href="https://applitools.com" target="_blank" rel="noopener">Applitools</a>. These services are fast, reliable, and just work.</p><p>I especially like the pull request review workflow. If a visual service detects a difference between the &quot;gold&quot; images it stores and the newly generated ones, it sets a failed commit check, and I know there are visual regressions. Anyone from the team can review the visual changes, comment, understand them. If the changes are really expected, the new images can be approved and become the new &quot;gold&quot; images to be compared against.</p><p>So that is all good and fun for web applications, but recently we have been refactoring CLI output from the <a href="http://github.com/cypress-io/cypress" target="_blank" rel="noopener">Cypress Test Runner</a> - and it is complicated. Our current output renders tables with multiple columns, uses terminal colors, text padding and alignment, hmm. We are using text snapshots, but they strip colors, and are relatively hard to judge or discuss as a team.</p><p>I want the same workflow for unit tests or CLI applications that output complex information to the terminal. That&#39;s why I have created this experiment:</p><ol><li>Capture CLI output from an app, for example from a test runner</li><li>Convert ANSI control characters that set foreground and background colors to matching HTML styles. There are many small NPM utilities that do this.</li><li>Send the generated HTML to Percy.io API<ul><li>Percy thinks this came from a real DOM snapshot</li><li>it renders the terminal HTML in a real browser</li><li>generates an image and compares it to the &quot;gold&quot;</li></ul></li></ol><p>Easy peasy.</p><p>Here is the &quot;standard&quot; Mocha run in the terminal.</p><p><img src="/blog/images/percy-cli/mocha-run.png" alt="Mocha test run"></p><p>Here is how we can spawn Mocha from a parent process, yet force colors</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// force child process to output ANSI colors</span></span><br><span class="line"><span class="comment">// if possible using FORCE_COLOR</span></span><br><span class="line"><span class="comment">// commonly used via https://github.com/chalk/supports-color</span></span><br><span class="line"><span class="comment">// const child = spawn('node', ['./colors'], &#123;</span></span><br><span class="line"><span class="keyword">const</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn</span><br><span class="line"><span class="keyword">const</span> child = spawn(</span><br><span class="line">  <span class="string">'node'</span>,</span><br><span class="line">  [<span class="string">'./node_modules/.bin/mocha'</span>, <span class="string">'./spec.js'</span>, <span class="string">'--reporter'</span>, <span class="string">'spec'</span>],</span><br><span class="line">  &#123;</span><br><span class="line">    env: &#123; ...process.env, <span class="attr">FORCE_COLOR</span>: <span class="string">'2'</span> &#125;,</span><br><span class="line">    cwd: process.cwd(),</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Here is how we convert ANSI characters to HTML using <a href="https://github.com/rburns/ansi-to-html" target="_blank" rel="noopener">ansi-to-html</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// assuming the browser page is white</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  newline: <span class="literal">true</span>,</span><br><span class="line">  bg: <span class="string">'#fff'</span>,</span><br><span class="line">  fg: <span class="string">'#111'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> convert = <span class="keyword">new</span> (<span class="built_in">require</span>(<span class="string">'ansi-to-html'</span>))(options)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> html = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlStream = <span class="function"><span class="keyword">function</span> <span class="title">htmlStream</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> stream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">    html += convert.toHtml(chunk)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">child.stdout.setEncoding(<span class="string">'utf8'</span>)</span><br><span class="line">child.on(<span class="string">'error'</span>, <span class="built_in">console</span>.error)</span><br><span class="line">child.stdout.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// send result to Percy</span></span><br><span class="line">&#125;)</span><br><span class="line">htmlStream(child.stdout)</span><br></pre></td></tr></table></figure><p>The final HTML can be wrapped in <code>&lt;html&gt;</code> with <code>utf8</code> meta flag and will look something like this</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    example<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#0A0"</span>&gt;</span> ✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#555"</span>&gt;</span> works A<span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#A00"</span>&gt;</span> (1002ms)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#0A0"</span>&gt;</span> ✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#555"</span>&gt;</span> works B<span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#A00"</span>&gt;</span> (1005ms)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#0A0"</span>&gt;</span> ✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#555"</span>&gt;</span> works C<span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#A00"</span>&gt;</span> (1002ms)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#0AA"</span>&gt;</span> - skips D<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">"color:#5F5"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#0A0"</span>&gt;</span> 3 passing<span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#555"</span>&gt;</span> (3s)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#0AA"</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#0AA"</span>&gt;</span> 1 pending<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can send this HTML to Percy API by running a local Percy agent, which runs by default on port 5338 and posting the generated HTML there. Here is how to run Percy and demo project.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"demo"</span>: <span class="string">"node ./index"</span>,</span><br><span class="line">    <span class="attr">"demo-percy"</span>: <span class="string">"npx percy exec -- npm run demo"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"ansi-to-html"</span>: <span class="string">"0.6.11"</span>,</span><br><span class="line">    <span class="attr">"axios"</span>: <span class="string">"0.19.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@percy/script"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sending is just a POST request</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// post HTML to the Percy agent</span></span><br><span class="line"><span class="comment">// follow "cy.request" code in</span></span><br><span class="line"><span class="comment">// https://github.com/percy/percy-cypress/blob/master/lib/index.ts</span></span><br><span class="line"><span class="comment">// and https://github.com/percy/percy-agent</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">'http://localhost:5338/percy/snapshot'</span></span><br><span class="line">axios</span><br><span class="line">  .post(url, &#123;</span><br><span class="line">    name: <span class="string">'my example name'</span>,</span><br><span class="line">    url: <span class="string">'http://localhost/example'</span>,</span><br><span class="line">    enableJavaScript: <span class="literal">false</span>,</span><br><span class="line">    domSnapshot: html,</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e)</span><br><span class="line">    <span class="keyword">throw</span> e</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Percy API requires a private project token, I will inject it during run-time using <a href="https://github.com/bahmutov/as-a" target="_blank" rel="noopener">as-a</a> utility.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> as<span class="_">-a</span> percy-for-cli-example npm run demo-percy</span></span><br></pre></td></tr></table></figure><p>The scripts runs and sends its terminal to visual diffing service as HTML string.</p><p><img src="/blog/images/percy-cli/demo-run.gif" alt="Demo run"></p><p>You can find Percy dashboard for this project at <a href="https://percy.io/bahmutov/percy-for-cli-example" target="_blank" rel="noopener">percy.io/bahmutov/percy-for-cli-example</a>. All images uploaded from <code>master</code> branch are auto-approved, while images uploaded from other branches are compared to the &quot;gold&quot; images. For example the last build has 1 image with detected visual difference.</p><p><img src="/blog/images/percy-cli/list-of-snapshots.png" alt="Percy project dashboard"></p><p>Someone from the team will have to go to the build and review the visual changes and either approve or reject them. In this case the difference is just in millisecond numbers - our snapshot needs to be sanitized before sending to Percy to avoid flagging trivial changes like this.</p><p><img src="/blog/images/percy-cli/percy-changes.gif" alt="Percy shows visual difference in the terminal output"></p><ul><li>Source <a href="https://github.com/bahmutov/percy-for-cli-example" target="_blank" rel="noopener">bahmutov/percy-for-cli-example</a></li><li>Percy project <a href="https://percy.io/bahmutov/percy-for-cli-example" target="_blank" rel="noopener">percy.io/bahmutov/percy-for-cli-example</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can find the example source code in repo &lt;a href=&quot;https://github.com/bahmutov/percy-for-cli-example&quot; target=&quot;_
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>How to configure Prettier and VSCode</title>
    <link href="https://glebbahmutov.com/blog/configure-prettier-in-vscode/"/>
    <id>https://glebbahmutov.com/blog/configure-prettier-in-vscode/</id>
    <published>2019-09-09T04:00:00.000Z</published>
    <updated>2019-10-17T18:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>You can configure JavaScript code auto-formatting with Prettier to work per-project. This allows you to get a consistent formatting without thinking or arguing about it. This blog post shows how to configure Prettier to work from command line, from VSCode and from Git hooks.</p><p>You can find the sample project with different Prettier settings configured per-subfolder at <a href="https://github.com/bahmutov/prettier-config-example" target="_blank" rel="noopener">bahmutov/prettier-config-example</a>.</p><!-- toc --><ul><li><a href="#why-prettier">Why Prettier?</a></li><li><a href="#setup">Setup</a></li><li><a href="#settings">Settings</a></li><li><a href="#vscode-setup">VSCode setup</a></li><li><a href="#format-files-from-cli">Format files from CLI</a></li><li><a href="#format-staged-files-on-commit">Format staged files on commit</a></li><li><a href="#catch-mis-formatted-files-on-ci">Catch mis-formatted files on CI</a><ul><li><a href="#using-stop-build">Using stop-build</a></li><li><a href="#using-prettier">Using Prettier</a></li></ul></li><li><a href="#common-problems">Common problems</a><ul><li><a href="#nothing-happens-on-save">Nothing happens on save</a></li><li><a href="#code-formatting-is-wrong">Code formatting is wrong</a></li></ul></li><li><a href="#tips">Tips</a><ul><li><a href="#ignoring-files">Ignoring files</a></li><li><a href="#saving-without-formatting">Saving without formatting</a></li><li><a href="#temporarily-disable-formatting">Temporarily disable formatting</a></li><li><a href="#only-format-configured-projects">Only format configured projects</a></li></ul></li><li><a href="#use-eslint-with-prettier">Use Eslint with Prettier</a><ul><li><a href="#disable-style-rules-in-eslint">Disable style rules in ESLint</a></li><li><a href="#integrate-eslint-in-vscode">Integrate ESLint in VSCode</a></li><li><a href="#run-prettier-from-eslint">Run Prettier from ESLint</a></li><li><a href="#vscode-eslint-prettier-setup">VSCode + ESLint + Prettier setup</a></li><li><a href="#vscode-eslint-prettier-typescript-setup">VSCode + ESLint + Prettier + TypeScript setup</a></li><li><a href="#use-prettier-eslint-cypress">Use Prettier + ESLint + Cypress</a></li><li><a href="#format-other-languages-with-prettier">Format other languages with Prettier</a></li><li><a href="#format-json-files-with-prettier">Format JSON files with Prettier</a></li><li><a href="#use-custom-settings-overrides">Use custom settings overrides</a></li></ul></li><li><a href="#chrome-extension">Chrome extension</a></li></ul><!-- tocstop --><h2><span id="why-prettier">Why Prettier?</span></h2><p><a href="https://prettier.io/" target="_blank" rel="noopener">Prettier</a> reformats your JavaScript code consistently and (arguably) in way that is easy to read and understand. It takes whatever copy/pasted code snippets you put into your file and makes it look the same as the rest of the code. By using Prettier your team skips ALL disagreements about spacing, variable declarations, semi-colons, trailing commas, etc. The code just magically gets to the format you pick.</p><p>You can use Prettier from command line, or from your code editor whenever you paste or save a file. I prefer to use two solutions described in this blog post:</p><ul><li>format the file from VSCode every time I save it</li><li>format the changed files on Git commit before committing them</li></ul><p>Let me show you how to do both.</p><h2><span id="setup">Setup</span></h2><p>When setting up Prettier it is important to configure it per-project. Not every project uses the same code style, thus it is important to respect the style of whatever project you are currently working in. The demo repo <a href="https://github.com/bahmutov/prettier-config-example" target="_blank" rel="noopener">bahmutov/prettier-config-example</a> has two subfolders, each with its distinct code style, enforced by Prettier. In reality, each of your repos will have its style; I am using subfolders in order to keep the example simple.</p><p>I assume you are using NPM and have <code>package.json</code> file inside the repository. Install Prettier</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev --save-exact prettier</span><br></pre></td></tr></table></figure><p>At the root of the project create the Prettier configuration file. In my example I have two subfolders, and there is a configuration file in each subfolder:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prettier-config-example/</span><br><span class="line">  projectA/</span><br><span class="line">    .prettierrc.json</span><br><span class="line">  projectB/</span><br><span class="line">    .prettierrc.json</span><br></pre></td></tr></table></figure><p>I like using JSON configuration format so my code editor helps me. In fact, VSCode understands the Prettier configuration file format via the built-in <a href="../json-schema-for-the-win/">json schema</a>. So when I edit <code>projectA/.prettierrc.json</code> file, I get intelligent tooltips.</p><p><img src="/blog/images/prettier/prettier-intellisense.gif" alt="Picking trailing comma setting"></p><h2><span id="settings">Settings</span></h2><p>Prettier tries to enforce the same code style without 100s of options, thus there are just a few settings you can change. Here are settings I am using in the first project to make it look &quot;traditional&quot; ES5</p><figure class="highlight json"><figcaption><span>projectA/.prettierrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"trailingComma"</span>:<span class="string">"none"</span>,</span><br><span class="line">  <span class="attr">"tabWidth"</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">"semi"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"singleQuote"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The second project uses more modern style without semi-colons and with trailing commas.</p><figure class="highlight json"><figcaption><span>projectB/.prettierrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"trailingComma"</span>: <span class="string">"all"</span>,</span><br><span class="line">  <span class="attr">"tabWidth"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"semi"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"singleQuote"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="vscode-setup">VSCode setup</span></h2><p>To use the Prettier we have just installed from VSCode we need to install the <a href="https://github.com/prettier/prettier-vscode" target="_blank" rel="noopener">Prettier VSCode extension</a>:</p><ol><li>Launch VS Code Quick Open (Ctrl+P)</li><li>Run the following command</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install esbenp.prettier-vscode</span><br></pre></td></tr></table></figure><p>Because you might have global settings related to code formatting, I prefer having in each repository a file with local workspace VSCode settings. I commit this file <code>.vscode/settings.json</code> to source control to make sure everyone uses the same extension to format the code.</p><figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now every time we save a JavaScript file, it will be formatted using Prettier automatically. Here is me formatting <code>projectA/index.js</code> file by saving it.</p><p><img src="/blog/images/prettier/projectA.gif" alt="Prettier formats projectA/index.js"></p><p>Notice the double quotes, semi-colons, etc - Prettier has applied the settings from <code>projectA/.prettierrc.json</code>. It also split long object across multiple lines to make it easier to read.</p><p>The same JavaScript code in <code>projectB/index.js</code> gets formatted by Prettier using different local settings and ends up looking different.</p><p><img src="/blog/images/prettier/projectB.gif" alt="Prettier formats projectB/index.js"></p><p>Single quotes, no semi-colons, trailing commas.</p><h2><span id="format-files-from-cli">Format files from CLI</span></h2><p>Formatting every file as you save it is nice, but we can also format ALL source files at once using Prettier CLI. In the <code>package.json</code> add a script to format files matching the mask and to write them back to disk.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"prettier-config-example"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"format"</span>: <span class="string">"prettier --write 'projectA/*.js' 'projectB/*.js'"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"prettier"</span>: <span class="string">"1.18.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run this NPM script and the files will be formatted to follow the Prettier style</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm run format</span><br><span class="line"></span><br><span class="line">&gt; prettier-config-example@1.0.0 format /Users/gleb/git/prettier-config-example</span><br><span class="line">&gt; prettier --write &apos;projectA/*.js&apos; &apos;projectB/*.js&apos;</span><br><span class="line"></span><br><span class="line">projectA/index.js 30ms</span><br><span class="line">projectB/index.js 10ms</span><br></pre></td></tr></table></figure><h2><span id="format-staged-files-on-commit">Format staged files on commit</span></h2><p>Whenever we work with files locally, we might accidentally commit them without proper styling. That&#39;s where Git hooks and formatting staged files comes in handy. To consistently format all files before committing and then commit changes, I recommend using <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> + <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a> combination of tools.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D husky lint-staged</span></span><br><span class="line">+ husky@3.0.5</span><br><span class="line">+ lint-staged@9.2.5</span><br></pre></td></tr></table></figure><p>Now configure pre-commit hook to run Prettier against staged JavaScript files. In the <code>package.json</code> set the following</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"husky"</span>: <span class="string">"3.0.5"</span>,</span><br><span class="line">    <span class="attr">"lint-staged"</span>: <span class="string">"9.2.5"</span>,</span><br><span class="line">    <span class="attr">"prettier"</span>: <span class="string">"1.18.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"husky"</span>: &#123;</span><br><span class="line">    <span class="attr">"hooks"</span>: &#123;</span><br><span class="line">      <span class="attr">"pre-commit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"lint-staged"</span>: &#123;</span><br><span class="line">    <span class="attr">"*.js"</span>: [<span class="string">"prettier --write"</span>, <span class="string">"git add"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>See <a href="https://github.com/okonet/lint-staged#reformatting-the-code" target="_blank" rel="noopener">lint-staged code formatting documentation</a>.</p><p>If you try to commit changed JavaScript files, they will automatically be formatted and re-staged, ensuring only pretty JavaScript code is committed. In the Git commit shortcut output below, the &quot;Running tasks...&quot; messages comes from the <code>lint-staged</code> tool.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ g done &quot;add husky and lint-staged&quot;</span><br><span class="line">husky &gt; pre-commit (node v12.4.0)</span><br><span class="line">  ↓ Stashing changes... [skipped]</span><br><span class="line">    → No partially staged files found...</span><br><span class="line">  ✔ Running tasks...</span><br><span class="line">[master 583b92a] add husky and lint-staged</span><br><span class="line"> 2 files changed, 1513 insertions(+)</span><br></pre></td></tr></table></figure><p>Of course, you can skip the Git pre-commit hook by committing with <code>-n</code> flag.</p><h2><span id="catch-mis-formatted-files-on-ci">Catch mis-formatted files on CI</span></h2><h3><span id="using-stop-build">Using stop-build</span></h3><p>You can really enforce the formatting before pushing code to the central repository by running Prettier on CI and then detecting any changed files. Just run <a href="https://github.com/bahmutov/stop-build" target="_blank" rel="noopener">stop-build</a> after running Prettier.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">format</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npx</span> <span class="string">run</span> <span class="string">stop-build</span></span><br></pre></td></tr></table></figure><p>If any of the source files were reformatted by Prettier, the <code>stop-only</code> will detect changed source files using Git information and will exit with an error. It will list the changed files, something like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">⚠️ there are 2 changed files</span><br><span class="line">M projectA/index.js</span><br><span class="line">M projectB/index.js</span><br></pre></td></tr></table></figure><h3><span id="using-prettier">Using Prettier</span></h3><p>Prettier has built-in command <a href="https://prettier.io/docs/en/cli.html#check" target="_blank" rel="noopener"><code>--check</code></a> that validates code files against formatting. Using it from a script in <code>package.json</code> file:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"check"</span>: <span class="string">"prettier --check 'projectA/*.js' 'projectB/*.js'"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then on CI we can call the script right after <code>npm install</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npx</span> <span class="string">run</span> <span class="string">check</span></span><br></pre></td></tr></table></figure><p>Let&#39;s say one of the files has not been formatted.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm run check</span><br><span class="line"></span><br><span class="line">&gt; prettier-config-example@1.0.0 check /git/prettier-config-example</span><br><span class="line">&gt; prettier --check &apos;projectA/*.js&apos; &apos;projectB/*.js&apos;</span><br><span class="line"></span><br><span class="line">Checking formatting...</span><br><span class="line">projectB/index.js</span><br><span class="line">Code style issues found in the above file(s). Forgot to run Prettier?</span><br></pre></td></tr></table></figure><h2><span id="common-problems">Common problems</span></h2><h3><span id="nothing-happens-on-save">Nothing happens on save</span></h3><p>You are saving a file in VSCode ... and the code does not change. This could be due to three issues:</p><ol><li>Make sure local workspace settings have auto-format on save enabled. Open <code>.vscode/settings.json</code> file and confirm:<ul><li>VSCode Prettier extension is configured as the default formatter.</li><li>Formatting on save is enabled</li></ul></li></ol><figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Prettier extension might be disabled by VSCode. Make sure the word &quot;Prettier&quot; appears on the Status Bar and has check mark symbol next to it. To check:<ul><li>Right click on the Status Bar. Make sure the &quot;Prettier&quot; extension appears there is displayed.</li></ul></li></ol><p><img src="/blog/images/prettier/show-extension.png" alt="Show Prettier extension status"></p><ol start="3"><li>Make sure there is a checkmark next to the &quot;Prettier&quot; in the Status Bar. Sometimes after enabling the extension, it is loaded, but not enabled.</li></ol><p><img src="/blog/images/prettier/prettier-not-enabled.png" alt="Prettier extension is disabled for some reason"></p><p>One thing I have noticed that sometimes saving a file enables Prettier if the <code>.vscode/settings.json</code> have the extension enabled for this workspace. For example in this animation I am saving the file with double quotes around a string, and magically the Prettier extension gets the check mark and does its job. Don&#39;t ask.</p><p><img src="/blog/images/prettier/save-enables-prettier.gif" alt="Saving file enables Prettier and formats the code"></p><p>If everything else fails, quit VSCode and start it again.</p><h3><span id="code-formatting-is-wrong">Code formatting is wrong</span></h3><p>Here is a little animation that shows a file being saved with Prettier setting &quot;trailingComma: true&quot;, yet the comma gets deleted somehow.</p><p><img src="/blog/images/prettier/comma-deleted.gif" alt="Saving file removes trailing comma"></p><p>Check if there are OTHER code formatting extensions installed and disable them for this workspace. For some reason, VSCode can use globally installed extension overwriting local setting. Don&#39;t ask. In my case, I had &quot;Prettier-Standard&quot; extension enabled globally. After disabling the &quot;Prettier-Standard&quot; for the current workspace, Prettier extension started working as expected.</p><p><img src="/blog/images/prettier/disable.png" alt="Disabling Prettier-Standard extension"></p><p>Why can&#39;t VSCode save the list of disabled extensions in <code>.vscode/settings.json</code>?</p><h2><span id="tips">Tips</span></h2><h3><span id="ignoring-files">Ignoring files</span></h3><p>Sometimes you have files that should not be formatted: auto-generated source files, saved snapshots, etc. You can list file masks to ignore in file <code>.prettierignore</code>. For example, to ignore all JavaScript files in <code>snapshots</code> folders use</p><figure class="highlight plain"><figcaption><span>.prettierignore</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># do not run Prettier against JavaScript files</span><br><span class="line"># in &quot;snapshots/&quot; folders</span><br><span class="line">**/snapshots/*.js</span><br></pre></td></tr></table></figure><h3><span id="saving-without-formatting">Saving without formatting</span></h3><p>If you ever work in someone else&#39;s project, please respect their formatting. In order to avoid reformatting the entire file when you save it from VSCode, save it without formatting. Run &quot;Command + Shift + P&quot; to open the Command Palette and type &quot;save without&quot; until you see &quot;File: Save without Formatting&quot; command - use that.</p><p><img src="/blog/images/prettier/save-without-formatting.png" alt="Save without formatting"></p><h3><span id="temporarily-disable-formatting">Temporarily disable formatting</span></h3><p>There is also an extension that temporarily disables format on save feature called <a href="https://marketplace.visualstudio.com/items?itemName=tombonnike.vscode-status-bar-format-toggle" target="_blank" rel="noopener">Formatting Toggle</a>. Install it in your VSCode and whenever you want to temporarily disable Prettier on save, click on the &quot;Formatting&quot; toggle in the status bar.</p><p><img src="/blog/images/prettier/format-toggle.png" alt="Save without formatting"></p><h3><span id="only-format-configured-projects">Only format configured projects</span></h3><p>In the VSCode global settings, set this option to only allow running Prettier in the folders with Prettier config file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Prettier: Require Config</span><br><span class="line">✅ Require a &apos;prettierconfig&apos; to format</span><br></pre></td></tr></table></figure><h2><span id="use-eslint-with-prettier">Use Eslint with Prettier</span></h2><p>Prettier reformats JavaScript code to follow certain style, it does not check the meaning of the code. For example, Prettier happily reformats the following wrong code.</p><p><img src="/blog/images/prettier/const.gif" alt="Prettier makes this wrong code look pretty"></p><p>Static linters, like <a href="https://eslint.org/" target="_blank" rel="noopener">ESLint</a> can catch the assignment to a constant variable, so we need both:</p><ul><li>Prettier will reformat the code to be consistent in style</li><li>ESLint will analyze the meaning of code and catch potential problems</li></ul><h3><span id="disable-style-rules-in-eslint">Disable style rules in ESLint</span></h3><p>ESLint runs a long list of rules against the code, and some of these rules are stylistic, and can conflict with Prettier&#39;s style. Thus we need to configure ESLint to skip those rules. This configuration is in module <a href="https://prettier.io/docs/en/integrating-with-linters.html#eslint" target="_blank" rel="noopener">eslint-config-prettier</a>. Install it</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D eslint eslint-config-prettier</span></span><br></pre></td></tr></table></figure><p>and can be added to your project <code>.eslintrc.json</code> file. ESLint will not run without a valid configuration file.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"es6"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"eslint:recommended"</span>, <span class="string">"prettier"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now when you run ESLint against this file</p><figure class="highlight js"><figcaption><span>projectC/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'Joe'</span>; name = <span class="string">'Mary'</span></span><br></pre></td></tr></table></figure><p>Then ESLint will catch the <code>const</code> assignment error; it will also catch that the variable <code>name</code> is never used after assignment.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx eslint projectC/index.js</span></span><br><span class="line"></span><br><span class="line">/prettier-config-example/projectC/index.js</span><br><span class="line">  1:7   error  'name' is assigned a value but never used  no-unused-vars</span><br><span class="line">  1:21  error  'name' is constant                         no-const-assign</span><br><span class="line"></span><br><span class="line">✖ 2 problems (2 errors, 0 warnings)</span><br></pre></td></tr></table></figure><h3><span id="integrate-eslint-in-vscode">Integrate ESLint in VSCode</span></h3><p>Since we are using VSCode, it makes sense to install <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">ESLint VSCode extension</a> called <code>dbaeumer.vscode-eslint</code></p><p>Open Command Pallette with Command + P</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install dbaeumer.vscode-eslint</span><br></pre></td></tr></table></figure><p>Enable this extension in VSCode workspace settings</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;editor.defaultFormatter&quot;: &quot;dbaeumer.vscode-eslint&quot;,</span><br><span class="line">  &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">  &quot;eslint.enable&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript files should now show ESLint errors right inside VSCode editor.</p><p><img src="/blog/images/prettier/eslint-errors.png" alt="ESLint errors"></p><p>You can see these errors for yourself by opening <code>projectC/index.js</code> in VSCode from the <a href="https://github.com/bahmutov/prettier-config-example" target="_blank" rel="noopener">example repo</a>.</p><h3><span id="run-prettier-from-eslint">Run Prettier from ESLint</span></h3><p>Since ESLint can detect and fix many of the errors it detects automatically, let&#39;s tell ESLint to run Prettier too. Here is the <a href="https://prettier.io/docs/en/integrating-with-linters.html#recommended-configuration" target="_blank" rel="noopener">recommended setup</a></p><p>Install ESLint Prettier config and plugin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D eslint-config-prettier eslint-plugin-prettier</span></span><br></pre></td></tr></table></figure><p>Point ESLint at the recommended settings which include Prettier styles</p><figure class="highlight json"><figcaption><span>projectD/.eslintrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"node"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"es6"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"eslint:recommended"</span>, <span class="string">"plugin:prettier/recommended"</span>],</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"no-console"</span>: <span class="string">"off"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice in the screenshot below how ESLint warnings in VSCode editor include style errors from Prettier.</p><p><img src="/blog/images/prettier/eslint-prettier.png" alt="ESLint shows Prettier errors"></p><p>If we run ESLint with <code>--fix</code> flag, it will use Prettier to auto format code, solving both stylistic and semantic problems.</p><p><img src="/blog/images/prettier/eslint-fix.gif" alt="ESLint with Prettier fixes the code formatting"></p><p>If you decide to use ESLint with Prettier rules and have configured <code>husky</code> to run <code>lint-staged</code>, point it at <code>eslint --fix</code> instead of <code>prettier --write</code>.</p><h3><span id="vscode-eslint-prettier-setup">VSCode + ESLint + Prettier setup</span></h3><p>Let&#39;s configure VSCode to use ESLint to auto-fix found issues, including Prettier. The workspace settings use <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener"><code>dbaeumer.vscode-eslint</code></a>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"dbaeumer.vscode-eslint"</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.enable"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.alwaysShowStatus"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.autoFixOnSave"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The animation shows how saving the file fixes both style and lint problems.</p><p><img src="/blog/images/prettier/use-eslint-to-format.gif" alt="Using ESLint to auto-format and auto-fix issues on save"></p><h3><span id="vscode-eslint-prettier-typescript-setup">VSCode + ESLint + Prettier + TypeScript setup</span></h3><p>ESLint can lint TypeScript files through <a href="https://github.com/typescript-eslint/typescript-eslint" target="_blank" rel="noopener">typescript-eslint</a>, and <a href="https://github.com/prettier/prettier/issues/13" target="_blank" rel="noopener">Prettier can format TypeScript code</a>. Let&#39;s set it up.</p><p>First, if you have previous installed <a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint" target="_blank" rel="noopener">TSLint extension <code>vscode-tslint</code></a> for VSCode, uninstall it - let ESLint do everything.</p><p>Second, install a new parser and plugin modules</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D @typescript-eslint/parser @typescript-eslint/eslint-plugin</span></span><br><span class="line">+ @typescript-eslint/parser@2.2.0</span><br><span class="line">+ @typescript-eslint/eslint-plugin@2.2.0</span><br><span class="line">updated 2 packages and audited 576 packages in 2.42s</span><br><span class="line">found 0 vulnerabilities</span><br></pre></td></tr></table></figure><p>Then set the VSCode workspace settings to lint TypeScript files</p><figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"dbaeumer.vscode-eslint"</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.enable"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.alwaysShowStatus"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.validate"</span>: [</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"typescript"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Set the ESLint options. Parsing files will be done using <a href="https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser" target="_blank" rel="noopener">@typescript-eslint/parser</a>, and we need <a href="https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin" target="_blank" rel="noopener">@typescript-eslint</a> plugin.</p><figure class="highlight json"><figcaption><span>.eslintrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"parser"</span>: <span class="string">"@typescript-eslint/parser"</span>,</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"@typescript-eslint"</span>],</span><br><span class="line">  <span class="attr">"extends"</span>: [</span><br><span class="line">    <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:@typescript-eslint/eslint-recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:@typescript-eslint/recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:prettier/recommended"</span>,</span><br><span class="line">    <span class="string">"prettier/@typescript-eslint"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"no-var"</span>: <span class="string">"error"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And now you should see ESLint + Prettier errors and warnings in VSCode</p><p><img src="/blog/images/prettier/ts-eslint.png" alt="ESLint error - no vars allowed"></p><p><img src="/blog/images/prettier/ts-prettier.png" alt="Style error - no semi-colons allowed"></p><p><strong>Note:</strong> there is a bug in VSCode + ESLint extension where Prettier is not found. If you open Prettier console you can see the error, there is an <a href="https://github.com/microsoft/vscode-eslint/issues/696" target="_blank" rel="noopener">open issue</a></p><p><img src="/blog/images/prettier/prettier-error.png" alt="Prettier cannot fix the style automatically"></p><p>So we see the lint and style errors, yet cannot reformat the code automatically on save. To work around this issue, use NPM script command.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"fix-ts"</span>: <span class="string">"eslint --fix 'project-with-typescript/*.ts'"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run this command and it should reformat the TS files and fix most ESLint issues.</p><p><img src="/blog/images/prettier/fix-ts.gif" alt="Fixing TypeScript files"></p><h3><span id="use-prettier-eslint-cypress">Use Prettier + ESLint + Cypress</span></h3><p>One final touch. If you write <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a> end-to-end tests, there is an official <a href="https://github.com/cypress-io/eslint-plugin-cypress" target="_blank" rel="noopener">cypress-io/eslint-plugin-cypress</a> plugin that can catch some common test mistakes. You can find an example &quot;test&quot; in <code>project-with-Cypress/index.js</code> file.</p><p>First, install the plugin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D eslint-plugin-cypress</span></span><br></pre></td></tr></table></figure><p>Then extend ESLint settings</p><figure class="highlight json"><figcaption><span>project-with-Cypress/.eslintrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"cypress/globals"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"extends"</span>: [</span><br><span class="line">    <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:prettier/recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:cypress/recommended"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"cypress"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s say your test tries to get back an element using <a href="https://on.cypress.io/get" target="_blank" rel="noopener"><code>cy.get</code></a> command.</p><figure class="highlight js"><figcaption><span>project-with-Cypress/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typical Cypress test</span></span><br><span class="line">it(<span class="string">'loads todos'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// this is wrong - Cypress commands are asynchronous</span></span><br><span class="line">  <span class="comment">// you cannot get element back from cy.get</span></span><br><span class="line">  <span class="comment">// see https://on.cypress.io/get</span></span><br><span class="line">  <span class="keyword">const</span> myApp = cy.get(<span class="string">'#my-app'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This WON&#39;T work - <code>cy.get</code> does not return an element, like a Promise, the found element will be passed down the command chain. Notice how ESLint shows an error if you try to assign the value of the <code>cy.get</code> command.</p><p><img src="/blog/images/prettier/cypress-error.png" alt="ESLint shows Cypress error"></p><h3><span id="format-other-languages-with-prettier">Format other languages with Prettier</span></h3><p>Prettier can format many languages: JavaScript, JSON, Markdown, HTML, CSS, etc. Here is formatting CSS for example.</p><p><img src="/blog/images/prettier/format-css.gif" alt="Format CSS file using Prettier"></p><h3><span id="format-json-files-with-prettier">Format JSON files with Prettier</span></h3><p>You can configure Prettier and its VSCode extension to format your JSON files. Since there is already a default JSON formatter built into VSCode, you need to tell VSCode to specifically use <code>esbenp.prettier-vscode</code> to format JSON files. Here is a sample project settings file.</p><figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span>,</span><br><span class="line">  <span class="attr">"[json]"</span>: &#123;</span><br><span class="line">    <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"json.format.enable"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/blog/images/prettier/format-json.gif" alt="Format JSON files using Prettier"></p><h3><span id="use-custom-settings-overrides">Use custom settings overrides</span></h3><p>Here is a nice feature - you can set custom Prettier settings for some files. For example, we can use 2 spaces to indent by default, but 4 spaces to indent code blocks inside Markdown files, and 6 spaces to indent JSON files. Just because.</p><figure class="highlight json"><figcaption><span>.prettierrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"trailingComma"</span>: <span class="string">"all"</span>,</span><br><span class="line">  <span class="attr">"tabWidth"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"semi"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"overrides"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"files"</span>: <span class="string">"*.md"</span>,</span><br><span class="line">      <span class="attr">"options"</span>: &#123;</span><br><span class="line">        <span class="attr">"tabWidth"</span>: <span class="number">4</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"files"</span>: <span class="string">"*.json"</span>,</span><br><span class="line">      <span class="attr">"options"</span>: &#123;</span><br><span class="line">        <span class="attr">"tabWidth"</span>: <span class="number">6</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s save a JSON file.</p><p><img src="/blog/images/prettier/format-json-6.gif" alt="Format JSON files using Prettier with overridden settings"></p><p>And here is saving a Markdown with a code block - which gets automatically formatted using Prettier with 4 spaces per tab.</p><p><img src="/blog/images/prettier/format-md.gif" alt="Format code blocks inside Markdown files"></p><h2><span id="chrome-extension">Chrome extension</span></h2><p>There is now Chrome <a href="https://github.com/prettier/prettier-chrome-extension" target="_blank" rel="noopener">Prettier extension</a> that can format code blocks in text areas. Seems for now it is limited to StackOverflow and GitHub.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;You can configure JavaScript code auto-formatting with Prettier to work per-project. This allows you to get a consistent formatting witho
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="javascript" scheme="https://glebbahmutov.com/blog/tags/javascript/"/>
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Cypress using child window</title>
    <link href="https://glebbahmutov.com/blog/cypress-using-child-window/"/>
    <id>https://glebbahmutov.com/blog/cypress-using-child-window/</id>
    <published>2019-09-03T04:00:00.000Z</published>
    <updated>2019-09-04T02:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Normally, Cypress test runner loads your site inside an iframe. This allows the &quot;top&quot; parent window, controlled by Cypress a direct access to your site. Nice, but many sites work hard to avoid being iframed. Cypress already strips <code>X-frame</code> protection headers, and &quot;fixes&quot; most common <a href="https://github.com/cypress-io/cypress/issues/886" target="_blank" rel="noopener">frame-busting JavaScript code</a> like <code>if (top !== self)</code>.</p><p>Imagine the website using the following frame-busting code, and it somehow slipping Cypress JS regex</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (top !== self) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'top !== self !!! frame busted!'</span>)</span></span><br><span class="line"><span class="javascript">    location = <span class="string">'http://www.cypress.io'</span></span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'all is good, top === self'</span>)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The image below shows the frame-busting in action - the site has reference to <code>self</code> window that is different from the <code>top</code> window. Also, the menu shows the different JavaScript contexts - one per window object, which is often a source of confusion.</p><p><img src="/blog/images/child-window/frame-busted.png" alt="Different contexts and frame busting"></p><p>Nothing is foolproof, especially my brain, and having a child iframe for the application under test creates its own confusion. So many times I have opened DevTools, inspecting <code>window</code> or some global object, and wondering - where is the property I have just set? &quot;Ohh, yeah, it was in the APP context, how could I forget!&quot;</p><p>What can we do instead of iframing the application under test website? Cypress needs direct access to the <code>window</code> that is going to load the site. Child iframe window is one possibility, another one is a window opened with <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/open" target="_blank" rel="noopener">window.open</a> call. As long as the <code>document.domain</code> values match between the Cypress window and the loaded site, the two windows will be able to communicate. Cypress proxy takes care of setting the <code>document.domain=&#39;localhost&#39;</code> for you, you can see that script injected into the <code>HEAD</code> element if you inspect the child iframes.</p><p><img src="/blog/images/child-window/document-domain.png" alt="Document domain set to localhost"></p><p>So, let&#39;s replace <a href="https://on.cypress.io/visit" target="_blank" rel="noopener"><code>cy.visit</code></a> with <code>window.open</code>. Here is some code I have lifted from the example repo <a href="https://github.com/bahmutov/cypress-open-child-window" target="_blank" rel="noopener">bahmutov/cypress-open-child-window</a>.</p><p><strong>Note:</strong> I am using Cypress v3.4.1 and Chrome v76 to run this code.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(<span class="string">'openWindow'</span>, (url, features) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> w = Cypress.config(<span class="string">'viewportWidth'</span>)</span><br><span class="line">  <span class="keyword">const</span> h = Cypress.config(<span class="string">'viewportHeight'</span>)</span><br><span class="line">  <span class="keyword">if</span> (!features) &#123;</span><br><span class="line">    features = <span class="string">`width=<span class="subst">$&#123;w&#125;</span>, height=<span class="subst">$&#123;h&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'openWindow %s "%s"'</span>, url, features)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.top.aut) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'window exists already'</span>)</span><br><span class="line">      <span class="built_in">window</span>.top.aut.close()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/Window/open</span></span><br><span class="line">    <span class="built_in">window</span>.top.aut = <span class="built_in">window</span>.top.open(url, <span class="string">'aut'</span>, features)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// letting page enough time to load and set "document.domain = localhost"</span></span><br><span class="line">    <span class="comment">// so we can access it</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      cy.state(<span class="string">'document'</span>, <span class="built_in">window</span>.top.aut.document)</span><br><span class="line">      cy.state(<span class="string">'window'</span>, <span class="built_in">window</span>.top.aut)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Note that after we get window reference, we wait 500ms to let the document to load. After that we hope the <code>document.domain</code> is set to <code>localhost</code>, allowing our Cypress Test Runner to access it without a security exception.</p><p>I am cheating here a little bit. I am using the undocumented <code>cy.state</code> function that internally stores <code>document</code> and <code>window</code> references. But this is a privilege of working on Cypress every day 😁</p><p>With the child window accessible, the test runs pretty much normally. For example, here is a test that clicks on the button and checks that the counter is displayed correctly.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'counts clicks'</span>, () =&gt; &#123;</span><br><span class="line">  cy.openWindow(<span class="string">'/'</span>)</span><br><span class="line">  cy.contains(<span class="string">'Page body'</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'button'</span>)</span><br><span class="line">    .click()</span><br><span class="line">    .click()</span><br><span class="line">  cy.get(<span class="string">'#clicked'</span>).should(<span class="string">'have.text'</span>, <span class="string">'2'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"modifyObstructiveCode"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:5001"</span>,</span><br><span class="line">  <span class="attr">"viewportWidth"</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">"viewportHeight"</span>: <span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The Chrome windows and Cypress main window are shown below</p><p><img src="/blog/images/child-window/testing.png" alt="Tests with separate child window"></p><p>We can open DevTools in the child window and see that <code>top</code> reference is the same as <code>self</code> reference.</p><p><img src="/blog/images/child-window/top-is-self.png" alt="Top is self in the child window"></p><p>The child window has only the elements from the loaded application under test</p><p><img src="/blog/images/child-window/child-window-elements.png" alt="Elements in the child window"></p><p>There is only a single context in the child window, this makes working with JavaScript a little bit simpler.</p><p><img src="/blog/images/child-window/child-window-single-context.png" alt="Single context"></p><p>Since Cypress takes DOM snapshots for its time-traveling debugger, it still works - and the snapshots are shown <em>inside the iframe</em>.</p><p><img src="/blog/images/child-window/child-window.gif" alt="Child window time traveling debugger"></p><p><strong>Note:</strong> there are probably differences in the way child window is controlled by Cypress. At least if you want to detect from the application code if the site is running inside Cypress, instead of checking <code>window.Cypress</code> you need to test <code>window.opener &amp;&amp; window.opener.Cypress</code>.</p><p>Try it out, and open <a href="https://github.com/bahmutov/cypress-open-child-window/issues" target="_blank" rel="noopener">any issues</a> please.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Normally, Cypress test runner loads your site inside an iframe. This allows the &amp;quot;top&amp;quot; parent window, controlled by Cypress a di
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Patching Cypress CLI NPM module</title>
    <link href="https://glebbahmutov.com/blog/patching-cypress-cli-npm-module/"/>
    <id>https://glebbahmutov.com/blog/patching-cypress-cli-npm-module/</id>
    <published>2019-09-02T04:00:00.000Z</published>
    <updated>2019-09-02T14:26:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> this blog post is an expanded version of the official documentation section <a href="https://on.cypress.io/debugging#Patch-Cypress" target="_blank" rel="noopener">&quot;Patch Cypress&quot;</a> available at <a href="https://on.cypress.io/debugging" target="_blank" rel="noopener">https://on.cypress.io/debugging</a>.</p><p>If you discover a bug in an NPM module, you can open an issue and wait for a fix. Yet, sometimes the problem is quite small and waiting for a patch release seems like eternity. In this blog post I will show how to write a patch for Cypress NPM module yourself and apply it after installing the official NPM module. This allows you to avoid waiting for (sometimes delayed) official release.</p><p>Cypress CLI npm module is a small module installed first when you run the <code>npm i cypress</code> command. This module parses the input arguments, starts an XVFB session if necessary and runs the Cypress Electron-based binary application. Sometimes the CLI module itself has a bug, which breaks your CI execution. For example, <a href="https://github.com/cypress-io/cypress/issues/2181" target="_blank" rel="noopener">issue 2181 &quot;dest.end error crash during run exit on GitLab CI / Windows&quot;</a> crashes the CLI when the child process exits on some versions of Windows. This error was apparently introduced in v3.0.0 frustrating many users. On Windows, to get the terminal colors to work, we needed to pipe input and output streams from the CLI process to the spawned Electron process. Thus the released CLI code has the following code fragment:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">needsEverythingPipedDirectly</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isPlatform(<span class="string">'win32'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStdio</span>(<span class="params">needsXvfb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (needsEverythingPipedDirectly()) &#123;</span><br><span class="line">    <span class="comment">// hmm, maybe it should be "inherit"?!!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'pipe'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// a little bit more logic for Linux / Mac</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'inherit'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Imagine you are a user trying to run Cypress tests on Windows CI machine and hitting the error. All tests pass successfully and then ...</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_stream_readable.js:511</span><br><span class="line">    dest.end();</span><br><span class="line">         ^</span><br><span class="line">TypeError: dest.end is not a function</span><br><span class="line">    at Socket.onend (_stream_readable.js:511:10)</span><br><span class="line">    at Socket.g (events.js:292:16)</span><br><span class="line">    at emitNone (events.js:91:20)</span><br><span class="line">    at Socket.emit (events.js:185:7)</span><br><span class="line">    at endReadableNT (_stream_readable.js:974:12)</span><br><span class="line">    at _combinedTickCallback (internal/process/next_tick.js:80:11)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:104:9)</span><br></pre></td></tr></table></figure><p>You suspect that switching from <code>pipe</code> to <code>inherit</code> would fix YOUR problem, but the Cypress team still has not implemented this fix; because each version of Cypress should work on a variety of platforms. What can you do meanwhile?You can patch Cypress CLI module in your own project, implementing a temporary fix! Here is how to do this.</p><ol><li><p>Install the <a href="https://github.com/ds300/patch-package" target="_blank" rel="noopener">patch-package</a> with</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D patch-package</span><br></pre></td></tr></table></figure></li><li><p>Add the patching step to your CI after <code>npm ci</code> step</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line"><span class="comment"># after installing NPM dependencies, patch any that need custom code</span></span><br><span class="line"><span class="attr">- run:</span> <span class="string">npx</span> <span class="string">patch-package</span></span><br></pre></td></tr></table></figure></li></ol><p>Alternatively, you can apply the patch during the npm post-install phase. In your <code>package.json</code> add the following:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"postinstall"</span>: <span class="string">"patch-package"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Now, let&#39;s edit the line causing the problem <em>in your local node_modules folder</em>.</p><ol start="3"><li><p>Open and edit the <code>node_modules/cypress/lib/exec/spawn.js</code> file</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (needsEverythingPipedDirectly()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'inherit'</span>; <span class="comment">// changed from 'pipe'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Run the <code>npx patch-package cypress</code> command.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npx patch-package cypress</span><br><span class="line">patch-package 6.1.2</span><br><span class="line">• Creating temporary folder</span><br><span class="line">• Installing cypress@3.4.1 with npm</span><br><span class="line">• Diffing your files with clean files</span><br><span class="line">✔ Created file patches/cypress+3.4.1.patch</span><br></pre></td></tr></table></figure></li></ol><p>The above command has created a new file <code>patches/cypress+3.4.1.patch</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat patches/cypress+3.4.1.patch</span><br><span class="line">diff --git a/node_modules/cypress/lib/exec/spawn.js b/node_modules/cypress/lib/exec/spawn.js</span><br><span class="line">index ed13727..19c1fae 100644</span><br><span class="line">--- a/node_modules/cypress/lib/exec/spawn.js</span><br><span class="line">+++ b/node_modules/cypress/lib/exec/spawn.js</span><br><span class="line">@@ -42,7 +42,7 @@ function needsEverythingPipedDirectly() &#123;</span><br><span class="line"> function getStdio(needsXvfb) &#123;</span><br><span class="line">   if (needsEverythingPipedDirectly()) &#123;</span><br><span class="line">-    return &apos;pipe&apos;;</span><br><span class="line">+    return &apos;inherit&apos;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><ol start="5"><li>Commit the new <code>patches</code> folder to Git and push to GitHub</li><li>CI machine installs Cypress and other npm modules, then applies the patch and runs the tests. Everything is good now.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this blog post is an expanded version of the official documentation section &lt;a href=&quot;https://on.cypress.io/debuggi
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Fix low contrast with Cypress</title>
    <link href="https://glebbahmutov.com/blog/fix-low-contrast-with-cypress/"/>
    <id>https://glebbahmutov.com/blog/fix-low-contrast-with-cypress/</id>
    <published>2019-09-01T04:00:00.000Z</published>
    <updated>2019-09-01T14:06:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Take the TodoMVC example application that uses the common <a href="https://github.com/tastejs/todomvc-app-css" target="_blank" rel="noopener">tastejs/todomvc-app-css</a> styles. For example, the <a href="https://github.com/cypress-io/cypress-example-todomvc" target="_blank" rel="noopener">cypress-io/cypress-example-todomvc</a> repo uses them:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>React • TodoMVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/todomvc-common/base.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/todomvc-app-css/index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>... and it looks awful on your average projector, the contrast on the page is very low. Most projects display washed out white page where it is super hard to read the individual todo items and labels.</p><p><img src="/blog/images/contrast/todomvc.png" alt="Default Todo page has low contrast"></p><p>Let&#39;s fix this.</p><h2><span id="audit">Audit</span></h2><p>First, we need to understand the problem. Open Chrome DevTools and run &quot;Accessibility&quot; audit.</p><p><img src="/blog/images/contrast/audit.png" alt="Select a11y audit in Chrome DevTools"></p><p>We get only 54 out of 100 - and the contrast is the first problem shown.</p><p><img src="/blog/images/contrast/problems.png" alt="A11y audit result"></p><p>Of course, I am not the first one who had problems showing TodoMVC in front of the live audience and apologizing for the washed out text. Low contrast issue <a href="https://github.com/tastejs/todomvc-app-css/issues/30" target="_blank" rel="noopener">#30</a> was opened in March of 2018.</p><h2><span id="write-failing-test">Write failing test</span></h2><p>Before we start hacking CSS code, let&#39;s apply test-driven development approach and write a failing contrast test. I will use <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a> with <a href="https://github.com/avanslaars/cypress-axe" target="_blank" rel="noopener">cypress-axe</a> plugin to run the text contrast check.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D cypress-axe axe-core</span><br></pre></td></tr></table></figure><p>I have added <code>cypress-axe</code> to the list of loaded commands</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'cypress-axe'</span>)</span><br></pre></td></tr></table></figure><p>and wrote a test that <a href="https://github.com/avanslaars/cypress-axe/issues/9" target="_blank" rel="noopener">only runs a single set of color tests</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'has good contrast'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  cy.injectAxe()</span><br><span class="line">  cy.checkA11y(&#123;</span><br><span class="line">    runOnly: [<span class="string">'cat.color'</span>],</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test fails.</p><p><img src="/blog/images/contrast/failed.png" alt="Failed color a11y test"></p><p>Open DevTools in Cypress and click on the error &quot;A11Y ERROR&quot; command - it will print an actual object with every failed element to the console.</p><p><img src="/blog/images/contrast/errors.png" alt="Contrast errors"></p><p>Super. We have a failing contrast test to run on every commit to prevent a11y errors from creeping back into the application.</p><h2><span id="fixes">Fixes</span></h2><p>I have copied the <code>node_modules/todomvc-app-css/index.css</code> to <code>css/index.css</code> and included it from the <code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now I can start fixing the problems one by one. DevTools gives me a nice little warning for each element with insufficient contrast via element color picker widget. For example the <code>H1</code> element with &quot;Todos&quot; title is barely visible.</p><p><img src="/blog/images/contrast/h1-contrast.png" alt="Insufficient contrast on H1 title element"></p><p>We can pick one of the suggested colors in the palette - which immediately fixes the contrast problem.</p><p><img src="/blog/images/contrast/h1-fixed.png" alt="Fixed the H1 title element contrast"></p><p>Copy the new color to <code>css/index.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todoapp</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#b83f45</span>;</span><br></pre></td></tr></table></figure><p>Similarly I have changed the <code>footer.info</code> style to have more contrast</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.info</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4d4d4d</span>;</span><br></pre></td></tr></table></figure><p>And our empty page passes. The key word is &quot;empty&quot;. If we extend our test or write a new test with several todo items, the filters &quot;All|Completed|...&quot; fail the contrast test - which is something the default Lighthouse audit does not reveal (since it runs on the fresh page).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'has good contrast when empty'</span>, () =&gt; &#123;</span><br><span class="line">  cy.injectAxe()</span><br><span class="line">  cy.checkA11y(&#123;</span><br><span class="line">    runOnly: [<span class="string">'cat.color'</span>],</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'has good contrast'</span>, () =&gt; &#123;</span><br><span class="line">  cy.injectAxe()</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>)</span><br><span class="line">    .type(<span class="string">'learn testing&#123;enter&#125;'</span>)</span><br><span class="line">    .type(<span class="string">'be cool&#123;enter&#125;'</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">  cy.checkA11y(&#123;</span><br><span class="line">    runOnly: [<span class="string">'cat.color'</span>],</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/contrast/filters.png" alt="Contrast problems in the list filters"></p><p>We can fix this problem by just removing the gray footer font color - it now looks much better with default body color. I also increased the footer font size - it is hard to read it with the current size.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="comment">/* color: #777; */</span></span><br><span class="line">  <span class="attribute">font-size</span>: large;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I also made the list element font bolder - I think it is easier to read this way</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And finally I have made the input placeholder text darker - increasing its contrast</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todoapp</span> <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#111111</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todoapp</span> <span class="selector-tag">input</span><span class="selector-pseudo">::-moz-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#111111</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todoapp</span> <span class="selector-tag">input</span><span class="selector-pseudo">::input-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#111111</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The page looks much better after the color changes, and it passes our tests</p><p><img src="/blog/images/contrast/colors.png" alt="Fixed contrast problems"></p><h2><span id="links">Links</span></h2><ul><li>You can view my code changes in PR <a href="https://github.com/cypress-io/cypress-example-todomvc/pull/124" target="_blank" rel="noopener">cypress-io/cypress-example-todomvc/pull/124</a></li><li>I have opened PR <a href="https://github.com/tastejs/todomvc-app-css/pull/34" target="_blank" rel="noopener">tastejs/todomvc-app-css/pull/34</a> to fix the official <code>todomvc-app-css</code> styles</li><li><a href="https://github.com/avanslaars/cypress-axe" target="_blank" rel="noopener">cypress-axe</a> plugin and Cypress <a href="https://github.com/cypress-io/cypress-example-recipes#blogs" target="_blank" rel="noopener">a11y recipe</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Take the TodoMVC example application that uses the common &lt;a href=&quot;https://github.com/tastejs/todomvc-app-css&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="a11y" scheme="https://glebbahmutov.com/blog/tags/a11y/"/>
    
  </entry>
  
  <entry>
    <title>Filtering Mocha tests</title>
    <link href="https://glebbahmutov.com/blog/filter-mocha-tests/"/>
    <id>https://glebbahmutov.com/blog/filter-mocha-tests/</id>
    <published>2019-08-31T04:00:00.000Z</published>
    <updated>2019-09-01T01:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you have <a href="https://mochajs.org" target="_blank" rel="noopener">Mocha</a> unit tests, like these ones</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'test a'</span>, () =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'test b'</span>, () =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'test c'</span>, () =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><p>You can run these tests by installing Mocha</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i mocha</span></span><br><span class="line">+ mocha@6.2.0</span><br><span class="line">updated 1 package and audited 226 packages in 5.338s</span><br><span class="line">found 0 vulnerabilities</span><br></pre></td></tr></table></figure><p>and then running the command</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx mocha ./spec.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ✓ test a</span><br><span class="line">  ✓ test b</span><br><span class="line">  ✓ test c</span><br><span class="line"></span><br><span class="line">  3 passing (4ms)</span><br></pre></td></tr></table></figure><p>Beautiful, but what if we want to change the list of collected tests before running them? What if we want to filter tests and maybe run only some of them? We could use <a href="https://mochajs.org/#-grep-regexp-g-regexp" target="_blank" rel="noopener"><code>--grep</code></a> command option, for example we could run just the &quot;test b&quot;.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx mocha --grep <span class="string">"test b"</span> ./spec.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ✓ test b</span><br><span class="line"></span><br><span class="line">  1 passing (4ms)</span><br></pre></td></tr></table></figure><p>I want more. I want to run previously failed tests first. Or run the slowest tests first, or randomize the test order to find the dependencies among tests. Previously I have written tools for this, like <a href="https://github.com/bahmutov/rocha" target="_blank" rel="noopener">rocha</a> and <a href="https://github.com/bahmutov/rocha" target="_blank" rel="noopener">locha</a> but those tools have a limitation - they wrap around Mocha, rather than modifying its behavior. They do not reuse Mocha&#39;s CLI module, which means as Mocha gets more features, those other tools fall behind.</p><p>I would like to plug right into Mocha&#39;s internals and add a new hook that runs after Mocha has collected the tests, but before they start running. Here is how to do this - all using the most powerful and underused feature of Node.js - its <a href="../hacking-node-require/"><code>--require</code> option</a>. Mocha actually looks for <code>--require</code> <a href="https://mochajs.org/#-require-module-r-module" target="_blank" rel="noopener">CLI option</a> and loads those modules for us. So how can we take advantage of loading our code to change Mocha&#39;s behavior?</p><p>First, find in Mocha&#39;s code the place where collected tests are being executed. That&#39;s easy - it is the code inside the file <code>lib/runner.js</code> that has (surprise, surprise) prototype method <code>run</code></p><figure class="highlight js"><figcaption><span>lib/runner.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Run the root suite and invoke `fn(failures)`</span></span><br><span class="line"><span class="comment"> * on completion.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @public</span></span><br><span class="line"><span class="comment"> * @memberof Runner</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; fn</span></span><br><span class="line"><span class="comment"> * @return &#123;Runner&#125; Runner instance.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Runner.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> rootSuite = <span class="keyword">this</span>.suite;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>Great, and this is an asynchronous function too, so we can modify the list of tests in whatever way we want. We can load files, make HTTP calls - even ask the user which tests to run. All we need is to overwrite this method, prefixing it with our code. Start a new local file, let&#39;s call it <code>reorder.js</code>. Here is how to reverse the order of tests in the root suite.</p><figure class="highlight js"><figcaption><span>reorder.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Runner = <span class="built_in">require</span>(<span class="string">'mocha/lib/runner'</span>)</span><br><span class="line"><span class="keyword">const</span> originalRun = Runner.prototype.run</span><br><span class="line">Runner.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.suite.tests.reverse()</span><br><span class="line">  originalRun.call(<span class="keyword">this</span>, done)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s run Mocha and require this script - it will reverse the order of tests</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx mocha --require ./reorder ./spec.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ✓ test c</span><br><span class="line">  ✓ test b</span><br><span class="line">  ✓ test a</span><br><span class="line"></span><br><span class="line">  3 passing (4ms)</span><br></pre></td></tr></table></figure><p>Because we have the callback function, we can make our logic asynchronous. Here is reversing the test order after 1 second delay</p><figure class="highlight js"><figcaption><span>reorder-async.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Runner = <span class="built_in">require</span>(<span class="string">'mocha/lib/runner'</span>)</span><br><span class="line"><span class="keyword">const</span> originalRun = Runner.prototype.run</span><br><span class="line">Runner.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.suite.tests.reverse()</span><br><span class="line">    originalRun.call(<span class="keyword">this</span>, done)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Runs the same way, except for 1 second pause before running the tests.</p><p>We can even ask the user what test to run. Here is a CLI script that asks the user using the <a href="https://github.com/enquirer/enquirer" target="_blank" rel="noopener">enquirer</a> library.</p><figure class="highlight js"><figcaption><span>select.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Select &#125; = <span class="built_in">require</span>(<span class="string">'enquirer'</span>)</span><br><span class="line"><span class="keyword">const</span> Runner = <span class="built_in">require</span>(<span class="string">'mocha/lib/runner'</span>)</span><br><span class="line"><span class="keyword">const</span> originalRun = Runner.prototype.run</span><br><span class="line">Runner.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> prompt = <span class="keyword">new</span> Select(&#123;</span><br><span class="line">    name: <span class="string">'run test'</span>,</span><br><span class="line">    message: <span class="string">'Which test should I run'</span>,</span><br><span class="line">    choices: <span class="keyword">this</span>.suite.tests.map(<span class="function"><span class="params">t</span> =&gt;</span> t.title)</span><br><span class="line">  &#125;)</span><br><span class="line">  prompt.run().then(<span class="function"><span class="params">answer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.suite.tests = <span class="keyword">this</span>.suite.tests.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.title === answer)</span><br><span class="line">    originalRun.call(<span class="keyword">this</span>, done)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And here is the hook in action</p><p><img src="/blog/images/select-test.gif" alt="Select test to run"></p><p>Just remember - in the real world situation, you need to look through each suite of tests to modify them, and probably consider the interplay between filtering tests and exclusive / skipped tests. For example, if there is an exclusive test with <code>it.only</code>, you probably do not want to run all the tests, right?!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you have &lt;a href=&quot;https://mochajs.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mocha&lt;/a&gt; unit tests, like these ones&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>Detect page reload from Cypress test</title>
    <link href="https://glebbahmutov.com/blog/detect-page-reload/"/>
    <id>https://glebbahmutov.com/blog/detect-page-reload/</id>
    <published>2019-08-29T04:00:00.000Z</published>
    <updated>2019-08-29T14:20:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Cypress Test Runner has built-in <a href="https://on.cypress.io/retry-ability" target="_blank" rel="noopener">retry-ability</a> that is so sweet. Instead of hard-coding waits into your tests, all you need is figure out how to query something and how to follow with an assertion. The test will keep querying until the assertion passes.</p><p>Do you need to detect when a new property gets added to an object? Wrap the object and assert that the new property is preset.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// an object without a property</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;&#125;</span><br><span class="line"><span class="comment">// property "id" gets added after a delay</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  o.id = <span class="string">'abc123'</span></span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"><span class="comment">// detects when property "id" get added to the object "o"</span></span><br><span class="line">cy.wrap(o).should(<span class="string">'have.property'</span>, <span class="string">'id'</span>)</span><br></pre></td></tr></table></figure><p>Notice how the test continues after 500ms - when the property gets added and assertion <code>should(&#39;have.property&#39;, &#39;id&#39;)</code> finally passes.</p><p><img src="/blog/images/detect-page-reload/have-property.gif" alt="Should have property test passes"></p><p>What if you want to detect when the property has a specific value and is not just present on an object? Sure, just add the value you expect to see to the assertion.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// an object with an id</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  id: <span class="string">'initial'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// set "o.id" after delay</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  o.id = <span class="string">'abc123'</span></span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"><span class="comment">// detects property "o.id" has specific value</span></span><br><span class="line">cy.wrap(o).should(<span class="string">'have.property'</span>, <span class="string">'id'</span>, <span class="string">'abc123'</span>)</span><br></pre></td></tr></table></figure><p>Notice in the video below how the wrapped object shows &quot;{id: initial}&quot; in the assertion and then switches to &quot;{id: abc123}&quot; - because the object is &quot;live&quot; - Cypress re-evaluates the assertion over and over until it passes or times out.</p><p><img src="/blog/images/detect-page-reload/have-property-value.gif" alt="Should have property with give value test"></p><p>What about adding and deleting a property on the <code>window</code> object? Let&#39;s do this! Let&#39;s add a property and delete property.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// asynchronously add and delete a property</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.customProp = <span class="string">'here'</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">delete</span> <span class="built_in">window</span>.customProp</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">cy.window().should(<span class="string">'have.property'</span>, <span class="string">'customProp'</span>)</span><br><span class="line">cy.window().should(<span class="string">'not.have.property'</span>, <span class="string">'customProp'</span>)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/detect-page-reload/add-delete.gif" alt="Property added and deleted"></p><p>Notice in the above example that we have to use 2 <code>cy.window()</code> commands, with a single assertion each. You cannot attach both assertions to a single <code>cy.window()</code>. To understand why, notice what the Command Log shows. So here is the test with single command and 2 assertions:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.window()</span><br><span class="line">  .should(<span class="string">'have.property'</span>, <span class="string">'customProp'</span>)</span><br><span class="line">  .should(<span class="string">'not.have.property'</span>, <span class="string">'customProp'</span>)</span><br></pre></td></tr></table></figure><p>The test finishes suspiciously quickly - in just 1 second, while the asynchronous code executes in 2 seconds. So we know something is wrong, and look at the assertions; it gives you a clue.</p><p><img src="/blog/images/detect-page-reload/two-assertions.png" alt="Command log shows the problem"></p><p>The second assertion tries to assert that a string &quot;here&quot; does not have property &quot;customProp&quot;. Of course it does not, so it immediately passes, and the test completes.</p><p>Assertion <code>should(&#39;have.property&#39;)</code> is one of those few assertions that <em>change the subject</em>. In essence, it asserts that <code>window</code> has property <code>customProp</code> and then yields <code>window.customProp</code> to the next assertion, fooling you into false confidence.</p><p>The solution is to grab the <code>window</code> again and run the second assertion on it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.window().should(<span class="string">'have.property'</span>, <span class="string">'customProp'</span>)</span><br><span class="line">cy.window().should(<span class="string">'not.have.property'</span>, <span class="string">'customProp'</span>)</span><br></pre></td></tr></table></figure><p>So how does this relate to <a href="https://github.com/cypress-io/cypress/issues/1805" target="_blank" rel="noopener">detecting when the page reloads</a>? If there is no other external effect after reloading the page: no url change, no DOM change, etc, then you should property assertions. Here is an example page that reloads in response to a click</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>Click to reload<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'clicked'</span>)</span></span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'reloading page after delay'</span>)</span></span><br><span class="line"><span class="undefined">        location.reload()</span></span><br><span class="line"><span class="undefined">      &#125;, 2000)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Here is my test - and this detects when the page reloads just fine.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'reloads'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>)</span><br><span class="line">  <span class="comment">// mark our window object to "know" when it gets reloaded</span></span><br><span class="line">  cy.window().then(<span class="function"><span class="params">w</span> =&gt;</span> w.beforeReload = <span class="literal">true</span>)</span><br><span class="line">  <span class="comment">// initially the new property is there</span></span><br><span class="line">  cy.window().should(<span class="string">'have.prop'</span>, <span class="string">'beforeReload'</span>, <span class="literal">true</span>)</span><br><span class="line">  cy.get(<span class="string">'#button'</span>).click()</span><br><span class="line">  <span class="comment">// after reload the property should be gone</span></span><br><span class="line">  cy.window().should(<span class="string">'not.have.prop'</span>, <span class="string">'beforeReload'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/detect-page-reload/reload.gif" alt="Using custom property to detect page reload"></p><h2><span id="see-also">See also</span></h2><ul><li>Cypress <a href="https://on.cypress.io/retry-ability" target="_blank" rel="noopener">retry-ability guide</a></li><li>Cypress <a href="https://on.cypress.io/assertions" target="_blank" rel="noopener">assertions page</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cypress Test Runner has built-in &lt;a href=&quot;https://on.cypress.io/retry-ability&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;retry-ability&lt;/a&gt; that is s
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Climate Emergency</title>
    <link href="https://glebbahmutov.com/blog/climate-emergency/"/>
    <id>https://glebbahmutov.com/blog/climate-emergency/</id>
    <published>2019-08-17T04:00:00.000Z</published>
    <updated>2019-10-22T00:41:18.000Z</updated>
    
    <content type="html"><![CDATA[<iframe src="//slides.com/bahmutov/global-extinction/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe><h2><span id="information">Information</span></h2><ul><li>read <a href="https://lizkeogh.com/2019/07/02/off-the-charts/" target="_blank" rel="noopener">https://lizkeogh.com/2019/07/02/off-the-charts/</a></li><li>sign up for <a href="https://www.nytimes.com/newsletters/climate-change" target="_blank" rel="noopener">https://www.nytimes.com/newsletters/climate-change</a></li><li>why US bears responsibility for huge part of greenhouse emissions <a href="https://www.vox.com/energy-and-environment/2019/4/24/18512804/climate-change-united-states-china-emissions" target="_blank" rel="noopener">https://www.vox.com/energy-and-environment/2019/4/24/18512804/climate-change-united-states-china-emissions</a></li><li>excellent overview of problems and solutions at <a href="http://www.ecological-emergency.org/" target="_blank" rel="noopener">http://www.ecological-emergency.org/</a></li></ul><h3><span id="email-newsletters">Email newsletters</span></h3><p>With latest (grim) news, and sometimes positive updates</p><ul><li><a href="https://heated.world/subscribe" target="_blank" rel="noopener">Heated</a></li><li><a href="https://www.nytimes.com/newsletters/climate-change" target="_blank" rel="noopener">NYTimes Climate Fwd:</a></li><li><a href="https://cleantechnica.com/" target="_blank" rel="noopener">Clean Technica</a></li><li><a href="https://climate-xchange.org/newsletter/" target="_blank" rel="noopener">Climate Xchange</a></li></ul><h3><span id="follow">Follow</span></h3><ul><li><a href="https://twitter.com/billmckibben" target="_blank" rel="noopener">@billmckibben</a></li><li><a href="https://twitter.com/350" target="_blank" rel="noopener">@350</a></li><li><a href="https://twitter.com/citizensclimate" target="_blank" rel="noopener">@citizensclimate</a></li><li><a href="https://twitter.com/urgenceclimatiq" target="_blank" rel="noopener">@urgenceclimatiq</a></li></ul><h2><span id="hope">Hope</span></h2><ul><li><a href="https://www.drawdown.org/" target="_blank" rel="noopener">Project Drawdown</a> is the world’s leading resource for climate solutions.</li><li><a href="https://www.macleans.ca/news/canada/yes-climate-change-can-be-beaten-by-2050-heres-how/" target="_blank" rel="noopener">https://www.macleans.ca/news/canada/yes-climate-change-can-be-beaten-by-2050-heres-how/</a></li></ul><h2><span id="personal">Personal</span></h2><p>Here is what I personally have done. This is something you should do too, and tell <strong>ALL</strong> your friends, relatives, coworkers and neighbors.</p><ul><li><a href="https://phys.org/news/2017-07-effective-individual-tackle-climate-discussed.html" target="_blank" rel="noopener">Most effective ways to tackle climate</a><ol><li>have fewer children</li><li>live car-free</li><li>skip flights, use trains</li><li>do not eat meat</li></ol></li><li><a href="https://www.goclimateneutral.org/" target="_blank" rel="noopener">Go Climate Neutral</a> - signed up for 2 people, $18 per month to offset family</li><li>switched to solar electricity for my home via <a href="https://clearwaycommunitysolar.com" target="_blank" rel="noopener">Clearway Community Solar</a></li></ul><h2><span id="organizations">Organizations</span></h2><ul><li><a href="https://citizensclimatelobby.org" target="_blank" rel="noopener">Citizens’ Climate Lobby</a> tries to put price on carbon in US, which is extremely important step to let green technologies compete in a fair way. Economists <a href="https://www.econstatement.org" target="_blank" rel="noopener">agree</a>.</li><li><a href="https://rebellion.earth/" target="_blank" rel="noopener">Extinction Rebellion</a> and <a href="https://globalclimatestrike.net" target="_blank" rel="noopener">Global climate strike</a></li></ul><h2><span id="companies">Companies</span></h2><ul><li><a href="https://stripe.com/au/blog/negative-emissions-commitment" target="_blank" rel="noopener">Stripe negative emissions commitment</a></li></ul><h2><span id="links">Links</span></h2><ul><li><a href="https://endcoal.org/tracker/" target="_blank" rel="noopener">Global Coal Plant Tracker</a> and <a href="https://www.electricitymap.org/" target="_blank" rel="noopener">Electricity map</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;//slides.com/bahmutov/global-extinction/embed&quot; width=&quot;576&quot; height=&quot;420&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; webkitallowfullscreen mo
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/tags/climate/"/>
    
  </entry>
  
  <entry>
    <title>Ariel Rider M-class</title>
    <link href="https://glebbahmutov.com/blog/ariel-rider-ebike/"/>
    <id>https://glebbahmutov.com/blog/ariel-rider-ebike/</id>
    <published>2019-08-12T04:00:00.000Z</published>
    <updated>2019-08-13T01:19:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I have decided to cut down on small trips by car. I am already using public transportation to go to work, but little trips to get some coffee or a beer run required a car.</p><p>I love riding bicycles, yet riding one in the summer is a sweaty affair. Luckily, I had a chance to try riding an e-bike - and it is a completely different experience. Even on a hot day, the bike does most of the work, effortlessly carrying you along the road. After trying several different models, I have decided to purchase a small e-bike, preferably a foldable one. This review <a href="https://ebikereviewer.com/index.php/2019/01/05/top-electric-folding-bikes-and-small-electric-bikes-of-2019/" target="_blank" rel="noopener">&quot;Top Electric Folding Bikes and Small Electric Bikes of 2019&quot;</a> brought <a href="https://arielrider.com/products/m-class-urban-electric-commuter-bike-mid-drive" target="_blank" rel="noopener">Arial Rider M-Class</a> to my attention. It is only sold online by a company in California, thus I have not seen this bike in the stores. It has many advantages over other small e-bikes:</p><ul><li>(relatively) low price at $1650. Other small bikes are usually a lot more expensive</li><li>powerful motor and large battery. I easily cruise at 20-23 miles per hour</li><li>disk brakes and high quality parts</li></ul><p>I have ordered the bike, trusting the online reviews. Assembly took about 1.5 hours, but if I had to do it again, it would be probably 20 minutes tops.</p><p><img src="/blog/images/bike/ariel-rider.jpg" alt="Ariel Rider M-class"></p><p>The Arial Rider is an excellent bicycle, with super comfortable sitting position. I am 6 foot 3 inches (193cm) and I feel super fine on it, no back pain. The small wheels are wide and stable, and the bike is very maneuverable. Overall I am extremely happy with this purchase - I feel like I am on vacation riding around town. Especially in Cambridge traffic it gets me to my destination in less than half the time it takes to drive a car. For example from my home to my co-working space it takes exactly 10 minutes by bike, while a car ride would usually take 20 minutes (plus parking hunt).</p><p>The only downside - it is a small bike, but not a foldable one. But you have to compromise sometimes.</p><p><strong>More info:</strong> watch <a href="https://www.youtube.com/watch?v=WbZZo0QNdVQ" target="_blank" rel="noopener">this video review of the bike</a></p><p><strong>PS:</strong> the Ariel Co is run by two brothers, and they have answered all my questions by email very quickly and professionally, 100% satisfied customer.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I have decided to cut down on small trips by car. I am already using public transportation to go to work, but little trips to ge
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
  </entry>
  
  <entry>
    <title>How to write end-to-end test using app and api actions</title>
    <link href="https://glebbahmutov.com/blog/realworld-app-action/"/>
    <id>https://glebbahmutov.com/blog/realworld-app-action/</id>
    <published>2019-08-02T02:00:00.000Z</published>
    <updated>2019-08-02T13:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> the source code for this blog post is in repo <a href="https://github.com/cypress-io/cypress-example-realworld" target="_blank" rel="noopener">cypress-io/cypress-example-realworld</a> in the pull request <a href="https://github.com/cypress-io/cypress-example-realworld/pull/55/files" target="_blank" rel="noopener">#55</a>.</p><!-- toc --><ul><li><a href="#first-test">First test</a></li><li><a href="#second-test">Second test</a></li><li><a href="#page-object">Page object</a></li><li><a href="#app-action">App action</a></li><li><a href="#api-action">Api action</a></li></ul><!-- tocstop --><p>End-to-end browser tests do not have to go every time through the DOM interface to exercise the web application. In fact, doing so would make the end-to-end tests terribly slow and inefficient. In this post I will show a concrete example that bypasses the HTML interface for all the but the first test, yet keeps covering the same amount of code (measured by collecting <a href="https://on.cypress.io/code-coverage" target="_blank" rel="noopener">end-to-end code coverage</a>), and runs much much faster.</p><h2><span id="first-test">First test</span></h2><p>Our target application is a clone of the <a href="https://github.com/gothinkster/realworld" target="_blank" rel="noopener">Conduit blog web application</a>, and we want to confirm that we can write a new article. Using <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress Test Runner</a> we can write our first &quot;writes a post&quot; test.</p><figure class="highlight js"><figcaption><span>new-post-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'New post'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.task(<span class="string">'cleanDatabase'</span>)</span><br><span class="line">    cy.registerUserIfNeeded()</span><br><span class="line">    cy.login()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'writes a post'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// I have added "data-cy" attributes</span></span><br><span class="line">    <span class="comment">// following Cypress best practices</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/best-practices#Selecting-Elements</span></span><br><span class="line">    cy.get(<span class="string">'[data-cy=new-post]'</span>).click()</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'[data-cy=title]'</span>).type(<span class="string">'my title'</span>)</span><br><span class="line">    cy.get(<span class="string">'[data-cy=about]'</span>).type(<span class="string">'about X'</span>)</span><br><span class="line">    cy.get(<span class="string">'[data-cy=article]'</span>).type(<span class="string">'this post is **important**.'</span>)</span><br><span class="line">    cy.get(<span class="string">'[data-cy=tags]'</span>).type(<span class="string">'test&#123;enter&#125;'</span>)</span><br><span class="line">    cy.get(<span class="string">'[data-cy=publish]'</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// changed url means the post was successfully created</span></span><br><span class="line">    cy.location(<span class="string">'pathname'</span>).should(<span class="string">'equal'</span>, <span class="string">'/article/my-title'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes</p><p><img src="/blog/images/realworld/new-post.gif" alt="Passing Cypress test that writes a post"></p><p>The above test is already pretty solid:</p><ul><li>the initial state is set using <code>beforeEach</code> callback, ensuring the test starts every time from a clean slate</li><li>the test uses <code>data-cy</code> attributes to find elements following <a href="https://on.cypress.io/best-practices#Selecting-Elements" target="_blank" rel="noopener">Best Practices</a></li></ul><p>Because we can measure <a href="https://cypress.slides.com/cypress-io/complete-code-coverage-with-cypress/" target="_blank" rel="noopener">code coverage from Cypress tests</a>, just by running this single test we get 54.2% of all front-end code statements covered.</p><p><img src="/blog/images/realworld/coverage.png" alt="New post test covers a lot of front-end code"></p><h2><span id="second-test">Second test</span></h2><p>Great, writing a new post works. Let&#39;s see if we can comment on a post. Hmm, to add a comment we need a blog post. We can copy the above test and just add a few additional Cypress commands to add a comment.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'writes a post and comments on it'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'[data-cy=new-post]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'[data-cy=title]'</span>).type(<span class="string">'my title'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=about]'</span>).type(<span class="string">'about X'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=article]'</span>).type(<span class="string">'this post is **important**.'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=tags]'</span>).type(<span class="string">'test&#123;enter&#125;'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=publish]'</span>).click()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// changed url means the post was successfully created</span></span><br><span class="line">  cy.location(<span class="string">'pathname'</span>).should(<span class="string">'equal'</span>, <span class="string">'/article/my-title'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// comment on the post</span></span><br><span class="line">  cy.get(<span class="string">'[data-cy=comment-text]'</span>).type(<span class="string">'great post 👍'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=post-comment]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'[data-cy=comment]'</span>, <span class="string">'great post 👍'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs creating a new blog post and then commenting on it.</p><p><img src="/blog/images/realworld/add-comment.gif" alt="Writing a post and commenting on it"></p><p>After this test finishes, the total code coverage increases by 3%</p><p><img src="/blog/images/realworld/add-comment.png" alt="Code coverage after the above test"></p><p>We can see the new lines covered in the &quot;Article&quot; reducer, the &quot;ADD_COMMENT&quot; action has been covered by the new commands.</p><p><img src="/blog/images/realworld/article-reducer-with-add-comment.png" alt="Additional line covered by the test"></p><p>Nice.</p><h2><span id="page-object">Page object</span></h2><p>Yet, there is a problem. The second test &quot;writes a post and comments on it&quot; is exactly 70% line for line matching the first test &quot;writes a post&quot;. We are creating the post by clicking and typing on the page - repeating <em>exactly the same page actions</em> as the first test. What have we learned from about 2 seconds it takes to type the new post (just like a real user would type character by character), that we don&#39;t know already from the first test?</p><p>Nothing.</p><p>So to remove the duplicate lines, people write Page Objects, a wrapper around the HTML and the elements of the a particular page. We avoid the code duplication by having our tests call into the Page Object wrapper. In our case, the test would be</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'writes a post (via page object) and comments on it'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// page object encapsulating code for writing a post</span></span><br><span class="line">  <span class="comment">// by executing page commands = DOM actions</span></span><br><span class="line">  <span class="keyword">const</span> editor = &#123;</span><br><span class="line">    writeArticle () &#123;</span><br><span class="line">      cy.get(<span class="string">'[data-cy=new-post]'</span>).click()</span><br><span class="line"></span><br><span class="line">      cy.get(<span class="string">'[data-cy=title]'</span>).type(<span class="string">'my title'</span>)</span><br><span class="line">      cy.get(<span class="string">'[data-cy=about]'</span>).type(<span class="string">'about X'</span>)</span><br><span class="line">      cy.get(<span class="string">'[data-cy=article]'</span>).type(<span class="string">'this post is **important**.'</span>)</span><br><span class="line">      cy.get(<span class="string">'[data-cy=tags]'</span>).type(<span class="string">'test&#123;enter&#125;'</span>)</span><br><span class="line">      cy.get(<span class="string">'[data-cy=publish]'</span>).click()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// changed url means the post was successfully created</span></span><br><span class="line">      cy.location(<span class="string">'pathname'</span>).should(<span class="string">'equal'</span>, <span class="string">'/article/my-title'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use "Editor" page wrapper to write a new post</span></span><br><span class="line">  editor.writeArticle()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// comment on the post</span></span><br><span class="line">  cy.get(<span class="string">'[data-cy=comment-text]'</span>).type(<span class="string">'great post 👍'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=post-comment]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'[data-cy=comment]'</span>, <span class="string">'great post 👍'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test works, and removes code duplication. Every time you need an article to test commenting on it, or to test how an article can be deleted, or how a user can like it - every test can just call <code>editor.writeArticle()</code> and be done.</p><h2><span id="app-action">App action</span></h2><p>Let&#39;s see why the Page Object is less than ideal.</p><ul><li>The commands going through the DOM are slow. We will see how to avoid it later.</li><li>Opening the editor and typing into the input boxes again and again from <em>every</em> test does not help us test better, because it is just redundant commands that do the same thing over and over.</li><li>The Page Object is an extra layer of code that does not benefit the users and is built on top of the HTML, and can be only tested at runtime without any static tools help</li></ul><p>Once we have &quot;writes a post&quot; test that goes through the DOM to confirm that a user can write a new article, there is no point doing it again. Instead we can directly create an article by accessing the underlying application code and calling its methods - I call this approach &quot;app actions&quot;, and argue in the blog post <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/" target="_blank" rel="noopener">Stop using Page Objects and Start using App Actions</a> that this approach saves you time and removes an unnecessary level of code sitting on top of the HTML. And this is not about code duplication - yes, you could factor out writing the post into a single reusable function (this would be a Page method). The point is that we want to avoid going through the DOM completely to perform an action that we have already tested!</p><p>In practice, this means we need to access the underlying web application to create the post somehow. This is how we do it.</p><p>First, study the application code to see how the UI components trigger actions. In our case the <code>Editor.js</code> component submits an article via an &quot;agent&quot; object reference.</p><figure class="highlight js"><figcaption><span>src/components/Editor.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> agent <span class="keyword">from</span> <span class="string">'../agent'</span></span><br><span class="line"><span class="comment">// Editor component</span></span><br><span class="line"><span class="keyword">this</span>.submitForm = <span class="function"><span class="params">ev</span> =&gt;</span> &#123;</span><br><span class="line">  ev.preventDefault()</span><br><span class="line">  <span class="keyword">const</span> article = &#123;</span><br><span class="line">    title: <span class="keyword">this</span>.props.title,</span><br><span class="line">    description: <span class="keyword">this</span>.props.description,</span><br><span class="line">    body: <span class="keyword">this</span>.props.body,</span><br><span class="line">    tagList: <span class="keyword">this</span>.props.tagList</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> promise = agent.Articles.create(article)</span><br><span class="line">  <span class="keyword">this</span>.props.onSubmit(promise)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ok, so if we could call <code>agent.Articles.create</code> method directly from our Cypress test, we could create an article almost instantly. Let&#39;s pass this <code>agent</code> reference from the application to the test via <code>window</code> object.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> agent <span class="keyword">from</span> <span class="string">'./agent'</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">  <span class="built_in">window</span>.agent = agent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test can grab the <code>window</code> object, then its <code>agent</code> property and call the application action.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'writes a post (via app action) and comments on it'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> article = &#123;</span><br><span class="line">    title: <span class="string">'my title'</span>,</span><br><span class="line">    description: <span class="string">'about X'</span>,</span><br><span class="line">    body: <span class="string">'this post is **important**.'</span>,</span><br><span class="line">    tagList: [<span class="string">'test'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  cy.window().its(<span class="string">'agent.Articles'</span>)</span><br><span class="line">    .invoke(<span class="string">'create'</span>, article) <span class="comment">// resolves with new article object</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I can also see by inspecting the code that the Editor executes the following code after the agent submits the article</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> ARTICLE_SUBMITTED:</span><br><span class="line">  <span class="keyword">const</span> redirectUrl = <span class="string">`/article/<span class="subst">$&#123;action.payload.article.slug&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...state, <span class="attr">redirectTo</span>: redirectUrl &#125;;</span><br></pre></td></tr></table></figure><p>Ok, we can do the same thing - we can use the result returned by the agent to get the new article&#39;s slug and redirect to the article url. Thus the full test should redirect to the article url like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.window().its(<span class="string">'agent.Articles'</span>)</span><br><span class="line">  .invoke(<span class="string">'create'</span>, article) <span class="comment">// resolves with new article object</span></span><br><span class="line">  .its(<span class="string">'article.slug'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">slug</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">`/article/<span class="subst">$&#123;slug&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// comment on the post</span></span><br><span class="line">cy.get(<span class="string">'[data-cy=comment-text]'</span>).type(<span class="string">'great post 👍'</span>)</span><br><span class="line">cy.get(<span class="string">'[data-cy=post-comment]'</span>).click()</span><br><span class="line"></span><br><span class="line">cy.contains(<span class="string">'[data-cy=comment]'</span>, <span class="string">'great post 👍'</span>).should(<span class="string">'be.visible'</span>)</span><br></pre></td></tr></table></figure><p>The test runs and passes - creating the new post instantly.</p><p><img src="/blog/images/realworld/app-action.png" alt="Creates new post by calling app code"></p><p>If we run both tests &quot;writes a post&quot; and &quot;writes a post (via app action) and comments on it&quot; togher - we get exactly the same code coverage percentage 57.3% - because we literally covered the same statements as before - we just did not cover some of the twice.</p><h2><span id="api-action">Api action</span></h2><p>When we bypass the DOM to set our state (we need an article) before testing a feature (like adding a new comment), we do not even have to use the application code. By studying the Network tab and the application code we can see the HTTP POST request that happens when a new article is sent to the server.</p><p><img src="/blog/images/realworld/post-article.png" alt="POST article XHR call"></p><p>Super, we can execute the same call ourselves. Here is the custom command (for reusability) and the test</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(<span class="string">'postArticle'</span>, fields =&gt; &#123;</span><br><span class="line">  checkArticle(fields)</span><br><span class="line">  <span class="keyword">const</span> jwt = localStorage.getItem(<span class="string">'jwt'</span>)</span><br><span class="line">  expect(jwt, <span class="string">'jwt token'</span>).to.be.a(<span class="string">'string'</span>)</span><br><span class="line"></span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;apiUrl&#125;</span>/api/articles`</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      article: fields</span><br><span class="line">    &#125;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      authorization: <span class="string">`Token <span class="subst">$&#123;jwt&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'writes a post (via API) and comments on it'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> article = &#123;</span><br><span class="line">    title: <span class="string">'my title'</span>,</span><br><span class="line">    description: <span class="string">'about X'</span>,</span><br><span class="line">    body: <span class="string">'this post is **important**.'</span>,</span><br><span class="line">    tagList: [<span class="string">'test'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  cy.postArticle(article)</span><br><span class="line">    .its(<span class="string">'body.article.slug'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">slug</span> =&gt;</span> &#123;</span><br><span class="line">      cy.visit(<span class="string">`/article/<span class="subst">$&#123;slug&#125;</span>`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// comment on the post</span></span><br><span class="line">  cy.get(<span class="string">'[data-cy=comment-text]'</span>).type(<span class="string">'great post 👍'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=post-comment]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'[data-cy=comment]'</span>, <span class="string">'great post 👍'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Super, the test passes, and we have a reusable custom command <code>cy.postArticle</code> we can use any time we need an article to comment on, or to like, or to delete - thus all our end-to-end tests can run fast, yet because we have already tested creating a new article, the code coverage stays complete.</p><p>For me, the rule of thumb is:</p><ul><li>when testing feature A, use the DOM just like a real user would.</li><li>when testing feature B, that needs something feature A does, bypass the DOM when achieving part A. Instead call the application code directly, just like the UI component that implements feature A would. This saves a lot of time, making your tests fly, yet does not diminish the test code coverage.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the source code for this blog post is in repo &lt;a href=&quot;https://github.com/cypress-io/cypress-example-realworld&quot; ta
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Black box API testing with server logs</title>
    <link href="https://glebbahmutov.com/blog/api-testing-with-sever-logs/"/>
    <id>https://glebbahmutov.com/blog/api-testing-with-sever-logs/</id>
    <published>2019-07-19T04:00:00.000Z</published>
    <updated>2019-07-19T14:03:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>In my previous blog post <a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/" target="_blank" rel="noopener">&quot;Add GUI to your E2E API tests&quot;</a> I have used <a href="https://on.cypress.io/request" target="_blank" rel="noopener"><code>cy.request</code></a> command to execute HTTP requests against a backend performing a black box API testing. In this blog post I will show a new custom command <code>cy.api</code> that can take such API testing to the next level. In addition to the new user interface for your API requests, if you capture all server logs using <a href="https://github.com/bahmutov/all-logs" target="_blank" rel="noopener">@bahmutov/all-logs</a>, then the API tests will capture those messages too, allowing you deep insight into what is happening on each API request.</p><!-- toc --><ul><li><a href="#the-api-testing-problem">The API testing problem</a></li><li><a href="#example-adding-numbers">Example - adding numbers</a></li><li><a href="#cy-api-plugin">cy-api plugin</a></li><li><a href="#multiple-tests">Multiple tests</a></li><li><a href="#multiple-api-calls-in-the-same-test">Multiple API calls in the same test</a></li><li><a href="#logs">Logs</a></li><li><a href="#using-logs-in-test">Using logs in test</a></li><li><a href="#concat-messages">Concat messages</a></li><li><a href="#conclusions">Conclusions</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="the-api-testing-problem">The API testing problem</span></h2><p>I have written A LOT of API tests, mostly against REST backends. For our <a href="https://www.cypress.io/dashboard" target="_blank" rel="noopener">Cypress Dashboard</a> REST API we have more than 1000 API tests ... so writing and debugging failing tests is a big part of my job. A typical test:</p><ul><li>sets the state using database model queries</li><li>then uses <a href="https://www.npmjs.com/package/supertest" target="_blank" rel="noopener">supertest</a> to call an HTTP endpoint</li><li>and checks the response</li></ul><p>Here is a typical simple <code>supertest</code> test case</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.get(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123; <span class="attr">name</span>: <span class="string">'john'</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// test code</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'supertest'</span>)</span><br><span class="line"><span class="comment">// notice that the test uses "app" reference</span></span><br><span class="line">request(app)</span><br><span class="line">  .get(<span class="string">'/user'</span>)</span><br><span class="line">  .expect(<span class="string">'Content-Type'</span>, /json/)</span><br><span class="line">  .expect(<span class="string">'Content-Length'</span>, <span class="string">'15'</span>)</span><br><span class="line">  .expect(<span class="number">200</span>)</span><br><span class="line">  .end(<span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The test runs against the server instance, but might as well test against an URL - to keep a better separation between the test context and the server.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test server running at localhost:5555</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'supertest'</span>)(<span class="string">'http://localhost:5555'</span>)</span><br><span class="line">it(<span class="string">'responds with json'</span>, () =&gt;</span><br><span class="line">  request</span><br><span class="line">    .post(<span class="string">'/users'</span>)</span><br><span class="line">    .send(&#123;<span class="attr">name</span>: <span class="string">'john'</span>&#125;)</span><br><span class="line">    .set(<span class="string">'Accept'</span>, <span class="string">'application/json'</span>)</span><br><span class="line">    .expect(<span class="string">'Content-Type'</span>, /json/)</span><br><span class="line">    .expect(<span class="number">200</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I call this type of testing &quot;black box&quot; testing because we treat the API as an unknown entity that only communicates through HTTP requests and responses. When doing realistic tests, we need to make several calls: setting data, updating it, checking it. For example, testing if the user can create a new article using API might take several requests:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'creates an article for a user'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> userId = <span class="keyword">await</span> request(<span class="string">'/users'</span>).post(...) <span class="comment">// create user</span></span><br><span class="line">  <span class="keyword">const</span> article = <span class="keyword">await</span> request(<span class="string">'/artices'</span>).post(&#123;</span><br><span class="line">    userId,</span><br><span class="line">    ... <span class="comment">// rest of the article fields</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// fetch all articles for the user to make sure</span></span><br><span class="line">  <span class="comment">// the new article has been correctly added</span></span><br><span class="line">  <span class="keyword">const</span> userArticles = <span class="keyword">await</span> request(<span class="string">'/articles?user='</span> + userId)</span><br><span class="line">  <span class="comment">// assert userArticles includes the new article</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>There is a lot of logic that the backend goes through in order to process those test requests. There is just a slight problem - if a test fails, it is hard to debug why. I have to re-start the server with verbose logs (sometimes enabled for a specific namespace to limit the sudden avalanche of messages) and re-run just this particular test, then scroll through a LOT of terminal output to understand the failure.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DEBUG=server:* npm run test</span><br><span class="line">... thousands of log lines ...</span><br></pre></td></tr></table></figure><p>This is slow and annoying. There must be a better way.</p><h2><span id="example-adding-numbers">Example - adding numbers</span></h2><p>My first example comes from the <a href="https://github.com/bahmutov/server-logs-example" target="_blank" rel="noopener">bahmutov/server-logs-example</a> repo. The server there responds to &quot;GET /&quot; requests with the sum of passed numbers. For example we can ask the server to add 2 and 3 together (I am using <a href="https://httpie.org/" target="_blank" rel="noopener">httpie</a> instead of <code>curl</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ http &apos;:7000/?a=2&amp;b=3&apos;</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Date: Tue, 16 Jul 2019 01:37:13 GMT</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>Let&#39;s write an end-to-end test for this server. I will use <a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">Cypress</a> Test Runner so I can have a GUI during testing. Here is the first test <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/integration/simple.js" target="_blank" rel="noopener">cypress/integration/simple.js</a> that uses <a href="https://on.cypress.io/request" target="_blank" rel="noopener"><code>cy.request</code></a> and verifies the <code>body</code> of the response object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://on.cypress.io/intelligent-code-completion</span></span><br><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'adds 2 + 3'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    url: <span class="string">'/'</span>,</span><br><span class="line">    qs: &#123;</span><br><span class="line">      a: <span class="number">2</span>,</span><br><span class="line">      b: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">'body'</span>)</span><br><span class="line">  .should(<span class="string">'equal'</span>, <span class="string">'5'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes - I can see the green assertion in the Command Log.</p><p><img src="/blog/images/cy-api/simple.png" alt="Simple API test passing"></p><p>Hmm, but what did we send to the server? The Command Log does not show it - if I want to see the query parameters, I need to open the browser Developer Tools and click on the <code>REQUEST</code> command - then the request object is dumped to the console and I can understand what happens during the test a little bit better.</p><p><img src="/blog/images/cy-api/request-object.png" alt="Request object in DevTools Console"></p><p>Ok, this is not exactly convenient:</p><ul><li>I need to keep the DevTools open</li><li>I need to click on each command to inspect it</li><li>During the headless <code>cypress run</code> the DevTools is not shown in the video, thus I won&#39;t be able to understand my tests by watching the video</li></ul><p>Meanwhile notice how the application frame stays completely blank - because we are not loading a website using <a href="https://on.cypress.io/visit" target="_blank" rel="noopener"><code>cy.visit</code></a> during our API test; we are only executing HTTP requests.</p><h2><span id="cy-api-plugin">cy-api plugin</span></h2><p>Let me introduce the <code>cy.api</code> command that comes from <a href="https://github.com/bahmutov/cy-api" target="_blank" rel="noopener">@bahmutov/cy-api</a> plugin for Cypress Test Runner. Install it as a dev dependency using your favorite NPM client:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @bahmutov/cy-api</span><br></pre></td></tr></table></figure><p>And load it from <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/support/index.js" target="_blank" rel="noopener">cypress/support/index.js</a> file</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@bahmutov/cy-api/support'</span></span><br></pre></td></tr></table></figure><p>Now in my Cypress test I can use a new command <code>cy-api</code> that takes exactly the same argument object as <code>cy.request</code>; here is <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/integration/cy-api-example.js" target="_blank" rel="noopener">cypress/integration/cy-api-example.js</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loads Cypress types + definition for custom "cy.api" command</span></span><br><span class="line"><span class="comment">/// &lt;reference types="@bahmutov/cy-api" /&gt;</span></span><br><span class="line">it(<span class="string">'adds 2 + 3 (cy.api)'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.api(&#123;</span><br><span class="line">    url: <span class="string">'/'</span>,</span><br><span class="line">    qs: &#123;</span><br><span class="line">      a: <span class="number">2</span>,</span><br><span class="line">      b: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">'body'</span>)</span><br><span class="line">  .should(<span class="string">'equal'</span>, <span class="string">'5'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When the <code>cy.api</code> command runs, it automatically renders the request and server response to the <em>empty application frame</em>.</p><p><img src="/blog/images/cy-api/cy-api-example.png" alt="The cy-api command shows the relevant information"></p><p>No longer you need to click on the request in the Command Log and have DevTools ready - the relevant information is right there on the screen at all times.</p><h2><span id="multiple-tests">Multiple tests</span></h2><p>You can also use multiple <code>cy.api</code> commands in the same test, giving each one a name. All requests and responses will be displayed in the frame, and the frame will automatically scroll to show the last command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'adds and subtracts'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/'</span>,</span><br><span class="line">      qs: &#123;</span><br><span class="line">        a: <span class="number">2</span>,</span><br><span class="line">        b: <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'2 + 3'</span></span><br><span class="line">  )</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .should(<span class="string">'equal'</span>, <span class="string">'5'</span>)</span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/'</span>,</span><br><span class="line">      qs: &#123;</span><br><span class="line">        a: <span class="number">2</span>,</span><br><span class="line">        b: <span class="number">-6</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'2 - 6'</span></span><br><span class="line">  )</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .should(<span class="string">'equal'</span>, <span class="string">'-4'</span>)</span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/'</span>,</span><br><span class="line">      qs: &#123;</span><br><span class="line">        a: <span class="number">-10</span>,</span><br><span class="line">        b: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'-10 + 0'</span></span><br><span class="line">  )</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .should(<span class="string">'equal'</span>, <span class="string">'-10'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/cy-api/multiple.png" alt="Multiple API requests"></p><p>Because the writing to the DOM happens in stages, hover over Command Log shows each part as it is added to the frame; time traveling debugger for your API requests!</p><p><img src="/blog/images/cy-api/hover-cy-api.gif" alt="Time travel over API requests"></p><h2><span id="multiple-api-calls-in-the-same-test">Multiple API calls in the same test</span></h2><p>From the test we can use results of the previous API call - either using <code>.then</code> closures (pyramid of doom, anyone?) or by storing results in the <a href="https://on.cypress.io/variables-and-aliases" target="_blank" rel="noopener">shared test context</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'adds 2 + 3 + 10'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// we can pass query parameters through url too</span></span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/?a=2&amp;b=3'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'first sum'</span></span><br><span class="line">  )</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .as(<span class="string">'first sum'</span>) <span class="comment">// save result in shared test context</span></span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      cy.api(</span><br><span class="line">        &#123;</span><br><span class="line">          url: <span class="string">'/'</span>,</span><br><span class="line">          qs: &#123;</span><br><span class="line">            <span class="comment">// because we use "function () &#123;...&#125;"</span></span><br><span class="line">            <span class="comment">// callback form, "this" refers to the</span></span><br><span class="line">            <span class="comment">// shared test context where we saved</span></span><br><span class="line">            <span class="comment">// the first sum using ".as('first sum')" command</span></span><br><span class="line">            <span class="comment">// https://on.cypress.io/as</span></span><br><span class="line">            a: <span class="keyword">this</span>[<span class="string">'first sum'</span>],</span><br><span class="line">            b: <span class="number">10</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'second sum'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/cy-api/two-calls.png" alt="Passing result of the first API call to the second API call"></p><h2><span id="logs">Logs</span></h2><p>Great, this makes the tests useful - yet there is nothing yet to simplify the debugging experience when a test fails. Let&#39;s look at that. If a test suddenly fails, it means something went wrong on the server. Our application server <a href="https://github.com/bahmutov/server-logs-example/blob/master/server/index.js" target="_blank" rel="noopener">server/index.js</a> logs the following messages while processing the requests:</p><figure class="highlight js"><figcaption><span>server/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// we will use console.log, util.debuglog and debug modules to log stuff</span></span><br><span class="line"><span class="keyword">const</span> verbose = <span class="built_in">require</span>(<span class="string">'util'</span>).debuglog(<span class="string">'verbose'</span>)</span><br><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'compute'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; pathname, query &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let's just log the basic request parameters</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'%s %s pathname %s'</span>, req.method, req.url, pathname)</span><br><span class="line">    <span class="comment">// and log the parsed query object in verbose mode</span></span><br><span class="line">    <span class="comment">// visible when NODE_DEBUG=verbose is set</span></span><br><span class="line">    verbose(<span class="string">'query is %o'</span>, query)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> a = <span class="built_in">parseFloat</span>(query.a)</span><br><span class="line">    <span class="keyword">const</span> b = <span class="built_in">parseFloat</span>(query.b)</span><br><span class="line">    <span class="keyword">const</span> sum = a + b</span><br><span class="line">    <span class="comment">// "debug" log only shows the computation if DEBUG=compute is set</span></span><br><span class="line">    debug(<span class="string">'%d + %d = %d'</span>, a, b, sum)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return result to the caller</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>By default, we are only logging the basic information; here I will be calling the server with <code>http &#39;:7000/?a=2&amp;b=3&#39;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node ./server</span><br><span class="line">listening on port 7000</span><br><span class="line">GET /?a=2&amp;b=3 pathname /</span><br></pre></td></tr></table></figure><p>If I want more information, for example to check how the query was parsed, I can enable the built-in <a href="https://nodejs.org/api/util.html#util_util_debuglog_section" target="_blank" rel="noopener">util.debuglog</a> logs.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_DEBUG=verbose node ./server</span><br><span class="line">listening on port 7000</span><br><span class="line">GET /?a=2&amp;b=3 pathname /</span><br><span class="line">VERBOSE 35756: query is &#123; a: &apos;2&apos;, b: &apos;3&apos; &#125;</span><br></pre></td></tr></table></figure><p><strong>Warning:</strong> the exact log messages from the <code>util.debuglog</code> module strongly depend on the Node version.</p><p>We can now see our query object (and process id 35756). Or we can see other debug messages by turning on the <a href="https://github.com/visionmedia/debug" target="_blank" rel="noopener">debug</a> module</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=compute node ./server</span><br><span class="line">listening on port 7000</span><br><span class="line">GET /?a=2&amp;b=3 pathname /</span><br><span class="line">  compute 2 + 3 = 5 +0ms</span><br></pre></td></tr></table></figure><p>Beautiful - what does this have to do with our API testing and <code>cy-api</code>? Well, using another module <a href="https://github.com/bahmutov/all-logs" target="_blank" rel="noopener">@bahmutov/all-logs</a> you can silently capture ALL logs from your server (even without turning them on) and then <code>cy.api</code> command will grab them during each request. Here is how to turn it on in your server.</p><ol><li>Instead of starting the server with <code>node ./server</code>, start it with <code>node -r @bahmutov/all-logs ./server</code>. This sets up the log interception.</li><li>Add HTTP middleware to your server that <code>cy.api</code> can call to retrieve and reset collected messages. For example, our server is a plain <code>http</code> server and we can do the following:</li></ol><figure class="highlight js"><figcaption><span>server/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logs = <span class="built_in">require</span>(<span class="string">'@bahmutov/all-logs/middleware/http'</span>)</span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (logs(req, res) === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// the HTTP request was for the server logs</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; pathname, query &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// the rest of the code</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>That is it. Let&#39;s look at our previous test with the <code>@bahmutov/all-logs</code> included. Wow, our Test Runner suddenly shows a lot more information!</p><p><img src="/blog/images/cy-api/two-calls-with-logs.png" alt="API tests with server logs"></p><p>The <code>cy.api</code> command fetches the intercepted logs from the server and shows them between the <code>Request</code> and <code>Response</code> sections. There are a lot of low level messages from Node itself, and in the future we plan to allow easy filtering by the log type (<code>console</code>, <code>util</code>, <code>debug</code>) and the namespace (in this case the namespaces were <code>HTTP</code>, <code>log</code> and <code>compute</code>). That is what those (currently non-functioning) checkboxes are for.</p><h2><span id="using-logs-in-test">Using logs in test</span></h2><p>The <code>cy.api</code> command yields the same object as <a href="https://on.cypress.io/request" target="_blank" rel="noopener">cy.request</a> does, plus the <code>messages</code> list with all server-side logs. Here is the same test as above, but with printing the <code>body</code> and <code>messages</code> properties from the yielded object:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// there was first cy.api</span></span><br><span class="line"><span class="comment">// and this is the second one</span></span><br><span class="line">cy.api(</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'/'</span>,</span><br><span class="line">    qs: &#123;</span><br><span class="line">      a: <span class="keyword">this</span>[<span class="string">'first sum'</span>],</span><br><span class="line">      b: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'second sum'</span></span><br><span class="line">).then(<span class="function">(<span class="params">&#123; body, messages &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'answer'</span>, body)</span><br><span class="line">  <span class="built_in">console</span>.table(messages)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/cy-api/print-logs.png" alt="Printed result and logs"></p><p>We can assert the result is what we are expecting, and that <code>debug compute</code> message records the correct parsed numbers. The <code>.then()</code> callback is below. I love writing BDD assertions that are readable!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function">(<span class="params">&#123; body, messages &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'answer'</span>, body)</span><br><span class="line">  <span class="built_in">console</span>.table(messages)</span><br><span class="line">  expect(body, <span class="string">'result'</span>).to.equal(<span class="string">'15'</span>) <span class="comment">// our api returns strings</span></span><br><span class="line">  <span class="comment">// use the Lodash "find" method to search by properties</span></span><br><span class="line">  <span class="keyword">const</span> computeLogMessage = Cypress._.find(messages, &#123;</span><br><span class="line">    type: <span class="string">'debug'</span>,</span><br><span class="line">    namespace: <span class="string">'compute'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  expect(computeLogMessage)</span><br><span class="line">    .to.be.an(<span class="string">'object'</span>)</span><br><span class="line">    .and.have.property(<span class="string">'message'</span>, <span class="string">'5 + 10 = 15'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/cy-api/log-check.png" alt="Asserting the result and the log message"></p><p>You might ask yourself - isn&#39;t this testing the implementation details? It is up to you to write tests that reach deeper into the server logic in order to test it from the from front-end. If you decide this approach ties the E2E tests too tightly to the implementation - don&#39;t check the logs from the tests, just have them in case the response value <code>15</code> is different from the expected one. But I would advise to set a policy on server-side logs that allows using the messages in tests. For example, you might have a <code>debug</code> namespace just for E2E tests that one CAN test against.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debugE2E = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'compute'</span>)</span><br><span class="line"><span class="comment">// messages via `debugE2E` are going to be asserted from the API E2E tests</span></span><br></pre></td></tr></table></figure><p>If you decide to allow some messages to be used from tests, we can easily verify the major &quot;checkpoints&quot; along the way using snapshots. For example, I will add the <a href="https://github.com/meinaart/cypress-plugin-snapshots" target="_blank" rel="noopener">meinaart/cypress-plugin-snapshots</a> plugin by following the instructions in that repo&#39;s README file. Now we can write a test and do snapshots with just API response and filtered backend messages. The full source code is in <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/integration/with-snapshots.js" target="_blank" rel="noopener">cypress/integration/with-snapshots.js</a> and below:</p><figure class="highlight js"><figcaption><span>cypress/integration/with-snapshots.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pickImportantMessages = <span class="function">(<span class="params">&#123; body, messages &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// only look at logs from DEBUG=compute namespace</span></span><br><span class="line">  <span class="keyword">const</span> computations = Cypress._.filter(messages, &#123;</span><br><span class="line">    type: <span class="string">'debug'</span>,</span><br><span class="line">    namespace: <span class="string">'compute'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    result: body,</span><br><span class="line">    backendMessages: Cypress._.map(computations, <span class="string">'message'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'performs expected computations'</span>, () =&gt; &#123;</span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/?a=2&amp;b=3'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'2 + 3'</span></span><br><span class="line">  )</span><br><span class="line">    .then(pickImportantMessages)</span><br><span class="line">    .toMatchSnapshot()</span><br><span class="line"></span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/?a=-1&amp;b=30'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'-1 + 30'</span></span><br><span class="line">  )</span><br><span class="line">    .then(pickImportantMessages)</span><br><span class="line">    .toMatchSnapshot()</span><br><span class="line"></span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/?a=+1&amp;b=+2'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'+1 + 2'</span></span><br><span class="line">  )</span><br><span class="line">    .then(pickImportantMessages)</span><br><span class="line">    .toMatchSnapshot()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The snapshots are saved on the first run, and I can inspect the saved values by clicking on the &quot;Snapshot&quot; command.</p><p><img src="/blog/images/cy-api/snapshots.png" alt="Individual snapshot value"></p><p>Imagine something has changed. For example, I have changed the input parameters for the second <code>cy.api</code> call. Instead of <code>-1 + 30</code> the test passes <code>30 - 1</code> now. Let&#39;s see how the snapshot shows the difference.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.api(</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'/?a=30&amp;b=-1'</span> <span class="comment">// instead of -1 + 30</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'30 - 1'</span></span><br><span class="line">)</span><br><span class="line">  .then(pickImportantMessages)</span><br><span class="line">  .toMatchSnapshot()</span><br></pre></td></tr></table></figure><p>Immediately the snapshot value is different from the value saved in the file <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/integration/__snapshots__/with-snapshots.js.snap" target="_blank" rel="noopener">cypress/integration/<strong>snapshots</strong>/with-snapshots.js.snap</a>. The test fails.</p><p><img src="/blog/images/cy-api/snapshot-error.png" alt="Snapshot error causes the test to fail"></p><p>Clicking on the &quot;Compare snapshot&quot; button brings up the difference viewer.</p><p><img src="/blog/images/cy-api/snapshot-diff.png" alt="Snapshot difference view"></p><p>The beautiful thing - if the new value is expected, you can simply click &quot;Update snapshot&quot; button and the new &quot;snap&quot; will be saved.</p><h2><span id="concat-messages">Concat messages</span></h2><p>The above test can be rewritten in shorter form, because all calls are independent of each other; we still need to execute them one by one to guarantee the same order.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'computes all given examples'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> list = []</span><br><span class="line">  <span class="keyword">const</span> addToList = list.push.bind(list)</span><br><span class="line">  ;[</span><br><span class="line">    <span class="comment">// all examples to compute</span></span><br><span class="line">    <span class="string">'/?a=2&amp;b=3'</span>,</span><br><span class="line">    <span class="string">'/?a=30&amp;b=-1'</span>,</span><br><span class="line">    <span class="string">'/?a=+1&amp;b=+2'</span></span><br><span class="line">  ].forEach(<span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">    cy.api(&#123; url &#125;)</span><br><span class="line">      .then(pickImportantMessages)</span><br><span class="line">      .then(addToList)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.wrap(list).toMatchSnapshot()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice how we compare the entire list at once at the very end.</p><p><img src="/blog/images/cy-api/single-list.png" alt="Single snapshot of all test messages and results"></p><p>The beauty of this combined snapshot is: if we change the backend logic - for example by taking an absolute value of the arguments before adding them - the snapshot shows precisely where the good log and the current one started diverging!</p><figure class="highlight js"><figcaption><span>server/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// added Math.abs on purpose to break the tests</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">Math</span>.abs(<span class="built_in">parseFloat</span>(query.a))</span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">Math</span>.abs(<span class="built_in">parseFloat</span>(query.b))</span><br><span class="line"><span class="keyword">const</span> sum = a + b</span><br><span class="line">debug(<span class="string">'%d + %d = %d'</span>, a, b, sum)</span><br></pre></td></tr></table></figure><p>The test fails - the snapshot does not match, and the difference in the message and in the result is obvious.</p><p><img src="/blog/images/cy-api/debug-error.png" alt="Debugging the test failure using logs"></p><p>But even better is finding the log message for that <code>cy.api</code> call, shown with green arrow - and immediately seeing the previous log message. The query argument <code>b</code> is <code>-1</code>, yet the parsed value is <code>1</code> - that points the finger at the argument conversion step. Perfect - the debugging cycle is short, just like I wanted.</p><h2><span id="conclusions">Conclusions</span></h2><p>Testing the web application means testing the code at different levels: you still need unit tests and end-to-end web application tests. But the middle of the stack - the HTTP API deserves to be tested as well, since it is the foundation for the web application. The plugin <a href="https://github.com/bahmutov/cy-api" target="_blank" rel="noopener">@bahmutov/cy-api</a> should help with API testing, and I hope the approach of capturing the detailed server-side logs helps when debugging a failing test.</p><p>Give <code>cy.api</code> a spin and open a <a href="https://github.com/bahmutov/cy-api/issues" target="_blank" rel="noopener">GitHub issue</a> if something does not work, or if you have an idea to make this type of testing better.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://github.com/bahmutov/cy-api" target="_blank" rel="noopener">@bahmutov/cy-api</a> plugin provides <code>cy.api</code> command</li><li><a href="https://github.com/bahmutov/all-logs" target="_blank" rel="noopener">@bahmutov/all-logs</a> captures all server-side logs</li><li><a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/" target="_blank" rel="noopener">&quot;Add GUI to your E2E API tests&quot;</a></li><li><a href="https://www.cypress.io/blog/2018/01/16/end-to-end-snapshot-testing/" target="_blank" rel="noopener">&quot;End-to-End Snapshot Testing&quot;</a> describes snapshot testing for web application testing</li><li><a href="../picking-snapshot-library/">&quot;Picking snapshot library&quot;</a></li><li><a href="https://github.com/meinaart/cypress-plugin-snapshots" target="_blank" rel="noopener">meinaart/cypress-plugin-snapshots</a> is the snapshot plugin I love using in Cypress</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In my previous blog post &lt;a href=&quot;https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Capture all the logs</title>
    <link href="https://glebbahmutov.com/blog/capture-all-the-logs/"/>
    <id>https://glebbahmutov.com/blog/capture-all-the-logs/</id>
    <published>2019-07-05T04:00:00.000Z</published>
    <updated>2019-07-17T12:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this blog post I will show how to intercept messages logged by a Node process using a pre-loaded module. You can find the source code for these examples in <a href="https://github.com/bahmutov/capture-logs-example" target="_blank" rel="noopener">bahmutov/capture-logs-example</a> repository.</p><h2><span id="capture-console-logs">Capture console logs</span></h2><p>Imagine you want to collect all strings logged from a Node program. You could proxy all <code>console.log</code> calls and store them until needed. Take an example Node program like this one in <a href="https://github.com/bahmutov/capture-logs-example/blob/master/index.js" target="_blank" rel="noopener">index.js</a>:</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'this is %s log message ✅'</span>, <span class="string">'console'</span>)</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'this is console %s ⚠️'</span>, <span class="string">'warn'</span>)</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'this is console error 🔥'</span>)</span><br></pre></td></tr></table></figure><p>When we run this program, all logs are written to their respective output streams. Note that values are substituted into placeholders like <code>%s -&gt; &quot;console&quot;</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">this is console log message ✅</span><br><span class="line">this is console warn ⚠️</span><br><span class="line">this is console error 🔥</span><br></pre></td></tr></table></figure><p>Note that <code>console.log</code> writes its messages to <code>STDOUT</code>, while <code>console.warn</code> and <code>console.error</code> write to <code>STDERR</code>. You can verify this by hiding <code>STDERR</code> stream via redirect.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># hide STDERR stream</span><br><span class="line">$ node . 2&gt; /dev/null</span><br><span class="line">this is console log message ✅</span><br><span class="line"># hide STDOUT stream</span><br><span class="line">$ node . 1&gt; /dev/null</span><br><span class="line">this is console warn ⚠️</span><br><span class="line">this is console error 🔥</span><br></pre></td></tr></table></figure><p>Great, now let&#39;s collect the messages by pre-loading a module that is going to proxy <code>console.*</code> methods. Here is the <a href="https://github.com/bahmutov/capture-logs-example/blob/master/log.js" target="_blank" rel="noopener">log.js</a> file:</p><figure class="highlight js"><figcaption><span>log.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ignore "console.table" and "console.dir" for now</span></span><br><span class="line"><span class="keyword">const</span> methodNames = [<span class="string">'log'</span>, <span class="string">'warn'</span>, <span class="string">'error'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// put all messages interleaved into single list</span></span><br><span class="line"><span class="comment">// so we can see how they all appeared</span></span><br><span class="line"><span class="comment">// each message should have "type" and "message"</span></span><br><span class="line"><span class="keyword">const</span> messages = []</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * put the original log methods into a global object</span></span><br><span class="line"><span class="comment"> * so we can do two things:</span></span><br><span class="line"><span class="comment"> *  1: restore the methods when needed</span></span><br><span class="line"><span class="comment"> *  2: print messages without going through proxied methods</span></span><br><span class="line"><span class="comment"> *      like "cnsl.log('my message')"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">global.cnsl = &#123;&#125;</span><br><span class="line"></span><br><span class="line">methodNames.forEach(<span class="function"><span class="params">methodName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> originalMethod = (global.cnsl[methodName] = <span class="built_in">console</span>[methodName])</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>[methodName] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// save the original message (formatted into a single string)</span></span><br><span class="line">    <span class="comment">// use "util.format" to perform string formatting if needed</span></span><br><span class="line">    <span class="keyword">const</span> params = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> message = params.length</span><br><span class="line">      ? util.format(<span class="built_in">arguments</span>[<span class="number">0</span>], ...params)</span><br><span class="line">      : <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">    messages.push(&#123;</span><br><span class="line">      type: methodName, <span class="comment">// "log", "warn", "error"</span></span><br><span class="line">      message</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call the original method like "console.log"</span></span><br><span class="line">    originalMethod.apply(<span class="built_in">console</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A method to restore the original console methods</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> restore = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(global.cnsl).forEach(<span class="function"><span class="params">methodName</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>[methodName] = global.cnsl[methodName]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">'beforeExit'</span>, () =&gt; &#123;</span><br><span class="line">  restore()</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'*** printing saved messages ***'</span>)</span><br><span class="line">  messages.forEach(<span class="function"><span class="params">m</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'%s: %s'</span>, m.type, m.message)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Each method like <code>console.log</code> is replaced with our function that keeps a copy of the formatted string and calls the original <code>log</code> method. We can now run our original program, but require the <code>./log.js</code> first; all logged strings will be collected and printed again at the end.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ node -r ./log .</span><br><span class="line"></span><br><span class="line">this is console log message ✅</span><br><span class="line">this is console warn ⚠️</span><br><span class="line">this is console error 🔥</span><br><span class="line">*** printing saved messages ***</span><br><span class="line">log: this is console log message ✅</span><br><span class="line">warn: this is console warn ⚠️</span><br><span class="line">error: this is console error 🔥</span><br></pre></td></tr></table></figure><h2><span id="capture-debug-logs">Capture <code>debug</code> logs</span></h2><p>I <a href="../good-logging/">love using</a> <a href="https://github.com/visionmedia/debug" target="_blank" rel="noopener"><code>debug</code></a> module to control my verbose logs. Just import the module and control if its messages are showing up in the terminal using an environment variable <code>DEBUG=some:name:space</code>. Here is a copy of the program but with additional logging statement. See <a href="https://github.com/bahmutov/capture-logs-example/blob/master/index-debug.js" target="_blank" rel="noopener">index-debug.js</a> file:</p><figure class="highlight js"><figcaption><span>index-debug.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'verbose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this is %s log message ✅'</span>, <span class="string">'console'</span>)</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'this is console %s ⚠️'</span>, <span class="string">'warn'</span>)</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'this is console error 🔥'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// only visible when you call "DEBUG=verbose node ./index-debug"</span></span><br><span class="line">debug(<span class="string">'this is verbose debug = %d'</span>, <span class="number">42</span>)</span><br></pre></td></tr></table></figure><p>If we run the program &quot;normally&quot; the <code>debug</code> calls are ignored. We need to enable &quot;verbose&quot; namespace to actually see them.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ node ./index-debug.js</span><br><span class="line">this is console log message ✅</span><br><span class="line">this is console warn ⚠️</span><br><span class="line">this is console error 🔥</span><br><span class="line"></span><br><span class="line">$ DEBUG=verbose node ./index-debug.js</span><br><span class="line">this is console log message ✅</span><br><span class="line">this is console warn ⚠️</span><br><span class="line">this is console error 🔥</span><br><span class="line">  verbose this is verbose debug = 42 +0ms</span><br></pre></td></tr></table></figure><p>Perfect - can we capture the log calls to the <code>debug</code> instances? Well, <code>debug</code> module writes directly into <code>process.stderr</code> stream bypassing <code>console.*</code> methods, thus our proxy is not going to work. Luckily, the <code>debug</code> module exposes its internals so we can easily proxy <em>its</em> methods. Bonus: we can log even the disabled <code>debug</code> namespaces!</p><p>Look at the implementation of <a href="https://github.com/bahmutov/capture-logs-example/blob/master/log-debug.js" target="_blank" rel="noopener">log-debug.js</a>. When a new debug log instance is created using <code>require(&#39;debug&#39;)(... namespace name ...)</code>, it is added to the list of debug instances. That list is an <code>Array</code> instance, and a new instance is pushed to the array using &quot;standard&quot; <code>debug.instances.push()</code>. Well, we can overwrite this method, just like we can overwrite pretty much everything in JavaScript. When we do this, we get access to <em>every</em> <code>debug</code> instance instantiated by the process. That&#39;s where we can insert out logic to capture debug log messages - even if the namespace is disabled!</p><figure class="highlight js"><figcaption><span>log-debug.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logDebugCalls</span> (<span class="params">messages</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// assume there is "debug" module, otherwise</span></span><br><span class="line">  <span class="comment">// do nothing (put try / catch around require)</span></span><br><span class="line">  <span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// All enabled debug instances by default use "debug.log" method</span></span><br><span class="line">  <span class="comment">// to actually write to process.stderr stream. Assume user code</span></span><br><span class="line">  <span class="comment">// does not change this, just save the message</span></span><br><span class="line">  <span class="keyword">const</span> debugLog = debug.log</span><br><span class="line">  debug.log = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    messages.push(&#123;</span><br><span class="line">      type: <span class="string">'debug'</span>,</span><br><span class="line">      message: util.format(...args)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// and call the original method to print it</span></span><br><span class="line">    debugLog.apply(debug, args)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// new instances are added using "debug.instances.push()"</span></span><br><span class="line">  <span class="comment">// so we can proxy this method</span></span><br><span class="line">  debug.instances.push = <span class="function"><span class="params">debugInstance</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.push.call(debug.instances, debugInstance)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (debugInstance.enabled) &#123;</span><br><span class="line">      <span class="comment">// ignore custom debugInstance.log method - we could</span></span><br><span class="line">      <span class="comment">// intercept that as well by using "setter" property</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if the debug instance is disabled, the common "debug.log"</span></span><br><span class="line">    <span class="comment">// method is NOT going to be called. We DO want to record the message though</span></span><br><span class="line">    <span class="comment">// to enable test debugging</span></span><br><span class="line">    debugInstance.enabled = <span class="literal">true</span></span><br><span class="line">    debugInstance.log = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">      messages.push(&#123;</span><br><span class="line">        type: <span class="string">'debug'</span>,</span><br><span class="line">        message: util.format(...args)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logDebugCalls</span><br></pre></td></tr></table></figure><p>The above file <code>log-debug.js</code> exports the <code>logDebugCalls</code> and we can call it from our <code>log.js</code> file passing the <code>messages</code> list. Thus the debug messages get inserted into the same list as the intercepted <code>console.log</code> messages, giving us the right order.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in log.js</span></span><br><span class="line"><span class="comment">// intercept "debug" module logging calls</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./log-debug'</span>)(messages)</span><br></pre></td></tr></table></figure><p>And there is the logging in action - first let&#39;s run with <code>DEBUG=verbose</code> enabled. The <code>debug</code> call shows up in the terminal AND is captured. Then we will run the process without <code>DEBUG</code> environment variable. The <code>debug</code> call is NOT in the normal terminal output, because the namespace is not enabled, yet it is still captured.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=verbose node -r ./log ./index-debug.js</span><br><span class="line">this is console log message ✅</span><br><span class="line">this is console warn ⚠️</span><br><span class="line">this is console error 🔥</span><br><span class="line">  verbose this is verbose debug = 42 +0ms</span><br><span class="line">*** printing saved messages ***</span><br><span class="line">log: this is console log message ✅</span><br><span class="line">warn: this is console warn ⚠️</span><br><span class="line">error: this is console error 🔥</span><br><span class="line">debug:   verbose this is verbose debug = 42 +0ms</span><br><span class="line"></span><br><span class="line">$ node -r ./log ./index-debug.js</span><br><span class="line">this is console log message ✅</span><br><span class="line">this is console warn ⚠️</span><br><span class="line">this is console error 🔥</span><br><span class="line">*** printing saved messages ***</span><br><span class="line">log: this is console log message ✅</span><br><span class="line">warn: this is console warn ⚠️</span><br><span class="line">error: this is console error 🔥</span><br><span class="line">debug:   verbose this is verbose debug = 42 +0ms</span><br></pre></td></tr></table></figure><p>Beautiful - we have all the logs we might need, yet the &quot;normal&quot; terminal output only shows top level messages. We are now free to do anything with the verbose logs. For example we could show all the logs ONLY if something goes wrong, avoiding double test runs like <a href="https://github.com/bahmutov/locha" target="_blank" rel="noopener">locha</a> does.</p><h2><span id="see-also">See also</span></h2><ul><li>I have released the log interception in <a href="https://github.com/bahmutov/all-logs" target="_blank" rel="noopener"><code>@bahmutov/all-logs</code></a> NPM module. It can collect all<ul><li><code>console.{log, warn, error}</code> messages</li><li>all messages via <code>debug</code> module</li><li>all messages via <code>util.debuglog</code> (see the update below)</li></ul></li><li><a href="../good-logging/">Good logging</a></li><li><a href="../oo-vs-fp-log-example/">OO vs FP console log example</a></li><li><a href="https://github.com/visionmedia/debug" target="_blank" rel="noopener"><code>debug</code></a> module</li><li>Source code for this blog post is in the <a href="https://github.com/bahmutov/capture-logs-example" target="_blank" rel="noopener">bahmutov/capture-logs-example</a> repository.</li></ul><h2><span id="update-1-utildebuglog">Update 1 - <code>util.debuglog</code></span></h2><p>In Node, there is built-in <code>NODE_DEBUG=&lt;namespace&gt;</code> mechanism for verbose logs, see <a href="https://nodejs.org/api/util.html#util_util_debuglog_section" target="_blank" rel="noopener"><code>util.debuglog</code></a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">const</span> debuglog = util.debuglog(<span class="string">'foo'</span>);</span><br><span class="line">debuglog(<span class="string">'hello from foo [%d]'</span>, <span class="number">123</span>);</span><br></pre></td></tr></table></figure><p>If you run the above piece of code with <code>NODE_DEBUG=foo</code> it will show the namespace (uppercased) and process id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOO 3245: hello from foo [123]</span><br></pre></td></tr></table></figure><p>One can intercept these log messages by overwriting <code>util.debuglog</code> method.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this blog post I will show how to intercept messages logged by a Node process using a pre-loaded module. You can find the source code 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Run Cypress included from Docker container</title>
    <link href="https://glebbahmutov.com/blog/run-cypress-included-from-docker-container/"/>
    <id>https://glebbahmutov.com/blog/run-cypress-included-from-docker-container/</id>
    <published>2019-06-20T04:00:00.000Z</published>
    <updated>2019-06-20T21:24:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>In the blog post <a href="https://www.cypress.io/blog/2019/05/02/run-cypress-with-a-single-docker-command/" target="_blank" rel="noopener">&quot;Run Cypress with a single Docker command&quot;</a> I gave several examples running Cypress Docker image <a href="https://github.com/cypress-io/cypress-docker-images/tree/master/included" target="_blank" rel="noopener">cypress/included</a> using <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">docker-compose</a> command. I also showed how to run Cypress inside a Docker container, yet see it on the host machine. But I did not give an example of how to run Cypress inside a Docker container and test a web application running on the host machine.</p><p>In this short blog post I will show how to do this. I am running Docker v18.09.2 on Mac.</p><p>So imagine I have a local web application running on <code>localhost:3333</code>. For example it could be a <a href="https://github.com/indexzero/http-server" target="_blank" rel="noopener">http-server</a> serving a local <code>public</code> folder:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http-server -p 3333 public</span><br></pre></td></tr></table></figure><p>I can load <code>http://localhost:3333</code> in any browser and see the page.</p><p>My <code>cypress.json</code> file points at this URL</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:3333"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Typically I would <a href="https://on.cypress.io/installing-cypress" target="_blank" rel="noopener">install Cypress locally</a>, but maybe I don&#39;t want to install any tools. I can still run <code>cypress/included</code> Docker image, but any application running inside the container does NOT have access to the <code>localhost</code> of the host machine. Instead Docker provides a special hostname <code>host.docker.internal</code> for container processes to access the web apps running on the host machine, see <a href="https://stackoverflow.com/questions/24319662/from-inside-of-a-docker-container-how-do-i-connect-to-the-localhost-of-the-mach" target="_blank" rel="noopener">this Stackoverflow question</a>. When I start Cypress run, I need to set the base url config parameter, which I will do using an environment variable <code>CYPRESS_baseUrl</code>. Here is the full command with explanation below</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">  -v $PWD:/e2e \</span><br><span class="line">  -w /e2e \</span><br><span class="line">  -e CYPRESS_baseUrl=http://host.docker.internal:3333 \</span><br><span class="line">  cypress/included:3.3.1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Explanation of the &quot;docker run&quot; command line arguments:</span><br><span class="line"></span><br><span class="line"> -it                      = interactive terminal</span><br><span class="line"> -v $PWD:/e2e             = map current folder to /e2e inside the container</span><br><span class="line"> -w /e2e                  = set working directy to /e2e</span><br><span class="line"> -e CYPRESS_baseUrl=...   = pass environment variable CYPRESS_baseUrl</span><br><span class="line"> cypress/included:3.3.1   = name of the Docker image with tag</span><br></pre></td></tr></table></figure><p>The tests run and finish</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Starting)</span><br><span class="line"></span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ Cypress:    3.3.1                                                                              │</span><br><span class="line">  │ Browser:    Electron 61 (headless)                                                             │</span><br><span class="line">  │ Specs:      1 found (spec.js)                                                                  │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br><span class="line">  Running: spec.js...                                                                      (1 of 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ✓ loads page (291ms)</span><br><span class="line"></span><br><span class="line">  1 passing (320ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  (Results)</span><br><span class="line"></span><br><span class="line">  ┌─────────────────────────┐</span><br><span class="line">  │ Tests:        1         │</span><br><span class="line">  │ Passing:      1         │</span><br><span class="line">  │ Failing:      0         │</span><br><span class="line">  │ Pending:      0         │</span><br><span class="line">  │ Skipped:      0         │</span><br><span class="line">  │ Screenshots:  0         │</span><br><span class="line">  │ Video:        true      │</span><br><span class="line">  │ Duration:     0 seconds │</span><br><span class="line">  │ Spec Ran:     spec.js   │</span><br><span class="line">  └─────────────────────────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  (Video)</span><br><span class="line"></span><br><span class="line">  - Started processing:   Compressing to 32 CRF</span><br><span class="line">  - Finished processing:  /e2e/cypress/videos/spec.js.mp4 (0 seconds)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Finished)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Spec                                                Tests  Passing  Failing  Pending  Skipped</span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ ✔ spec.js                                   318ms        1        1        -        -        - │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">    All specs passed!                           318ms        1        1        -        -        -</span><br></pre></td></tr></table></figure><h2><span id="bonus">Bonus</span></h2><p>You can use <code>cypress/included</code> on CI server, see <a href="https://github.com/bahmutov/cypress-included-example" target="_blank" rel="noopener">bahmutov/cypress-included-example</a> for example.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the blog post &lt;a href=&quot;https://www.cypress.io/blog/2019/05/02/run-cypress-with-a-single-docker-command/&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="docker" scheme="https://glebbahmutov.com/blog/tags/docker/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>End-to-end Testing for Server-Side Rendered Pages</title>
    <link href="https://glebbahmutov.com/blog/ssr-e2e/"/>
    <id>https://glebbahmutov.com/blog/ssr-e2e/</id>
    <published>2019-05-21T04:00:00.000Z</published>
    <updated>2019-05-21T04:20:31.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#ssr-application">SSR application</a></li><li><a href="#check-html">Check HTML</a></li><li><a href="#removing-application-bundle">Removing application bundle</a></li><li><a href="#disable-component-method">Disable component method</a></li><li><a href="#confirming-createreactclass-call">Confirming <code>createReactClass</code> call</a></li><li><a href="#hydrated-page">Hydrated page</a></li><li><a href="#conclusions">Conclusions</a></li></ul><!-- tocstop --><p><strong>Note:</strong> the source code for this blog post is in <a href="https://github.com/bahmutov/react-server-example" target="_blank" rel="noopener">bahmutov/react-server-example</a> repository which is a fork of the excellent <a href="https://github.com/mhart/react-server-example" target="_blank" rel="noopener">mhart/react-server-example</a>.</p><h2><span id="ssr-application">SSR application</span></h2><p>If you install dependencies and run this web application, it starts listening on port 3000. For each received request the server returns a rendered markup for a simple list generated using a React component. It also returns props that allow the application to <a href="../hydrate-your-apps/">hydrate client-side</a> and continue from there.</p><p>Here is the returned HTML (I am using my favorite <a href="https://httpie.org/" target="_blank" rel="noopener">httpie</a> instead of <code>curl</code> to fetch the page). Notice both the list items and the <code>window.APP_PROPS</code> in the returned page:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ http localhost:3000</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 676</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Date: Tue, 14 May 2019 01:32:41 GMT</span><br><span class="line"></span><br><span class="line">&lt;body&gt;&lt;div id=&quot;content&quot;&gt;&lt;div data-reactroot=&quot;&quot;&gt;&lt;button disabled=&quot;&quot;&gt;</span><br><span class="line">Add Item&lt;/button&gt;&lt;ul&gt;&lt;li&gt;Item 0&lt;/li&gt;&lt;li&gt;Item 1&lt;/li&gt;&lt;li&gt;Item 2&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Item 3&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;var APP_PROPS = &#123;&quot;items&quot;:[&quot;Item 0&quot;,</span><br><span class="line">&quot;Item 1&quot;,&quot;Item 2&quot;,&quot;Item 3&quot;]&#125;;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react@16.7.0/umd/react.production.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react-dom@16.7.0/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react-dom-factories@1.0.2/index.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/create-react-class@15.6.3/create-react-class.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>How do we test the server-side rendered page using an end-to-end test runner like Cypress.io? The application hydrates, thus if we simply load the page using <code>cy.visit(&#39;http://localhost:3000&#39;)</code> we might be testing the client-side SPA, not the server-rendered one! Here is one possible solution.</p><p>Instead of <a href="https://on.cypress.io" target="_blank" rel="noopener"><code>cy.visit</code></a> we can request the page using <a href="https://on.cypress.io" target="_blank" rel="noopener"><code>cy.request</code></a> just like a regular HTTP resource - forcing the server to render it. The following test shows how to request the page and pick its <code>body</code> property:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders 5 items on the server'</span>, () =&gt; &#123;</span><br><span class="line">  cy.request(<span class="string">'/'</span>).its(<span class="string">'body'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The DevTools console shows the returned HTML page</p><p><img src="/blog/images/ssr-e2e/request-ssr-page.png" alt="Page HTML is returned by the server"></p><h2><span id="check-html">Check HTML</span></h2><p>If we have static HTML we can find the rendered list items. Without bringing any extra libraries like <a href="https://cheerio.js.org/" target="_blank" rel="noopener">cheerio</a> we can use jQuery already bundled with Cypress:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders 5 items on the server'</span>, () =&gt; &#123;</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> $li = Cypress.$(html).find(<span class="string">'li'</span>)</span><br><span class="line">      expect($li)</span><br><span class="line">        .to.have.property(<span class="string">'length'</span>)</span><br><span class="line">        .equal(<span class="number">4</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ssr-e2e/4-li-items.png" alt="Confirm there are 4 items"></p><p>Nice, server is really rendering the expected items - but we don&#39;t see them! Hmm, we can throw the HTML into the application&#39;s iframe (the one that is empty right now)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders 5 items on the server'</span>, () =&gt; &#123;</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> $li = Cypress.$(html).find(<span class="string">'li'</span>)</span><br><span class="line">      expect($li)</span><br><span class="line">        .to.have.property(<span class="string">'length'</span>)</span><br><span class="line">        .equal(<span class="number">4</span>)</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The only problem with this approach - the JavaScript starts running immediately, which we can see by adding a few console log statements to the component life cycle methods.</p><p><img src="/blog/images/ssr-e2e/log.png" alt="Component is running"></p><h2><span id="removing-application-bundle">Removing application bundle</span></h2><p>After we receive the server-side rendered page, but before we stick it into the browser, we can simply remove the application bundle (or even all script tags). Then we can use &quot;normal&quot; Cypress query methods to confirm the expected number of elements - and see them ourselves.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'skips client-side bundle'</span>, () =&gt; &#123;</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// remove the application code bundle</span></span><br><span class="line">      html = html.replace(<span class="string">'&lt;script src="/bundle.js"&gt;&lt;/script&gt;'</span>, <span class="string">''</span>)</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// now we can use "normal" Cypress api to confirm</span></span><br><span class="line">  <span class="comment">// number of list element</span></span><br><span class="line">  cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The page shows the expected elements (highlighted) and the console does not show any messages from the component itself. The button stays disabled, which is another sign that our component has never been activated.</p><p><img src="/blog/images/ssr-e2e/without-bundle.png" alt="Skipped component bundle"></p><h2><span id="disable-component-method">Disable component method</span></h2><p>Instead of removing the application bundle completely, we can just disable some React component lifecycle methods, for example <code>componentDidMount</code>. Here is how we can do it - by being ready when <code>window.createReactClass</code> is called.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'disables component methods from createReactClass'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> createReactClass</span><br><span class="line">  cy.window().then(<span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(win, <span class="string">'createReactClass'</span>, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">definition</span> =&gt;</span> &#123;</span><br><span class="line">          definition.componentDidMount = <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">null</span></span><br><span class="line">          <span class="keyword">return</span> createReactClass(definition)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (fn) &#123;</span><br><span class="line">        createReactClass = fn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">  <span class="comment">// since we disabled componentDidMount the button should</span></span><br><span class="line">  <span class="comment">// never become enabled</span></span><br><span class="line">  cy.get(<span class="string">'button'</span>).should(<span class="string">'be.disabled'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ssr-e2e/no-component.png" alt="No more componentDidMount"></p><h2><span id="confirming-createreactclass-call">Confirming <code>createReactClass</code> call</span></h2><p>In the above test we have confirmed that the <code>componentDidMount</code> was called - but only indirectly, by observing the button that has remained disabled. Let&#39;s actually confirm that our dummy no-op function was called once by the React starting up. We can create a <a href="https://on.cypress.io/stub" target="_blank" rel="noopener"><code>cy.stub</code></a> that will be called by the component.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'how to know if componentDidMount was called'</span>, () =&gt; &#123;</span><br><span class="line">  cy.window().then(<span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> createReactClass</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(win, <span class="string">'createReactClass'</span>, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">definition</span> =&gt;</span> &#123;</span><br><span class="line">          definition.componentDidMount = cy.stub().as(<span class="string">'componentDidMount'</span>)</span><br><span class="line">          <span class="keyword">return</span> createReactClass(definition)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (fn) &#123;</span><br><span class="line">        createReactClass = fn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// and then ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, we have a tiny bit of problem with the rest of the test. How do we get to the <code>@componentDidMount</code> alias? We cannot simply assert that it has been called once - because the alias has not been created yet when we try to <code>cy.get</code> it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.request(<span class="string">'/'</span>)</span><br><span class="line">  .its(<span class="string">'body'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">    cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// hmm, this throws, because alias "componentDidMount"</span></span><br><span class="line"><span class="comment">// has NOT been registered yet</span></span><br><span class="line">cy.get(<span class="string">'@componentDidMount'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ssr-e2e/cy-get-timing-problem.png" alt="Stub was called, but the test claims it was unavailable"></p><p>Notice that in the test above <code>cy.get(&#39;@componentDidMount&#39;)</code> has failed to find the alias, yet it was later called by the app. That is why the &quot;Spies / Stubs&quot; table shows 1 call. Hmm, how do we wait until an alias has been created before calling <code>cy.get</code> on it? We could just add a 1 second wait - that should be enough, right?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cy.request(<span class="string">'/'</span>)</span><br><span class="line">  .its(<span class="string">'body'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">    cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">  &#125;)</span><br><span class="line">cy.wait(<span class="number">1000</span>)</span><br><span class="line">cy.get(<span class="string">'@componentDidMount'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ssr-e2e/wait-1-second.png" alt="Wait 1 second - the alias should be there after the delay"></p><p>Of course, this is NOT the way Cypress works - you should not hardcode waits, instead you should just declare a condition to wait for. The test runner then will only wait until the moment the condition becomes satisfied, and not a millisecond longer. To achieve this we can take advantage of <a href="https://on.cypress.io/should#Function" target="_blank" rel="noopener"><code>cy.should(fn)</code></a> that automatically retries the callback function until it passes without throwing an error (or times out).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">it.only(<span class="string">'how to know if componentDidMount was called'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> componentDidMountSet</span><br><span class="line">  cy.window().then(<span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> createReactClass</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(win, <span class="string">'createReactClass'</span>, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">definition</span> =&gt;</span> &#123;</span><br><span class="line">          definition.componentDidMount = cy.stub().as(<span class="string">'componentDidMount'</span>)</span><br><span class="line">          componentDidMountSet = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">return</span> createReactClass(definition)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (fn) &#123;</span><br><span class="line">        createReactClass = fn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait until custom assertion passes</span></span><br><span class="line">  cy.wrap(<span class="literal">null</span>).should(<span class="function"><span class="params">()</span> =&gt;</span> expect(componentDidMountSet).to.be.true)</span><br><span class="line">  <span class="comment">// now the alias should exist</span></span><br><span class="line">  cy.get(<span class="string">'@componentDidMount'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This line is the key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.wrap(<span class="literal">null</span>).should(<span class="function"><span class="params">()</span> =&gt;</span> expect(componentDidMountSet).to.be.true)</span><br></pre></td></tr></table></figure><p>It <a href="https://on.cypress.io/retry-ability" target="_blank" rel="noopener">retries</a> until the <code>expect(...).to.be.true</code> passes successfully.</p><p><img src="/blog/images/ssr-e2e/retry.png" alt="Auto-retry until variable is set"></p><p>Notice that auto-retrying is much faster (130ms) than hard-coding 1 second wait, yet works reliably.</p><p>One other way to write a command to wait until a specific condition becomes true (without throwing) is to use <a href="https://github.com/NoriSte/cypress-wait-until" target="_blank" rel="noopener">cypress-wait-until</a> plugin. Using this plugin we can write the same &quot;wait until variable gets its value&quot; like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> componentDidMountSet</span><br><span class="line">...</span><br><span class="line">cy.waitUntil(<span class="function"><span class="params">()</span> =&gt;</span> cy.wrap(componentDidMountSet))</span><br><span class="line">cy.get(<span class="string">'@componentDidMount'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br></pre></td></tr></table></figure><h2><span id="hydrated-page">Hydrated page</span></h2><p>Once the web application starts client-side, the markup should not jump or move - the newly rendered DOM should match the static HTML exactly, except the button becomes enabled in our example. Let&#39;s confirm it with the following test:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders same application after hydration'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// technical detail - removes any stubs from previous tests</span></span><br><span class="line">  <span class="comment">// since our application iframe does not get reset</span></span><br><span class="line">  <span class="comment">// (there is no "cy.visit" call to reset it)</span></span><br><span class="line">  <span class="keyword">const</span> win = cy.state(<span class="string">'window'</span>)</span><br><span class="line">  <span class="keyword">delete</span> win.createReactClass</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> pageHtml</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      pageHtml = html</span><br><span class="line">      <span class="comment">// remove bundle script to only have static HTML</span></span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(</span><br><span class="line">        html.replace(<span class="string">'&lt;script src="/bundle.js"&gt;&lt;/script&gt;'</span>, <span class="string">''</span>)</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">  cy.get(<span class="string">'button'</span>).should(<span class="string">'be.disabled'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> staticHTML</span><br><span class="line">  cy.get(<span class="string">'#content'</span>)</span><br><span class="line">    .invoke(<span class="string">'html'</span>)</span><br><span class="line">    <span class="comment">// static HTML before hydration has the "disabled" button attribute</span></span><br><span class="line">    <span class="comment">// we should remove it before comparing to hydrated HTML</span></span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> (staticHTML = html.replace(<span class="string">' disabled=""'</span>, <span class="string">''</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// now mount the full page and let it hydrate</span></span><br><span class="line">    .then(resetDocument)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(pageHtml)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// now the page should be live client-side</span></span><br><span class="line">  cy.get(<span class="string">'button'</span>).should(<span class="string">'be.enabled'</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'#content'</span>)</span><br><span class="line">    .invoke(<span class="string">'html'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      expect(html).to.equal(staticHTML)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs and confirms that the hydrated page matches the static HTML exactly.</p><p><img src="/blog/images/ssr-e2e/hydrate-test.png" alt="Static vs hydrated HTML test"></p><h2><span id="conclusions">Conclusions</span></h2><p>Using <a href="https://on.cypress.io" target="_blank" rel="noopener">cy.request</a> we can request the server-side rendered page and mount it into the Test Runner&#39;s application iframe for further testing. We can disable client-side functionality to make sure we only see the static HTML before hydration. We can also spy on the client-side application to confirm that it starts correctly, and I have shown how to wait for a variable to get its value before the test continues. Finally, I have shown how to confirm that the static HTML sent by the server is hydrated correctly by the client side application from the <code>APP_PROPS</code> data.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ssr-application&quot;&gt;SSR application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#check-html&quot;&gt;Check HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#removi
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="react" scheme="https://glebbahmutov.com/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Combined End-to-end and Unit Test Coverage</title>
    <link href="https://glebbahmutov.com/blog/combined-end-to-end-and-unit-test-coverage/"/>
    <id>https://glebbahmutov.com/blog/combined-end-to-end-and-unit-test-coverage/</id>
    <published>2019-05-19T04:00:00.000Z</published>
    <updated>2019-06-13T13:37:18.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#e2e-code-coverage-overview">E2E code coverage overview</a></li><li><a href="#the-missing-4">The missing 4%</a></li><li><a href="#combined-coverage">Combined coverage</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="e2e-code-coverage-overview">E2E code coverage overview</span></h2><p>In my previous blog post <a href="../stub-navigator-api/">&quot;Stub navigator API in end-to-end tests&quot;</a> I have introduced an application that uses navigator browser API to show the battery charge percentage. While exploring the ways to test this application using <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> we have discovered an edge case that caused that web application to crash when running in any browser but Chrome. The edge case is shown below - the application crashes if the <code>battery</code> variable remains undefined by the time <code>window.load</code> tries to attach an event listener.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> battery</span><br><span class="line"><span class="keyword">if</span> (navigator.battery) &#123;</span><br><span class="line">  readBattery(navigator.battery)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getBattery) &#123;</span><br><span class="line">  navigator.getBattery().then(readBattery)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// edge case!</span></span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'.not-support'</span>).removeAttribute(<span class="string">'hidden'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// WHAT HAPPENS WHEN "battery" IS undefined?</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// show updated status when the battery changes</span></span><br><span class="line">  battery.addEventListener(<span class="string">'chargingchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While Cypress allows writing end-to-end tests with ease, it <em>does not tell us what tests to write</em>. It is up to the person who is developing the web application to know what use cases to cover with end-to-end tests. But code coverage could be a good metric that highlights the untested logical edge cases. In the blog post <a href="../code-coverage-for-e2e-tests/">&quot;Code Coverage for End-to-end Tests&quot;</a> I have shown how to instrument application JavaScript code as a build step. The collected code coverage saved after the end-to-end tests passed makes the missed line really visible.</p><p><img src="/blog/images/battery-coverage/missed-line.png" alt="Missed line"></p><p>Once we add a test to hit this line, we discover the problem in the application code, add a missed guard and make application robust.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// add a guard condition to prevent crashing</span></span><br><span class="line">  <span class="keyword">if</span> (battery) &#123;</span><br><span class="line">    battery.addEventListener(<span class="string">'chargingchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In another blog post <a href="../code-coverage-by-parcel/">&quot;Code Coverage by Parcel Bundler&quot;</a> I have set up on-the-fly code coverage using the excellent <a href="https://parceljs.org/" target="_blank" rel="noopener">Parcel Bundler</a>. Instead of generating and saving an intermediate instrumented application source, we can instrument the application while serving it. The details will vary depending on the source bundler used, but most bundlers can use <a href="https://www.npmjs.com/package/babel-plugin-istanbul" target="_blank" rel="noopener">babel-plugin-istanbul</a> to instrument ES6 on the fly. In our case, the application&#39;s code will be instrumented because I have added a tiny <code>.babelrc</code> file:</p><figure class="highlight plain"><figcaption><span>.babelrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [&quot;istanbul&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To save the code coverage results correctly, my end-to-end tests are using <a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> plugin - and the tests reach <a href="https://coveralls.io/github/bahmutov/demo-battery-api?branch=bundle" target="_blank" rel="noopener">96% code coverage</a>.</p><h2><span id="the-missing-4">The missing 4%</span></h2><p>Hmm, great, but we are still 4% short of the perfect 100%. If we look at each source file, we can see that missing lines and logical branches are from this utility function <code>toTime</code> that converts number of seconds to <code>hours:minutes</code> string label.</p><p><img src="/blog/images/combined-cc/to-time-coverage.png" alt="toTime function not covered by e2e tests"></p><p>We have missed logical branches when the number of hours has double digits, and we have missed a branch of code when the number of minutes has a single digit. The function <code>toTime</code> is called from another function <code>batteryStats</code> with <code>battery.chargingTime</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">batteryStats</span> (<span class="params">battery</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> percentage = <span class="built_in">parseFloat</span>((battery.level * <span class="number">100</span>).toFixed(<span class="number">2</span>)) + <span class="string">'%'</span></span><br><span class="line">  <span class="keyword">const</span> charging = battery.charging</span><br><span class="line">  <span class="keyword">let</span> fully</span><br><span class="line">  <span class="keyword">let</span> remaining</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (charging &amp;&amp; battery.chargingTime === <span class="literal">Infinity</span>) &#123;</span><br><span class="line">    fully = <span class="string">'Calculating...'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (battery.chargingTime !== <span class="literal">Infinity</span>) &#123;</span><br><span class="line">    fully = toTime(battery.chargingTime)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fully = <span class="string">'---'</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could add end-to-end tests passing <code>battery</code> object that has just the right number in <code>battery.chargingTime</code> property to hit both missed hours and minutes cases. Hmm, but that is so weird - trying to essentially unit test an internal function via end-to-end tests! Instead, let&#39;s cover <code>toTime</code> function with unit tests. Luckily, Cypress can <a href="https://github.com/cypress-io/cypress-example-recipes#unit-testing" target="_blank" rel="noopener">execute unit tests</a> for us.</p><p>I have written <a href="https://github.com/bahmutov/demo-battery-api/blob/cover-unit-tests-3/cypress/integration/utils-spec.js" target="_blank" rel="noopener">cypress/integration/utils-spec.js</a> that imports the function <code>toTime</code> directly and hits all logical branches and statements.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toTime &#125; <span class="keyword">from</span> <span class="string">'../../src/utils'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'toTime'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// hit all if - else branches in the "toTime" function</span></span><br><span class="line"></span><br><span class="line">  it(<span class="string">'handles single digit units'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> hhmm = toTime(<span class="number">0</span>)</span><br><span class="line">    expect(hhmm).to.equal(<span class="string">'00:00'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'handles double digit units'</span>, () =&gt; &#123;</span><br><span class="line">    expect(toTime(<span class="number">36001</span>)).to.equal(<span class="string">'10:00'</span>)</span><br><span class="line">    expect(toTime(<span class="number">601</span>)).to.equal(<span class="string">'00:10'</span>)</span><br><span class="line">    <span class="comment">// there are no seconds in the returned string</span></span><br><span class="line">    <span class="comment">// but we can still cover the logical branches</span></span><br><span class="line">    expect(toTime(<span class="number">20</span>)).to.equal(<span class="string">'00:00'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="combined-coverage">Combined coverage</span></h2><p>Just like that the coverage in this function is complete, but hmm, the new coverage is NOT reflected in the generated code coverage reports - it is as if the unit tests did not contribute anything to the coverage numbers. This is to be expected - because we only collected coverage from <em>the application code loaded by the page during <code>cy.visit</code> command.</em> We never instrumented the <em>unit test</em> code, the code loaded from the spec file.</p><p>Our <code>.babelrc</code> only told our application bundler to instrument the source code, Cypress Test Runner has no idea that it should instrument the spec code - instead Cypress uses its own bundler to process and load code.</p><p>Luckily, we can easily use <strong>the same <code>babel-plugin-istanbul</code> instrumentation</strong> to bundle our spec files (which includes code loaded directly from the spec files) and save the code coverage. Just tell Cypress to use &quot;.babelrc&quot; during bundling. We need to add the following to the <a href="https://github.com/bahmutov/demo-battery-api/blob/cover-unit-tests-3/cypress/plugins/index.js" target="_blank" rel="noopener">cypress/plugins/index.js</a> file.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> browserify = <span class="built_in">require</span>(<span class="string">'@cypress/browserify-preprocessor'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// tell Cypress to use .babelrc when bundling spec code</span></span><br><span class="line">  <span class="keyword">const</span> options = browserify.defaultOptions</span><br><span class="line">  options.browserifyOptions.transform[<span class="number">1</span>][<span class="number">1</span>].babelrc = <span class="literal">true</span></span><br><span class="line">  on(<span class="string">'file:preprocessor'</span>, browserify(options))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Of course, we also need to install <a href="https://github.com/cypress-io/cypress-browserify-preprocessor#readme" target="_blank" rel="noopener">@cypress/browserify-preprocessor</a> npm package for this to work</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev @cypress/browserify-preprocessor</span></span><br></pre></td></tr></table></figure><p>We don&#39;t have to change anything else - <a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> v1.1.0 already knows how to correctly merge code coverage from the application and from unit tests - and saves the combined code coverage report. The spec files themselves are NOT in the report, only the application source files are. The above unit tests cover the <code>toTime</code> function pretty well:</p><p><img src="/blog/images/combined-cc/unit-coverage.png" alt="toTime covered by unit tests"></p><p>What about the rest of the code? Everything gets covered - the DOM updates and battery API code get covered by end-to-end tests, while individual little functions are covered by the unit tests. When <code>cypress-istanbul</code> combines the coverage, it saves the report showing full 100% code coverage.</p><p><img src="/blog/images/combined-cc/full-coverage.png" alt="Full coverage"></p><p>You can also see this coverage report at <a href="https://coveralls.io/github/bahmutov/demo-battery-api?branch=cover-unit-tests-3" target="_blank" rel="noopener">coveralls.io/github/bahmutov/demo-battery-api?branch=cover-unit-tests-3</a>, the coverage information is set by the CI build job. You can find the source code at <a href="https://github.com/bahmutov/demo-battery-api/tree/cover-unit-tests-3" target="_blank" rel="noopener">bahmutov/demo-battery-api</a> repo in branch &quot;cover-unit-tests-3&quot;.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://github.com/bahmutov/code-coverage-webpack-dev-server" target="_blank" rel="noopener">Code coverage using webpack-dev-server example</a></li><li><a href="https://on.cypress.io/code-coverage" target="_blank" rel="noopener">Cypress.io code coverage guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#e2e-code-coverage-overview&quot;&gt;E2E code coverage overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-missing-4&quot;&gt;The missing 4%&lt;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Code Coverage by Parcel Bundler</title>
    <link href="https://glebbahmutov.com/blog/code-coverage-by-parcel/"/>
    <id>https://glebbahmutov.com/blog/code-coverage-by-parcel/</id>
    <published>2019-05-16T04:00:00.000Z</published>
    <updated>2019-06-13T13:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#instrument-code-using-parcel">Instrument code using Parcel</a></li><li><a href="#saving-coverage-information">Saving coverage information</a></li><li><a href="#sending-report-to-coverallsio">Sending report to coveralls.io</a></li><li><a href="#more-information">More information</a></li></ul><!-- tocstop --><p>In my previous blog post <a href="../code-coverage-for-e2e-tests/">&quot;Code Coverage for End-to-end Tests&quot;</a> I have instrumented application source code and collected code coverage during end-to-end tests. This helped guide the end-to-end tests to cover edge cases and discover a logical error in the <a href="../stub-navigator-api/">browser battery api demo</a>. In this post I will show how you can instrument the application source code on the fly without using a separate build step. I will also show how to use a new NPM module <a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> to collect and save code coverage information no matter how the code was instrumented. Finally, I will show how to send the collected coverage information to 3rd party dashboard such as <a href="https://coveralls.io" target="_blank" rel="noopener">coveralls.io</a>.</p><p>You can find the source code in the branch &quot;bundle&quot; of the repo <a href="https://github.com/bahmutov/demo-battery-api/tree/bundle" target="_blank" rel="noopener">bahmutov/demo-battery-api</a> and you can see the code coverage reports at <a href="https://coveralls.io/github/bahmutov/demo-battery-api" target="_blank" rel="noopener">coveralls.io/github/bahmutov/demo-battery-api</a>.</p><p><img src="/blog/images/bundle/builds.png" alt="coveralls.io showing code coverage numbers from several builds"></p><h2><span id="instrument-code-using-parcel">Instrument code using Parcel</span></h2><p>The demo application has <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/index.html" target="_blank" rel="noopener">index.html</a> with the entry script tag <code>&lt;script src=&quot;src/index.js&quot; async&gt;&lt;/script&gt;</code>. That script <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/src/index.js" target="_blank" rel="noopener">src/index.js</a> includes 2 other utility scripts:</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; batteryStats &#125; <span class="keyword">from</span> <span class="string">'./utils'</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderStats &#125; <span class="keyword">from</span> <span class="string">'./dom-utils'</span></span><br></pre></td></tr></table></figure><p>I will serve the <code>index.html</code> using <a href="https://parceljs.org" target="_blank" rel="noopener">Parcel bundler</a>.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"parcel serve index.html"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, I have claimed in the past that <a href="../parcel/">&quot;Parcel is awesome sauce&quot;</a>, and the next example just proves it one more time. If we want to instrument the application JavaScript code, we can use <a href="https://www.npmjs.com/package/babel-plugin-istanbul" target="_blank" rel="noopener">babel-plugin-istanbul</a> - Parcel will load and apply Babel plugins if you have <code>.babelrc</code> file!</p><figure class="highlight plain"><figcaption><span>.babelrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [&quot;istanbul&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We probably do not want to instrument the application code in every situation, only during testing. So more realistic configuration would be <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/.babelrc" target="_blank" rel="noopener">.babelrc</a> with the &quot;istanbul&quot; plugin loaded only if we run the command with test environment like <code>NODE_ENV=test parcel serve index.html</code>:</p><figure class="highlight plain"><figcaption><span>.babelrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;env&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &#123;</span><br><span class="line">      &quot;plugins&quot;: [ &quot;istanbul&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Warning:</strong> the above conditional plugin loading is currently broken in Parcel v1.12.3, there is an open PR <a href="https://github.com/parcel-bundler/parcel/pull/2840" target="_blank" rel="noopener">#2840</a> with a fix.</p><p>When we start the application and open &quot;localhost:1234&quot; we can see that <code>index.js</code> and the 2 files it has imported are bundled into a single resource - and the source has been instrumented to keep track how many times each statement, function and logical branch was executed.</p><p><img src="/blog/images/bundle/instrumented-code.png" alt="Instrumented code"></p><p>Parcel generates the source maps by default, and we can find the original, uninstrumented code in &quot;src&quot; folder</p><p><img src="/blog/images/bundle/source-maps.png" alt="Source maps give us the original source code"></p><p>Super, zero effort on our part and we get coverage counters in the browser when the code runs - but how do we save that coverage object back to disk after the tests? And how do we generate reports?</p><h2><span id="saving-coverage-information">Saving coverage information</span></h2><p>Just like before we need to merge code coverage after each test to pain the complete picture. I have factored out the code into Cypress plugin called <a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> since it should be able to save code coverage as long as it is compatible with <a href="https://istanbul.js.org" target="_blank" rel="noopener">istanbuljs</a> tool. Just install this plugin and its peer dependencies:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D cypress-istanbul nyc istanbul-lib-coverage</span><br></pre></td></tr></table></figure><p>To load the plugin (it uses tasks) add to your <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/cypress/plugins/index.js" target="_blank" rel="noopener">cypress/plugins/index.js</a> file the following</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">'task'</span>, <span class="built_in">require</span>(<span class="string">'cypress-istanbul/task'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and to your <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/cypress/support/index.js" target="_blank" rel="noopener">cypress/support/index.js</a> the following line:</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'cypress-istanbul/support'</span></span><br></pre></td></tr></table></figure><p>And that is it! Open Cypress, select a single spec, for example <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/cypress/integration/battery.js" target="_blank" rel="noopener">cypress/integration/battery.js</a> which runs 2 end-to-end tests. You should see &quot;After all&quot; task that executes <code>nyc report --reporter=html</code> command to generate a friendly static report.</p><p><img src="/blog/images/bundle/html-report.png" alt="HTML code coverage report"></p><p>We can open the detailed view of <code>index.js</code> to see how the first code path <code>readBattery(navigator.battery)</code> was executed twice - because two tests both his this branch path.</p><p><img src="/blog/images/bundle/indexjs-report.png" alt="Code coverage for index.js after running two battery tests"></p><h2><span id="sending-report-to-coverallsio">Sending report to coveralls.io</span></h2><p>We can use the code coverage report locally to direct testing efforts. We can also store the generated report as a test artifact on CI. For example you can find it on each <a href="https://circleci.com/gh/bahmutov/demo-battery-api/tree/bundle" target="_blank" rel="noopener">Circle build</a> - it looks exactly the same as our local report folder.</p><p><img src="/blog/images/bundle/ci-report.png" alt="Code coverage report as CI test artifact"></p><p>But we probably want to analyze long term trends in code coverage, maybe review missed edge cases as a team during code review, etc. We need code coverage as a service - and <a href="https://coveralls.io" target="_blank" rel="noopener">coveralls.io</a> is a good one. Let&#39;s send the code coverage we have collected there. I have linked the demo GitHub repository to the new project <a href="https://coveralls.io/github/bahmutov/demo-battery-api" target="_blank" rel="noopener">https://coveralls.io/github/bahmutov/demo-battery-api</a> and added two environment variables to CircleCI: <code>COVERALLS_SERVICE_NAME=circleci, COVERALLS_REPO_TOKEN=...</code>. After that I have installed NPM module <a href="https://github.com/nickmerwin/node-coveralls#readme" target="_blank" rel="noopener">coveralls</a> - it will send LCOV data to <code>coveralls.io</code> after the test run. All we need is to generate the LCOV report and pipe it to this &quot;coveralls&quot; npm module. In the project&#39;s <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/circle.yml" target="_blank" rel="noopener">circle.yml</a> file the last steps are:</p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post-steps:</span></span><br><span class="line">  <span class="comment"># store the created coverage report folder</span></span><br><span class="line">  <span class="comment"># you can click on it in the CircleCI UI</span></span><br><span class="line">  <span class="comment"># to see live static HTML site</span></span><br><span class="line"><span class="attr">  - store_artifacts:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">coverage</span></span><br><span class="line">  <span class="comment"># and send coverage data to coveralls.io</span></span><br><span class="line">  <span class="comment"># see https://coveralls.io/github/bahmutov/demo-battery-api</span></span><br><span class="line"><span class="attr">  - run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">coveralls</span></span><br></pre></td></tr></table></figure><p>The <code>coveralls</code> script uses <code>nyc</code> again</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"coveralls"</span>: <span class="string">"nyc report --reporter=text-lcov | coveralls"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Each CI build sends the coverage information - and since <code>cypress run</code> executes and combines ALL spec files, we are hitting 95% code coverage!</p><p><img src="/blog/images/bundle/coveralls-info.png" alt="Coveralls summary"></p><p>We can open individual scripts (Coveralls pulls the sources from GitHub) and see the last missed lines</p><p><img src="/blog/images/bundle/coveralls-index.png" alt="Coveralls index.js coverage"></p><p>Beautiful.</p><h2><span id="more-information">More information</span></h2><ul><li>Source at <a href="https://github.com/bahmutov/demo-battery-api/tree/bundle" target="_blank" rel="noopener">https://github.com/bahmutov/demo-battery-api/tree/bundle</a> (branch &quot;bundle&quot;)</li><li><a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> plugin</li><li><a href="https://coveralls.io/github/bahmutov/demo-battery-api" target="_blank" rel="noopener">https://coveralls.io/github/bahmutov/demo-battery-api</a> dashboard</li><li><a href="../code-coverage-for-e2e-tests/">&quot;Code Coverage for End-to-end Tests&quot;</a> blog post</li><li><a href="../stub-navigator-api/">&quot;Stub navigator API in end-to-end tests&quot;</a> blog post</li><li><a href="https://github.com/bahmutov/code-coverage-webpack-dev-server" target="_blank" rel="noopener">Code coverage using webpack-dev-server example</a></li><li><a href="https://on.cypress.io/code-coverage" target="_blank" rel="noopener">Cypress.io code coverage guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#instrument-code-using-parcel&quot;&gt;Instrument code using Parcel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#saving-coverage-informatio
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Using TypeScript aliases in Cypress tests</title>
    <link href="https://glebbahmutov.com/blog/using-ts-aliases-in-cypress-tests/"/>
    <id>https://glebbahmutov.com/blog/using-ts-aliases-in-cypress-tests/</id>
    <published>2019-05-09T04:00:00.000Z</published>
    <updated>2019-05-10T13:53:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this post I will show how you can write end-to-end tests in TypeScript and how to import from test code your application source files using path aliases like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;greeting&#125; <span class="keyword">from</span> <span class="string">'@app/greeting'</span></span><br></pre></td></tr></table></figure><p>instead of brittle relative paths like this</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;greeting&#125; <span class="keyword">from</span> <span class="string">'../../app/src/greeting'</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> the source code for this blog post is at <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests" target="_blank" rel="noopener">bahmutov/using-ts-aliases-in-cypress-tests</a></p><h2><span id="application">Application</span></h2><p>For this demo I will use a minimal example: just an HTML page <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/index.html" target="_blank" rel="noopener">index.html</a> with some TypeScript code</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"src/app.ts"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The code <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/src/app.ts" target="_blank" rel="noopener">src/app.ts</a> places the greeting imported from <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/src/utils.ts" target="_blank" rel="noopener">src/utils.ts</a> into the DOM</p><figure class="highlight ts"><figcaption><span>src/utils.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> greeting = <span class="string">'Hello World'</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>src/app.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; greeting &#125; <span class="keyword">from</span> <span class="string">"./utils"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerText = greeting</span><br></pre></td></tr></table></figure><p>To serve the app I will use <a href="https://parceljs.org" target="_blank" rel="noopener">Parce bundler</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D parcel-bundler</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"parcel serve index.html"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When I run <code>npm start</code> the page is working as expected at <code>localhost:1234</code></p><p><img src="/blog/images/path-aliases/app.png" alt="Application in action"></p><h2><span id="cypress-tests-in-typescript">Cypress Tests in TypeScript</span></h2><p>We can add <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress end-to-end tests</a> to this project with</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D cypress</span><br><span class="line">+ cypress@3.2.0</span><br></pre></td></tr></table></figure><p>To quickly scaffold everything, I prefer to use my little utility <a href="https://github.com/bahmutov/cly" target="_blank" rel="noopener">@bahmutov/cly</a> which stands for &quot;quickly&quot;. Or maybe it stands for &quot;Cypress CLI&quot;? Who knows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npx @bahmutov/cly init</span><br><span class="line">npx: installed 72 in 6.398s</span><br><span class="line">scaffolding new Cypress project</span><br><span class="line">✅ scaffolded &quot;cypress&quot; folder with a single example spec</span><br><span class="line">you can configure additional options in cypress.json file</span><br><span class="line">see https://on.cypress.io/configuration</span><br></pre></td></tr></table></figure><p>We have <code>cypress.json</code> and <code>cypress</code> folder, let&#39;s change the contents of <code>cypress/integration/spec.js</code> to test our page.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'shows greeting'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:1234'</span>)</span><br><span class="line">  cy.contains(<span class="string">'#app'</span>, <span class="string">'Hello World'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Start the app in one terminal with <code>npm start</code> and open Cypress from another terminal with <code>npx cypress open</code> - the test should be green.</p><p><img src="/blog/images/path-aliases/first-test.png" alt="First test is passing"></p><p>But if we write our application in TypeScript, let&#39;s also write our tests in TypeScript. The simplest way to configure test bundling is by installing <a href="https://github.com/bahmutov/add-typescript-to-cypress" target="_blank" rel="noopener">@bahmutov/add-typescript-to-cypress</a> package. We also need to install TypeScript module itself, and we need Webpack</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @bahmutov/add-typescript-to-cypress typescript webpack</span><br><span class="line">+ typescript@3.4.5</span><br><span class="line">+ @bahmutov/add-typescript-to-cypress@2.0.3</span><br><span class="line">+ webpack@4.31.0</span><br></pre></td></tr></table></figure><p>Super, it even has created a default <code>tsconfig.json</code> file for us</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"node_modules/cypress"</span>,</span><br><span class="line">    <span class="string">"cypress/*/*.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can rename our test file from <code>spec.js</code> to <code>spec.ts</code> - and it should run the same. Since the <code>tsconfig.json</code> file is only necessary for our Cypress tests I will move it into the <code>cypress</code> folder. Do not forget to update the paths in <code>tsconfig.json</code> after moving.</p><h2><span id="sharing-code">Sharing code</span></h2><p>Our application shows the greeting text - and I don&#39;t want to hardcode the string to find in my test code. Instead I think it is ok to load the greeting from the application code. It is simple to do using a relative path.</p><figure class="highlight typescript"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;greeting&#125; <span class="keyword">from</span> <span class="string">'../../src/utils'</span></span><br><span class="line">it(<span class="string">'shows greeting'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:1234'</span>)</span><br><span class="line">  cy.contains(<span class="string">'#app'</span>, greeting).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nice, but I really dislike the long relative paths that use <code>../..</code> to get out of the Cypress integration folder. Luckily TypeScript and Webpack both have ways to define aliases to use shortcuts. We need TypeScript <a href="https://dev.to/lars124/path-aliases-with-typescript-in-nodejs-4353" target="_blank" rel="noopener">path aliases</a> to make sure our TypeScript tooling (like VSCode IntelliSense) understands the spec files, while <a href="https://webpack.js.org/configuration/resolve/#resolvealias" target="_blank" rel="noopener">Webpack aliases</a> are needed to find the code during bundling.</p><p>Our goal is to refer to all source files by <code>@src/...</code> from our spec files rather than <code>../../src/...</code>.</p><p>In the <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/cypress/tsconfig.json" target="_blank" rel="noopener">cypress/tsconfig.json</a> add <code>baseUrl</code> and <code>paths</code> properties.</p><figure class="highlight json"><figcaption><span>cypress/tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"../node_modules/cypress"</span>,</span><br><span class="line">    <span class="string">"*/*.ts"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">".."</span>,</span><br><span class="line">    <span class="attr">"paths"</span>: &#123;</span><br><span class="line">      <span class="attr">"@src/*"</span>: [<span class="string">"src/*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nice, now we can import <code>greeting</code> from the test file like this</p><figure class="highlight typescript"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;greeting&#125; <span class="keyword">from</span> <span class="string">'@src/utils'</span></span><br></pre></td></tr></table></figure><p>VSCode can resolve the alias correctly, as shown by this popup</p><p><img src="/blog/images/path-aliases/path-alias.png" alt="Path alias is working in TypeScript"></p><p>But if we try to run Cypress test right now, we will get a nasty error</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./cypress/integration/spec.ts</span><br><span class="line">Module not found: Error: Can&apos;t resolve &apos;@src/utils&apos; in &apos;/Users/gleb/git/using-ts-aliases-in-cypress-tests/cypress/integration&apos;</span><br><span class="line">resolve &apos;@src/utils&apos; in &apos;/Users/gleb/git/using-ts-aliases-in-cypress-tests/cypress/integration&apos;</span><br><span class="line">  Parsed request is a module</span><br><span class="line">  ... goes on for 50 lines</span><br></pre></td></tr></table></figure><p>This is due to the fact that Webpack bundler does not know about the path aliases in <code>tsconfig.json</code>. The simplest way is to tell Webpack how to <a href="https://webpack.js.org/configuration/resolve/#resolvealias" target="_blank" rel="noopener">alias modules</a> by prefix. In file <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/cypress/plugins/cy-ts-preprocessor.js" target="_blank" rel="noopener">cypress/plugins/cy-ts-preprocessor.js</a> add the following <code>alias</code> object to the existing <code>resolve</code> block:</p><figure class="highlight js"><figcaption><span>cypress/plugins/cy-ts-preprocessor.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackOptions = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.ts'</span>, <span class="string">'.js'</span>],</span><br><span class="line">    <span class="comment">// add the alias object</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@src'</span>: path.resolve(__dirname, <span class="string">'../../src'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That is it, our tests can share code with application without fragile folder hops.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://www.cypress.io/blog/2018/11/14/testing-redux-store/" target="_blank" rel="noopener">Testing Redux Store</a></li><li><a href="../use-typescript-with-cypress/">Use TypeScript With Cypress</a></li><li><a href="https://github.com/bahmutov/add-typescript-to-cypress" target="_blank" rel="noopener">bahmutov/add-typescript-to-cypress</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this post I will show how you can write end-to-end tests in TypeScript and how to import from test code your application source files 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="typescript" scheme="https://glebbahmutov.com/blog/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Code Coverage for End-to-end Tests</title>
    <link href="https://glebbahmutov.com/blog/code-coverage-for-e2e-tests/"/>
    <id>https://glebbahmutov.com/blog/code-coverage-for-e2e-tests/</id>
    <published>2019-05-06T04:00:00.000Z</published>
    <updated>2019-06-13T13:37:45.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#instrumenting-the-code-as-a-pre-processor-step">Instrumenting the code as a pre-processor step</a></li><li><a href="#during-the-tests">During the tests</a></li><li><a href="#the-coverage-report">The coverage report</a></li><li><a href="#code-coverage-from-multiple-spec-files">Code coverage from multiple spec files</a></li><li><a href="#code-coverage-on-ci">Code coverage on CI</a></li><li><a href="#100-code-coverage">100% code coverage</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><p>In my previous blog post <a href="../stub-navigator-api/">&quot;Stub navigator API in end-to-end tests&quot;</a> I have shown a small web application that shows the current battery charge information. Then I have shown several Cypress end-to-end tests and found an edge case that caused the application to crash.</p><p><img src="/blog/images/battery/crash.png" alt="Application crashes trying to attach the event listener"></p><p>The crash was caused by the failure of the program <a href="https://github.com/bahmutov/demo-battery-api/blob/master/src/index.js" target="_blank" rel="noopener">src/index.js</a> to account for the final <code>- else</code> code path when dealing with the browser capabilities.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> battery</span><br><span class="line"><span class="keyword">if</span> (navigator.battery) &#123;</span><br><span class="line">  readBattery(navigator.battery)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getBattery) &#123;</span><br><span class="line">  navigator.getBattery().then(readBattery)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// hmm, the "battery" variable remains undefined</span></span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'.not-support'</span>).removeAttribute(<span class="string">'hidden'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// hmm what happens when "battery" variable stays undefined?</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// show updated status when the battery changes</span></span><br><span class="line">  battery.addEventListener(<span class="string">'chargingchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    readBattery()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  battery.addEventListener(<span class="string">'levelchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    readBattery()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our end-to-end test in spec file <a href="https://github.com/bahmutov/demo-battery-api/blob/master/cypress/integration/no-battery.js" target="_blank" rel="noopener">no-battery.js</a> removes both <code>navigator.battery</code> and <code>navigator.getBattery</code> properties and reaches the final <code>- else</code> path, causing the <code>window.onload</code> to crash - the variable <code>battery</code> remains undefined. If only we could see right away before writing <code>no-battery.js</code> that this code path is a problem!</p><h2><span id="instrumenting-the-code-as-a-pre-processor-step">Instrumenting the code as a pre-processor step</span></h2><p>Cypress users who think collecting application code coverage during end-to-end tests <a href="https://github.com/cypress-io/cypress/issues/346" target="_blank" rel="noopener">proposed several solutions</a>. All solutions instrument the web application code during the build step, then save the collected code coverage data after the tests. Finally, yet another step generates coverage report from the saved data. Let&#39;s see how it can be done for our battery API demo application.</p><p>You can find this code in branch <a href="https://github.com/bahmutov/demo-battery-api/tree/coverage-step" target="_blank" rel="noopener">coverage-step</a> in the <a href="https://github.com/bahmutov/demo-battery-api" target="_blank" rel="noopener">demo-battery-api</a> repository.</p><p>First, we will instrument our application code as a pre-processing step using <a href="https://github.com/istanbuljs/istanbuljs" target="_blank" rel="noopener">IstanbulJS</a> library and its command line wrapper <a href="https://github.com/istanbuljs/nyc" target="_blank" rel="noopener">nyc</a>. I will install the following two libraries</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev nyc@14 istanbul-lib-coverage@2</span><br><span class="line">+ istanbul-lib-coverage@2.0.5</span><br><span class="line">+ nyc@14.1.0</span><br></pre></td></tr></table></figure><p>I have added the command to instrument application code in <code>src</code> folder and place the instrumented code into <code>build/src</code>. The <code>cp</code> command copies the rest of the application files: HTML and styles.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"npm run instrument &amp;&amp; npm run cp"</span>,</span><br><span class="line">    <span class="attr">"preinstrument"</span>: <span class="string">"npm run clean"</span>,</span><br><span class="line">    <span class="attr">"instrument"</span>: <span class="string">"nyc instrument --compact false src build/src"</span>,</span><br><span class="line">    <span class="attr">"cp"</span>: <span class="string">"cp src/*.css build/src &amp;&amp; cp src/*.png build/src &amp;&amp; cp index.html build"</span>,</span><br><span class="line">    <span class="attr">"clean"</span>: <span class="string">"rm -rf build .nyc_output || true"</span>,</span><br><span class="line">    <span class="attr">"report:coverage"</span>: <span class="string">"nyc report --reporter=html"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we execute <code>npm run build</code> we will get the instrumented application in the <code>build</code> folder. For demo purposes I pass <code>--compact false</code> during instrument step to avoid minification. The output code looks like this (this is only a small part of the instrumented code):</p><figure class="highlight js"><figcaption><span>build/src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navigator.battery) &#123;</span><br><span class="line">  cov_w7e0b4vcv.b[<span class="number">11</span>][<span class="number">0</span>]++;</span><br><span class="line">  cov_w7e0b4vcv.s[<span class="number">31</span>]++;</span><br><span class="line">  readBattery(navigator.battery);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  cov_w7e0b4vcv.b[<span class="number">11</span>][<span class="number">1</span>]++;</span><br><span class="line">  cov_w7e0b4vcv.s[<span class="number">32</span>]++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (navigator.getBattery) &#123;</span><br><span class="line">    cov_w7e0b4vcv.b[<span class="number">12</span>][<span class="number">0</span>]++;</span><br><span class="line">    cov_w7e0b4vcv.s[<span class="number">33</span>]++;</span><br><span class="line">    navigator.getBattery().then(readBattery);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cov_w7e0b4vcv.b[<span class="number">12</span>][<span class="number">1</span>]++;</span><br><span class="line">    cov_w7e0b4vcv.s[<span class="number">34</span>]++;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.not-support'</span>).removeAttribute(<span class="string">'hidden'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The instrumentation just inserts counters into the code, incrementing them for each statement (the <code>cov_w7e0b4vcv.s[31]++</code> line) and <code>if - else</code> branch (the <code>cov_w7e0b4vcv.b[11][0]++</code> line). After the code finishes running, we can map the numbers from the object <code>window.cov_w7e0b4vcv</code> back to the original source code to see which lines were covered.</p><h2><span id="during-the-tests">During the tests</span></h2><p>The application code has been instrumented, and we serve the <code>build</code> folder during end-to-end tests, rather than the original <code>src</code> folder. Here is what we need to do in the browser during each test:</p><ul><li>reset the collected coverage before tests begin</li><li>merge the code coverage collected during each test with previously collected data</li><li>generate a coverage report in desired format after all tests have finished</li></ul><p>The above 3 things are controlled by the <a href="https://github.com/bahmutov/demo-battery-api/blob/coverage-step/cypress/support/index.js" target="_blank" rel="noopener">cypress/support/index.js</a> file that gets bundled with each spec file automatically.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line">before(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">'resetCoverage'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// save coverage after each test</span></span><br><span class="line">  <span class="comment">// because the entire "window" object is about</span></span><br><span class="line">  <span class="comment">// to be recycled by Cypress before next test</span></span><br><span class="line">  cy.window().then(<span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (win.__coverage__) &#123;</span><br><span class="line">      cy.task(<span class="string">'combineCoverage'</span>, win.__coverage__)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">after(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">'coverageReport'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Each <a href="https://on.cypress.io/task" target="_blank" rel="noopener">cy.task</a> jumps from the browser context to the backend context in Cypress where we have the full access to the file system. Thus we can save the code coverage JSON file and execute <code>nyc</code> to produce the report. Here is the <a href="https://github.com/bahmutov/demo-battery-api/blob/coverage-step/cypress/plugins/index.js" target="_blank" rel="noopener">cypress/plugins/index.js</a> that keeps the code coverage object and generates the report:</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> istanbul = <span class="built_in">require</span>(<span class="string">'istanbul-lib-coverage'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; join &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; existsSync, mkdirSync, writeFileSync &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> execa = <span class="built_in">require</span>(<span class="string">'execa'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> coverageMap = istanbul.createCoverageMap(&#123;&#125;)</span><br><span class="line">  <span class="keyword">const</span> outputFolder = <span class="string">'.nyc_output'</span></span><br><span class="line">  <span class="keyword">const</span> nycFilename = join(outputFolder, <span class="string">'out.json'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!existsSync(outputFolder)) &#123;</span><br><span class="line">    mkdirSync(outputFolder)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'created folder %s for output coverage'</span>, outputFolder)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on(<span class="string">'task'</span>, &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Clears accumulated code coverage information</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    resetCoverage () &#123;</span><br><span class="line">      coverageMap = istanbul.createCoverageMap(&#123;&#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'reset code coverage'</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Combines coverage information from single test</span></span><br><span class="line"><span class="comment">     * with previously collected coverage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    combineCoverage (coverage) &#123;</span><br><span class="line">      coverageMap.merge(coverage)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Saves coverage information as a JSON file and calls</span></span><br><span class="line"><span class="comment">     * NPM script to generate HTML report</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    coverageReport () &#123;</span><br><span class="line">      writeFileSync(nycFilename, <span class="built_in">JSON</span>.stringify(coverageMap, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'wrote coverage file %s'</span>, nycFilename)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'saving coverage report'</span>)</span><br><span class="line">      <span class="keyword">return</span> execa(<span class="string">'npm'</span>, [<span class="string">'run'</span>, <span class="string">'report:coverage'</span>], &#123; <span class="attr">stdio</span>: <span class="string">'inherit'</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s run the instrumented tests. I will run just a single test that removes <code>navigator.battery</code> property.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">'navigator.getBattery'</span>, () =&gt; &#123;</span><br><span class="line">  it.only(<span class="string">'shows battery status of 75%'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">      onBeforeLoad (win) &#123;</span><br><span class="line">        <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line">        win.navigator.getBattery = cy</span><br><span class="line">          .stub()</span><br><span class="line">          .resolves(&#123;</span><br><span class="line">            level: <span class="number">0.75</span>,</span><br><span class="line">            charging: <span class="literal">false</span>,</span><br><span class="line">            addEventListener: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          .as(<span class="string">'getBattery'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.contains(<span class="string">'.battery-percentage'</span>, <span class="string">'75%'</span>)</span><br><span class="line">    cy.get(<span class="string">'@getBattery'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The Cypress Test Runner shows the code coverage related commands.</p><p><img src="/blog/images/battery-coverage/one-test.png" alt="Single test with code coverage"></p><p>Great, let us see the covered lines.</p><h2><span id="the-coverage-report">The coverage report</span></h2><p>The saved code coverage object is just a large JSON file <code>.nyc_output/out.json</code> like this</p><figure class="highlight js"><figcaption><span>JSON coverage object example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"/demo-battery-api/src/index.js"</span>: &#123;</span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/demo-battery-api/src/index.js"</span>,</span><br><span class="line">    <span class="string">"statementMap"</span>: &#123;</span><br><span class="line">      <span class="string">"0"</span>: &#123;</span><br><span class="line">        <span class="string">"start"</span>: &#123;</span><br><span class="line">          <span class="string">"line"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="string">"column"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"end"</span>: &#123;</span><br><span class="line">          <span class="string">"line"</span>: <span class="number">76</span>,</span><br><span class="line">          <span class="string">"column"</span>: <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"s"</span>: &#123;</span><br><span class="line">      <span class="string">"0"</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="string">"1"</span>: <span class="number">14</span>,</span><br><span class="line">      <span class="string">"2"</span>: <span class="number">14</span>,</span><br><span class="line">      <span class="string">"3"</span>: <span class="number">14</span>,</span><br><span class="line">      <span class="string">"4"</span>: <span class="number">14</span>,</span><br><span class="line">      <span class="string">"5"</span>: <span class="number">14</span>,</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>The object contains location of all statements, functions and branches in the original code, and the counters for how many times each item has been executed (for example the <code>s</code> counters are for statements). The human coverage report is generated from the <code>.nyc_output/out.json</code> file using npm script <code>&quot;report:coverage&quot;: &quot;nyc report --reporter=html&quot;</code> is placed in <code>coverage</code> folder. It is a folder with a static site.</p><figure class="highlight plain"><figcaption><span>coverage folder</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">coverage/</span><br><span class="line">  base.css</span><br><span class="line">  block-navigation.js</span><br><span class="line">  index.html</span><br><span class="line">  index.js.html</span><br><span class="line">  prettify.css</span><br><span class="line">  prettify.js</span><br><span class="line">  sort-arrow-sprite.png</span><br><span class="line">  sorter.js</span><br></pre></td></tr></table></figure><p>We can open the <code>coverage/index.html</code> file and see that our test really has hit just a single <code>if - else</code> line. Lines in red show the code NOT covered by the tests.</p><p><img src="/blog/images/battery-coverage/coverage-report.png" alt="The getBattery path hit by the test"></p><p>We can enable all tests and see more lines covered - and the only uncovered line is the third code path <code>- else</code> when there is neither <code>navigator.battery</code> nor <code>navigator.getBattery</code> methods.</p><p><img src="/blog/images/battery-coverage/missed-line.png" alt="Missed line"></p><p><strong>Tip:</strong> I prefer having a separate npm script to generate the code coverage report, because we may want to generate reports in different formats. For example we can generate a summary report and show it in the terminal: <code>&quot;report:coverage&quot;: &quot;nyc report --compact&quot;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm run report:coverage</span><br><span class="line">----------|----------|----------|----------|----------|-------------------|</span><br><span class="line">File      |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |</span><br><span class="line">----------|----------|----------|----------|----------|-------------------|</span><br><span class="line">All files |       95 |    92.31 |      100 |       95 |                   |</span><br><span class="line"> index.js |       95 |    92.31 |      100 |       95 |             31,64 |</span><br><span class="line">----------|----------|----------|----------|----------|-------------------|</span><br></pre></td></tr></table></figure><p>We can even fail the build if the code coverage (lines, statements, branches or per file) is below given threshold:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npx nyc report --check-coverage --statements 100</span><br><span class="line">----------|----------|----------|----------|----------|-------------------|</span><br><span class="line">File      |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |</span><br><span class="line">----------|----------|----------|----------|----------|-------------------|</span><br><span class="line">All files |     97.5 |    96.15 |      100 |     97.5 |                   |</span><br><span class="line"> index.js |     97.5 |    96.15 |      100 |     97.5 |                64 |</span><br><span class="line">----------|----------|----------|----------|----------|-------------------|</span><br><span class="line">ERROR: Coverage for statements (97.5%) does not meet global threshold (100%)</span><br><span class="line">$ echo $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>Better write more tests.</p><h2><span id="code-coverage-from-multiple-spec-files">Code coverage from multiple spec files</span></h2><p>If we have more than a single test (spec) file, we need to be careful when we reset the coverage information. There are two different cases, depending on how the test runner is running:</p><ul><li>if the test runner is in the interactive mode using <code>cypress open</code> then we can reset the coverage before the tests. This works for a single spec file, or when running all specs using &quot;Run all specs&quot; button.</li><li>if the test runner is in the headless mode using <code>cypress run</code>, then each spec is processed separately. It is almost like executing a series of separate commands: <code>cypress run --spec test1.js</code>, <code>cypress run --spec test2.js</code>, etc. We cannot reset the coverage in that case - we risk destroying the information collected from the previous spec file. We need to reset the coverage <em>before running Cypress</em>. Luckily this is simple to do, here I am using npm <code>precy:run</code> script that automatically runs before <code>cy:run</code> script.</li></ul><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"cy:open"</span>: <span class="string">"cypress open"</span>,</span><br><span class="line">    <span class="attr">"cy:run"</span>: <span class="string">"cypress run"</span>,</span><br><span class="line">    <span class="attr">"precy:run"</span>: <span class="string">"rm -rf .nyc_output || true"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From the tests, we can pass <code>isInteractive</code> flag to the task, and only reset the coverage file when <code>isInteractive</code> is <code>true</code>.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">before(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// we need to reset the coverage when running</span></span><br><span class="line">  <span class="comment">// in the interactive mode, otherwise the counters will</span></span><br><span class="line">  <span class="comment">// keep increasing every time we rerun the tests</span></span><br><span class="line">  cy.task(<span class="string">'resetCoverage'</span>, &#123; <span class="attr">isInteractive</span>: Cypress.config(<span class="string">'isInteractive'</span>) &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">'task'</span>, &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Clears accumulated code coverage information.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Interactive mode with "cypress open"</span></span><br><span class="line"><span class="comment">     *    - running a single spec or "Run all specs" needs to reset coverage</span></span><br><span class="line"><span class="comment">     * Headless mode with "cypress run"</span></span><br><span class="line"><span class="comment">     *    - runs EACH spec separately, so we cannot reset the coverage</span></span><br><span class="line"><span class="comment">     *      or we will lose the coverage from previous specs.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    resetCoverage (&#123; isInteractive &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isInteractive) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'reset code coverage in interactive mode'</span>)</span><br><span class="line">        <span class="keyword">const</span> coverageMap = istanbul.createCoverageMap(&#123;&#125;)</span><br><span class="line">        writeFileSync(nycFilename, <span class="built_in">JSON</span>.stringify(coverageMap, <span class="literal">null</span>, <span class="number">2</span>))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Else:</span></span><br><span class="line"><span class="comment">          in headless mode, assume the coverage file was deleted</span></span><br><span class="line"><span class="comment">          before the `cypress run` command was called</span></span><br><span class="line"><span class="comment">          example: rm -rf .nyc_output || true</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Perfect.</p><h2><span id="code-coverage-on-ci">Code coverage on CI</span></h2><p>The generated HTML code coverage report can be stored on continuous integration server as a static artifact. I am running these builds on CircleCI at <a href="https://circleci.com/gh/bahmutov/demo-battery-api/tree/coverage-step" target="_blank" rel="noopener">https://circleci.com/gh/bahmutov/demo-battery-api/tree/coverage-step</a> using <a href="https://github.com/cypress-io/circleci-orb" target="_blank" rel="noopener">Cypress Circle Orb</a>. After the test run, I store the <code>coverage</code> folder as a test artifact. Here is the entire CI config file <a href="https://github.com/bahmutov/demo-battery-api/blob/coverage-step/circle.yml" target="_blank" rel="noopener">circle.yml</a></p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># see https://github.com/cypress-io/circleci-orb</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line"><span class="attr">  cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cypress/run:</span></span><br><span class="line">          <span class="comment"># we need to start the web application</span></span><br><span class="line"><span class="attr">          start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line">          <span class="comment"># there are no jobs to follow this one</span></span><br><span class="line">          <span class="comment"># so no need to save the workspace files (saves time)</span></span><br><span class="line"><span class="attr">          no-workspace:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># store the created coverage report folder</span></span><br><span class="line">          <span class="comment"># you can click on it in the CircleCI UI</span></span><br><span class="line">          <span class="comment"># to see live static HTML site</span></span><br><span class="line"><span class="attr">          post-steps:</span></span><br><span class="line"><span class="attr">            - store_artifacts:</span></span><br><span class="line"><span class="attr">                path:</span> <span class="string">coverage</span></span><br></pre></td></tr></table></figure><p>Note that on CI we do not need to remove the code coverage folder <code>.nyc_output</code> before starting <code>cypress run</code> - because CI server automatically gets a fresh workspace folder.</p><p>You can see the artifact with each build. For example you can browse to the artifacts in the build <a href="https://circleci.com/gh/bahmutov/demo-battery-api/28#artifacts/containers/0" target="_blank" rel="noopener">#28</a></p><p><img src="/blog/images/battery-coverage/artifacts.png" alt="Code coverage folder as a build artifact"></p><p>Click on <code>index.html</code> to see the JavaScript coverage report</p><p><img src="/blog/images/battery-coverage/report.png" alt="Code coverage report"></p><p>We have only a single JavaScript application file, open the report for <code>index.js</code> by clicking on it.</p><p><img src="/blog/images/battery-coverage/index-js-report.png" alt="Code coverage for index.js file"></p><h2><span id="100-code-coverage">100% code coverage</span></h2><p>Hitting a 100% code coverage is a <a href="https://slides.com/bahmutov/test-coverage-update" target="_blank" rel="noopener">hard and thankless task</a>. Code coverage is not the goal in itself, rather the gap in the code coverage helps me identify a missing test and an overlooked edge condition. In our case, the uncovered logical branch shows that we did not test what happens when the browser <code>navigator</code> object does not have the battery API. Let&#39;s fix the issue and enable the previously crashing test.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// add a guard condition to prevent crashing</span></span><br><span class="line">  <span class="keyword">if</span> (battery) &#123;</span><br><span class="line">    battery.addEventListener(<span class="string">'chargingchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      readBattery()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    battery.addEventListener(<span class="string">'levelchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      readBattery()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You need to rerun the instrumentation step again (<code>npm run build</code> in my case). Enable the previously crashing test - and it is passing now!</p><p><img src="/blog/images/battery-coverage/fixed.png" alt="No battery API support - no problem"></p><p>Run all tests again - interactively using &quot;Run all tests&quot; button, or using <code>npm run cy:run</code> and get the 100% code covered.</p><p><img src="/blog/images/battery-coverage/100-covered.png" alt="100% code covered"></p><h2><span id="see-also">See also</span></h2><ul><li>The example source code is in the branch <a href="https://github.com/bahmutov/demo-battery-api/tree/coverage-step" target="_blank" rel="noopener">coverage-step</a> in the <a href="https://github.com/bahmutov/demo-battery-api" target="_blank" rel="noopener">demo-battery-api</a> repository</li><li><a href="../stub-navigator-api/">&quot;Stub navigator API in end-to-end tests&quot;</a> is the previous blog post explaining the end-to-end tests for this web application</li><li>Code coverage Cypress repo <a href="https://github.com/cypress-io/cypress/issues/346" target="_blank" rel="noopener">issue #346</a></li><li><a href="https://on.cypress.io/code-coverage" target="_blank" rel="noopener">Cypress.io code coverage guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#instrumenting-the-code-as-a-pre-processor-step&quot;&gt;Instrumenting the code as a pre-processor step&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Stub navigator API in end-to-end tests</title>
    <link href="https://glebbahmutov.com/blog/stub-navigator-api/"/>
    <id>https://glebbahmutov.com/blog/stub-navigator-api/</id>
    <published>2019-04-29T04:00:00.000Z</published>
    <updated>2019-06-16T13:39:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#battery-status-web-app">Battery status web app</a></li><li><a href="#simple-test">Simple test</a></li><li><a href="#mocking-navigatorbattery-property">Mocking <code>navigator.battery</code> property</a></li><li><a href="#mocking-navigatorgetbattery-method">Mocking <code>navigator.getBattery</code> method</a></li><li><a href="#battery-status-updates">Battery status updates</a></li><li><a href="#no-battery-api">No battery API</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="battery-status-web-app">Battery status web app</span></h2><p>In source repo <a href="https://github.com/bahmutov/demo-battery-api" target="_blank" rel="noopener">bahmutov/demo-battery-api</a> there is a web application forked from <a href="https://github.com/pazguille/demo-battery-api" target="_blank" rel="noopener">pazguille/demo-battery-api</a> that uses <code>navigator</code> browser API to show the current battery status. You can try the demo of the application at <a href="http://pazguille.github.io/demo-battery-api/" target="_blank" rel="noopener">http://pazguille.github.io/demo-battery-api/</a>. It should look something like this:</p><p><img src="/blog/images/battery/battery.png" alt="Battery status web page"></p><p>You can see the application JavaScript code in <a href="https://github.com/bahmutov/demo-battery-api/blob/master/src/index.js" target="_blank" rel="noopener">src/index.js</a>. The main piece of code tries to grab battery status using either <code>navigator.battery</code> or <code>navigator.getBattery</code> properties.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navigator.battery) &#123;</span><br><span class="line">  readBattery(navigator.battery)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getBattery) &#123;</span><br><span class="line">  navigator.getBattery().then(readBattery)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'.not-support'</span>).removeAttribute(<span class="string">'hidden'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// show updated status when the battery changes</span></span><br><span class="line">  battery.addEventListener(<span class="string">'chargingchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    readBattery()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  battery.addEventListener(<span class="string">'levelchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    readBattery()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s test this code a little bit to make sure it works as expected.</p><h2><span id="simple-test">Simple test</span></h2><p>Since we do not know anything about the computer running the end-to-end test, our first <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a> spec <a href="https://github.com/bahmutov/demo-battery-api/blob/master/cypress/integration/simple.js" target="_blank" rel="noopener">simple.js</a> is pretty bare.</p><figure class="highlight js"><figcaption><span>cypress/integration/simple.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">'shows battery status'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  <span class="comment">// shows the actual battery percentage</span></span><br><span class="line">  <span class="comment">// we can only assert that the percentage is visible,</span></span><br><span class="line">  <span class="comment">// but not its value</span></span><br><span class="line">  cy.get(<span class="string">'.battery-percentage'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can only check if the battery percentage element is visible - but not what is shows, because we don&#39;t know what value to expect there.</p><p><img src="/blog/images/battery/simple.png" alt="The simple test"></p><h2><span id="mocking-navigatorbattery-property">Mocking <code>navigator.battery</code> property</span></h2><p>It would be much better to make the test deterministic. For example, we could mock the <code>navigator.battery</code> property the application code checks first. The test can now check each displayed value to be properly rendered, as <a href="https://github.com/bahmutov/demo-battery-api/blob/master/cypress/integration/battery.js" target="_blank" rel="noopener">battery.js</a> spec demonstrates.</p><figure class="highlight js"><figcaption><span>cypress/integration/battery.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line">context(<span class="string">'navigator.battery'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'shows battery status of 50%'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">      onBeforeLoad (win) &#123;</span><br><span class="line">        <span class="comment">// mock "navigator.battery" property</span></span><br><span class="line">        <span class="comment">// returning mock charge object</span></span><br><span class="line">        win.navigator.battery = &#123;</span><br><span class="line">          level: <span class="number">0.5</span>,</span><br><span class="line">          charging: <span class="literal">false</span>,</span><br><span class="line">          chargingTime: <span class="literal">Infinity</span>,</span><br><span class="line">          dischargingTime: <span class="number">3600</span>, <span class="comment">// seconds</span></span><br><span class="line">          addEventListener: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// now we can assert actual text - we are charged at 50%</span></span><br><span class="line">    cy.get(<span class="string">'.battery-percentage'</span>)</span><br><span class="line">      .should(<span class="string">'be.visible'</span>)</span><br><span class="line">      .and(<span class="string">'have.text'</span>, <span class="string">'50%'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// not charging means running on battery</span></span><br><span class="line">    cy.contains(<span class="string">'.battery-status'</span>, <span class="string">'Battery'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">    <span class="comment">// and has enough juice for 1 hour</span></span><br><span class="line">    cy.contains(<span class="string">'.battery-remaining'</span>, <span class="string">'1:00'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/battery/mock-battery.png" alt="Mocked property allows us to check more DOM elements"></p><p>This end-to-end test covers a larger surface of our application&#39;s user interface.</p><h2><span id="mocking-navigatorgetbattery-method">Mocking <code>navigator.getBattery</code> method</span></h2><p>The previous test has confirmed that <code>navigator.battery</code> property is read by the application code and the values are rendered correctly. What about the case when the <code>navigator.battery</code> is unavailable and the application falls back to <code>navigator.getBattery</code> method to read the current energy status? Let&#39;s write a test in <a href="https://github.com/bahmutov/demo-battery-api/blob/master/cypress/integration/get-battery.js" target="_blank" rel="noopener">get-battery.js</a> to confirm that it works too.</p><figure class="highlight js"><figcaption><span>cypress/integration/get-battery.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line">context(<span class="string">'navigator.getBattery'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> mockBatteryInfo = &#123;</span><br><span class="line">    level: <span class="number">0.75</span>,</span><br><span class="line">    charging: <span class="literal">true</span>,</span><br><span class="line">    chargingTime: <span class="number">1800</span>, <span class="comment">// seconds</span></span><br><span class="line">    dischargingTime: <span class="literal">Infinity</span>,</span><br><span class="line">    addEventListener: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'shows battery status of 75%'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">      onBeforeLoad (win) &#123;</span><br><span class="line">        <span class="comment">// application tries navigator.battery first</span></span><br><span class="line">        <span class="comment">// so we delete this method</span></span><br><span class="line">        <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line">        <span class="comment">// then the app tries navigator.getBattery</span></span><br><span class="line">        win.navigator.getBattery = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(mockBatteryInfo)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// check the display</span></span><br><span class="line">    cy.contains(<span class="string">'.battery-percentage'</span>, <span class="string">'75%'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">    cy.contains(<span class="string">'.battery-status'</span>, <span class="string">'Adapter'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">    cy.contains(<span class="string">'.battery-fully'</span>, <span class="string">'0:30'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The DOM shows the mocked property values correctly.</p><p><img src="/blog/images/battery/get-battery1.png" alt="`getBattery` resolves and DOM renders formatted values correctly"></p><p>Any time we mock an existing application method, I prefer to create a <a href="https://on.cypress.io/stub" target="_blank" rel="noopener">Cypress method stub</a>. The stub allows us to confirm that it was actually called (and with the right arguments if required). The second test in spec file <a href="https://github.com/bahmutov/demo-battery-api/blob/master/cypress/integration/get-battery.js" target="_blank" rel="noopener">get-battery.js</a> confirms the DOM elements and that the <code>navigator.getBattery</code> was actually invoked.</p><figure class="highlight js"><figcaption><span>cypress/integration/get-battery.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'calls navigator.getBattery'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">    onBeforeLoad (win) &#123;</span><br><span class="line">      <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line">      <span class="comment">// we can create Cypress stub and check</span></span><br><span class="line">      <span class="comment">// that is is really being called by the application code</span></span><br><span class="line">      win.navigator.getBattery = cy</span><br><span class="line">        .stub()</span><br><span class="line">        .resolves(mockBatteryInfo)</span><br><span class="line">        .as(<span class="string">'getBattery'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.contains(<span class="string">'.battery-percentage'</span>, <span class="string">'75%'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">  <span class="comment">// ensure our stub has been called by the application</span></span><br><span class="line">  cy.get(<span class="string">'@getBattery'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/battery/get-battery2.png" alt="Stubs are shown in their own section of the Command Log"></p><h2><span id="battery-status-updates">Battery status updates</span></h2><p>In the mocks above, we returned a no-op <code>addEventListener</code> method with the battery object. Let&#39;s return something meaningful and verify our application updates itself when a new battery event is emitted. The application attaches twice to the returned battery object in order to listen to the following events:</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  battery.addEventListener(<span class="string">'chargingchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    readBattery()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  battery.addEventListener(<span class="string">'levelchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    readBattery()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test is a little bit longer now - I have included a lot of comments and additional steps to make the steps clear. In essence, we set the initial battery status, collect the functions passed by the application, verify them, then call them and verify that the DOM shows the changed values. The spec file <a href="https://github.com/bahmutov/demo-battery-api/blob/master/cypress/integration/updates.js" target="_blank" rel="noopener">updates.js</a> contains this test.</p><figure class="highlight js"><figcaption><span>cypress/integration/updates.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line">context(<span class="string">'navigator.getBattery updates'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'updates battery display'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> appListener</span><br><span class="line">    <span class="keyword">const</span> updateBattery = cy</span><br><span class="line">      .stub()</span><br><span class="line">      .callsFake(<span class="function">(<span class="params">e, fn</span>) =&gt;</span> (appListener = fn))</span><br><span class="line">      .as(<span class="string">'update'</span>)</span><br><span class="line">    <span class="keyword">const</span> mockBatteryInfo = &#123;</span><br><span class="line">      level: <span class="number">0.3</span>,</span><br><span class="line">      charging: <span class="literal">true</span>,</span><br><span class="line">      chargingTime: <span class="number">1800</span>, <span class="comment">// seconds</span></span><br><span class="line">      dischargingTime: <span class="literal">Infinity</span>,</span><br><span class="line">      addEventListener: updateBattery</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">      onBeforeLoad (win) &#123;</span><br><span class="line">        <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line">        win.navigator.getBattery = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(mockBatteryInfo)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// initial display</span></span><br><span class="line">    cy.contains(<span class="string">'.battery-percentage'</span>, <span class="string">'30%'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">    cy.contains(<span class="string">'.battery-status'</span>, <span class="string">'Adapter'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// application started listening for battery updates</span></span><br><span class="line">    <span class="comment">// by attaching to two events</span></span><br><span class="line">    cy.get(<span class="string">'@update'</span>)</span><br><span class="line">      .should(<span class="string">'have.been.calledTwice'</span>)</span><br><span class="line">      <span class="comment">// and check the first arguments to the calls</span></span><br><span class="line">      .and(<span class="string">'have.been.calledWith'</span>, <span class="string">'chargingchange'</span>)</span><br><span class="line">      .and(<span class="string">'have.been.calledWith'</span>, <span class="string">'levelchange'</span>)</span><br><span class="line">      <span class="comment">// send a changed battery status event</span></span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// verify the listener was set</span></span><br><span class="line">        expect(appListener).to.be.a(<span class="string">'function'</span>)</span><br><span class="line">        mockBatteryInfo.level = <span class="number">0.275</span></span><br><span class="line">        <span class="comment">// log message for clarity</span></span><br><span class="line">        cy.log(<span class="string">'Set battery at **27.5%**'</span>)</span><br><span class="line">        appListener()</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// because all Cypress commands are automatically chained</span></span><br><span class="line">    <span class="comment">// this "cy.contains" only runs AFTER</span></span><br><span class="line">    <span class="comment">// previous ".then" completes</span></span><br><span class="line">    cy.contains(<span class="string">'.battery-percentage'</span>, <span class="string">'27.5%'</span>)</span><br><span class="line">      .should(<span class="string">'be.visible'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// let's change a different propety</span></span><br><span class="line">        mockBatteryInfo.charging = <span class="literal">false</span></span><br><span class="line">        appListener()</span><br><span class="line">        <span class="comment">// log message for clarity</span></span><br><span class="line">        cy.log(<span class="string">'Pulling the 🔌'</span>)</span><br><span class="line">        cy.contains(<span class="string">'.battery-status'</span>, <span class="string">'Battery'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/battery/updates.png" alt="Application listens to the battery events"></p><h2><span id="no-battery-api">No battery API</span></h2><p>Great, our application can use either <code>navigator.battery</code> property or <code>navigator.getBattery</code> method to show the initial battery charge status and listen for updates. But what if the browser does not have this API at all? The browser support for this API is <a href="https://caniuse.com/#feat=battery-status" target="_blank" rel="noopener">really limited to Chrome only</a>.</p><p><img src="/blog/images/battery/battery-status-api.png" alt="Battery status API support"></p><p>Let us delete both <code>navigator.battery</code> and <code>navigator.getBattery</code> properties before running out test in <a href="https://github.com/bahmutov/demo-battery-api/blob/master/cypress/integration/no-battery.js" target="_blank" rel="noopener">no-battery.js</a> spec. The test below shows that <em>deleting <code>navigator.getBattery</code> does not work</em>. The method remains there!</p><p><strong>Update:</strong> you can directly delete the battery method from the <code>navigator</code> object - you just need to delete it from the prototype object! See <a href="../cypress-tips-and-tricks/#disable-serviceworker">&quot;Cypress Tips &amp; Tricks&quot; Disable ServiceWorker section</a>.</p><figure class="highlight js"><figcaption><span>cypress/integration/no-battery.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line">context(<span class="string">'no battery'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// this test fails on purpose</span></span><br><span class="line">  it(<span class="string">'just deleting properties does not work'</span>, () =&gt; &#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">      onBeforeLoad (win) &#123;</span><br><span class="line">        <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line"></span><br><span class="line">        <span class="comment">// how to delete navigator.getBattery method?</span></span><br><span class="line">        <span class="comment">// deleting does not work</span></span><br><span class="line">        <span class="keyword">delete</span> win.navigator.getBattery</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// navigator.battery was deleted successfully</span></span><br><span class="line">    cy.window()</span><br><span class="line">      .its(<span class="string">'navigator.battery'</span>)</span><br><span class="line">      .should(<span class="string">'be.undefined'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// but navigator.getBattery happily remains there</span></span><br><span class="line">    cy.window()</span><br><span class="line">      .its(<span class="string">'navigator.getBattery'</span>)</span><br><span class="line">      .should(<span class="string">'be.undefined'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/battery/deleting.png" alt="Deleted property `navigator.getBattery` happily remains there"></p><p>Here is a trick - instead of running <code>delete navigator.getBattery</code> overwrite it using <code>Object.defineProperty</code> like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">  onBeforeLoad (win) &#123;</span><br><span class="line">    <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line"></span><br><span class="line">    <span class="comment">// how to delete navigator.getBattery method?</span></span><br><span class="line">    <span class="comment">// deleting does not work</span></span><br><span class="line">    <span class="comment">// but we can just overwrite it with undefined!</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(win.navigator, <span class="string">'getBattery'</span>, &#123;</span><br><span class="line">      value: <span class="literal">undefined</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>And it will stay undefined - and the test will fail because the application crashes 💥</p><figure class="highlight js"><figcaption><span>cypress/integration/no-battery.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'should not crash'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// but the application does crash</span></span><br><span class="line">  <span class="comment">// if both navigator.battery and navigator.getBattery</span></span><br><span class="line">  <span class="comment">// methods are missing</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Uncaught TypeError: Cannot read property 'addEventListener' of undefined</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// window.onload = function () &#123;</span></span><br><span class="line">  <span class="comment">//   battery.addEventListener('chargingchange', function () &#123;</span></span><br><span class="line">  <span class="comment">//     readBattery()</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br><span class="line">  <span class="comment">//   ...</span></span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">'/'</span>, &#123;</span><br><span class="line">    onBeforeLoad (win) &#123;</span><br><span class="line">      <span class="keyword">delete</span> win.navigator.battery</span><br><span class="line"></span><br><span class="line">      <span class="comment">// how to delete navigator.getBattery method?</span></span><br><span class="line">      <span class="comment">// deleting does not work</span></span><br><span class="line">      <span class="comment">// delete win.navigator.getBattery</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// but we can just overwrite it with undefined!</span></span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(win.navigator, <span class="string">'getBattery'</span>, &#123;</span><br><span class="line">        value: <span class="literal">undefined</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The source of the crash is easy to find - the code calls <code>battery.addEventListener</code> without checking first if the <code>battery</code> is defined.</p><p><img src="/blog/images/battery/crash.png" alt="Application crashes trying to attach the event listener"></p><p>How do we prevent crashes like this from happening? How can we better target our tests to uncover all the edge cases? Do we need to wait for Cypress <a href="https://github.com/cypress-io/cypress/issues/3207" target="_blank" rel="noopener">cross-browser support</a> and run the same test in Firefox to discover the bug? Or do we randomly delete browser API methods hoping to emulate a real-world scenario?</p><p>I will show how we can collect code coverage during end-to-end tests and &quot;discover&quot; the missing code paths in our tests. But it will be a different blog post, so stay tuned by following <a href="https://twitter.com/bahmutov" target="_blank" rel="noopener">@bahmutov</a> on Twitter, or subscribe to this blog&#39;s RSS feed.</p><h2><span id="see-also">See also</span></h2><ul><li>Cypress stubs and spies are <a href="https://sinonjs.org" target="_blank" rel="noopener">sinon.js</a> stubs, so it makes sense to get familiar with this wonderful library.</li><li>Cypress guide to <a href="https://on.cypress.io/stubs-spies-and-clocks" target="_blank" rel="noopener">spies, stubs and clocks</a> is really good.</li><li><strong>Update:</strong> read the new blog post <a href="../code-coverage-for-e2e-tests/">&quot;Code Coverage for End-to-end Tests&quot;</a> that explains how to collect code coverage during end-to-end tests and fix the missed edge case.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#battery-status-web-app&quot;&gt;Battery status web app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#simple-test&quot;&gt;Simple test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Testing an online chainsaw store using Cypress.io</title>
    <link href="https://glebbahmutov.com/blog/chainsaws/"/>
    <id>https://glebbahmutov.com/blog/chainsaws/</id>
    <published>2019-04-25T04:00:00.000Z</published>
    <updated>2019-04-29T14:02:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Source code</strong> for this blog post is in <a href="https://github.com/bahmutov/testing-chainsawsdirect" target="_blank" rel="noopener">https://github.com/bahmutov/testing-chainsawsdirect</a> repo.</p><p>I don&#39;t know what kind of chainsaw <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> is (maybe it is an open source chainsaw ?!) but I do know that Cypress can quickly test an online chainsaw store like <a href="https://www.chainsawsdirect.com" target="_blank" rel="noopener">www.chainsawsdirect.com</a>.</p><h2><span id="first-test">First test</span></h2><p>I have installed Cypress with <code>npm install -D cypress</code> and created <code>cypress.json</code> file with base url pointing at the domain I want to test: <a href="https://www.chainsawsdirect.com" target="_blank" rel="noopener">www.chainsawsdirect.com</a></p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"https://www.chainsawsdirect.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>My first test is simple - it selects a type of the product and checks if the page shows at least a few matching ones.</p><figure class="highlight js"><figcaption><span>cypress/integration/first.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'has gas chainsaws'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  cy.get(<span class="string">'#style1'</span>).select(<span class="string">'Chain Saws - Gas'</span>)</span><br><span class="line">  <span class="comment">// make sure there are at least double digit number of products</span></span><br><span class="line">  cy.contains(<span class="string">'.plcount'</span>, /^\d\d Products$/).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs and passes</p><p><img src="/blog/images/chainsaws/first.gif" alt="Has gas chainsaws test"></p><p>If I hover over any command in the Command Log (left side of the GUI), it will show the view of the application at that moment. For example, I can hover over &quot;CONTAINS ...&quot; command and see that the right text on the page is highlighted - our test is asserting the right thing.</p><p><img src="/blog/images/chainsaws/first-products.png" alt="Highlights number of gas chainsaws found"></p><p><strong>Note:</strong> the red XHR calls in the Command Log are the calls to the ad tracking service I <a href="https://on.cypress.io/configuration#blacklistHosts" target="_blank" rel="noopener">have blacklisted</a> from <code>cypress.json</code> file.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"https://www.chainsawsdirect.com"</span>,</span><br><span class="line">  <span class="attr">"blacklistHosts"</span>: <span class="string">"wrs.adrsp.net"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="test-organization">Test organization</span></h2><p>Following the <a href="https://on.cypress.io/writing-and-organizing-tests" target="_blank" rel="noopener">Writing and organizing test</a> guide, I can refactor my spec file to avoid code duplication. For example, we can visit the page before each test:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'has gas chainsaws'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'#style1'</span>).select(<span class="string">'Chain Saws - Gas'</span>)</span><br><span class="line">  cy.contains(<span class="string">'.plcount'</span>, /^\d\d Products$/).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="prices-test">Prices test</span></h2><p>Hmm, $500 for a gas chainsaw is kind of steep. I would like to buy a reasonably priced saw, so let&#39;s test that we can see all gas chainsaws sorted by price from low to high. Cypress <a href="https://on.cypress.io/selector-playground" target="_blank" rel="noopener">Selector Playground</a> helps me find the selector command for the price widget:</p><p><img src="/blog/images/chainsaws/sort-selector.png" alt="Selector Playground suggests the command to use"></p><p>We can sort found products and get all DOM elements with the prices.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">'Chainsaw Direct'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'has reasonably priced gas chainsaws'</span>, () =&gt; &#123;</span><br><span class="line">    cy.get(<span class="string">'#style1'</span>).select(<span class="string">'Chain Saws - Gas'</span>)</span><br><span class="line">    cy.contains(<span class="string">'.plcount'</span>, /^\d\d Products$/).should(<span class="string">'be.visible'</span>)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'#sort_value'</span>).select(<span class="string">'Price: Low to High'</span>)</span><br><span class="line">    cy.get(<span class="string">'.regPrice'</span>).should(<span class="string">'have.length.gt'</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/chainsaws/low-to-high.gif" alt="Prices low to high"></p><p>Great, there are 22 products currently in the store, and they seem arranged from low price to higher prices. But are we sure that the products are really sorted? The low price $154.99 is nice, but I would like to</p><ul><li>grab all elements with prices like <code>$154.99</code>, <code>$159.99</code>, ...</li><li>convert to numbers</li><li>assert that the list of numbers follows the increasing order</li></ul><p>The <a href="https://on.cypress.io/assertions" target="_blank" rel="noopener">built-in Chai assertions</a> that come with Cypress do not include &quot;array should be sorted&quot; assertion, but a quick NPM search finds a package that seems to do what I need.</p><p><img src="/blog/images/chainsaws/npm-search.png" alt="Find chai-sorted"></p><p>Extending Cypress Chai object with additional assertions is show in <a href="https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/extending-cypress__chai-assertions" target="_blank" rel="noopener">&quot;Adding Chai Assertions&quot; recipe</a> and is simple. Just add these two lines to <code>cypress/support/index.js</code> file.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chaiSorted <span class="keyword">from</span> <span class="string">'chai-sorted'</span></span><br><span class="line">chai.use(chaiSorted)</span><br></pre></td></tr></table></figure><p>Update the test to parse elements&#39; text content and add assertion</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">'Chainsaw Direct'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'has reasonably priced gas chainsaws'</span>, () =&gt; &#123;</span><br><span class="line">    cy.get(<span class="string">'#style1'</span>).select(<span class="string">'Chain Saws - Gas'</span>)</span><br><span class="line">    cy.contains(<span class="string">'.plcount'</span>, /^\d\d Products$/).should(<span class="string">'be.visible'</span>)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'#sort_value'</span>).select(<span class="string">'Price: Low to High'</span>)</span><br><span class="line">    cy.get(<span class="string">'.regPrice'</span>)</span><br><span class="line">      .should(<span class="string">'have.length.gt'</span>, <span class="number">0</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">$prices</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// remove "$" from prices and convert to strings</span></span><br><span class="line">        <span class="keyword">const</span> prices = $prices</span><br><span class="line">          .toArray()</span><br><span class="line">          .map(<span class="function"><span class="params">$el</span> =&gt;</span> <span class="built_in">parseFloat</span>($el.innerText.substr(<span class="number">1</span>)))</span><br><span class="line">        <span class="comment">// assertion comes from chai-sorted</span></span><br><span class="line">        expect(prices).to.be.sorted()</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful, there are 22 prices, and they are displayed sorted in ascending order.</p><p><img src="/blog/images/chainsaws/sorted.png" alt="Prices are in ascending order"></p><h2><span id="search-test">Search test</span></h2><p>I can see that there is a search box that shows different results as I type.</p><p><img src="/blog/images/chainsaws/search-xhr.png" alt="Search XHR calls"></p><p>I can inspect each XHR call to find out how the API returns the search results. Let&#39;s get it to show &quot;Cypress Test Runner&quot; as the one and only search result 😁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'finds Cypress among the saws'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// stub API calls to the search endpoint</span></span><br><span class="line">  cy.server()</span><br><span class="line">  cy.route(<span class="string">'/sayt.php?q=Cypr*'</span>, &#123;</span><br><span class="line">    suggestions: [</span><br><span class="line">      &#123;</span><br><span class="line">        value: <span class="string">'Cypress Test Runner'</span>,</span><br><span class="line">        data: <span class="number">1</span>,</span><br><span class="line">        exactMatch: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// by stubbing search XHRs we can return a single</span></span><br><span class="line">  <span class="comment">// result when typing "Cypress" into the search box</span></span><br><span class="line">  cy.get(<span class="string">'#searchText'</span>).type(<span class="string">'Cypress'</span>, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;)</span><br><span class="line">  cy.get(<span class="string">'.autocomplete-suggestion'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">1</span>)</span><br><span class="line">    .first()</span><br><span class="line">    .should(<span class="string">'have.text'</span>, <span class="string">'Cypress Test Runner'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs and the test results are showing the synthetic test result we have returned from the stubbed XHR.</p><p><img src="/blog/images/chainsaws/found.gif" alt="Prices are in ascending order"></p><p>All good.</p><h2><span id="conclusions">Conclusions</span></h2><p>Cypress test runner is a quick and enjoyable way to write and run end-to-end tests for any website. Well, for almost any website - we have difficulties with websites that <a href="https://github.com/cypress-io/cypress/issues/685" target="_blank" rel="noopener">use iframes</a>, <a href="https://github.com/cypress-io/cypress/issues/144" target="_blank" rel="noopener">shadow DOM</a> or <a href="https://github.com/cypress-io/cypress/issues/944" target="_blank" rel="noopener">multiple domains</a>. But aside from that - if you need to cut some nice looking tests, try <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Source code&lt;/strong&gt; for this blog post is in &lt;a href=&quot;https://github.com/bahmutov/testing-chainsawsdirect&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>NPM Install with just GitHub</title>
    <link href="https://glebbahmutov.com/blog/npm-install-with-just-github/"/>
    <id>https://glebbahmutov.com/blog/npm-install-with-just-github/</id>
    <published>2019-04-02T04:00:00.000Z</published>
    <updated>2019-04-02T03:21:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have discussed how to <a href="../use-github-instead-of-npm/">Use GitHub instead of NPM</a> to share and install NPM modules. But that blog post had a huge shortcoming - it did not deal with built or transpiled artifacts. More and more NPM packages are now transpiled from TypeScript for example, and thus usually have two folders: <code>lib</code> and <code>dist</code>. The GitHub repository only has the <code>lib</code> folder with the original source. The built <code>dist</code> folder is the one published to the NPM registry.</p><p>If we just install an NPM package from GitHub we will not get the <code>dist</code> folder - it is not on GitHub. We could try building it ourselves ... but that is tricky, since the project might be a pain to build.</p><p>Today I had just this problem - I needed to quickly patch <a href="https://github.com/percy/percy-cypress" target="_blank" rel="noopener">@percy/cypress</a> NPM module to get around Webpack <a href="https://github.com/percy/percy-cypress/issues/58" target="_blank" rel="noopener">bundling problem there</a>. I have opened a <a href="https://github.com/percy/percy-cypress/pull/69" target="_blank" rel="noopener">pull request</a> with my work around from my fork <a href="https://github.com/bahmutov/percy-cypress/tree/find-percy-58" target="_blank" rel="noopener">bahmutov/percy-cypress branch find-percy-58</a>.</p><p>Meanwhile I wanted to use my patched version in <a href="https://github.com/bahmutov/calculator" target="_blank" rel="noopener">bahmutov/calculator</a> project. I could simply install my fork using <code>github:</code> reference</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D github:bahmutov/percy-cypress</span><br></pre></td></tr></table></figure><p>But this installation installs ... wrong files</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l node_modules/\@percy/cypress/</span><br><span class="line">total 80</span><br><span class="line">-rw-r--r--  1 gleb  wheel  1072 Oct 26  1985 LICENSE</span><br><span class="line">-rw-r--r--  1 gleb  wheel   420 Oct 26  1985 README.md</span><br><span class="line">-rw-r--r--  1 gleb  wheel   477 Oct 26  1985 appveyor.yml</span><br><span class="line">-rw-r--r--  1 gleb  wheel   627 Oct 26  1985 dependencies.yml</span><br><span class="line">-rw-r--r--  1 gleb  wheel  1878 Apr  1 22:59 package.json</span><br><span class="line">-rwxr-xr-x  1 gleb  wheel   255 Oct 26  1985 release.sh</span><br><span class="line">-rw-r--r--  1 gleb  wheel  1875 Oct 26  1985 run-tests.js</span><br><span class="line">-rw-r--r--  1 gleb  wheel  5329 Oct 26  1985 tsconfig.json</span><br><span class="line">-rw-r--r--  1 gleb  wheel   197 Oct 26  1985 tslint.json</span><br></pre></td></tr></table></figure><p>I need to install <em>the built</em> module. So here is how to do this myself.</p><p>First, add the <code>files: []</code> property to the <a href="https://github.com/bahmutov/percy-cypress/blob/fix-webpack/package.json" target="_blank" rel="noopener">package.json</a>. It is more flexible than just <code>.npmignore</code> since when using <code>files</code> you can whitelist or blacklist files and folders. In our case, we want to only distribute the <code>dist</code> folder with the NPM package. Compare the files before and after.</p><p><strong>before</strong> adding <code>files</code> property</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ npm pack --dry</span><br><span class="line">npm notice</span><br><span class="line">npm notice 📦  @percy/cypress@1.0.5</span><br><span class="line">npm notice === Tarball Contents ===</span><br><span class="line">npm notice 1.2kB package.json</span><br><span class="line">npm notice 477B  appveyor.yml</span><br><span class="line">npm notice 627B  dependencies.yml</span><br><span class="line">npm notice 1.1kB LICENSE</span><br><span class="line">npm notice 3.5kB percy-cypress-1.0.5.tgz</span><br><span class="line">npm notice 420B  README.md</span><br><span class="line">npm notice 255B  release.sh</span><br><span class="line">npm notice 1.9kB run-tests.js</span><br><span class="line">npm notice 5.3kB tsconfig.json</span><br><span class="line">npm notice 197B  tslint.json</span><br><span class="line">npm notice 507B  .circleci/config.yml</span><br><span class="line">npm notice 97B   dist/environment.d.ts</span><br><span class="line">npm notice 516B  dist/environment.js</span><br><span class="line">npm notice 11B   dist/index.d.ts</span><br><span class="line">npm notice 3.6kB dist/index.js</span><br><span class="line">npm notice 775B  dist/percy-healthcheck</span><br><span class="line">npm notice === Tarball Details ===</span><br><span class="line">npm notice name:          @percy/cypress</span><br><span class="line">npm notice version:       1.0.5</span><br><span class="line">npm notice filename:      percy-cypress-1.0.5.tgz</span><br><span class="line">npm notice package size:  11.2 kB</span><br><span class="line">npm notice unpacked size: 20.4 kB</span><br><span class="line">npm notice shasum:        3f195fc4d1e93032d14e88e4be885c0ceee4387e</span><br><span class="line">npm notice integrity:     sha512-PoLpQJbOCd+2p[...]9rS2kGW/MQv0A==</span><br><span class="line">npm notice total files:   16</span><br><span class="line">npm notice</span><br><span class="line">percy-cypress-1.0.5.tgz</span><br></pre></td></tr></table></figure><p>Lots of stray files - no user of this NPM package needs <code>tslint.json</code> for example. <strong>After</strong> adding <code>files: [&quot;dist&quot;]</code> we get just the necessary file list.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ npm pack --dry</span><br><span class="line">npm notice</span><br><span class="line">npm notice 📦  @percy/cypress@1.0.5</span><br><span class="line">npm notice === Tarball Contents ===</span><br><span class="line">npm notice 1.2kB package.json</span><br><span class="line">npm notice 1.1kB LICENSE</span><br><span class="line">npm notice 420B  README.md</span><br><span class="line">npm notice 97B   dist/environment.d.ts</span><br><span class="line">npm notice 516B  dist/environment.js</span><br><span class="line">npm notice 11B   dist/index.d.ts</span><br><span class="line">npm notice 3.6kB dist/index.js</span><br><span class="line">npm notice 775B  dist/percy-healthcheck</span><br><span class="line">npm notice === Tarball Details ===</span><br><span class="line">npm notice name:          @percy/cypress</span><br><span class="line">npm notice version:       1.0.5</span><br><span class="line">npm notice filename:      percy-cypress-1.0.5.tgz</span><br><span class="line">npm notice package size:  3.5 kB</span><br><span class="line">npm notice unpacked size: 7.7 kB</span><br><span class="line">npm notice shasum:        1afc7e5117dfda71fbb32d3326a7145faba052af</span><br><span class="line">npm notice integrity:     sha512-NA75z/sUCpZLR[...]gmy9ZyI3rQo8Q==</span><br><span class="line">npm notice total files:   8</span><br><span class="line">npm notice</span><br><span class="line">percy-cypress-1.0.5.tgz</span><br></pre></td></tr></table></figure><p>Super. Now, push the code (using a separate branch for example) to GitHub. Start a new release there.</p><p><img src="/blog/images/draft-release.png" alt="Draft new release"></p><p>When you make a GitHub release you can drop binary files there.</p><p><img src="/blog/images/release-binaries.png" alt="Attach binaries to release"></p><p>To prepare a binary file, run <code>npm pack</code> command (without <code>--dry</code> option). This will give you a <code>tgz</code> file like <code>percy-cypress-1.0.5.tgz</code>. Drop this file <em>into the GitHub release</em>. Here is the <a href="https://github.com/bahmutov/percy-cypress/releases/tag/fix-webpack" target="_blank" rel="noopener"><code>fix-webpack</code></a> I have made.</p><p><img src="/blog/images/github-tgz.png" alt="GitHub release with NPM module tgz file"></p><p>Right click on the <code>percy-cypress-1.0.5.tgz</code> file to grab the download url, in this case it will be <code>https://github.com/bahmutov/percy-cypress/releases/download/fix-webpack/percy-cypress-1.0.5.tgz</code>. You can <code>npm install</code> that URL!</p><p>So I went to my example project <a href="https://github.com/bahmutov/calculator" target="_blank" rel="noopener">bahmutov/calculator</a> and ran</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D https://github.com/bahmutov/percy-cypress/releases/download/fix-webpack/percy-cypress-1.0.5.tgz</span><br></pre></td></tr></table></figure><p>The installed NPM package is beautiful; it just has what is necessary.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l node_modules/\@percy/cypress/</span><br><span class="line">total 24</span><br><span class="line">-rw-r--r--  1 gleb  staff  1072 Oct 26  1985 LICENSE</span><br><span class="line">-rw-r--r--  1 gleb  staff   420 Oct 26  1985 README.md</span><br><span class="line">drwxr-xr-x  7 gleb  staff   238 Apr  1 22:23 dist</span><br><span class="line">-rw-r--r--  1 gleb  staff  2497 Apr  1 22:23 package.json</span><br></pre></td></tr></table></figure><p>The <a href="https://github.com/bahmutov/calculator/blob/ab87fd8e18d5061fc19e49a09dcbb5483e9a82a5/package.json#L8" target="_blank" rel="noopener">package.json</a> keeps the long original download url. Thus this installation works on CI server the same way.</p><p>Everything is peachy: I have my fork, and I can install it from other NPM projects.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have discussed how to &lt;a href=&quot;../use-github-instead-of-npm/&quot;&gt;Use GitHub instead of NPM&lt;/a&gt; to share and install NPM modules. But that 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
      <category term="git" scheme="https://glebbahmutov.com/blog/tags/git/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Readable Cypress.io tests</title>
    <link href="https://glebbahmutov.com/blog/readable-tests/"/>
    <id>https://glebbahmutov.com/blog/readable-tests/</id>
    <published>2019-04-01T04:00:00.000Z</published>
    <updated>2019-04-01T14:10:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>The tests should be simple to read and understand. The tests are already a layer on top the production code that is complex, so they should not add their own quirks or gotchas. In this blog post I will show how to make the tests express their meaning by adding custom Cypress commands, and how to make assertions really simple to understand by extending the default Chai assertions.</p><p><strong>Note:</strong> these examples come from the repository <a href="https://github.com/bahmutov/todo-api-with-json-schema" target="_blank" rel="noopener">bahmutov/todo-api-with-json-schema</a>.</p><h2><span id="the-example">The example</span></h2><p>In my example application, the production code and the tests are using <a href="http://json-schema.org/" target="_blank" rel="noopener">json-schemas</a>. These schemas are created and validated using <a href="https://github.com/cypress-io/schema-tools" target="_blank" rel="noopener">@cypress-io/schema-tools</a> library. See these resources to learn why we are using JSON schemas</p><ul><li><a href="https://slides.com/bahmutov/json-schemas-update" target="_blank" rel="noopener">&quot;JSON Schemas: State of Testing Update&quot;</a> presentation</li><li><a href="https://slides.com/bahmutov/json-schemas-confoo" target="_blank" rel="noopener">&quot;JSON Schemas are your True Testing Friend&quot;</a> presentation and its companion <a href="https://www.cypress.io/blog/2018/07/10/json-schemas-are-your-true-testing-friend/" target="_blank" rel="noopener">blog post</a></li></ul><p>I have created a schema for request and response to the API that validates Todo objects the web application is saving and loading from the server. Here the <a href="https://github.com/bahmutov/todo-api-with-json-schema/blob/master/schemas/post-todo-request.ts" target="_blank" rel="noopener">schemas/post-todo-request.ts</a> file that describes what the server expects to receive.</p><figure class="highlight js"><figcaption><span>schemas/post-todo-request.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ObjectSchema, versionSchemas &#125; <span class="keyword">from</span> <span class="string">'@cypress/schema-tools'</span></span><br><span class="line"><span class="keyword">import</span> &#123; formats &#125; <span class="keyword">from</span> <span class="string">'../formats'</span></span><br><span class="line"></span><br><span class="line">type uuid = string</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Todo item sent by the client.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">type PostTodoRequestExample100 = &#123;</span><br><span class="line">  text: string</span><br><span class="line">  done: boolean</span><br><span class="line">  uuid: uuid</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postTodoExample100: PostTodoRequestExample100 = &#123;</span><br><span class="line">  text: <span class="string">'do something'</span>,</span><br><span class="line">  done: <span class="literal">false</span>,</span><br><span class="line">  uuid: <span class="string">'20514af9-2a2a-4712-9c1e-0510c288c9ec'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PostTodoRequest100: ObjectSchema = &#123;</span><br><span class="line">  version: &#123;</span><br><span class="line">    major: <span class="number">1</span>,</span><br><span class="line">    minor: <span class="number">0</span>,</span><br><span class="line">    patch: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  schema: &#123;</span><br><span class="line">    title: <span class="string">'PostTodoRequest'</span>,</span><br><span class="line">    type: <span class="string">'object'</span>,</span><br><span class="line">    description: <span class="string">'Todo item sent by the client'</span>,</span><br><span class="line">    properties: &#123;</span><br><span class="line">      text: &#123;</span><br><span class="line">        type: <span class="string">'string'</span>,</span><br><span class="line">        description: <span class="string">'Todo text, like "clean room"'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      done: &#123;</span><br><span class="line">        type: <span class="string">'boolean'</span>,</span><br><span class="line">        description: <span class="string">'Is this todo item completed?'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      uuid: &#123;</span><br><span class="line">        type: <span class="string">'string'</span>,</span><br><span class="line">        format: formats.uuid.name, <span class="comment">// "uuid"</span></span><br><span class="line">        description: <span class="string">'item random GUID'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// require all properties</span></span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// do not allow any extra properties</span></span><br><span class="line">    additionalProperties: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  example: postTodoExample100,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PostTodoRequest = versionSchemas(PostTodoRequest100)</span><br></pre></td></tr></table></figure><p>Given an object, we can assert that it follows the above schema in a Jest test like this one:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; assertSchema &#125; <span class="keyword">from</span> <span class="string">'@cypress/schema-tools'</span></span><br><span class="line"><span class="keyword">import</span> &#123; schemas &#125; <span class="keyword">from</span> <span class="string">'../schemas'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'POST /todo request'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> assertTodoRequest = assertSchema(schemas)(<span class="string">'postTodoRequest'</span>, <span class="string">'1.0.0'</span>)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'valid TODO request object'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> todo = &#123;</span><br><span class="line">      text: <span class="string">'use scheams'</span>,</span><br><span class="line">      done: <span class="literal">true</span>,</span><br><span class="line">      uuid: <span class="string">'4899e1a9-e38f-43f9-a765-35b81a41c65d'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// all good, the object is passing schema validation</span></span><br><span class="line">    expect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      assertTodoRequest(todo)</span><br><span class="line">    &#125;).not.toThrow()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>But any object NOT following the schema will raise an error with really good explanation message.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'TODO request object missing text'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> todo = &#123;</span><br><span class="line">    done: <span class="literal">true</span>,</span><br><span class="line">    uuid: <span class="string">'4899e1a9-e38f-43f9-a765-35b81a41c65d'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  expect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    assertTodoRequest(todo)</span><br><span class="line">  &#125;).toThrowErrorMatchingSnapshot()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The snapshot in this case is</p><figure class="highlight js"><figcaption><span>__tests__/__snapshots__/post-todo-request-test.ts.snap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Jest Snapshot v1, https://goo.gl/fbAQLP</span></span><br><span class="line"></span><br><span class="line">exports[<span class="string">`POST /todo request TODO request object missing text 1`</span>] = <span class="string">`</span></span><br><span class="line"><span class="string">"Schema postTodoRequest@1.0.0 violated</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Errors:</span></span><br><span class="line"><span class="string">data.text is required</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Current object:</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  \\"done\\": true,</span></span><br><span class="line"><span class="string">  \\"uuid\\": \\"4899e1a9-e38f-43f9-a765-35b81a41c65d\\"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Expected object like this:</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  \\"done\\": false,</span></span><br><span class="line"><span class="string">  \\"text\\": \\"do something\\",</span></span><br><span class="line"><span class="string">  \\"uuid\\": \\"20514af9-2a2a-4712-9c1e-0510c288c9ec\\"</span></span><br><span class="line"><span class="string">&#125;"</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>Nice, the errors are readable, but what about our end-to-end tests?</p><h2><span id="end-to-end-tests">End-to-end tests</span></h2><p>When we have a web application making requests to the server API, our end-to-end tests should validate two main things:</p><ul><li><a href="https://on.cypress.io/fixture" target="_blank" rel="noopener">fixture files</a> Cypress can use to mock complex network calls. We really want the fixture files to be valid with respect to the schemas used.</li><li>network requests and responses should confirm to the schema we expect</li></ul><h3><span id="validating-fixtures">Validating fixtures</span></h3><p>We can validate a fixture file using the methods provided by the <a href="https://github.com/cypress-io/schema-tools" target="_blank" rel="noopener">@cypress-io/schema-tools</a> function. For example in <a href="https://github.com/bahmutov/todo-api-with-json-schema/blob/master/cypress/integration/fixture-spec.js" target="_blank" rel="noopener">cypress/integration/fixture-spec.js</a> we can import the <code>api</code> object created by the schema utilities and use <code>api.assertSchema</code> to validate a loaded object.</p><figure class="highlight js"><figcaption><span>cypress/integration/fixture-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; api &#125; <span class="keyword">from</span> <span class="string">'../../dist/schemas'</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">'has todo fixture matching schema'</span>, () =&gt; &#123;</span><br><span class="line">  cy.fixture(<span class="string">'todo'</span>).then(api.assertSchema(<span class="string">'PostTodoRequest'</span>, <span class="string">'1.0.0'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This is ok, but it is less than readable. Luckily we can make it better by writing a <a href="https://on.cypress.io/custom-commands" target="_blank" rel="noopener">Cypress custom command</a>. I will write a custom command in <a href="https://github.com/bahmutov/todo-api-with-json-schema/blob/master/cypress/support/commands.js" target="_blank" rel="noopener">cypress/support/commands.js</a>:</p><figure class="highlight js"><figcaption><span>cypress/support/commands.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; api &#125; <span class="keyword">from</span> <span class="string">'../../dist/schemas'</span></span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(</span><br><span class="line">  <span class="string">'fixtureSchema'</span>,</span><br><span class="line">  (fixtureName, schemaName, schemaVersion) =&gt; &#123;</span><br><span class="line">    <span class="comment">// verify input arguments to prevent silly mistakes</span></span><br><span class="line">    expect(fixtureName, <span class="string">'fixture name'</span>).to.be.a(<span class="string">'string'</span>)</span><br><span class="line">    expect(schemaName, <span class="string">'schema name'</span>).to.be.a(<span class="string">'string'</span>)</span><br><span class="line">    expect(schemaVersion, <span class="string">'schema version'</span>).to.match(<span class="regexp">/^\d+\.\d+\.\d+$/</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// load and verify the fixture itself</span></span><br><span class="line">    cy.fixture(fixtureName, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).then(</span><br><span class="line">      api.assertSchema(schemaName, schemaVersion)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>and will include this <code>commands.js</code> file from the <a href="https://github.com/bahmutov/todo-api-with-json-schema/blob/master/cypress/support/index.js" target="_blank" rel="noopener">cypress/support/index.js</a> file</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./commands'</span></span><br></pre></td></tr></table></figure><p>Super, our fixture validation becomes readable:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'loads and asserts todo schema'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// uses a custom command we have added in cypress/support/commands.js</span></span><br><span class="line">  cy.fixtureSchema(<span class="string">'todo'</span>, <span class="string">'PostTodoRequest'</span>, <span class="string">'1.0.0'</span>)</span><br><span class="line">    <span class="comment">// you can chain commands to the loaded fixture</span></span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'text'</span>, <span class="string">'use fixtures'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The combined command <code>cy.fixtureSchema</code> lessens the overhead for anyone reading the spec code, leaving more mental capacity to actually think about the application and its logic.</p><p>If an object loaded from a fixture file does not match the schema, a good error is displayed in the Cypress GUI.</p><p><img src="/blog/images/readable-tests/fixture-does-not-match-schema.png" alt="Object loaded from the fixture file does not match the schema"></p><p>Great.</p><h3><span id="custom-assertions">Custom assertions</span></h3><p>In addition to the custom commands, we can also extend the Chai assertions with our own predicates. In our repository I will add file <code>cypress/support/assertions.js</code> and will import this file from the <code>cypress/support/index.js</code> file.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./commands'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./assertions'</span></span><br></pre></td></tr></table></figure><p>Let&#39;s add a custom Chai assertion that validates an object against a schema.</p><figure class="highlight js"><figcaption><span>cypress/support/assertions.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; api &#125; <span class="keyword">from</span> <span class="string">'../../dist/schemas'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// how to add a custom Chai assertion to Cypress</span></span><br><span class="line"><span class="comment">// see "Adding Chai Assertions" recipe in</span></span><br><span class="line"><span class="comment">// https://github.com/cypress-io/cypress-example-recipes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isFollowingSchema = <span class="function">(<span class="params">_chai, utils</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">assertFollowingSchema</span> (<span class="params">schemaName, schemaVersion</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// if the subject does not the schema, we will</span></span><br><span class="line">    <span class="comment">// get a very nice error message from "api.assertSchema"</span></span><br><span class="line">    api.assertSchema(schemaName, schemaVersion)(<span class="keyword">this</span>._obj)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// but if assertion passes, we should print passing assertion</span></span><br><span class="line">    <span class="comment">// message which we can do using Chai</span></span><br><span class="line">    <span class="keyword">this</span>.assert(</span><br><span class="line">      <span class="literal">true</span>,</span><br><span class="line">      <span class="string">`expected subject to follow schema **<span class="subst">$&#123;schemaName&#125;</span>@<span class="subst">$&#123;schemaVersion&#125;</span>**`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _chai.Assertion.addMethod(<span class="string">'followSchema'</span>, assertFollowingSchema)</span><br><span class="line">&#125;</span><br><span class="line">chai.use(isFollowingSchema)</span><br></pre></td></tr></table></figure><p>Notice there are 2 assertions in the <code>isFollowingSchema</code> callback: the &quot;real&quot; one and an always-passing one <code>this.assert(true, &lt;message&gt;)</code>. This is a little trick I use to have a detailed error message if an assertion fails, and a short success message when the object conforms to the schema. Here is an example test validating the response body.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'returns new item matching schema'</span>, () =&gt; &#123;</span><br><span class="line">  cy.server()</span><br><span class="line">  cy.route(<span class="string">'POST'</span>, <span class="string">'/todos'</span>).as(<span class="string">'post'</span>)</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">'Use schemas&#123;enter&#125;'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check response passes schema</span></span><br><span class="line">  cy.wait(<span class="string">'@post'</span>)</span><br><span class="line">    .its(<span class="string">'response.body'</span>)</span><br><span class="line">    <span class="comment">// use custom Chai assertion</span></span><br><span class="line">    .should(<span class="string">'followSchema'</span>, <span class="string">'PostTodoResponse'</span>, <span class="string">'1.0.0'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When the test passes, the Command Log is showing the summary thanks to that &quot;dummy&quot; <code>this.assert(true, ...)</code> assertion trick.</p><p><img src="/blog/images/readable-tests/custom-assertion.png" alt="Returned object passes schema message"></p><h2><span id="adding-intellisense">Adding IntelliSense</span></h2><p>Cypress commands and assertions come with full JSDoc comments, which allows a modern text editor like VSCode to show help during test writing. For example when hovering over <code>cy.should</code> this tooltip pops up:</p><p><img src="/blog/images/readable-tests/should-help.jpeg" alt="`cy.should` documentation"></p><p>Note that the help box shows help for <code>cy.should</code> WITH <code>have.property</code> assertion! Thus we should be able to specify JSDoc for both our custom commands and for custom assertions. To do this, create a new file <code>cypress/support/index.d.ts</code>. It is a TypeScript file that will describe additional <code>cy</code> commands and assertions. The new commands are added to the <code>Chainable&lt;Subject&gt;</code> interface, and the new assertions are added to the <code>Chainer&lt;Subject&gt;</code> interface. For each command and assertion I will write a detailed JSDoc command with examples.</p><figure class="highlight ts"><figcaption><span>cypress/support/index.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Semver string, usually simple like "major.minor.patch"</span></span><br><span class="line"><span class="comment"> * @example</span></span><br><span class="line"><span class="comment"> * const version: semverString = '2.1.0'</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> semverString = <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> Cypress &#123;</span><br><span class="line">  <span class="keyword">interface</span> Chainable&lt;Subject&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Load a fixture JSON and check it against a schema.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @example</span></span><br><span class="line"><span class="comment">     * cy.fixtureSchema('single-todo', 'Todo', '1.1.0')</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    fixtureSchema(fixturePath: <span class="built_in">string</span>,</span><br><span class="line">      schemaName: <span class="built_in">string</span>, schemaVersion: semverString): Chainable&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">interface</span> Chainer&lt;Subject&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Custom Chai assertion that checks if the given subject follows</span></span><br><span class="line"><span class="comment">     * a schema</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @example</span></span><br><span class="line"><span class="comment">    cy.wrap(&#123; ... &#125;)</span></span><br><span class="line"><span class="comment">      .should('followSchema', 'mySchemaName', '2.1.0')</span></span><br><span class="line"><span class="comment">    cy.fixture('filename')</span></span><br><span class="line"><span class="comment">      .should('followSchema', 'PostTodoRequest', '1.0.0')</span></span><br><span class="line"><span class="comment">    cy.wait('@networkCallAlias')</span></span><br><span class="line"><span class="comment">      .its('response.body')</span></span><br><span class="line"><span class="comment">      .should('followSchema', 'PostTodoResponse', '1.0.0')</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    (chainer: <span class="string">'followSchema'</span>,</span><br><span class="line">      schemaName: <span class="built_in">string</span>, schemaVersion: <span class="built_in">string</span>): Chainable&lt;Subject&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Special note:</strong> my blog&#39;s syntax highlighting does not parse the original JSDoc for the above assertion correctly. Here is a screenshot of how it SHOULD be to avoid VSCode parsing to break on <code>@networkCallAlias</code> string and to preserve indentation:</p><p><img src="/blog/images/readable-tests/indent.png" alt="Use tripple slashes in JSdoc to preserve example indent"></p><p>I write my code examples using triple back ticks like that to preserve indentation and avoid problems caused by <code>@</code> character in the network alias.</p><p>Once we have this support <code>index.d.ts</code> file in place, we can include it from our JavaScript spec files (and it can replace the regular triple-slash special command importing <code>cypress</code> types).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in a JavaScript spec file, instead of this:</span></span><br><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import your own support .d.ts file</span></span><br><span class="line"><span class="comment">// which will import Cypress in turn</span></span><br><span class="line"><span class="comment">// and will add your custom definitions</span></span><br><span class="line"><span class="comment">/// &lt;reference path="../support/index.d.ts" /&gt;</span></span><br></pre></td></tr></table></figure><p>Hover over <code>cy.fixtureSchema</code> and see documentation from the <code>.d.ts</code> file</p><p><img src="/blog/images/readable-tests/custom-command.jpeg" alt="IntelliSense for custom command"></p><p>Typing a custom assertion <code>should(&#39;followSchema&#39;, ...)</code> brings the following help popup</p><p><img src="/blog/images/readable-tests/typing-custom-assertion.png" alt="IntelliSense for custom assertion"></p><p>In all cases, good documentation is essential.</p><h2><span id="conclusions">Conclusions</span></h2><p>Making test code as readable as possible is a worthy goal. Each test command and assertion can express its intent, and custom commands and assertions help achieve this.</p><p>I would suggest adding custom commands and assertions to their own files in <code>cypress/support</code> folder and including them from <code>cypress/support/index.js</code> file</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./commands'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./assertions'</span></span><br></pre></td></tr></table></figure><p>I would also write a TypeScript definition file like <code>cypress/support/index.d.ts</code> that describes the new commands and assertions and is loaded by IntelliSense to provide pop-up help during editing.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The tests should be simple to read and understand. The tests are already a layer on top the production code that is complex, so they shou
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Testing how an application renders a drawing with Cypress and Percy.io</title>
    <link href="https://glebbahmutov.com/blog/testing-visually/"/>
    <id>https://glebbahmutov.com/blog/testing-visually/</id>
    <published>2019-03-30T04:00:00.000Z</published>
    <updated>2019-05-10T13:26:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> you can find the source code for this blog post at <a href="https://github.com/cypress-io/angular-pizza-creator" target="_blank" rel="noopener">github.com/cypress-io/angular-pizza-creator</a> and a live demo of the application at <a href="https://toddmotto.com/angular-pizza-creator/" target="_blank" rel="noopener">toddmotto.com/angular-pizza-creator/</a>.</p><p><strong>Note 2:</strong> the webinar video has been posted at <a href="https://www.youtube.com/watch?v=MXfZeE9RQDw" target="_blank" rel="noopener">www.youtube.com/watch?v=MXfZeE9RQDw</a> and the slides at <a href="https://slides.com/bahmutov/visual-testing-with-percy" target="_blank" rel="noopener">slides.com/bahmutov/visual-testing-with-percy</a>.</p><p><strong>Table of contents</strong></p><!-- toc --><ul><li><a href="#ordering-a-pizza">Ordering a pizza</a></li><li><a href="#custom-commands">Custom commands</a></li><li><a href="#visual-testing">Visual testing</a></li><li><a href="#visual-testing-workflow">Visual testing workflow</a></li><li><a href="#conclusions">Conclusions</a></li></ul><!-- tocstop --><h2><span id="ordering-a-pizza">Ordering a pizza</span></h2><p>There is a nice little web application at <a href="https://toddmotto.com/angular-pizza-creator/" target="_blank" rel="noopener">toddmotto.com/angular-pizza-creator/</a> for ordering a pizza. It does not actually order pizza, but it surely looks appetizing!</p><p><img src="/blog/images/testing-visually/pizza.gif" alt="Making my own pizza"></p><p>When we click on a topping, the order changes price, and the pizza rendering gets a new set of sliced toppings dropped. If we are building a web application like this, how do we test it?</p><p>First, we need to ensure that the we can build the pizza we want and that the order is going to cost us the right amount. We can write such test using a functional end-to-end test runner <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a>. Our first test will check the following user story:</p><ul><li>user needs to enter delivery information before they can place an order</li><li>user needs to pick at least one topping before they can place an order</li><li>the total order price should be correct</li><li>when the order is placed, a window alert pops up with the message &quot;Order placed&quot;</li></ul><p>At the end the web application looks like this</p><p><img src="/blog/images/testing-visually/order-placed.png" alt="Order placed"></p><p>Here is our first <a href="https://github.com/cypress-io/angular-pizza-creator/blob/master/cypress/integration/order-spec.js" target="_blank" rel="noopener">cypress/integration/order-spec.js</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">context(<span class="string">'Pizza Creator'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// uses base url setting from cypress.json</span></span><br><span class="line">    <span class="comment">// which right now points at "localhost:3000"</span></span><br><span class="line">    cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'orders custom pizza'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// enter delivery information</span></span><br><span class="line">    cy.get(<span class="string">'[formcontrolname="name"]'</span>).type(<span class="string">'Joe'</span>)</span><br><span class="line">    cy.get(<span class="string">'[formcontrolname="email"]'</span>).type(<span class="string">'foo@bar.com'</span>)</span><br><span class="line">    cy.get(<span class="string">'[formcontrolname="confirm"]'</span>).type(<span class="string">'foo@bar.com'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// without complete delivery information,</span></span><br><span class="line">    <span class="comment">// we should not be able to place the order</span></span><br><span class="line">    cy.get(<span class="string">'button[type="submit"]'</span>).should(<span class="string">'be.disabled'</span>)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'[formcontrolname="address"]'</span>).type(<span class="string">'1 Pizza st'</span>)</span><br><span class="line">    cy.get(<span class="string">'[formcontrolname="postcode"]'</span>).type(<span class="string">'12345'</span>)</span><br><span class="line">    cy.get(<span class="string">'[formcontrolname="phone"]'</span>).type(<span class="string">'1234567890'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// still cannot order pizza - need to pick toppings</span></span><br><span class="line">    cy.get(<span class="string">'button[type="submit"]'</span>).should(<span class="string">'be.disabled'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add a few toppings</span></span><br><span class="line">    cy.contains(<span class="string">'label.pizza-topping'</span>, <span class="string">'Pepperoni'</span>).click()</span><br><span class="line">    cy.contains(<span class="string">'label.pizza-topping'</span>, <span class="string">'Onion'</span>).click()</span><br><span class="line">    cy.contains(<span class="string">'label.pizza-topping'</span>, <span class="string">'Mozzarella'</span>).click()</span><br><span class="line">    cy.contains(<span class="string">'label.pizza-topping'</span>, <span class="string">'Basil'</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check the price and order pizza</span></span><br><span class="line">    cy.contains(<span class="string">'.pizza-summary__total-price'</span>, <span class="string">'Total: $12.75'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let us confirm we can place our order,</span></span><br><span class="line">    <span class="comment">// but first, prepare for "window.alert" call</span></span><br><span class="line">    cy.on(<span class="string">'window:alert'</span>, cy.stub().as(<span class="string">'alert'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// now the button should be enabled</span></span><br><span class="line">    cy.get(<span class="string">'button[type="submit"]'</span>)</span><br><span class="line">      .should(<span class="string">'be.enabled'</span>)</span><br><span class="line">      .click()</span><br><span class="line">    cy.get(<span class="string">'@alert'</span>).should(<span class="string">'have.been.calledWithExactly'</span>, <span class="string">'Order placed'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// scroll pizza view back into view</span></span><br><span class="line">    cy.get(<span class="string">'form'</span>)</span><br><span class="line">      .scrollIntoView(&#123;&#125;)</span><br><span class="line">      .should(<span class="string">'be.visible'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>which passes locally</p><p><img src="/blog/images/testing-visually/order-spec.gif" alt="Order spec passing locally"></p><h2><span id="custom-commands">Custom commands</span></h2><p>If we plan to write more tests, entering delivery and picking toppings actions will quickly lead to lots of duplicate test code. We can factor them out to <a href="https://on.cypress.io/custom-commands" target="_blank" rel="noopener">custom commands</a>, making our test code more readable and dry. I will write the following into <a href="https://github.com/cypress-io/angular-pizza-creator/blob/master/cypress/support/index.js" target="_blank" rel="noopener">cypress/support/index.js</a> file:</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Returns selector for a form control using name attribute */</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">name</span> =&gt;</span> <span class="string">`[formcontrolname="<span class="subst">$&#123;name&#125;</span>"]`</span></span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">'enterForm'</span>, (name, text) =&gt; &#123;</span><br><span class="line">  <span class="comment">// enter text into the form control without Command Log messages</span></span><br><span class="line">  <span class="keyword">const</span> quiet = &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  cy.get(f(name), quiet).type(text, quiet)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">'enterDeliveryInformation'</span>, () =&gt; &#123;</span><br><span class="line">  cy.enterForm(<span class="string">'name'</span>, <span class="string">'Joe'</span>)</span><br><span class="line">  cy.enterForm(<span class="string">'email'</span>, <span class="string">'foo@bar.com'</span>)</span><br><span class="line">  cy.enterForm(<span class="string">'confirm'</span>, <span class="string">'foo@bar.com'</span>)</span><br><span class="line">  cy.enterForm(<span class="string">'address'</span>, <span class="string">'1 Pizza st'</span>)</span><br><span class="line">  cy.enterForm(<span class="string">'postcode'</span>, <span class="string">'12345'</span>)</span><br><span class="line">  cy.enterForm(<span class="string">'phone'</span>, <span class="string">'1234567890'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">'pickToppings'</span>, (...toppings) =&gt; &#123;</span><br><span class="line">  toppings.forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    cy.contains(<span class="string">'label.pizza-topping'</span>, name).click()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The support file is bundled with each spec file, thus my <a href="https://github.com/cypress-io/angular-pizza-creator/blob/master/cypress/integration/dry-spec.js" target="_blank" rel="noopener">cypress/integration/dry-spec.js</a> can immediate use the new Cypress commands.</p><figure class="highlight js"><figcaption><span>cypress/integration/dry-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'orders custom pizza'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.enterDeliveryInformation()</span><br><span class="line">  cy.pickToppings(<span class="string">'Pepperoni'</span>, <span class="string">'Onion'</span>, <span class="string">'Mozzarella'</span>, <span class="string">'Basil'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check the price and order pizza</span></span><br><span class="line">  cy.contains(<span class="string">'.pizza-summary__total-price'</span>, <span class="string">'Total: $12.75'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// let us confirm we can place our order,</span></span><br><span class="line">  <span class="comment">// but first, prepare for "window.alert" call</span></span><br><span class="line">  cy.on(<span class="string">'window:alert'</span>, cy.stub().as(<span class="string">'alert'</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// now the button should be enabled</span></span><br><span class="line">  cy.get(<span class="string">'button[type="submit"]'</span>)</span><br><span class="line">    .should(<span class="string">'be.enabled'</span>)</span><br><span class="line">    .click()</span><br><span class="line">  cy.get(<span class="string">'@alert'</span>).should(<span class="string">'have.been.calledWithExactly'</span>, <span class="string">'Order placed'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// scroll pizza view back into view</span></span><br><span class="line">  cy.get(<span class="string">'form'</span>)</span><br><span class="line">    .scrollIntoView(&#123;&#125;)</span><br><span class="line">    .should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Beautiful, I ❤️ readable functional tests.</p><h2><span id="visual-testing">Visual testing</span></h2><p>Hmm, we can verify the order side of the application - but what about the beautiful animated pizza drawing? Are the toppings falling onto the pizza crust - or do they accidentally land outside the circle? And what if someone changes the pie from the mouth-watering <code>#FFDC71</code> to much less appetizing <code>#71FF71</code>?</p><p><img src="/blog/images/testing-visually/green-pizza.png" alt="No, thank you"></p><p>A functional test cannot catch all possible changes in style, color and position - there are just too many assertions to make. Instead we need to compare the result as an image - and we need to compare it to a &quot;good&quot; baseline image. As long as the images match and the functional tests pass, our pizza app is working.</p><p>When dealing with images, we need to think where the baseline images are going to be stored - they quickly become a nuisance as their number grows. Think how many binary images can a Git repository hold until it becomes a nightmare to clone.</p><p>Also a huge problem with image diffing is the process of reviewing them and approving the visual changes. I would prefer to have an online service that shows me and other team members the differences in a nice convenient manner. I don&#39;t want to manually download images from CI to view them!</p><p>We need a complete solution, so today I will look at <a href="https://percy.io/" target="_blank" rel="noopener">Percy.io</a> visual diffing service. I have signed up for free with my GitHub account and created a project <a href="https://percy.io/cypress-io/angular-pizza-creator" target="_blank" rel="noopener">percy.io/cypress-io/angular-pizza-creator</a> that you can see for yourself. My setup follows the <a href="https://docs.percy.io/docs/cypress-tutorial" target="_blank" rel="noopener">Percy Cypress tutorial</a>.</p><p>In my project I have added <a href="https://github.com/percy/percy-cypress" target="_blank" rel="noopener">@percy/cypress</a> development dependency.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev @percy/cypress</span><br><span class="line">...</span><br><span class="line">success Saved 1 new dependency.</span><br><span class="line">info Direct dependencies</span><br><span class="line">└─ @percy/cypress@1.0.4</span><br></pre></td></tr></table></figure><p>Then I have added a single line to my <a href="https://github.com/cypress-io/angular-pizza-creator/blob/master/cypress/support/index.js" target="_blank" rel="noopener">support file</a></p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@percy/cypress'</span></span><br><span class="line"><span class="comment">// the rest of my custom commands</span></span><br></pre></td></tr></table></figure><p>The imported <code>@percy/cypress</code> adds its own custom command <code>cy.percySnapshot()</code>. I write a test that snapshots the pizza before adding any topics and after in <a href="https://github.com/cypress-io/angular-pizza-creator/blob/master/cypress/integration/visual-spec.js" target="_blank" rel="noopener">visual-spec.js</a>:</p><figure class="highlight js"><figcaption><span>cypress/integration/visual-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'draws pizza correctly'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.percySnapshot(<span class="string">'Empty Pizza'</span>)</span><br><span class="line"></span><br><span class="line">  cy.enterDeliveryInformation()</span><br><span class="line">  <span class="keyword">const</span> toppings = [<span class="string">'Pepperoni'</span>, <span class="string">'Chili'</span>, <span class="string">'Onion'</span>]</span><br><span class="line">  cy.pickToppings(...toppings)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure the web app has updated</span></span><br><span class="line">  cy.contains(<span class="string">'.pizza-summary__total-price'</span>, <span class="string">'Total: $12.06'</span>)</span><br><span class="line">  cy.percySnapshot(toppings.join(<span class="string">' - '</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// scroll pizza view back into view</span></span><br><span class="line">  cy.get(<span class="string">'form'</span>)</span><br><span class="line">    .scrollIntoView(&#123;&#125;)</span><br><span class="line">    .should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs locally.</p><p><img src="/blog/images/testing-visually/visual-spec.png" alt="Visual spec passing locally"></p><p>Just remember: the test should take a snapshot when the application has finished rendering; and not before. The web app might take a while to redraw - maybe it is sending data to the server, or processing a complex operation. Adding an assertion is usually enough to wait as long as necessary, but no longer, thanks to the <a href="https://on.cypress.io/retry-ability" target="_blank" rel="noopener">retry-ability</a> built into most Cypress commands. To prevent the snapshot from being taken too early, like before the toppings have been applied to the order, the above test uses <code>cy.contains</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make sure the web app has updated</span></span><br><span class="line">cy.contains(<span class="string">'.pizza-summary__total-price'</span>, <span class="string">'Total: $12.06'</span>)</span><br><span class="line">cy.percySnapshot(toppings.join(<span class="string">' - '</span>))</span><br></pre></td></tr></table></figure><p>I can ignore additional Percy messages in the Command Log - because I have not set up sending data for image diffing yet. In fact, I will not run image diffing locally - there is no need for it, due to asynchronous nature of image generation and comparison. Percy custom command just sends DOM snapshot and styles to Percy cloud, where the actual images are generated (across multiple browsers and resolutions) and then compared. In order to enable sending images, I need to change how I run Cypress. Usually one runs Cypress by simply executing <code>npx cypress open</code> or <code>npx cypress run</code> in headless mode. But when Percy runs it needs extra time - to send the DOM snapshots and styles to the Percy.io API. Thus I need to run Percy app, which will start Cypress and will make sure the image diffing starts, even if Cypress application finishes. The command should be:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx percy <span class="built_in">exec</span> -- cypress run</span><br></pre></td></tr></table></figure><p>I don&#39;t need to change anything in my <a href="https://github.com/cypress-io/angular-pizza-creator/blob/master/package.json" target="_blank" rel="noopener">package.json</a> file - because normally I just work with functional tests. Only my CI configuration file needs to change its test command to run Cypress through Percy. Since I almost always use <a href="https://github.com/cypress-io/circleci-orb" target="_blank" rel="noopener">Cypress CircleCI Orb</a> to run my end-to-end tests, here is my <a href="https://github.com/cypress-io/angular-pizza-creator/blob/master/circle.yml" target="_blank" rel="noopener">circle.yml</a> file.</p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># import Cypress orb by specifying an exact version x.y.z</span></span><br><span class="line">  <span class="comment"># or the latest version 1.x.x using "@1" syntax</span></span><br><span class="line"><span class="attr">  cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line">      <span class="comment"># "cypress" is the name of the imported orb</span></span><br><span class="line">      <span class="comment"># "run" is the name of the job defined in Cypress orb</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cypress/run:</span></span><br><span class="line"><span class="attr">          yarn:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># builds and starts the local application</span></span><br><span class="line"><span class="attr">          start:</span> <span class="string">yarn</span> <span class="string">setup</span> <span class="string">&amp;&amp;</span> <span class="string">yarn</span> <span class="string">start</span></span><br><span class="line">          <span class="comment"># waits for web application to load completely</span></span><br><span class="line"><span class="attr">          wait-on:</span> <span class="string">'http://localhost:3000'</span></span><br><span class="line">          <span class="comment"># runs the Cypress tests via "Percy exec"</span></span><br><span class="line"><span class="attr">          command:</span> <span class="string">npx</span> <span class="string">percy</span> <span class="string">exec</span> <span class="bullet">--</span> <span class="string">cypress</span> <span class="string">run</span> <span class="bullet">--record</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> I am recording the Cypress test results and video using <code>cypress run --record</code> on the <a href="https://on.cypress.io/dashboard-service" target="_blank" rel="noopener">Cypress Dashboard</a>, which is a separate service from Percy web application dashboard.</p><p>For results to be sent to the right Percy project, I grabbed the <code>PERCY_TOKEN</code> from the Percy web application and set it on CircleCI as an environment variable. Then I pushed my code. CircleCI runs <a href="https://circleci.com/gh/cypress-io/angular-pizza-creator/13" target="_blank" rel="noopener">build #13</a> which shows Percy start message:</p><p><img src="/blog/images/testing-visually/percy-start.png" alt="Percy starts Cypress"></p><p>Percy outputs messages to the terminal when snapshots are taken:</p><p><img src="/blog/images/testing-visually/percy-runs.png" alt="Percy snapshot message"></p><p>After the entire run, Percy application sends the request to generate images and compare them and exits:</p><p><img src="/blog/images/testing-visually/percy-ci-message.png" alt="Percy finishes after Cypress exits"></p><p>I can open the displayed url <a href="https://percy.io/cypress-io/angular-pizza-creator/builds/1663756" target="_blank" rel="noopener">https://percy.io/cypress-io/angular-pizza-creator/builds/1663756</a> and after a few seconds the &quot;Pending ...&quot; status changes to &quot;Unreviewed&quot;. There are two desktop screenshots (and two more generated using Firefox) that I can see.</p><p><img src="/blog/images/testing-visually/two-new-snapshots.png" alt="Percy asks me to review new snapshos"></p><p>I approve the changes - now these snapshots become the official baseline images that will be used in the future for comparisons. All images are stored in the Percy cloud, and do not clutter the project&#39;s GitHub repository.</p><p>Let me change the pizza crust color to green and try pushing the commit. CircleCI build passes, and Percy web application shows that there are new changes - it has detected the change in color.</p><p><img src="/blog/images/testing-visually/there-are-changes.png" alt="Percy shows new changes in the build"></p><p>We can go into &quot;baseline vs current image&quot; view and toggle diff to see where the colors have changed.</p><p><img src="/blog/images/testing-visually/percy-diff.gif" alt="Diffing the two images to see the changed region"></p><p>Perfect, Percy web application catches the visual difference - but our tests have passed, haven&#39;t they?</p><h2><span id="visual-testing-workflow">Visual testing workflow</span></h2><p>Visual tests with Percy do not fail Cypress tests. Instead they send the DOM snapshots and all page styles to the Percy cloud where</p><ul><li>the actual images will be generated on multiple browsers and resolutions</li><li>new images are compared against baseline images</li></ul><p>A project could have 100s of images, waiting for all of them in the Cypress test might mean a loooong test. Thus Percy suggests a different asynchronous workflow it its <a href="https://percy.io/how-it-works" target="_blank" rel="noopener">&quot;How it works&quot;</a> guide.</p><p><strong>1.</strong> Install Percy GitHub application <a href="https://github.com/marketplace/percy" target="_blank" rel="noopener">github.com/marketplace/percy</a> and link the project to the GitHub repository. This enables commit status reporting.</p><p><img src="/blog/images/testing-visually/link-repo-to-percy-project.png" alt="Percy project linked to GitHub repository"></p><p>Percy recommends using pull requests to make any changes to the code. By default Percy project settings has the <code>master</code> branch as auto-approved. I had it turned off before to show image diffs, but now I will turn it back on.</p><p><img src="/blog/images/testing-visually/auto-approve-master.png" alt="If the visual changes have made it to master they are auto approved"></p><p><strong>2.</strong> For functional and visual changes I will open a pull request. Each pull request runs functional tests AND Percy sends back image diffing results as a GitHub status check. For example <a href="https://github.com/cypress-io/angular-pizza-creator/pull/2" target="_blank" rel="noopener">angular-pizza-creator/pull/2</a> automatically gets 2 commit checks:</p><p><img src="/blog/images/testing-visually/2-checks.png" alt="Functional tests and visual diff status for pull request"></p><p><strong>3.</strong> Clicking on the failed Percy check &quot;details&quot; link brings me to the diff view:</p><p><img src="/blog/images/testing-visually/percy-check.png" alt="Pizza crust changed color"></p><p>Thus each pull request needs the functional tests to pass and for the team to review and approve the visual changes (if it makes sense) - and there could be 100s of visual changes triggered across all part of the project, even for a small style change!</p><p><strong>4.</strong> If I click &quot;Approve&quot; button in Percy, it changes the GitHub commit status to pass and my pull request is good to go.</p><p><img src="/blog/images/testing-visually/approved.png" alt="Approved changes in Percy set PR status to green"></p><p>The pull request was merged into <code>master</code> and the new approved images become the new baseline images</p><p><img src="/blog/images/testing-visually/merged.png" alt="Merged pull request status"></p><p>The entire process is simple and convenient.</p><h2><span id="conclusions">Conclusions</span></h2><p>Running both functional and visual tests gives me a peace of mind. The chances of accidentally breaking the page layout or hiding an element, or making the app look hideous goes pretty much to zero. If you would like to know more about visual testing with Cypress.io and Percy.io check out these links:</p><ul><li><a href="https://percy.io" target="_blank" rel="noopener">percy.io</a></li><li><a href="https://www.cypress.io" target="_blank" rel="noopener">www.cypress.io</a></li><li><a href="https://docs.percy.io/docs/cypress" target="_blank" rel="noopener">Percy Cypress documentation</a></li></ul><p>There are also a few open source alternatives for visual diffing that do not have the GitHub integration or the cloud component that Percy provides, check them out if you would like to do image diffing yourself: <a href="https://on.cypress.io/plugins#visual-testing" target="_blank" rel="noopener">on.cypress.io/plugins#visual-testing</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can find the source code for this blog post at &lt;a href=&quot;https://github.com/cypress-io/angular-pizza-creator&quot; t
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Testing a chart with Cypress and Applitools</title>
    <link href="https://glebbahmutov.com/blog/testing-a-chart/"/>
    <id>https://glebbahmutov.com/blog/testing-a-chart/</id>
    <published>2019-03-28T04:00:00.000Z</published>
    <updated>2019-03-28T21:13:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> you can find the source code for this blog post at <a href="https://github.com/bahmutov/chart-testing-example" target="_blank" rel="noopener">github.com/bahmutov/chart-testing-example</a>.</p><h2><span id="charts">Charts</span></h2><p>I have found a great JavaScript library for creating SVG charts <a href="https://github.com/frappe/charts" target="_blank" rel="noopener">github.com/frappe/charts</a> with a demo website at <a href="https://frappe.io/charts" target="_blank" rel="noopener">https://frappe.io/charts</a>. Creating a chart is as simple as including a single script tag and writing a little snippet like</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/frappe-charts@1.1.0/dist/frappe-charts.min.iife.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  labels: [<span class="string">'winter'</span>, <span class="string">'spring'</span>, <span class="string">'summer'</span>, <span class="string">'fall'</span>],</span><br><span class="line">  datasets: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'Sunny days'</span>,</span><br><span class="line">      type: <span class="string">'bar'</span>,</span><br><span class="line">      values: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">25</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chart = <span class="keyword">new</span> frappe.Chart(<span class="string">'#chart'</span>, &#123;</span><br><span class="line">  title: <span class="string">'Sunny days per year'</span>,</span><br><span class="line">  data: data,</span><br><span class="line">  type: <span class="string">'bar'</span>,</span><br><span class="line">  height: <span class="number">250</span>,</span><br><span class="line">  colors: [<span class="string">'#7cd6fd'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>which produces a bar chart like this:</p><p><img src="/blog/images/testing-a-chart/chart.png" alt="Bar chart with tooltip on hover"></p><p>Great, but how do I actually test this chart? How do I ensure that I accidentally do not break my code when upgrading from <a href="mailto:`frappe-charts@1.1.0" target="_blank" rel="noopener">`frappe-charts@1.1.0</a><code>to</code><a href="mailto:frappe-charts@1.2.0" target="_blank" rel="noopener">frappe-charts@1.2.0</a>`?</p><h2><span id="functional-tests">Functional tests</span></h2><p>First, let&#39;s start testing this SVG chart using <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> test runner. I will install <code>cypress</code>, <code>parcel-bundler</code> (to server local site) and <a href="https://github.com/bahmutov/start-server-and-test" target="_blank" rel="noopener">start-server-and-test</a> (for starting the server and the tests).</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"parcel server index.html"</span>,</span><br><span class="line">    <span class="attr">"cy:open"</span>: <span class="string">"cypress open"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"start-test 1234 cy:open"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"cypress"</span>: <span class="string">"3.2.0"</span>,</span><br><span class="line">    <span class="attr">"parcel-bundler"</span>: <span class="string">"1.12.3"</span>,</span><br><span class="line">    <span class="attr">"start-server-and-test"</span>: <span class="string">"1.7.12"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The first test should load the site and assure that the chart is visible</p><figure class="highlight js"><figcaption><span>cypress/integration/first-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'shows bar chart'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'localhost:1234'</span>)</span><br><span class="line">  cy.get(<span class="string">'.frappe-chart'</span>)</span><br><span class="line">    .should(<span class="string">'be.visible'</span>)</span><br><span class="line">    .and(<span class="function"><span class="params">chart</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// we can assert anything about the chart really</span></span><br><span class="line">      expect(chart.height()).to.be.greaterThan(<span class="number">200</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can start Cypress GUI with <code>npm run dev</code> and see the first test pass</p><p><img src="/blog/images/testing-a-chart/first-test.gif" alt="First passing test"></p><p>Do you see delayed data load with animation? It happens <em>after</em> the test has already finished. I would like my test to only finish when all 4 bars are rendered, so I will change my test to find the four SVG rectangles.</p><figure class="highlight js"><figcaption><span>cypress/integration/first-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'shows bar chart'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'localhost:1234'</span>)</span><br><span class="line">  cy.get(<span class="string">'.frappe-chart'</span>)</span><br><span class="line">    .should(<span class="string">'be.visible'</span>)</span><br><span class="line">    .and(<span class="function"><span class="params">chart</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// we can assert anything about the chart really</span></span><br><span class="line">      expect(chart.height()).to.be.greaterThan(<span class="number">200</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// let the chart load by observing the rendered bars</span></span><br><span class="line">    .find(<span class="string">'g.dataset-0 rect'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test now waits for the rectangles to appear - and then it finishes.</p><p><img src="/blog/images/testing-a-chart/wait-for-rectangles.gif" alt="Waiting for 4 rectangles"></p><p>Since we are always going to load the chart, let us move the <code>cy.visit</code> and rectangle check to <code>beforeEach</code> hook. Even better, we can move the URL to <code>cypress.json</code> settings file.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:1234"</span>,</span><br><span class="line">  <span class="attr">"viewportHeight"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/first-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  <span class="comment">// let the chart load by observing the rendered bars</span></span><br><span class="line">  cy.get(<span class="string">'.frappe-chart g.dataset-0 rect'</span>).should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'shows bar chart'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'.frappe-chart'</span>)</span><br><span class="line">    .should(<span class="string">'be.visible'</span>)</span><br><span class="line">    .and(<span class="function"><span class="params">chart</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// we can assert anything about the chart really</span></span><br><span class="line">      expect(chart.height()).to.be.greaterThan(<span class="number">200</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The <code>beforeEach</code> commands are shown in its own top section of the Command Log.</p><p><img src="/blog/images/testing-a-chart/before-each.png" alt="Loading chart before each test"></p><h2><span id="testing-tooltip">Testing tooltip</span></h2><p>When I hover over a bar in my chart, a tooltip pops up. Can I test that it does? Cypress <a href="https://github.com/cypress-io/cypress/issues/10" target="_blank" rel="noopener">does not support <code>:hover</code> yet</a>, but looking at the event listeners for the SVG <code>rect</code> element I notice that the tooltip is connected to <code>mousemove</code> and <code>mouseleave</code> events.</p><p><img src="/blog/images/testing-a-chart/events.png" alt="Event listeners for `rect` element"></p><p>Maybe I can get the tooltip to show up by using <a href="https://on.cypress.io/trigger" target="_blank" rel="noopener"><code>cy.trigger(&#39;mousemove&#39;)</code></a> command?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'.frappe-chart g.dataset-0 rect'</span>)</span><br><span class="line">  .eq(<span class="number">1</span>) <span class="comment">// pick the "spring" bar</span></span><br><span class="line">  .trigger(<span class="string">'mousemove'</span>)</span><br></pre></td></tr></table></figure><p>Yes! The tooltip shows up. Let us confirm it - and because the tooltip is hidden with <code>style=&quot;opacity: 0&quot;</code> attribute, we can assert that it is initially hidden, then shown, then hidden again by writing small utility functions <code>tooltipHidden</code> and <code>tooltipVisible</code>.</p><figure class="highlight js"><figcaption><span>cypress/integration/tooltip-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tooltipHidden = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="comment">// initially the tooltip is not visible</span></span><br><span class="line">  <span class="comment">// because element is set to be hidden using attribute style="opacity:0"</span></span><br><span class="line">  <span class="comment">// we should check its visibility using "have.css" assertion</span></span><br><span class="line">  cy.get(<span class="string">'.graph-svg-tip'</span>).should(<span class="string">'have.css'</span>, <span class="string">'opacity'</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tooltipVisible = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  cy.get(<span class="string">'.graph-svg-tip'</span>).should(<span class="string">'have.css'</span>, <span class="string">'opacity'</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'shows and hides tooltip'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rectangles = <span class="string">'.frappe-chart g.dataset-0 rect'</span></span><br><span class="line"></span><br><span class="line">  tooltipHidden()</span><br><span class="line">  cy.get(rectangles)</span><br><span class="line">    .eq(<span class="number">1</span>) <span class="comment">// pick the "spring" bar</span></span><br><span class="line">    .trigger(<span class="string">'mousemove'</span>)</span><br><span class="line">    .wait(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// tooltipVisible() returns the Cypress element chain</span></span><br><span class="line">  <span class="comment">// so we can add an assertion to check the text</span></span><br><span class="line">  <span class="comment">// shown in the tooltip</span></span><br><span class="line">  tooltipVisible().should(<span class="string">'contain'</span>, <span class="string">'spring'</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(rectangles)</span><br><span class="line">    .eq(<span class="number">1</span>)</span><br><span class="line">    .trigger(<span class="string">'mouseleave'</span>)</span><br><span class="line"></span><br><span class="line">  tooltipHidden()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I have added <code>cy.wait(1000)</code> to pause the test and make the tooltip visible.</p><p><img src="/blog/images/testing-a-chart/tooltip.gif" alt="Tooltip test: first the tooltip appears and after 1 second disappears"></p><h2><span id="tooltip-for-each-bar">Tooltip for each bar</span></h2><p>A different tooltip appears when the mouse moves over each bar. Let us test it. For now, I will hardcode the season labels in the test.</p><figure class="highlight js"><figcaption><span>cypress/integration/seasons-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'shows tooltip for each season'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rectangles = <span class="string">'.frappe-chart g.dataset-0 rect'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> labels = [<span class="string">'winter'</span>, <span class="string">'spring'</span>, <span class="string">'summer'</span>, <span class="string">'fall'</span>]</span><br><span class="line"></span><br><span class="line">  ;[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">    cy.get(rectangles)</span><br><span class="line">      .eq(k)</span><br><span class="line">      .trigger(<span class="string">'mousemove'</span>)</span><br><span class="line">      .wait(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'.graph-svg-tip'</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).should(<span class="string">'contain'</span>, labels[k])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs through the four vertical bars and confirms the tooltip has the right label</p><p><img src="/blog/images/testing-a-chart/seasons.gif" alt="Seasons labels"></p><h2><span id="reading-labels-at-run-time">Reading labels at run-time</span></h2><p>Instead of hardcoding the labels in the test, we can read the labels from the application at run-time. First, we need to expose the chart reference or its data object reference during Cypress tests. Here is my preferred way of doing this:</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">  <span class="built_in">window</span>.chart = chart</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From now on, if you open DevTools during Cypress tests, and point the context at the application&#39;s iframe, you will be able to walk to the labels via <code>window.chart</code> object.</p><p><img src="/blog/images/testing-a-chart/chart-data.png" alt="Access labels via `window.chart`"></p><p>We can read these labels from our tests too using <a href="https://on.cypress.io/window" target="_blank" rel="noopener"><code>cy.window()</code></a> and <a href="https://on.cypress.io/its" target="_blank" rel="noopener"><code>cy.its()</code></a></p><figure class="highlight js"><figcaption><span>cypress/integration/seasons-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'shows tooltip for each defined label'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rectangles = <span class="string">'.frappe-chart g.dataset-0 rect'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// labels are accessed at run-time from the chart object</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .its(<span class="string">'chart.data.labels'</span>)</span><br><span class="line">    <span class="comment">// make sure we have a valid list with labels</span></span><br><span class="line">    .should(<span class="string">'have.length.gt'</span>, <span class="number">0</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">labels</span> =&gt;</span> &#123;</span><br><span class="line">      labels.forEach(<span class="function">(<span class="params">label, k</span>) =&gt;</span> &#123;</span><br><span class="line">        cy.get(rectangles)</span><br><span class="line">          .eq(k)</span><br><span class="line">          .trigger(<span class="string">'mousemove'</span>)</span><br><span class="line">          .wait(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">        cy.get(<span class="string">'.graph-svg-tip'</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).should(<span class="string">'contain'</span>, label)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Super, the test is passing, just like before, but now the labels are not copied.</p><h2><span id="reading-labels-at-compile-time">Reading labels at compile-time</span></h2><p>Instead of exposing the application and reading labels <em>during</em> the test, we can factor the labels into its own JavaScript module and share them between the application and the test code. We are already using <a href="https://parceljs.org/" target="_blank" rel="noopener">parcel-bundler</a> to serve our code, so we can just extract the labels into its own file.</p><figure class="highlight js"><figcaption><span>labels.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> labels = [<span class="string">'winter'</span>, <span class="string">'spring'</span>, <span class="string">'summer'</span>, <span class="string">'fall'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; labels &#125; <span class="keyword">from</span> <span class="string">'./labels'</span></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  labels,</span><br><span class="line">  datasets: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'Sunny days'</span>,</span><br><span class="line">      type: <span class="string">'bar'</span>,</span><br><span class="line">      values: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">25</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The application is bundled using <code>parcel-bundler</code> and served - just like before.</p><p>Cypress includes its own bundler, so we import <code>labels</code> from the spec file.</p><figure class="highlight js"><figcaption><span>cypress/integration/labels-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; labels &#125; <span class="keyword">from</span> <span class="string">'../../labels'</span></span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  <span class="comment">// let the chart load by observing the rendered bars</span></span><br><span class="line">  cy.get(<span class="string">'.frappe-chart g.dataset-0 rect'</span>).should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'shows tooltip for each imported label'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rectangles = <span class="string">'.frappe-chart g.dataset-0 rect'</span></span><br><span class="line"></span><br><span class="line">  labels.forEach(<span class="function">(<span class="params">label, k</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.get(rectangles)</span><br><span class="line">      .eq(k)</span><br><span class="line">      .trigger(<span class="string">'mousemove'</span>)</span><br><span class="line">      .wait(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'.graph-svg-tip'</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).should(<span class="string">'contain'</span>, label)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Great, all working, and there is no code duplication.</p><h2><span id="visual-diffing-with-applitools-plugin">Visual diffing with Applitools plugin</span></h2><p>But what if the charts library publishes a new version, changing the appearance of the bar chart? Or what if someone comes and changes the beautiful blue color in <code>app.js</code> from <code>#7cd6fd</code> to the ugly <code>#816c30</code>? The functional tests like we have written above cannot check if the chart looks the same. Yes, we could check each positional property and every style property of every element on the page ... and that will super painful to write as a test.</p><p>Instead let&#39;s set up image diffing testing, in this case I will use <a href="https://applitools.com/tutorials/cypress.html" target="_blank" rel="noopener">Applitools Cypress plugin</a>.</p><p>First, I will install the Applitools Cypress plugin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @applitools/eyes-cypress --save-dev</span><br></pre></td></tr></table></figure><p>Then I need to run</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx eyes-setup</span><br></pre></td></tr></table></figure><p>Which should do 2 things: load Applitools from Cypress plugins file and load Applitools commands from the support file</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// added by Applitools</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'@applitools/eyes-cypress'</span>)(<span class="built_in">module</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// added by Applitools</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@applitools/eyes-cypress/commands'</span></span><br></pre></td></tr></table></figure><p>I then made an Applitools account using my GitHub account and grabbed my Applitools API key. The image below comes from the <a href="https://applitools.com/tutorials/cypress.html#quick-start" target="_blank" rel="noopener">Applitools Cypress Quickstart tutorial</a>.</p><p><img src="/blog/images/testing-a-chart/applitools-API-key.gif" alt="personal Applitools API key"></p><p>Then from the terminal I have exported the key once</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> APPLITOOLS_API_KEY=&lt;my api key&gt;</span><br></pre></td></tr></table></figure><p>And now I am good to go. I have updated my tooltip test to use <code>cy.eye...</code> commands created by the Applitools plugin.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'shows tooltip for each season'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// start new batch of images</span></span><br><span class="line">  cy.eyesOpen(&#123;</span><br><span class="line">    appName: <span class="string">'chart-testing-example'</span>,</span><br><span class="line">    batchName: <span class="string">'tooltips'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> rectangles = <span class="string">'.frappe-chart g.dataset-0 rect'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> labels = [<span class="string">'winter'</span>, <span class="string">'spring'</span>, <span class="string">'summer'</span>, <span class="string">'fall'</span>]</span><br><span class="line"></span><br><span class="line">  labels.forEach(<span class="function">(<span class="params">label, k</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.get(rectangles)</span><br><span class="line">      .eq(k)</span><br><span class="line">      .trigger(<span class="string">'mousemove'</span>)</span><br><span class="line">      .wait(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'.graph-svg-tip'</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;).should(<span class="string">'contain'</span>, label)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we limit the visual diff to the chart</span></span><br><span class="line">    cy.eyesCheckWindow(&#123;</span><br><span class="line">      sizeMode: <span class="string">'selector'</span>,</span><br><span class="line">      selector: <span class="string">'.frappe-chart'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.eyesClose() <span class="comment">// tell Applitools we are done</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I run Cypress locally (with <code>APPLITOOLS_API_KEY</code> environment variable). A few seconds after the test completes, the Applitools web application dashboard shows the 4 images.</p><p><img src="/blog/images/testing-a-chart/applitools-batch.png" alt="Applitools shows the new batch of images"></p><p>Because this is a new batch, all images were automatically accepted and saved as baselines. Let us change the color of the bars to my least favorite color <code>#816c30</code> and just push the code to CI. I am using CircleCI and I have already set the <code>APPLITOOLS_API_KEY</code> as an environment variable there.</p><p>The CI run has failed, see <a href="https://circleci.com/gh/bahmutov/chart-testing-example/4" target="_blank" rel="noopener">https://circleci.com/gh/bahmutov/chart-testing-example/4</a> - and it has failed after the Applitools cloud that actually does image rendering and comparison has reported the changes asynchronously back to the test runner. That&#39;s why the failures are not reported immediately during the test, but inside the <code>after</code> test callback.</p><p><img src="/blog/images/testing-a-chart/ci-visual-diff-error.png" alt="Visual diff has failed"></p><p>Let us go the Applitool dashboard to see why the test has failed visual comparison.</p><p><img src="/blog/images/testing-a-chart/visual-diff.png" alt="Visual diff showing changes"></p><p>We can go into each image to see the difference with the saved baseline image. For example we can toggle (T) between the new image and the baseline.</p><p><img src="/blog/images/testing-a-chart/diff.gif" alt="Toggle mode"></p><p>We can even highlight the changed areas (although it is pretty clear in this case where the changes are)</p><p><img src="/blog/images/testing-a-chart/highlight-diff.gif" alt="Highlight differences mode"></p><p>There is one more interesting feature the Applitools analysis offers. I can click on the &quot;&lt;&gt;&quot; button which opens a root cause analysis view. In this view, if I show the &quot;diff&quot; of the images, it also shows WHY the images have changed. In our case it correctly shows the root of the problem: the change &quot;style: fill&quot; property!</p><p><img src="/blog/images/testing-a-chart/visual-diff-root-cause-analysis.png" alt="Root cause analysis"></p><p>I don&#39;t like the new color, so I will revert the commit and push again.</p><h2><span id="conclusions">Conclusions</span></h2><ul><li>testing an SVG chart is pretty close to testing a regular DOM using Cypress</li><li>for visual regressions, consider using an image diffing tool. There are several choices, both commercial and open source<ul><li><a href="https://applitools.com" target="_blank" rel="noopener">Applitools.com</a></li><li><a href="https://on.cypress.io/plugins#visual-testing" target="_blank" rel="noopener">several other plugins</a></li></ul></li></ul><p><strong>Note:</strong> you can find the source code for this blog post at <a href="https://github.com/bahmutov/chart-testing-example" target="_blank" rel="noopener">github.com/bahmutov/chart-testing-example</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can find the source code for this blog post at &lt;a href=&quot;https://github.com/bahmutov/chart-testing-example&quot; tar
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Parallel or not</title>
    <link href="https://glebbahmutov.com/blog/parallel-or-not/"/>
    <id>https://glebbahmutov.com/blog/parallel-or-not/</id>
    <published>2019-03-09T05:00:00.000Z</published>
    <updated>2019-03-09T17:56:55.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#cypressio">Cypress.io</a></li><li><a href="#the-problem">The problem</a></li><li><a href="#solution">Solution</a><ul><li><a href="#the-test-job-definition">The test job definition</a></li><li><a href="#branch-filters">Branch filters</a></li><li><a href="#one-machine-for-external-pull-requests">One machine for external pull requests</a></li><li><a href="#parallel-tests-for-internal-branches">Parallel tests for internal branches</a></li></ul></li><li><a href="#github-configuration">GitHub configuration</a></li></ul><!-- tocstop --><p><a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress.io</a> test runner can run end-to-end tests <a href="https://on.cypress.io/parallellization" target="_blank" rel="noopener">in parallel</a> if your continuous integration server can spin multiple agents. Agents in that case coordinate and split the tests amongst themselves. Most CI providers now allow you to use multiple machines, but CircleCI shines in this regard in my opinion. Here is how to run the same testing job on 4 machines.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  test:</span></span><br><span class="line"><span class="attr">    parallelism:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line">      <span class="comment"># run test commands</span></span><br></pre></td></tr></table></figure><p>Four is the default number of machines given to open source projects by the kind folks at Circle.</p><h2><span id="cypressio">Cypress.io</span></h2><p>When running Cypress.io end-to-end tests across multiple machines, you can use <a href="https://github.com/cypress-io/circleci-orb" target="_blank" rel="noopener">Cypress CircleCI Orb</a> or write the test job steps yourself. Ultimately, each test machine has to call the <code>cypress run</code> command</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx cypress run --record --parallel</span><br></pre></td></tr></table></figure><p>Each CI machine contacts the Cypress.io Dashboard API to pick the next spec to run. To authenticate with the Cypress Dashboard, each agent requires passing a private record key, usually by having an environment variable called <a href="https://on.cypress.io/dashboard-service" target="_blank" rel="noopener">CYPRESS_RECORD_KEY</a> set. In the parallel mode, by adding more machines the test job can power through all tests very quickly, see my other blog post <a href="https://www.cypress.io/blog/2018/09/05/run-end-to-end-tests-on-ci-faster/" target="_blank" rel="noopener">&quot;Run Your End-to-end Tests 10 Times Faster with Automatic Test Parallelization&quot;</a>.</p><h2><span id="the-problem">The problem</span></h2><p>Our friends at <a href="https://github.com/withspectrum/spectrum" target="_blank" rel="noopener">Spectrum</a> have started using parallel running mode, which dropped their test run from <a href="https://dashboard.cypress.io/#/projects/6a92uk/runs/3145/specs" target="_blank" rel="noopener">16 minutes</a> to <a href="https://dashboard.cypress.io/#/projects/6a92uk/runs/3276/specs" target="_blank" rel="noopener">2 minutes</a>.</p><p><strong>Before</strong></p><p><img src="/blog/images/parallel-or-not/1-machine.png" alt="1 machine"></p><p><strong>After</strong></p><p><img src="/blog/images/parallel-or-not/9-machines.png" alt="9 machines"></p><p>This was great improvement, yet there was a problem. Often all 9 machines would be <em>locked up</em> running tests for code submitted by the <em>outside contributors</em> in their pull requests. Why was this happening?</p><p>To understand why all 9 machines would suddenly be busy, you need to know how continuous integration systems treat the project&#39;s environment variables like the private tokens or record keys. By default, as a security practice, CI providers do <a href="https://circleci.com/docs/2.0/oss/#build-pull-requests-from-forked-repositories" target="_blank" rel="noopener">NOT pass the environment variables to the forked pull requests</a>.</p><p><img src="/blog/images/parallel-or-not/forked-pr.png" alt="CircleCI project settings"></p><p>You can even use this fact to <a href="https://circleci.com/blog/managing-secrets-when-you-have-pull-requests-from-outside-contributors/" target="_blank" rel="noopener">stop some jobs for forked pull requests</a>.</p><p>When Cypress test runner starts the command <code>npx cypress run --record --parallel</code> and the variable <code>CYPRESS_RECORD_KEY</code> is undefined, the test runner detects it and <em>runs all the tests</em>. So you, the project owner still get the test status: passes or fails, yet the private record key is not exposed to the untrusted 3rd party.</p><p>The test runner shows the <a href="https://github.com/cypress-io/cypress/blob/4b060362e7495af963dc636664ea45317de58642/packages/server/lib/errors.coffee#L398" target="_blank" rel="noopener">following error message</a> in the terminal, before running all tests:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Warning: It looks like you are trying to record this run from a forked PR.</span><br><span class="line">The &apos;Record Key&apos; is missing. Your CI provider is likely not passing private</span><br><span class="line">environment variables to builds from forks.</span><br><span class="line">These results will not be recorded.</span><br><span class="line">This error will not alter the exit code.</span><br></pre></td></tr></table></figure><p>So all forked pull requests to Spectrum project used all 9 machines to run all Cypress tests files <em>on each machine</em>, effectively using all resources.</p><h2><span id="solution">Solution</span></h2><p>I came up with the following solution to this problem. Here is the <a href="https://github.com/bahmutov/circleci-parallel-based-on-env/blob/master/circle.yml" target="_blank" rel="noopener">circle.yml</a> from the demo project <a href="https://github.com/bahmutov/circleci-parallel-based-on-env" target="_blank" rel="noopener">circleci-parallel-based-on-env</a>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># we need version 2.1. to use job parameters</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  run-it:</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">      parallelism:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">        default:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">Number</span> <span class="string">of</span> <span class="string">boxes</span> <span class="string">to</span> <span class="string">use</span> <span class="string">to</span> <span class="string">run</span> <span class="string">this</span> <span class="string">job</span></span><br><span class="line"><span class="attr">    docker:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="string">cypress/base:10</span></span><br><span class="line"><span class="attr">    parallelism:</span> <span class="string">&lt;&lt;parameters.parallelism&gt;&gt;</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">echo</span> <span class="string">"runs with parallelism = &lt;&lt;parameters.parallelism&gt;&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  after-tests:</span></span><br><span class="line"><span class="attr">    docker:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="string">cypress/base:10</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">echo</span> <span class="string">"all good"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">  main:</span></span><br><span class="line">    <span class="comment"># see how to filter jobs in workflow per branch</span></span><br><span class="line">    <span class="comment"># https://circleci.com/docs/2.0/configuration-reference/#jobs-1</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="attr">      - run-it:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">parallel</span> <span class="string">build</span> <span class="string">job</span></span><br><span class="line">          <span class="comment"># pass parameter to the job</span></span><br><span class="line"><span class="attr">          parallelism:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">          filters:</span></span><br><span class="line"><span class="attr">            branches:</span></span><br><span class="line">              <span class="comment"># for pull requests do not run this job</span></span><br><span class="line"><span class="attr">              ignore:</span> <span class="string">/pull.*/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - run-it:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">single</span> <span class="string">build</span> <span class="string">job</span></span><br><span class="line">          <span class="comment"># pass parameter to the job</span></span><br><span class="line"><span class="attr">          parallelism:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">          filters:</span></span><br><span class="line"><span class="attr">            branches:</span></span><br><span class="line">              <span class="comment"># run pull requests with parallelism 1</span></span><br><span class="line"><span class="attr">              only:</span> <span class="string">/pull.*/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - after-tests:</span></span><br><span class="line"><span class="attr">          requires:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"parallel build job"</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">"single build job"</span></span><br></pre></td></tr></table></figure><p>The above configuration file does not use Cypress, but shows in principle how you can configure the same job to run in parallel, using as many machines as you can for your own commits. At the same time the outside pull requests will only run on a single machine. Let me go through the configuration source block by block.</p><h3><span id="the-test-job-definition">The test job definition</span></h3><p>Our test job takes a parameter that specifies how many machines it should run on</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  run-it:</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">      parallelism:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">        default:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">Number</span> <span class="string">of</span> <span class="string">boxes</span> <span class="string">to</span> <span class="string">use</span> <span class="string">to</span> <span class="string">run</span> <span class="string">this</span> <span class="string">job</span></span><br><span class="line"><span class="attr">    docker:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="string">cypress/base:10</span></span><br><span class="line"><span class="attr">    parallelism:</span> <span class="string">&lt;&lt;parameters.parallelism&gt;&gt;</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">echo</span> <span class="string">"runs with parallelism = &lt;&lt;parameters.parallelism&gt;&gt;"</span></span><br></pre></td></tr></table></figure><h3><span id="branch-filters">Branch filters</span></h3><p>CircleCI allows you to configure jobs to run for <a href="https://circleci.com/docs/2.0/configuration-reference/#filters-1" target="_blank" rel="noopener">some branches, but not for others</a>. For example, if we want to run a job in a workflow only for the <code>master</code> branch, we can write a workflow like</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">  main:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="attr">      - run-it:</span></span><br><span class="line"><span class="attr">          filters:</span></span><br><span class="line"><span class="attr">            branches:</span></span><br><span class="line"><span class="attr">              only:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>We can also <em>skip</em> a job for a branch</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">  main:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="attr">      - run-it:</span></span><br><span class="line"><span class="attr">          filters:</span></span><br><span class="line"><span class="attr">            branches:</span></span><br><span class="line">              <span class="comment"># do not run this job for branch "alpha"</span></span><br><span class="line"><span class="attr">              ignore:</span> <span class="string">alpha</span></span><br></pre></td></tr></table></figure><p><strong>Important:</strong> all pull requests from external forkes are named <code>pull/&lt;number&gt;</code> on GitHub. We can use regular expressions to filter our jobs using <code>pull</code> prefix.</p><h3><span id="one-machine-for-external-pull-requests">One machine for external pull requests</span></h3><p>For external pull requests we can run our test job with <code>parallelism: 1</code> parameter</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- run-it:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">single</span> <span class="string">build</span> <span class="string">job</span></span><br><span class="line"><span class="attr">    parallelism:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    filters:</span></span><br><span class="line"><span class="attr">      branches:</span></span><br><span class="line"><span class="attr">        only:</span> <span class="string">/pull.*/</span></span><br></pre></td></tr></table></figure><p>Great, only 1 machine gets used for external pull requests.</p><h3><span id="parallel-tests-for-internal-branches">Parallel tests for internal branches</span></h3><p>For internal branches, we want to use all available machines, and our job in this case looks like this</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- run-it:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">parallel</span> <span class="string">build</span> <span class="string">job</span></span><br><span class="line"><span class="attr">    parallelism:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">    filters:</span></span><br><span class="line"><span class="attr">      branches:</span></span><br><span class="line">        <span class="comment"># for pull requests do not run this job</span></span><br><span class="line"><span class="attr">        ignore:</span> <span class="string">/pull.*/</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> do not name your internal branch with prefix &quot;pull...&quot; or it will match the filter and will run tests serially.</p><h2><span id="github-configuration">GitHub configuration</span></h2><p>To make sure GitHub pull requests wait for the test results, we need to set a check somehow. But we have 2 jobs with two different names, and only one of them runs at a time. So how do we tell GitHub to wait for a status check for <em>one of the two</em> jobs? Here is a trick: create another dummy CircleCI job that requires both test jobs.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  after-tests:</span></span><br><span class="line"><span class="attr">    docker:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="string">cypress/base:10</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">echo</span> <span class="string">"all good"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">  main:</span></span><br><span class="line">    <span class="comment"># job "parallel build job"</span></span><br><span class="line">    <span class="comment"># job "single build job"</span></span><br><span class="line"><span class="attr">    - after-tests:</span></span><br><span class="line"><span class="attr">        requires:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">"parallel build job"</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">"single build job"</span></span><br></pre></td></tr></table></figure><p>Then on GitHub we can set this new job &quot;after-tests&quot; to be <em>required</em>.</p><p><img src="/blog/images/parallel-or-not/github-required.png" alt="Set &quot;after-tests&quot; as required GitHub check"></p><p>CircleCI is smart enough to only require the job that <em>can run</em> for that branch. Thus checks for serial job from the outside forked pull request <a href="https://github.com/bahmutov/circleci-parallel-based-on-env/pull/1" target="_blank" rel="noopener">shows</a> &quot;single build job&quot; + <strong>required</strong> &quot;after-tests&quot;.</p><p><img src="/blog/images/parallel-or-not/serial-1.png" alt="Jobs for forked pull request"></p><p>But when there is a commit to an <em>internal branch</em>, the CircleCI runs tests on several machines, and GitHub <a href="https://github.com/bahmutov/circleci-parallel-based-on-env/pull/2" target="_blank" rel="noopener">shows</a> &quot;parallel build job&quot; + again <strong>required</strong> &quot;after-tests&quot; job.</p><p><img src="/blog/images/parallel-or-not/parallel-2.png" alt="Jobs for forked pull request"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#cypressio&quot;&gt;Cypress.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-problem&quot;&gt;The problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#solution&quot;&gt;Solut
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Zeit Now v2 workflow</title>
    <link href="https://glebbahmutov.com/blog/zeit-now-v2-workflow/"/>
    <id>https://glebbahmutov.com/blog/zeit-now-v2-workflow/</id>
    <published>2019-02-07T05:00:00.000Z</published>
    <updated>2019-04-01T20:54:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>I like <a href="../tags/zeit">Zeit Now v1</a> and now there is something even more powerful - <a href="https://zeit.co/blog/now-2" target="_blank" rel="noopener">Zeit Now v2</a>. I got to admit, at first I was skeptical. But after trying to write a GitHub bot using Zeit I am excited. The Now v2 deployment process has hugely shifted how I think about my code, and how the deployment process works.</p><p>While writing the bot, I have tried to use TypeScript (mostly to avoid writing tests), and in this blog post I will show a couple of tricks I had to use in order to get my development workflow into overdrive.</p><h2><span id="basics">Basics</span></h2><p>So let&#39;s start with a GitHub hook that will receive events from our GitHub App installation. We should write a server to ... wait, stop! No, we should write the event handler, don&#39;t worry about servers. So here is our file <code>hooks/gh/index.ts</code> that should receive the events</p><figure class="highlight ts"><figcaption><span>hooks/gh/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; IncomingMessage, ServerResponse &#125; <span class="keyword">from</span> <span class="string">'http'</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (req: IncomingMessage, res: ServerResponse) =&gt; &#123;</span><br><span class="line">  <span class="comment">// handle incoming request</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> you will probably need to install TypeScript and Node type definitions with <code>npm i -D typescript @types/node</code> and initialize <code>tsconfig.json</code> with <code>npx tsc --init</code> commands.</p><p>So, how will our hook get to the cloud? All we need is to map each file we are interested in deploying to a <a href="https://zeit.co/docs/v2/deployments/builders/overview/" target="_blank" rel="noopener">builder</a>. There are static builders for serving HTML, PHP builders, Docker builders, full Express server builders, etc. But we are only interested in the default <a href="https://zeit.co/docs/v2/deployments/official-builders/node-js-now-node/" target="_blank" rel="noopener">Node builder</a>. We need TypeScript support, so we will need <code>canary</code> version as of February 2019 and an existing <code>tsconfig.json</code>.</p><figure class="highlight json"><figcaption><span>now.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"builds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"hooks/gh/index.ts"</span>,</span><br><span class="line">      <span class="attr">"use"</span>: <span class="string">"@now/node@canary"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Every time we run command <code>now</code> from the terminal it will go through the files in the <code>builds</code> list (and <code>src</code> could be a wildcard, mind blown!), and will build new lambda if there are file changes, and then will deploy it to the cloud at a new immutable url. So a single command, in a monorepo can produce hundreds of separate deploys - where the deploy is super fast, because it smartly computes what has changed for each lambda.</p><p>If we have a hundred separate lambdas, how do we provide uniform API endpoints? We can define a routing structure on top of individual deploys. For now, we are just using the file paths as the endpoints by default. For example, our hook will be accessible at some url like <code>https://folder-name-aoesid9xn.now.sh/hooks/gh</code>.</p><h2><span id="micro">Micro</span></h2><p>So our request handler needs to decode the input body, perform its magic, and then respond. For simplicity, I will use <a href="https://github.com/zeit/micro" target="_blank" rel="noopener">Zeit micro</a>.</p><figure class="highlight ts"><figcaption><span>hooks/gh/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; json, send &#125; = <span class="built_in">require</span>(<span class="string">'micro'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (req: IncomingMessage, res: ServerResponse) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> json(req)</span><br><span class="line">    <span class="comment">// do our stuff</span></span><br><span class="line">    send(res, <span class="number">200</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e.message)</span><br><span class="line">    <span class="keyword">return</span> send(res, <span class="number">400</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We <a href="https://zeit.co/blog/environment-variables-secrets" target="_blank" rel="noopener">set secret environment variables</a> and can deploy the event handler to Now cloud. We can always follow the logs to see what is going on</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now logs -f https://folder-name-aoesid9xn.now.sh</span><br></pre></td></tr></table></figure><h2><span id="local-development">Local development</span></h2><p>But what about local development? Now v2 is fast enough to keep deploying code changes, doing something on GitHub and receiving events - but that&#39;s not the best way to develop code. We need to work locally.</p><p>There is <a href="https://github.com/zeit/micro-dev" target="_blank" rel="noopener">micro-dev</a> that wraps the single event handler with an actual server, hot code reloading, etc. To use it with TypeScript we need <code>ts-node</code> and an intermediate file to register <code>.ts</code> Node hook.</p><figure class="highlight js"><figcaption><span>local/gh-hook.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'ts-node'</span>).register(&#123;</span><br><span class="line">  transpileOnly: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">require</span>(<span class="string">'../hooks/gh'</span>)</span><br></pre></td></tr></table></figure><p>We can start the local development from <code>package.json</code></p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"local:gh-hook"</span>: <span class="string">"micro-dev local/gh-hook.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is <code>micro-dev</code> in action</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ npm run <span class="built_in">local</span>:gh-hook</span><br><span class="line"></span><br><span class="line">&gt; my-folder@1.0.0 <span class="built_in">local</span>:gh-hook /my-folder</span><br><span class="line">&gt; micro-dev <span class="built_in">local</span>/gh-hook.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   ┌──────────────────────────────────────────────────┐</span><br><span class="line">   │                                                  │</span><br><span class="line">   │   Micro is running!                              │</span><br><span class="line">   │                                                  │</span><br><span class="line">   │   • Local:            http://localhost:3000      │</span><br><span class="line">   │   • On Your Network:  http://10.130.4.201:3000   │</span><br><span class="line">   │                                                  │</span><br><span class="line">   │   Copied <span class="built_in">local</span> address to clipboard!             │</span><br><span class="line">   │                                                  │</span><br><span class="line">   └──────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>Perfect, local server with hot reloading. But we need to get a couple of events from GitHub to know.</p><h2><span id="ngrok">ngrok</span></h2><p>Here is where <a href="http://ngrok.io" target="_blank" rel="noopener">ngrok</a> comes in. We have a team account where we have reserved a domain word. So I can start <code>npm run local:gh-hook</code> and then from another terminal run <code>ngrok http -subdomain=my-folder-bot 3000</code>. This requires authenticated <code>ngrok</code> CLI, but works immediately.</p><p>Now I have a permanent external domain that GitHub can call with events: <code>https://my-folder-bot.ngrok.io/webhook</code>, and it gets to my local event handler. And here is a cool thing: <code>ngrok</code> starts a local dashboard, where I can see each request, replay it, copy and save it into a JSON file.</p><p><img src="/blog/images/ngrok-requests.png" alt="inspect request in the ngrok dashboard"></p><h2><span id="cypress">Cypress</span></h2><p>If we have request JSON bodies, we can install <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a> test runner and use it as <a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/" target="_blank" rel="noopener">API tester with a GUI</a>. Just copy a request from GitHub and save it as a JSON <a href="https://on.cypress.io/fixture" target="_blank" rel="noopener">fixture file</a>.</p><figure class="highlight"><figcaption><span>cypress/fixtures/pr-opened.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"action"</span>: <span class="string">"opened"</span>,</span><br><span class="line">  <span class="attr">"number"</span>: <span class="number">3376</span>,</span><br><span class="line">  <span class="attr">"pull_request"</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is a typical test where we load the fixture, use it as a request body and assert that the response responds with expected result</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">context(<span class="string">'Pull requests'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'finds issues mentioned'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// fixture fixes issue 3353</span></span><br><span class="line">    cy.fixture(<span class="string">'pr-opened'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">data</span> =&gt;</span> cy.request(<span class="string">'/webhook'</span>, data))</span><br><span class="line">      .its(<span class="string">'body'</span>)</span><br><span class="line">      .should(<span class="string">'equal'</span>, <span class="string">'handled opened pull request for issues 3353'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes and we can inspect each request and response in Cypress Command Log</p><p><img src="/blog/images/cy-request-test.png" alt="Cypress request inspection"></p><p>So we capture test data using <code>ngrok</code>, write simple, focused code with individual functions and let <code>now</code> package and deploy lambdas to the cloud. No need to worry about servers, complex stacks of middleware, etc.</p><p><strong>Note: ⚠️</strong> adding Cypress as a dev dependency includes it in the lambda, slowing down the deploy. I have not found a way to exclude it yet.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I like &lt;a href=&quot;../tags/zeit&quot;&gt;Zeit Now v1&lt;/a&gt; and now there is something even more powerful - &lt;a href=&quot;https://zeit.co/blog/now-2&quot; target
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="typescript" scheme="https://glebbahmutov.com/blog/tags/typescript/"/>
    
      <category term="zeit" scheme="https://glebbahmutov.com/blog/tags/zeit/"/>
    
  </entry>
  
  <entry>
    <title>Use TypeScript With Cypress</title>
    <link href="https://glebbahmutov.com/blog/use-typescript-with-cypress/"/>
    <id>https://glebbahmutov.com/blog/use-typescript-with-cypress/</id>
    <published>2019-01-19T05:00:00.000Z</published>
    <updated>2019-05-10T13:24:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>How to write <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> end-to-end tests in TypeScript is a question that comes up again and again. Here is what you need to do step by step if you are using WebPack already. If you don&#39;t want to follow steps, just use <a href="https://github.com/bahmutov/add-typescript-to-cypress" target="_blank" rel="noopener">bahmutov/add-typescript-to-cypress</a> module.</p><p>You can find the source code for this post in <a href="https://github.com/bahmutov/use-typescript-with-cypress" target="_blank" rel="noopener">bahmutov/use-typescript-with-cypress</a> repo.</p><h2><span id="install-cypress">Install Cypress</span></h2><p>If you haven&#39;t already, install Cypress</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev cypress</span><br></pre></td></tr></table></figure><p>Open Cypress for the first time - it will scaffold <code>cypress</code> folder with examples. We don&#39;t need it and can delete it. I will replace it with a single JavaScript spec file.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'loads examples'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'https://example.cypress.io'</span>)</span><br><span class="line">  cy.contains(<span class="string">'Kitchen Sink'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Cypress runs the test and it passes</p><p><img src="/blog/images/ts-cypress/first-test-passes.png" alt="first test passes"></p><p>There is no IntelliSense yet. The global variable <code>cy</code> has type <code>any</code> according to VSCode.</p><p><img src="/blog/images/ts-cypress/no-intellisense.png" alt="no IntelliSense support"></p><p>If we add <code>@ts-check</code> comment, VSCode is complaining about unknown variable <code>cy</code>.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line">it(<span class="string">'loads examples'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'https://example.cypress.io'</span>)</span><br><span class="line">  cy.contains(<span class="string">'Kitchen Sink'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ts-cypress/ts-check.png" alt="ts-check error"></p><h2><span id="fix-intellisense-and-ts-check">Fix IntelliSense and ts-check</span></h2><p>Ok, if you want IntelliSense and <code>ts-check</code> to work - just add a single comment with reference types at the top of the JavaScript spec file, <a href="https://on.cypress.io/intelligent-code-completion" target="_blank" rel="noopener">see Cypress docs</a>.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"><span class="comment">// @ts-check</span></span><br><span class="line">it(<span class="string">'loads examples'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'https://example.cypress.io'</span>)</span><br><span class="line">  cy.contains(<span class="string">'Kitchen Sink'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>That&#39;s it. Nothing else is necessary. You now have IntelliSense and <code>ts-check</code> working.</p><p><img src="/blog/images/ts-cypress/reference-types.png" alt="with reference types comment"></p><h2><span id="typescript-spec">TypeScript Spec</span></h2><p>Let&#39;s switch from JavaScript to TypeScript. Rename <code>spec.js</code> to <code>spec.ts</code> and start using types. We don&#39;t need the reference comment or <code>@ts-check</code> directive.</p><figure class="highlight ts"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Url = <span class="built_in">string</span></span><br><span class="line">it(<span class="string">'loads examples'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url: Url = <span class="string">'https://example.cypress.io'</span></span><br><span class="line">  cy.visit(url)</span><br><span class="line">  cy.contains(<span class="string">'Kitchen Sink'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, Cypress cannot bundle the spec file.</p><p><img src="/blog/images/ts-cypress/typescript-not-working.png" alt="typescript is not working"></p><p>VSCode cannot find global variable <code>cy</code> anymore.</p><p><img src="/blog/images/ts-cypress/cannot-find-cy.png" alt="cannot find cy"></p><p>Let&#39;s fix this. We will need Webpack and Cypress Webpack preprocessor.</p><h2><span id="transpile-typescript-using-webpack">Transpile TypeScript using Webpack</span></h2><p>To transpile TS code I will use Webpack. I am following the <a href="https://webpack.js.org/guides/typescript/" target="_blank" rel="noopener">Webpack TypeScript guide</a> exactly as written.</p><p><strong>1.</strong> install tools</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack typescript ts-loader</span><br></pre></td></tr></table></figure><p><strong>2.</strong> copy <code>tsconfig.json</code> example</p><p>I will copy the <code>tsconfig.json</code> exactly as is from the Webpack TypeScript guide and save it locally.</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./dist/"</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es6"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then I will add a single <code>types</code> entry to load global <code>cypress</code> variables.</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./dist/"</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es6"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"types"</span>: [<span class="string">"cypress"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I have IntelliSense and types working in VSCode again.</p><p><img src="/blog/images/ts-cypress/fixed-types.jpeg" alt="fixed types"></p><p><strong>3.</strong> copy <code>webpack.config.js</code> example</p><p>We need <code>webpack.config.js</code> too - and again I am copying the example from the Webpack TypeScript guide as is.</p><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.ts'</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">        use: <span class="string">'ts-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.tsx'</span>, <span class="string">'.ts'</span>, <span class="string">'.js'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For Cypress transpile, the <code>entry</code> and the <code>output</code> fields do not matter, since each spec file will have its own. But the <code>ts-loader</code> and <code>resolve</code> rules are important. Now we need to configure Cypress to transpile spec files using Webpack, and not its built-in Browserify.</p><h2><span id="cypress-webpack-preprocessor">Cypress Webpack preprocessor</span></h2><p>We need to install <a href="https://github.com/cypress-io/cypress-webpack-preprocessor" target="_blank" rel="noopener">cypress-webpack-preprocessor</a> and point it at <code>webpack.config.js</code>. I am copying everything exactly as its README shows.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @cypress/webpack-preprocessor</span><br></pre></td></tr></table></figure><p>Because we have already configured Webpack and <code>ts-loader</code>, no other dependencies are necessary.</p><p>Now copy the options snippet from the README to <code>cypress/plugins/index.js</code> to configure Webpack as a preprocessor</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'@cypress/webpack-preprocessor'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">on</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="comment">// send in the options from your webpack.config.js, so it works the same</span></span><br><span class="line">    <span class="comment">// as your app's code</span></span><br><span class="line">    webpackOptions: <span class="built_in">require</span>(<span class="string">'../../webpack.config'</span>),</span><br><span class="line">    watchOptions: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  on(<span class="string">'file:preprocessor'</span>, webpack(options))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Start Cypress again and the TypeScript specs will be transpiled.</p><p><img src="/blog/images/ts-cypress/transpiled-ts-spec.png" alt="transpiled TypeScript spec"></p><h2><span id="additional-features">Additional features</span></h2><p>If we try to use ES6 features in our specs, VSCode will show an error, and Cypress test will not be transpiled.</p><figure class="highlight ts"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'handles ES6 features'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    name: cy.stub().returns(<span class="string">'Joe'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> Proxy()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ts-cypress/proxy-error.png" alt="proxy error"></p><p>Go to <code>tsconfig.json</code> and change <code>target</code> property from &quot;es5&quot; to &quot;es6&quot;.</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./dist/"</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es6"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es6"</span>,</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"types"</span>: [<span class="string">"cypress"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now everything will work again and we can test how an ES6 proxy can intercept and redirect calls.</p><figure class="highlight ts"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'handles ES6 features'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    name: cy.stub().returns(<span class="string">'Joe'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> Proxy(o, &#123;</span><br><span class="line">    <span class="keyword">get</span> (target, method) &#123;</span><br><span class="line">      <span class="keyword">return</span> target.name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  expect(proxy.whatever()).to.equal(<span class="string">'Joe'</span>)</span><br><span class="line">  expect(o.name).to.have.been.calledOnce</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ts-cypress/proxy-test-passes.png" alt="proxy test passes"></p><h2><span id="intellisense-with-custom-commands-or-assertions">IntelliSense with custom commands or assertions</span></h2><p>If you extend the <code>cy</code> global object with <a href="https://on.cypress.io/custom-commands" target="_blank" rel="noopener">custom commands</a>, you also need to add their type definitions. See section <a href="https://github.com/cypress-io/cypress-example-todomvc#cypress-intellisense" target="_blank" rel="noopener">Cypress IntelliSense in <code>cypress-example-todomvc</code></a> for example.</p><p>If you write custom assertions to extend <code>should(...)</code> chainers, you can also provide type definitions for them, see recipe <a href="https://github.com/cypress-io/cypress-example-recipes#adding-chai-assertions" target="_blank" rel="noopener">Adding Chai Assertions</a>.</p><h2><span id="related">Related</span></h2><ul><li><a href="https://github.com/bahmutov/use-typescript-with-cypress" target="_blank" rel="noopener">bahmutov/use-typescript-with-cypress</a></li><li><a href="https://on.cypress.io/typescript" target="_blank" rel="noopener">Cypress TypeScript documentation</a></li><li><a href="https://www.cypress.io/blog" target="_blank" rel="noopener">Cypress blog</a></li><li><a href="../using-ts-aliases-in-cypress-tests/">Using TypeScript aliases in Cypress tests</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;How to write &lt;a href=&quot;https://www.cypress.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cypress.io&lt;/a&gt; end-to-end tests in TypeScript is a question 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="typescript" scheme="https://glebbahmutov.com/blog/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Cypress is just ...</title>
    <link href="https://glebbahmutov.com/blog/cypress-is/"/>
    <id>https://glebbahmutov.com/blog/cypress-is/</id>
    <published>2019-01-16T05:00:00.000Z</published>
    <updated>2019-03-06T17:30:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>One thing I have to repeat again and again to everyone willing to liste, is that <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a> architecture is <a href="https://on.cypress.io/key-differences" target="_blank" rel="noopener">fundamentally different</a> from Selenium or WebDriver. Cypress runs <em>right inside the browser next to your web app</em>. And Cypress is just JavaScript, like your web app (after maybe transpiling the source code). And if you know how to build a web application, you can change how Cypress looks and behaves because Cypress user interface is a web application itself. Because Cypress is also a Node application, from the tests you can jump to the operating system and do everything you might want. Let&#39;s see how it all comes together.</p><h2><span id="cypress-is-just-javascript">Cypress is just JavaScript</span></h2><p>Cypress tests are written usually in JavaScript, CoffeeScript or TypeScript. Ultimately everything gets transpiled to JavaScript, and runs in the spec iframe in the browser. Modern browsers understand modern JavaScript (and missing features <a href="../testing-es6-module-in-cypress-electron/">can be polyfilled for your tests</a>), so your tests can take advantage of it.</p><p>Take <a href="http://es6-features.org/#Proxying" target="_blank" rel="noopener">ES6 proxies</a> for example. We can use a proxy to intercept calls to the global <code>cy</code> object and create convenient methods for finding elements by <a href="https://on.cypress.io/best-practices#Selecting-Elements" target="_blank" rel="noopener">test id attribute</a>. The following code snippet comes from <a href="https://github.com/bahmutov/cypress-get-it" target="_blank" rel="noopener">cypress-get-it</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">global.cy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(global.cy, &#123;</span><br><span class="line">  <span class="keyword">get</span> (target, prop) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getting prop'</span>, prop)</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^get\w+/</span>.test(prop)) &#123;</span><br><span class="line">      <span class="keyword">const</span> words = getSomethingToWords(prop)</span><br><span class="line">      <span class="keyword">const</span> attribute = getAttribute(words)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">selector</span> =&gt;</span> &#123;</span><br><span class="line">        cy.log(<span class="string">`<span class="subst">$&#123;prop&#125;</span> "<span class="subst">$&#123;selector&#125;</span>"`</span>)</span><br><span class="line">        <span class="keyword">return</span> target.get(<span class="string">`[<span class="subst">$&#123;attribute&#125;</span>="<span class="subst">$&#123;selector&#125;</span>"]`</span>, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> target[prop]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So when we call <code>cy.visit(&#39;...&#39;)</code> from now on, it goes to the &quot;real&quot; <a href="https://on.cypress.io/visit" target="_blank" rel="noopener"><code>cy.visit</code></a>. But if we call any method that starts with <code>cy.get...</code> then we convert the method name like <code>cy.getFooBarBaz(&quot;value&quot;)</code> to the data attribute selector and call the existing method <code>cy.get(&#39;[foo-bar-baz=&quot;value&quot;])</code>.</p><p>For page that looks like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-test-id</span>=<span class="string">"foo"</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-test</span>=<span class="string">"bar"</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">test-id</span>=<span class="string">"baz"</span>&gt;</span>baz<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>we can write method names that express actual data attributes and are easy to read</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.getDataTestId(<span class="string">'foo'</span>).should(<span class="string">'have.text'</span>, <span class="string">'foo'</span>)</span><br><span class="line">cy.getDataTest(<span class="string">'bar'</span>).should(<span class="string">'have.text'</span>, <span class="string">'bar'</span>)</span><br><span class="line">cy.getTestId(<span class="string">'baz'</span>).should(<span class="string">'have.text'</span>, <span class="string">'baz'</span>)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/cypress-is/get-it.png" alt="Successful elements"></p><p>Should you use <a href="https://github.com/bahmutov/cypress-get-it" target="_blank" rel="noopener">cypress-get-it</a>? Probably not. You better use small utility functions without any magic.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ti = <span class="function"><span class="params">s</span> =&gt;</span> <span class="string">`[data-test-id="<span class="subst">$&#123;s&#125;</span>]`</span></span><br><span class="line"><span class="keyword">const</span> t = <span class="function"><span class="params">s</span> =&gt;</span> <span class="string">`[data-test="<span class="subst">$&#123;s&#125;</span>]`</span></span><br><span class="line"><span class="keyword">const</span> i = <span class="function"><span class="params">s</span> =&gt;</span> <span class="string">`[test-id="<span class="subst">$&#123;s&#125;</span>]`</span></span><br><span class="line">cy.get(ti(<span class="string">'foo'</span>)).should(<span class="string">'have.text'</span>, <span class="string">'foo'</span>)</span><br><span class="line">cy.get(t(<span class="string">'bar'</span>)).should(<span class="string">'have.text'</span>, <span class="string">'bar'</span>)</span><br><span class="line">cy.get(i(<span class="string">'baz'</span>)).should(<span class="string">'have.text'</span>, <span class="string">'baz'</span>)</span><br></pre></td></tr></table></figure><p>You can even overwrite <a href="https://on.cypress.io" target="_blank" rel="noopener"><code>cy.get</code></a> using <a href="https://on.cypress.io/custom-commands" target="_blank" rel="noopener">custom Cypress command</a> and invent your own syntax (in addition to the built-in jQuery selectors)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// all selectors that start with "=" are going to become "data-test-id" selectors</span></span><br><span class="line">Cypress.Commands.overwrite(<span class="string">'get'</span>, (<span class="keyword">get</span>, selector) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (selector.startsWith(<span class="string">'='</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = selector.substr(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> s = <span class="string">`[data-test-id="<span class="subst">$&#123;value&#125;</span>"]`</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(s)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(selector)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You have a choice, because it is just JavaScript.</p><h2><span id="cypress-runs-in-the-browser">Cypress runs in the browser</span></h2><p>Cypress is controlling a real browser when it runs your tests. In the browser window, there are 2 iframes: app iframe and spec iframe. The app iframe is holding the web application. The spec iframe loads the bundled test code.</p><p><img src="/blog/images/cypress-is/cypress-iframes.png" alt="Cypress architecture"></p><p>The spec iframe has no width or height, since it has no visual elements. Instead it sends all events that happen during a test to the top window where Cypress web application is drawing the Command Log. You can open DevTools and inspec the iframes yourself.</p><p><img src="/blog/images/cypress-is/iframes.png" alt="Iframes in the elements panel"></p><p>The most immediate result of this architecture besides <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/" target="_blank" rel="noopener">being able to control application directly via app actions</a>, is that the test code <em>can modify the Cypress user interface</em>. Literally, your spec code can even <a href="../cypress-jump/">use JSX right away</a> because Cypress UI is a React application and our browserify bundler transpiles JSX.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'react-dom'</span>)</span><br><span class="line">it(<span class="string">'injects dynamic React component and it works'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>)</span><br><span class="line">  cy.get(<span class="string">'#app'</span>).then(<span class="function"><span class="params">el$</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> welcomeGleb = <span class="xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">"Gleb"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    ReactDOM.render(welcomeGleb, el$[0])</span></span><br><span class="line"><span class="xml">  &#125;)</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure><p>Once you realize that the spec JavaScript code can control the web application it is running in, the world is your oyster. For example, you will no longer need to wait for the Cypress dev team to add color theme support. You can just <a href="https://www.cypress.io/blog/2018/10/11/halloween-theme/" target="_blank" rel="noopener">do it in user space</a>.</p><p><img src="/blog/images/cypress-is/halloween.png" alt="Cypress Halloween theme"></p><p>Find the source code and two dark color themes in <a href="https://github.com/bahmutov/cypress-dark" target="_blank" rel="noopener">cypress-dark</a>.</p><h2><span id="cypress-has-node-backend">Cypress has Node backend</span></h2><p>Cypress tests are running in the browser, but can call the backend code that runs on Node using <a href="https://on.cypress.io/task" target="_blank" rel="noopener"><code>cy.task</code></a> command. Anything you might want to do on the host system can be done from Node. Read and write files, work with a database, send smoke signals - anything Node can do, <a href="../powerful-cy-task/">your tests can do too</a>.</p><p>Let&#39;s put everything we just saw together. Running a single test, or skipping a test from the Cypress UI has been a common feature request. But do we need to change the core of the test runner to be able to do it? Can we do it ourselves (in a hacky way)? We want:</p><ul><li>when all tests have finished, put a button &quot;Skip&quot; next to each test name in the Command Log</li><li>when a user clicks on &quot;Skip&quot; button, we can read the spec file and change it by adding <code>it.skip</code> for that test</li><li>save the changed file on disk, and Cypress will pick up changes, rerunning the tests</li></ul><p>So let&#39;s do this. You can find the solution in <a href="https://github.com/bahmutov/cypress-skip-and-only-ui" target="_blank" rel="noopener">cypress-skip-and-only-ui</a> repo. Drawing buttons after all tests have finished is somewhat tricky because we have to compute the full test title from UI elements by walking through the DOM.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">after(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// finds the root node of all tests from Mocha runnables</span></span><br><span class="line">  <span class="keyword">const</span> runnable = cy.state(<span class="string">'runnable'</span>)</span><br><span class="line">  <span class="keyword">const</span> root = getRootSuite(runnable)</span><br><span class="line">  <span class="keyword">const</span> titles = getTests(root)</span><br><span class="line"></span><br><span class="line">  $.find(<span class="string">'.runnable-title'</span>).map(<span class="function"><span class="params">rt</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// walk through the DOM to find full title</span></span><br><span class="line">    <span class="keyword">const</span> uiTitle = findParentTitles(rt) || []</span><br><span class="line">    uiTitle.reverse()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// match test title from DOM with test titles found from the runnables</span></span><br><span class="line">    <span class="keyword">if</span> (titles.some(<span class="function"><span class="params">testTitle</span> =&gt;</span> Cypress._.isEqual(testTitle, uiTitle))) &#123;</span><br><span class="line">      <span class="comment">// add UI buttons for this test</span></span><br><span class="line">      addOnlySkipButtons(rt, uiTitle, Cypress.spec)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Find the rest of the code in <a href="https://github.com/bahmutov/cypress-skip-and-only-ui/blob/master/src/support.tsx" target="_blank" rel="noopener">src/support.tsx</a>. The final result looks like this:</p><p><img src="/blog/images/cypress-is/buttons.png" alt="skip, only and reset buttons"></p><p>When you click on a button, like &quot;skip&quot; for example, it sends a message using <code>cy.task</code> to the Node backend. The message includes the spec filename (provided by Cypress) and the full test title.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onClickSkip = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">'skipTests'</span>, &#123;</span><br><span class="line">    <span class="comment">// like '/foo/bar/cypress/integration/spec.js'</span></span><br><span class="line">    filename: spec.absolute,</span><br><span class="line">    <span class="comment">// like ['several tests together', 'inner', 'has deep test']</span></span><br><span class="line">    title: title</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The Node handles the <code>skipTests</code> command by loading the spec, creating an abstract syntax tree, walking it to find <code>CallExpression</code> with <code>Identifier = &quot;it&quot;</code> and then rewriting that particular node. Hint: use module called <a href="https://github.com/substack/node-falafel#readme" target="_blank" rel="noopener">falafel</a> for this, it is great. Find the code to do this in <a href="https://github.com/bahmutov/cypress-skip-and-only-ui/blob/master/src/task-utils.ts" target="_blank" rel="noopener">src/task-utils.ts</a>. Note: I am transpiling TSX to plain <code>React.createElement</code> using TypeScript before publishing <code>cypress-skip-and-only-ui</code> to NPM, because Cypress bundler does NOT transpile <code>node_modules</code>. The final result: Cypress UI with my buttons that modify the specs on the fly, and Cypress rerunning the tests on chance.</p><p><img src="/blog/images/cypress-is/skip-and-only.gif" alt="skip, only and reset buttons in action"></p><p>Beautiful.</p><h2><span id="communicate-yourself">Communicate yourself</span></h2><p>You can create your own link between Cypress backend and the web app, for example by using web sockets. Then you can perform operations on the server, like watch files. Whenever a file changes, send a message to the Cypress web application via web socket, and the web app can react. This is the idea behind <a href="https://github.com/bahmutov/cypress-watch-and-reload" target="_blank" rel="noopener">cypress-watch-and-reload</a> - watch arbitrary source files and rerun tests on changes.</p><p><img src="/blog/images/cypress-is/reload.gif" alt="watch and reload"></p><p>You know how it reruns the tests? By clicking on the UI &quot;Rerun&quot; button of course 😁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.top.document.querySelector(<span class="string">'.reporter .restart'</span>).click()</span><br></pre></td></tr></table></figure><h2><span id="conclusion">Conclusion</span></h2><p>If you know how to make a web application using JavaScript, HTML and CSS, you can:</p><ol><li>Write good end-to-end tests using <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> test runner.</li><li>Customize how Cypress looks and behaves because Cypress is just a JavaScript code running inside a web app and on Node backend.</li></ol><p>And if you are just beginning your <a href="https://hackernoon.com/beginning-your-web-development-journey-start-here-7084346f5762" target="_blank" rel="noopener">web development journey</a>, take a look at Cypress <a href="https://on.cypress.io/tutorials" target="_blank" rel="noopener">testing tutorials</a>. They will help you get better at both testing and at web development in general.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One thing I have to repeat again and again to everyone willing to liste, is that &lt;a href=&quot;https://www.cypress.io&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
</feed>
