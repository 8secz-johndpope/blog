<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2020-10-13T11:35:30.060Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Testing Content-Security-Policy using Cypress ... Almost</title>
    <link href="https://glebbahmutov.com/blog/testing-csp-almost/"/>
    <id>https://glebbahmutov.com/blog/testing-csp-almost/</id>
    <published>2020-10-13T04:00:00.000Z</published>
    <updated>2020-10-13T11:35:30.060Z</updated>
    
    <content type="html"><![CDATA[<p>I have <a href="/blog/disable-inline-javascript-for-security/" title="written">written</a> about using <a href="https://content-security-policy.com/">Content-Security-Policy</a> (usually shortened to just CSP) to protect your website from cross-site scripting attacks. Using CSP you can restrict the sources of JavaScript allowed to run on the page, especially disabling the inline JavaScript - and your users are much safer!</p><p>But is your protection actually working? Can you verify that the CSP header is set correctly? Can you write a <em>security test</em> that tries to inject a script and gets stopped? Let me show you how to write such test using Cypress. It is almost a perfect way to sprinkle some security testing into your functional end-to-end tests. I am saying <em>almost</em>, because this approach <em>almost works</em>.</p><blockquote class="pullquote"><p>🧭 You can find the source code for this blog post in the repository <a href="https://github.com/bahmutov/test-csp">bahmutov/test-csp</a>.</p></blockquote><h2><span id="the-app">The app</span></h2><p>Let&#39;s first create an application to be attacked using script injection. It is a page with an inline script tag</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Inline script. If an attacker can modify the page</span></span><br><span class="line"><span class="comment">    that another user sees in such a way that the attacker&#x27;s script</span></span><br><span class="line"><span class="comment">    tag runs and shows this alert message, then your page is susceptible to</span></span><br><span class="line"><span class="comment">    script injection attacks</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    alert(42)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can serve the application using any static web server, for example using <a href="http://expressjs.com/">Express.js</a></p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(express.static(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3003</span></span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server listening at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When we load this page in the browser we see the inline script executing</p><p><img src="/blog/images/almost/alert.png" alt="Inline script executing on page load"></p><p>If we see this popup on the page, that&#39;s bad. That means an attacker can also somehow inject something (potentially) that would also run, stealing another user&#39;s private and sensitive information. Let&#39;s stop all inline scripts from running.</p><h2><span id="content-security-policy">Content security policy</span></h2><p>Let&#39;s lock our web application by serving it with <code>Content-Security-Policy</code> header by using <a href="https://helmetjs.github.io/">Helmet module</a>. Just add it to our application and restart the server.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> helmet = <span class="built_in">require</span>(<span class="string">&#x27;helmet&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express(</span><br><span class="line">app.use(helmet()) <span class="comment">// use defaults</span></span><br><span class="line">app.use(express.static(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure><p>When we see the page headers now we will see a slew of response headers making the page a lot more secure.</p><p><img src="/blog/images/almost/helmet.png" alt="Security headers added by Helmet middleware"></p><p>And the best result - the <code>alert</code> message box does not pop up anymore. Instead we see an angry message in the browser&#39;s console</p><p><img src="/blog/images/almost/error-message.png" alt="Browser does not execute scripts that are not allowed by the CSP"></p><p>Great, our <code>Content-Security-Policy</code> is protecting our site&#39;s users by blocking all inline scripts.</p><h2><span id="reporting-violations">Reporting violations</span></h2><p>The <code>Content-Security-Policy</code> stops the scripts that violate the security policy from running. The browser also prints the security error to the console. We can also report any security errors to an external server using <code>/report-uri</code> option in the policy. For this, we need to actually provide our own CSP policy plus <code>reportUri</code> address to send all attack events.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.use(</span><br><span class="line">  helmet(&#123;</span><br><span class="line">    contentSecurityPolicy: &#123;</span><br><span class="line">      directives: &#123;</span><br><span class="line">        <span class="comment">// only allow scripts loaded from the current domain</span></span><br><span class="line">        defaultSrc: [<span class="string">&quot;&#x27;self&#x27;&quot;</span>],</span><br><span class="line">        reportUri: [<span class="string">&#x27;/security-attacks&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>When loading the page we can see the attack reported to the (non-existent) endpoint <code>http://localhost:3003/security-attacks</code>.</p><p><img src="/blog/images/almost/report-uri.png" alt="Blocked script was reported by the browser"></p><p>We can inspect the request to see the object sent by the browser with the attack&#39;s details</p><p><img src="/blog/images/almost/security-report.png" alt="Security violation report fields"></p><h2><span id="content-security-policy-and-cypress">Content-Security-Policy and Cypress</span></h2><p>Wouldn&#39;t it be cool if we could listen to the <code>POST /security-attacks</code> calls from the browser and catch them from Cypress tests to check if the CSP is set up correctly? Using the new <a href="https://on.cypress.io/route2">cy.route2</a> API we could rewrite the HTML document to insert script tags from different domains trying to see if we allow executing 3rd party code - and we expect these security attacks to be reported. We could insert script tags directly into the DOM using JS code, again expecting these security violations to be reported.</p><p>Well, there is a small problem here. Let&#39;s try loading our page in the Cypress browser.</p><p><img src="/blog/images/almost/loaded.png" alt="The localhost:3003 loaded in Cypress"></p><p>Notice that the unsafe inline script has executed - you can see the <code>alert</code> message in the Command Log. Let&#39;s inspect the <code>localhost</code> document and list its headers. This is what the browser sees when Cypress visits the page.</p><p><img src="/blog/images/almost/remaining-headers.png" alt="The response headers the browser sees when Cypress visits the page"></p><p>If you compare these headers to the full set of headers on the document in the &quot;normal&quot; browser that I have shown at the start of the blog, you will notice that some security headers are automatically stripped by Cypress. This is done to allow Cypress to load the site in an iframe (thus stripping <code>X-Frame-Options</code> header) and to inject a tiny script at the start of the page (thus it needs to remove the <code>Content-Security-Policy</code> header)</p><p><img src="/blog/images/almost/injected.png" alt="The script injected by Cypress proxy into the visited page"></p><p>This tiny script that sets <code>document.domain = &#39;localhost&#39;;</code> is the key to how Cypress works - it allows the JavaScript from the test domain (usually something like <code>localhost:&lt;random port&gt;</code>) to access document from any other domain loaded in an iframe. But to inject this script we need to remove the CSP header, since it would normally prevent unsafe inline scripts.</p><h2><span id="attempt-1-move-csp-header-into-meta">Attempt 1 - move CSP header into meta</span></h2><p>There is a nice little workaround we can perform to still use CSP protection, yet allow Cypress to load the page. The <code>Content-Security-Policy</code> can be set either via a response header (recommended), or via <code>&lt;meta ...&gt;</code> HTML tag (not recommended). In our test, we can copy the header into the document&#39;s <code>&lt;HEAD&gt;</code>!</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;loads&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// we are only interested in the root document</span></span><br><span class="line">  <span class="keyword">const</span> url = Cypress.config(<span class="string">&#x27;baseUrl&#x27;</span>) + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">  cy.route2(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.url === url) &#123;</span><br><span class="line">      <span class="keyword">return</span> req.reply(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> csp = res.headers[<span class="string">&#x27;content-security-policy&#x27;</span>]</span><br><span class="line">        <span class="comment">// really simply &lt;HEAD&gt; rewriting</span></span><br><span class="line">        <span class="comment">// to only insert the CSP meta tag</span></span><br><span class="line">        res.body = res.body.replace(</span><br><span class="line">          <span class="string">&#x27;&lt;head&gt; &lt;/head&gt;&#x27;</span>,</span><br><span class="line">          <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;<span class="subst">$&#123;csp&#125;</span> &quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;/head&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test spies on the <code>/</code> request, looks at the server&#39;s response, and copies the CSP header into the <code>&lt;HEAD&gt;&lt;meta ...&gt;</code> tag. Let&#39;s look at the result:</p><p><img src="/blog/images/almost/meta.png" alt="CSP copied into the meta tag"></p><p>We have some wins, and we also have a step back.</p><p>First, the wins:</p><ul><li>The content security policy works. The <code>&lt;script&gt;alert(42)&lt;/script&gt;</code> inline block did NOT run. We see an error report and no <code>alert</code> command in the Command Log.</li><li>Cypress tests still work, even though the little script was injected. Turns out, when CSP is set using a <code>&lt;meta&gt;</code> tag, it applies to the content <em>after</em> the <code>&lt;meta&gt;</code> tag itself. Thus Cypress&#39; own inline tag which comes first is fine. What a lucky break.</li></ul><p><img src="/blog/images/almost/tag-then-meta.png" alt="CSP meta tag applies only after the test injection script"></p><p>Second, the loss:</p><ul><li>as you can see in the browser&#39;s console, the <code>/report-uri</code> directive does NOT work when the CSP is set via <code>&lt;META&gt;</code> tag unfortunately (for security reasons). Thus my hope of intercepting the triggered <code>POST /security-attacks</code> calls has been dashed.</li></ul><h2><span id="attempt-2-content-security-policy-report-only">Attempt 2 - Content-Security-Policy-Report-Only</span></h2><p>In the CSP world, there is the second header we could use to NOT block the unsafe scripts, but to report them only. This header is a nice real world migration strategy that allows you to set the CSP and see if it blocks any of the users before turning it on. We could grab the CSP header and copy it to <code>CSP-Report-Only</code> header when loading the document.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> req.reply(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> csp = res.headers[<span class="string">&#x27;content-security-policy&#x27;</span>]</span><br><span class="line">  res.headers[<span class="string">&#x27;content-security-policy-report-only&#x27;</span>] = csp</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Unfortunately, in Cypress <a href="https://on.cypress.io/changelog#5-3-0">v5.3.0</a> we started <a href="https://github.com/cypress-io/cypress/pull/7936">removing <code>content-security-policy-report-only</code></a> header to be consistent. Sigh, I am thwarted again.</p><h2><span id="future-solution-i-hope">Future solution (I hope)</span></h2><p>So in order for Cypress to work without stripping <code>Content-Security-Policy</code> we should keep the original CSP policy plus inject a permission to load just our Cypress script. This could be done by adding to the list of allowed script sources one more script with a random <code>nonce</code> value.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// allow Cypress script injection</span></span><br><span class="line"><span class="keyword">const</span> nonce = <span class="string">`nonce-&lt;abc..random&gt;`</span></span><br><span class="line"><span class="keyword">const</span> csp = res.headers[<span class="string">&#x27;content-security-policy&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> parsed = parseCSP(csp)</span><br><span class="line"><span class="comment">// push one more script source</span></span><br><span class="line">parsed.scriptSrc.push(nonce)</span><br><span class="line">res.headers[<span class="string">&#x27;content-security-policy&#x27;</span>] = stringifyCSP(parsed)</span><br></pre></td></tr></table></figure><p>later on when injecting Cypress script into <code>&lt;HEAD&gt;</code> element inject it with nonce attribute</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">&quot;&lt;abc..random&gt;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.domain = <span class="string">&#x27;localhost&#x27;</span>; <span class="keyword">var</span> Cypress = ...</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This is why I have opened <a href="https://github.com/cypress-io/cypress/issues/1030">#1030</a> a short time (well, 3 years!) ago. One day I will get to it, and then the security testing against cross-site scripting attacks will become a Cypress feature.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have &lt;a href=&quot;/blog/disable-inline-javascript-for-security/&quot; title=&quot;written&quot;&gt;written&lt;/a&gt; about using &lt;a href=&quot;https://content-security-
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="security" scheme="https://glebbahmutov.com/blog/tags/security/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cypress WASM Example</title>
    <link href="https://glebbahmutov.com/blog/cypress-wasm-example/"/>
    <id>https://glebbahmutov.com/blog/cypress-wasm-example/</id>
    <published>2020-10-10T04:00:00.000Z</published>
    <updated>2020-10-10T16:46:26.471Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you are writing code in some language, like Rust and want to run it in the browser. You can compile it into WASM module, but how do you test this module in an actual browser? In this blog post I will show you how.</p><blockquote class="pullquote"><p>🧭 Find the source code for this post in <a href="https://github.com/bahmutov/cypress-example-wasm-ts">bahmutov/cypress-example-wasm-ts</a> repository forked from repo linked the original <a href="https://github.com/cypress-io/cypress/issues/8804">issue #8804</a></p></blockquote><h2><span id="the-application">The application</span></h2><p>Let&#39;s compile a simple Rust <code>sum</code> function.</p><figure class="highlight rs"><figcaption><span>src/lib.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[wasm_bindgen]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">sum</span></span>(a: <span class="built_in">f64</span>, b: <span class="built_in">f64</span>) -&gt; <span class="built_in">f64</span> &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can use command <code>wasm-pack build --out-dir internal</code> via <a href="https://github.com/rustwasm/wasm-pack">wasm-pack</a> which gives us several files in the <code>internal</code> folder</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ls -la internal</span><br><span class="line">total 64</span><br><span class="line">drwxr-xr-x  10 gleb  staff  320 Oct  9 14:04 .</span><br><span class="line">drwxr-xr-x  26 gleb  staff  832 Oct 10 09:23 ..</span><br><span class="line">-rw-r--r--   1 gleb  staff    1 Oct  9 14:04 .gitignore</span><br><span class="line">-rw-r--r--   1 gleb  staff  566 Oct  9 14:01 README.md</span><br><span class="line">-rw-r--r--   1 gleb  staff  341 Oct  9 14:04 package.json</span><br><span class="line">-rw-r--r--   1 gleb  staff  160 Oct  9 14:04 wasm_pack_ts_cypress.d.ts</span><br><span class="line">-rw-r--r--   1 gleb  staff  101 Oct  9 14:04 wasm_pack_ts_cypress.js</span><br><span class="line">-rw-r--r--   1 gleb  staff  201 Oct  9 14:04 wasm_pack_ts_cypress_bg.js</span><br><span class="line">-rw-r--r--   1 gleb  staff  180 Oct  9 14:04 wasm_pack_ts_cypress_bg.wasm</span><br><span class="line">-rw-r--r--   1 gleb  staff  134 Oct  9 14:04 wasm_pack_ts_cypress_bg.wasm.d.ts</span><br></pre></td></tr></table></figure><p>Now we just need to load the <code>internal/wasm_pack_ts_cypress</code> module into our JavaScript code.</p><h2><span id="webpack">Webpack</span></h2><p>Let&#39;s try importing this module directly using Webpack bundler. I will have <code>src/index.js</code> as an entry point:</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&#x27;../internal/wasm_pack_ts_cypress&#x27;</span></span><br></pre></td></tr></table></figure><p>Unfortunately running <code>npx webpack</code> in this case fails with an error</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ERROR in .&#x2F;internal&#x2F;wasm_pack_ts_cypress_bg.wasm</span><br><span class="line">WebAssembly module is included in initial chunk.</span><br><span class="line">This is not allowed, because WebAssembly download and compilation must happen asynchronous.</span><br><span class="line">Add an async splitpoint (i. e. import()) somewhere between your entrypoint and the WebAssembly module</span><br></pre></td></tr></table></figure><p>Webpack cannot statically load the <code>.wasm</code> file to provide the import. It is an asynchronous operation. Thus we have to use a <em>dynamic import</em> to load the WASM code.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;../internal/wasm_pack_ts_cypress&#x27;</span>).then(<span class="function">(<span class="params">&#123; sum &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// expose the &quot;sum&quot; import on the window object</span></span><br><span class="line">  <span class="comment">// to be able to access it from the Cypress tests</span></span><br><span class="line">  <span class="built_in">window</span>.sum = sum</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>or we can set all exported methods using the module name</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;../internal/wasm_pack_ts_cypress&#x27;</span>).then(<span class="function">(<span class="params"><span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// probably use the module name as key</span></span><br><span class="line">  <span class="built_in">window</span>[<span class="string">&#x27;../internal/wasm_pack_ts_cypress&#x27;</span>] = <span class="built_in">exports</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>For simplicity I prefer the <code>window.sum = sum</code> way.</p><p>Let&#39;s run the bundler and see the results</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ npx webpack</span><br><span class="line">Hash: 03ed532ac20ff6a13948</span><br><span class="line">Version: webpack 4.44.2</span><br><span class="line">Time: 142ms</span><br><span class="line">Built at: 10/10/2020 12:26:39 PM</span><br><span class="line">                           Asset       Size  Chunks                         Chunk Names</span><br><span class="line">                            0.js  241 bytes       0  [emitted]</span><br><span class="line">81334c6f545380fcc5a4.module.wasm  180 bytes       0  [emitted] [immutable]</span><br><span class="line">                         main.js   2.82 KiB       1  [emitted]              main</span><br><span class="line">Entrypoint main = main.js</span><br><span class="line">[0] ./internal/wasm_pack_ts_cypress.js + 1 modules 307 bytes &#123;0&#125; [built]</span><br><span class="line">    | ./internal/wasm_pack_ts_cypress.js 101 bytes [built]</span><br><span class="line">    | ./internal/wasm_pack_ts_cypress_bg.js 201 bytes [built]</span><br><span class="line">[1] ./src/index.js 988 bytes &#123;1&#125; [built]</span><br><span class="line">[2] ./internal/wasm_pack_ts_cypress_bg.wasm 180 bytes &#123;0&#125; [built]</span><br><span class="line"></span><br><span class="line">WARNING in configuration</span><br><span class="line">The &#x27;mode&#x27; option has not been set, webpack will fallback to &#x27;production&#x27; for this value.</span><br><span class="line">Set &#x27;mode&#x27; option to &#x27;development&#x27; or &#x27;production&#x27; to enable defaults for each environment.</span><br><span class="line">You can also set it to &#x27;none&#x27; to disable any default behavior.</span><br><span class="line">Learn more: https://webpack.js.org/configuration/mode/</span><br></pre></td></tr></table></figure><p>The <code>dist</code> folder has several files</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ls -la dist</span><br><span class="line">total 48</span><br><span class="line">drwxr-xr-x   8 gleb  staff   256 Oct 10 09:32 .</span><br><span class="line">drwxr-xr-x  26 gleb  staff   832 Oct 10 09:23 ..</span><br><span class="line">-rw-r--r--   1 gleb  staff   241 Oct 10 12:26 0.js</span><br><span class="line">-rw-r--r--   1 gleb  staff   180 Oct 10 12:26 81334c6f545380fcc5a4.module.wasm</span><br><span class="line">-rw-r--r--@  1 gleb  staff   163 Oct 10 09:06 index.html</span><br><span class="line">-rw-r--r--   1 gleb  staff  2887 Oct 10 12:26 main.js</span><br></pre></td></tr></table></figure><p>The file <code>dist/index.html</code> is ours - it simply imports the <code>main.js</code> bundle produced by Webpack</p><figure class="highlight html"><figcaption><span>dist/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Wasm Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Wasm example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="the-page">The page</span></h2><p>Now we have a bundle and a <code>.wasm</code> file, let&#39;s see the page. We need to have a static server, we cannot simply load <code>file://dist/index.html</code> file. I will use <a href="https://github.com/vercel/serve#readme">serve</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ npx serve dist</span><br><span class="line">   ┌───────────────────────────────────────────────┐</span><br><span class="line">   │                                               │</span><br><span class="line">   │   Serving!                                    │</span><br><span class="line">   │                                               │</span><br><span class="line">   │   - Local:            http://localhost:5000   │</span><br><span class="line">   │   - On Your Network:  http://10.0.0.6:5000    │</span><br><span class="line">   │                                               │</span><br><span class="line">   │   Copied local address to clipboard!          │</span><br><span class="line">   │                                               │</span><br><span class="line">   └───────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>If you open the browser at <code>localhost:5000</code> you will see the <code>window.sum</code> working! Notice the <code>.wasm</code> file fetched using a separate request.</p><p><img src="/blog/images/wasm/wasm.png" alt="Local WASM code working in the browser"></p><h2><span id="the-cypress-test">The Cypress test</span></h2><p>Now that the page with WASM code is working, let&#39;s test it using Cypress. First, we probably want to run Cypress tests after starting the server, so I will add <a href="https://github.com/bahmutov/start-server-and-test">start-server-and-test</a> utility.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress start-server-and-test</span></span><br><span class="line">+ cypress@5.3.0</span><br><span class="line">+ start-server-and-test@1.11.5</span><br></pre></td></tr></table></figure><p>Let&#39;s add a couple of NPM script commands</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;cypress open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;serve dist&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;start-test 5000&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The command <code>npm run dev</code> will use the default <code>npm start</code> command to run the server, wait for local port <code>localhost:5000</code> to respond, then will execute <code>npm test</code> to start Cypress. Our test simply visits the <code>localhost:5000</code> page (I recommend setting it as <code>baseUrl</code> in the <code>cypress.json</code> file).</p><figure class="highlight ts"><figcaption><span>sum.spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Wasm&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;sums&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// automatically retry checking &quot;window.sum&quot; until</span></span><br><span class="line">    <span class="comment">// it is set and is a function</span></span><br><span class="line">    cy.window()</span><br><span class="line">      .its(<span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;be.a&#x27;</span>, <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">sum</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// now let&#x27;s test the sum</span></span><br><span class="line">        expect(sum(<span class="number">2</span>, <span class="number">3</span>)).to.equal(<span class="number">5</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs and verifies the WASM function <code>sum</code> is working as expected.</p><p><img src="/blog/images/wasm/wasm-test.png" alt="Calling sum to test it"></p><p>Great.</p><h2><span id="direct-import">Direct import</span></h2><p>As a last note: trying to directly import the WASM module from Cypress test (as a unit test) does NOT work</p><figure class="highlight ts"><figcaption><span>sum-import.test.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&#x27;../internal/wasm_pack_ts_cypress&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;sum test&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">&#x27;should be able to run a sum test&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    expect(sum(<span class="number">1</span>, <span class="number">2</span>)).to.equal(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>You will get exactly the same Webpack error as you saw earlier - because Cypress v5 uses Webpack under the hood to bundle specs.</p><p><img src="/blog/images/wasm/wasm-import.png" alt="Direct WASM import into Cypress fails"></p><p>Dynamic imports in Cypress specs do not work also - because Cypress Webpack preprocessor assumes the bundle produced is a single JS file, and does not currently serve multiple resources. Maybe in the future we will remove this limitation and WASM code could be tested directly like this:</p><figure class="highlight plain"><figcaption><span>future.test.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; JUST AN EXAMPLE</span><br><span class="line">&#x2F;&#x2F; this is just an example of what a future test would look like</span><br><span class="line"></span><br><span class="line">describe(&#39;sum test&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">  it(&#39;sums numbers&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    cy.wrap(import(&#39;..&#x2F;internal&#x2F;wasm_pack_ts_cypress&#39;)) &#x2F;&#x2F; wraps import Promise</span><br><span class="line">      .its(&#39;sum&#39;)</span><br><span class="line">      .then((sum) &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; now let&#39;s test the sum</span><br><span class="line">        expect(sum(2, 3)).to.equal(5)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Follow <a href="https://twitter.com/cypress_io">Cypress</a> and my work <a href="https://twitter.com/bahmutov">@bahmutov</a> to learn if this becomes possible.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you are writing code in some language, like Rust and want to run it in the browser. You can compile it into WASM module, but how 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Testing Pyramids</title>
    <link href="https://glebbahmutov.com/blog/testing-pyramids/"/>
    <id>https://glebbahmutov.com/blog/testing-pyramids/</id>
    <published>2020-10-09T04:00:00.000Z</published>
    <updated>2020-10-09T12:03:20.105Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="cypress-react-unit-test">cypress-react-unit-test</span></h2><p>I have a little project I am pretty fond of: <a href="https://github.com/bahmutov/cypress-react-unit-test">cypress-react-unit-test</a>. It is a library that allows you to write React component tests and run them inside <a href="https://www.cypress.io">Cypress</a> test runner. Since there are many React features that one might wish to test, the library has <em>a lot</em> of unit tests. I link them from the README and I split them into <em>basic</em> and <em>advanced</em> examples.</p><p><img src="/blog/images/pyramids/examples.gif" alt="Basic and advanced examples are unit tests"></p><p>I use the basic vs advanced separation because I do not want the users to be overwhelmed when seeing the library for the first time. If you are must trying to learn about <code>cypress-react-unit-test</code> you might simply look through the list of basic examples to get a taste of what this library can do for you (hint: it can test everything). Once you start using the library to test your React components, you might want to learn how to handle some particular difficult situation - and that&#39;s when you search the advanced examples. Testing a stateless React component is a basic example. Using path aliases in Webpack and in TypeScript is an advanced example.</p><p>So there is about 100 spec files in total between the basic and advanced examples. These are the library&#39;s unit tests in my opinion.</p><h2><span id="full-examples">full examples</span></h2><p>But you are probably not going to just test a React component in a vacuum. You probably want to write the component tests inside your actual React application - and how the application is structured, bundled, and served, is really important. Do you use <code>react-scripts</code>, or ejected <code>react-scripts</code>, or <code>Next.js</code>, or a custom Webpack config file? Since the component tests must hook into your app&#39;s bundler&#39;s settings to prepare the component and spec, each project type needs its own settings and the right preprocessor to work. These situations are not well tested using unit tests - they are better tested using the actual fully prepared example code.</p><p>Thus to be useful to the users the <code>cypress-react-unit-test</code> library needs to both show an example of every commonly used React application setup, and to be tested against this setup to release its new versions without accidentally breaking users.</p><p>This is the purpose of the <a href="https://github.com/bahmutov/cypress-react-unit-test#full-examples">full examples</a> section in the library.</p><p><img src="/blog/images/pyramids/full-examples.png" alt="List of full examples"></p><p>These examples are all in <code>examples/*</code> folders. Each has its own <code>package.json</code> with all dependencies listed. Thus a user can quickly scan the dependencies to understand if a particular example is matching their setup. For example, the <a href="https://github.com/bahmutov/cypress-react-unit-test/tree/main/examples/rollup">examples/rollup</a> has the full project that bundles files using <code>Rollup</code> preprocessor</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;example-rollup&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Component testing using Rollup bundler&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;rollup -c&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;DEBUG=cypress-expect cypress-expect run --passing 1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cy:open&quot;</span>: <span class="string">&quot;cypress open&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@bahmutov/cy-rollup&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-babel&quot;</span>: <span class="string">&quot;5.2.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-commonjs&quot;</span>: <span class="string">&quot;15.1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-node-resolve&quot;</span>: <span class="string">&quot;9.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@rollup/plugin-replace&quot;</span>: <span class="string">&quot;2.3.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cypress-react-unit-test&quot;</span>: <span class="string">&quot;file:../..&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cypress-expect&quot;</span>: <span class="string">&quot;2.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cypress&quot;</span>: <span class="string">&quot;5.3.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span>: <span class="string">&quot;7.4.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/preset-react&quot;</span>: <span class="string">&quot;7.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/preset-typescript&quot;</span>: <span class="string">&quot;7.10.4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rollup&quot;</span>: <span class="string">&quot;2.28.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;react&quot;</span>: <span class="string">&quot;^16.13.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;react-dom&quot;</span>: <span class="string">&quot;^16.13.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now you might notice the <code>&quot;cypress-react-unit-test&quot;: &quot;file:../..&quot;</code> dependency. This is linking the <code>cypress-react-unit-test</code> that normally would have some specific version back to the root folder of the repo. This is done so that we can work on the <code>examples/rollup</code> and use the development version of the library straight from the root folder.</p><p>The user can see what dependencies the project is actually using, and we can change the <code>cypress-react-unit-test</code> while testing it against this project.</p><p>Note the testing command <code>cypress-expect run --passing 1</code> that uses <a href="https://github.com/bahmutov/cypress-expect">cypress-expect</a>. This verifies that the tests in the example actually execute and not just pass accidentally. Read <a href="/blog/wrap-cypress-using-npm/" title="Wrap Cypress Using NPM Module API">Wrap Cypress Using NPM Module API</a> blog post for details on Cypress wrapper scripts.</p><h2><span id="continuous-integration">continuous integration</span></h2><p>So what we have in the repository is <em>not</em> a monorepo. We have the library at the root (with its own <code>node_modules</code> and its own build step), and we have separate example projects in their subfolders, with their own <code>package.json</code> files. The dependencies are NOT shared. There is no hoisting or optimization of the dependencies, no Yarn workspaces, no <code>lerna</code> tricks.</p><p>You want to run tests? You run <code>npm it</code>. That&#39;s it. Almost poetic in Dr. Seuss&#39; sense.</p><p>On continuous integration server (in my case I am using CircleCI, see the <a href="https://github.com/bahmutov/cypress-react-unit-test/blob/main/circle.yml">circle.yml</a> file) we do the following two tricks to make our life quick and easy, and our users&#39; lives safer:</p><ol><li><p>We install the root level NPM dependencies and cache <code>~/.npm</code> and <code>~/.cache</code> folders. We also bring the workspace from the install job to the rest of the workflow&#39;s jobs. Every time <code>examples/rollup</code> install runs, it uses a lot of dependencies already present in the <code>~/.npm</code>, so the total install time is not terrible at all. The <code>examples/rollup</code> <code>npm install</code> only takes 20 seconds!</p></li><li><p>We build the <code>cypress-react-unit-test</code> first and run <code>npm pack</code> to create <code>cypress-react-unit-test-0.0.0-development.tgz</code> in the workspace. This workspace is then passed to every <code>examples/*</code> job downstream. Every job then <em>removes</em> the root level <code>node_modules</code> folder and installs TGZ file AND its own dependencies:</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls -la ../..</span><br><span class="line">echo ***Installing cypress-react-unit-test from root TGZ archive***</span><br><span class="line">npm install -D ../../cypress-react-unit-test-0.0.0-development.tgz</span><br><span class="line">echo ***Installing other dependencies***</span><br><span class="line">npm install</span><br><span class="line">echo ***rename root node_modules to avoid accidental dependencies***</span><br><span class="line">mv ../../node_modules ../../no_modules</span><br></pre></td></tr></table></figure><p>I perform the above steps to make sure every example project is actually using the dependencies it declares and does not accidentally find NPM packages from the root <code>node_modules</code> folder. This protects the end users from depending on my library that worked accidentally due to a stray undeclared but successfully loaded 3rd party NPM dependency.</p><p>The entire CI workflow is shown in the graph below. We install root dependencies, build the library, run basic and advanced component tests. If they pass we run all example jobs in parallel.</p><p><img src="/blog/images/pyramids/workflow.png" alt="cypress-react-unit-test CI workflow"></p><p>The <code>circle.yml</code> file makes good use of <a href="https://github.com/cypress-io/circleci-orb">cypress-io/circleci-orb</a> to set up all jobs without manually managing workspaces, caches, etc.</p><p>The large number of individual tests, and multiple full-scale application examples guarantee that every release of the library is thoroughly tested and will work inside most of the users&#39; apps without a hitch.</p><p>Taken together, the unit tests are like a first line of defense, while full example apps are like big testing pyramids. They are separate, but work together to stop bugs from crawling into the library.</p><p><img src="/blog/images/pyramids/pyramids.png" alt="Testing pyramids"></p><h2><span id="bonus-external-examples">Bonus - external examples</span></h2><p>Just to complete the picture, there is a number of external example repositories that use <code>cypress-react-unit-test</code>. I cloned a few popular projects and showed how one could my library to write component tests. You can find these projects under GitHub topic <a href="https://github.com/topics/cypress-react-unit-test-example">cypress-react-unit-test-example</a>.</p><p><img src="/blog/images/pyramids/external-examples.gif" alt="External examples"></p><p>The external examples are not tested immediately from the main repository, but they are <a href="/blog/keep-examples-up-to-date/" title="upgraded automatically">upgraded automatically</a> when a new version of <code>cypress-react-unit-test</code> comes out.</p><h2><span id="related">Related</span></h2><ul><li>read <a href="/blog/testing-trapezoid/" title="Testing Trapezoid">Testing Trapezoid</a> blog post</li><li>browse <a href="https://slides.com/bahmutov/sdet">slides for SDET meetup</a> or <a href="https://www.youtube.com/watch?v=XQ6WQTJ05p0">watch the video</a> to see me talk about testing crab</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;cypress-react-unit-test&quot;&gt;cypress-react-unit-test&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;I have a little project I am pretty fond of: &lt;a href=&quot;https://g
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>Access XState from Cypress Test</title>
    <link href="https://glebbahmutov.com/blog/cypress-and-xstate/"/>
    <id>https://glebbahmutov.com/blog/cypress-and-xstate/</id>
    <published>2020-10-08T04:00:00.000Z</published>
    <updated>2020-10-08T16:46:28.386Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#model-based-app">Model-based app</a></li><li><a href="#state-visualization">State visualization</a></li><li><a href="#connect-from-test">Connect from test</a></li><li><a href="#set-the-initial-data">Set the initial data</a><ul><li><a href="#update-the-fix">Update - the fix</a></li></ul></li><li><a href="#send-state-events">Send state events</a></li><li><a href="#listen-to-events">Listen to events</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="model-based-app">Model-based app</span></h2><p><a href="https://twitter.com/DavidKPiano">David K</a> has recently <a href="https://twitter.com/DavidKPiano/status/1313912125975388161">released</a> a good TodoMVC example implemented using state machines via <a href="https://xstate.js.org/">XState library</a>. You can find a cloned version of the application at <a href="https://github.com/bahmutov/xstate-todomvc">bahmutov/xstate-todomvc</a>. The app&#39;s state and allowed actions are implemented using a state machine:</p><figure class="highlight js"><figcaption><span>src/todoMachine.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createMachine, assign, spawn &#125; <span class="keyword">from</span> <span class="string">&quot;xstate&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> uuid <span class="keyword">from</span> <span class="string">&quot;uuid-v4&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createTodoMachine &#125; <span class="keyword">from</span> <span class="string">&quot;./todoMachine&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createTodo = <span class="function">(<span class="params">title</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    id: uuid(),</span><br><span class="line">    title,</span><br><span class="line">    completed: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> todosMachine = createMachine(&#123;</span><br><span class="line">  id: <span class="string">&quot;todos&quot;</span>,</span><br><span class="line">  context: &#123;</span><br><span class="line">    todo: <span class="string">&quot;&quot;</span>, <span class="comment">// new todo</span></span><br><span class="line">    todos: [],</span><br><span class="line">    filter: <span class="string">&quot;all&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  initial: <span class="string">&quot;loading&quot;</span>,</span><br><span class="line">  states: &#123;</span><br><span class="line">    loading: &#123;</span><br><span class="line">      entry: assign(&#123;</span><br><span class="line">        todos: <span class="function">(<span class="params">context</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// &quot;Rehydrate&quot; persisted todos</span></span><br><span class="line">          <span class="keyword">return</span> context.todos.map(<span class="function">(<span class="params">todo</span>) =&gt;</span> (&#123;</span><br><span class="line">            ...todo,</span><br><span class="line">            ref: spawn(createTodoMachine(todo))</span><br><span class="line">          &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">      always: <span class="string">&quot;ready&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ready: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  on: &#123;</span><br><span class="line">    <span class="string">&quot;NEWTODO.CHANGE&quot;</span>: &#123;</span><br><span class="line">      actions: assign(&#123;</span><br><span class="line">        todo: <span class="function">(<span class="params">_, event</span>) =&gt;</span> event.value</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;NEWTODO.COMMIT&quot;</span>: &#123;</span><br><span class="line">      actions: [</span><br><span class="line">        assign(&#123;</span><br><span class="line">          todo: <span class="string">&quot;&quot;</span>, <span class="comment">// clear todo</span></span><br><span class="line">          todos: <span class="function">(<span class="params">context, event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> newTodo = createTodo(event.value.trim());</span><br><span class="line">            <span class="keyword">return</span> context.todos.concat(&#123;</span><br><span class="line">              ...newTodo,</span><br><span class="line">              ref: spawn(createTodoMachine(newTodo))</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="string">&quot;persist&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      cond: <span class="function">(<span class="params">_, event</span>) =&gt;</span> event.value.trim().length</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;TODO.COMMIT&quot;</span>: &#123;</span><br><span class="line">      actions: [</span><br><span class="line">        assign(&#123;</span><br><span class="line">          todos: <span class="function">(<span class="params">context, event</span>) =&gt;</span></span><br><span class="line">            context.todos.map(<span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> todo.id === event.todo.id</span><br><span class="line">                ? &#123; ...todo, ...event.todo, <span class="attr">ref</span>: todo.ref &#125;</span><br><span class="line">                : todo;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="string">&quot;persist&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;TODO.DELETE&quot;</span>: &#123;</span><br><span class="line">      actions: [</span><br><span class="line">        assign(&#123;</span><br><span class="line">          todos: <span class="function">(<span class="params">context, event</span>) =&gt;</span></span><br><span class="line">            context.todos.filter(<span class="function">(<span class="params">todo</span>) =&gt;</span> todo.id !== event.id)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="string">&quot;persist&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    SHOW: &#123;</span><br><span class="line">      actions: assign(&#123;</span><br><span class="line">        filter: <span class="function">(<span class="params">_, event</span>) =&gt;</span> event.filter</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;MARK.completed&quot;</span>: &#123;</span><br><span class="line">      actions: <span class="function">(<span class="params">context</span>) =&gt;</span> &#123;</span><br><span class="line">        context.todos.forEach(<span class="function">(<span class="params">todo</span>) =&gt;</span> todo.ref.send(<span class="string">&quot;SET_COMPLETED&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;MARK.active&quot;</span>: &#123;</span><br><span class="line">      actions: <span class="function">(<span class="params">context</span>) =&gt;</span> &#123;</span><br><span class="line">        context.todos.forEach(<span class="function">(<span class="params">todo</span>) =&gt;</span> todo.ref.send(<span class="string">&quot;SET_ACTIVE&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    CLEAR_COMPLETED: &#123;</span><br><span class="line">      actions: assign(&#123;</span><br><span class="line">        todos: <span class="function">(<span class="params">context</span>) =&gt;</span> context.todos.filter(<span class="function">(<span class="params">todo</span>) =&gt;</span> !todo.completed)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The above machine has 2 states: &#39;loading&#39; and &#39;ready&#39;, and it starts in the &#39;loading&#39; state. The machine has &#39;context&#39; object that keeps the current todo text and the list of existing todos. The most important part of the machine are <em>actions</em> - they control how every event changes the machine. For example, when an event &quot;NEWTODO.COMMIT&quot; happens, if the current todo is not empty, then we add the new todo object to the list of todos.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;NEWTODO.COMMIT&quot;</span>: &#123;</span><br><span class="line">  actions: [</span><br><span class="line">    assign(&#123;</span><br><span class="line">      todo: <span class="string">&quot;&quot;</span>, <span class="comment">// clear todo</span></span><br><span class="line">      todos: <span class="function">(<span class="params">context, event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newTodo = createTodo(event.value.trim());</span><br><span class="line">        <span class="keyword">return</span> context.todos.concat(&#123;</span><br><span class="line">          ...newTodo,</span><br><span class="line">          ref: spawn(createTodoMachine(newTodo))</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="string">&quot;persist&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  cond: <span class="function">(<span class="params">_, event</span>) =&gt;</span> event.value.trim().length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="state-visualization">State visualization</span></h2><p>When the application starts, it uses <code>@xstate/inspect</code> to connect to the state machine to visualize it. This is optional utility that we can enable only in the local development mode.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Todos &#125; <span class="keyword">from</span> <span class="string">&#x27;./Todos&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; inspect &#125; <span class="keyword">from</span> <span class="string">&#x27;@xstate/inspect&#x27;</span></span><br><span class="line"></span><br><span class="line">inspect(&#123;</span><br><span class="line">  iframe: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Todos</span> /&gt;</span></span>, <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app&#x27;</span>))</span><br></pre></td></tr></table></figure><p>Thus a new browser window pops up and lets us see the state machine graph together with events and transitions - it is a magical sight.</p><p><img src="/blog/images/todomvc-state/state-visualization.gif" alt="TodoMVC state visualization"></p><p>The React component that uses the state machine is shown below. In order for the state machine to be observable, the React component creating it must pass <code>devTools: true</code> option</p><figure class="highlight js"><figcaption><span>src/Todos.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMachine &#125; <span class="keyword">from</span> <span class="string">&quot;@xstate/react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; todosMachine &#125; <span class="keyword">from</span> <span class="string">&quot;./todosMachine&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> persistedTodosMachine = todosMachine.withConfig(</span><br><span class="line">  &#123;</span><br><span class="line">    actions: &#123;</span><br><span class="line">      persist: <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;todos-xstate&quot;</span>, <span class="built_in">JSON</span>.stringify(ctx.todos));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// initial state from localstorage</span></span><br><span class="line">  &#123;</span><br><span class="line">    todo: <span class="string">&quot;Learn state machines&quot;</span>,</span><br><span class="line">    todos: (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;todos-xstate&quot;</span>)) || [];</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(e);</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Todos</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, send] = useMachine(persistedTodosMachine, &#123; <span class="attr">devTools</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Can we connect to the state machine from a Cypress test to unlock the application&#39;s internal logic? Can we use <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/">App Actions</a> to access the state machine&#39;s context to verify it? Can we drive the application by sending events to the machine and verify the DOM and local storage updates? Can our test listen for state events, while we drive the application through the DOM?</p><h2><span id="connect-from-test">Connect from test</span></h2><p>While we cannot (yet) embed the state machine visualization inside the Cypress browser, we can still connect to the machine from the test. First, let&#39;s only expose the state machine during Cypress test.</p><figure class="highlight js"><figcaption><span>src/Todos.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Todos</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> options = <span class="built_in">window</span>.Cypress ? &#123; <span class="attr">devTools</span>: <span class="literal">true</span> &#125; : &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> [state, send] = useMachine(persistedTodosMachine, options)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now let&#39;s write a Cypress test that &quot;tricks&quot; the xstate machine into exposing its instance via <code>window.__xstate__</code> property.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;starts with todo text&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">      onBeforeLoad(win) &#123;</span><br><span class="line">        win.__xstate__ = &#123;</span><br><span class="line">          register: <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">            state.xstate = x</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// initially</span></span><br><span class="line">    cy.wrap(state).its(<span class="string">&#x27;xstate.machine.context&#x27;</span>).should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;</span><br><span class="line">      todo: <span class="string">&#x27;Learn state machines&#x27;</span>,</span><br><span class="line">      todos: [],</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When a state machine starts with <code>devTools: true</code> it automatically registers using <code>window.__xstate__.register</code> method. Thus our test provides a mock method, and the state machine is now within the test&#39;s reach.</p><p>I set the machine as a property <code>xstate</code> on the <code>state</code> object. This is a trick that allows us to call <code>cy.wrap(state).its(&#39;xstate...&#39;)</code> command and Cypress <a href="https://on.cypress.io/retry-ability">auto-retries</a> automatically until the state machine is set.</p><p><img src="/blog/images/todomvc-state/initial.png" alt="Checking the initial context object"></p><p>In the test above we verify that the machine starts with an empty list of todos, and the next todo text.</p><h2><span id="set-the-initial-data">Set the initial data</span></h2><p>Our application loads the previously saved state from the local storage. Let&#39;s test if that is working correctly - we can verify both the <code>context</code> object and the DOM elements. To know what to save in the local storage, we can simply use the application, and then print the <code>localStorage</code> object</p><p><img src="/blog/images/todomvc-state/localstorage.png" alt="Application saves its state in the local storage"></p><p>Execute <code>copy(localStorage[&#39;todos-xstate&#39;])</code> from the browser&#39;s DevTools console to copy the value and paste it into the test</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todos = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="string">&#x27;455de87d-bc9a-4849-b05f-767c5bef7c65&#x27;</span>,</span><br><span class="line">    title: <span class="string">&#x27;write state machine&#x27;</span>,</span><br><span class="line">    completed: <span class="literal">false</span>,</span><br><span class="line">    ref: &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="string">&#x27;b62e163b-8f2f-4677-a228-9fd28a52a120&#x27;</span>,</span><br><span class="line">    title: <span class="string">&#x27;test using Cypress&#x27;</span>,</span><br><span class="line">    completed: <span class="literal">true</span>,</span><br><span class="line">    ref: &#123; <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span> &#125;,</span><br><span class="line">    prevTitle: <span class="string">&#x27;test using Cypress&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="built_in">localStorage</span>[<span class="string">&#x27;todos-xstate&#x27;</span>] = <span class="built_in">JSON</span>.stringify(todos)</span><br><span class="line">cy.visit(...)</span><br><span class="line"><span class="comment">// the context is set correctly</span></span><br><span class="line">cy.wrap(state).its(<span class="string">&#x27;xstate.machine.context&#x27;</span>).should(<span class="string">&#x27;deep.equal&#x27;</span>, &#123;</span><br><span class="line">  todo: <span class="string">&#x27;Learn state machines&#x27;</span>,</span><br><span class="line">  todos,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// check the DOM</span></span><br><span class="line">cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, todos.length)</span><br><span class="line">todos.forEach(<span class="function">(<span class="params">todo, k</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo-list li label&#x27;</span>).eq(k).should(<span class="string">&#x27;have.text&#x27;</span>, todo.title)</span><br><span class="line">  <span class="keyword">if</span> (todo.completed) &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).eq(k).should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).eq(k).should(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice how we check the DOM using the list of todos we set in the local storage. For each item we verify the text in the DOM, and if the item has <code>completed: true</code> property, then the DOM element should have the class <code>completed</code>.</p><p><img src="/blog/images/todomvc-state/dom.png" alt="Expected DOM with two Todo items"></p><p>But our test fails - seems the &quot;completed&quot; class is NOT hydrated correctly</p><p><img src="/blog/images/todomvc-state/completed.gif" alt="The test fails to find the class completed in the second item"></p><p>Wait, is this possible? Is there a true error we have found in this most excellent TodoMVC application? Let&#39;s try the application by itself, without Cypress.</p><p><img src="/blog/images/todomvc-state/fail-app.gif" alt="Application does not preserve the completed property for real during reload"></p><p>Interesting - so the number of completed todos is 1 after reload - so that&#39;s correct, but the <code>completed</code> field is not passed correctly to the individual Todo components. But I thought ... I mean, David said that model-based apps cannot have bugs... Has my life been a lie?! Let&#39;s see why the <code>completed</code> property is not accurately reflected in the DOM after reload. First, let&#39;s see if it is deserialized correctly</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Todos</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> options = <span class="built_in">window</span>.Cypress ? &#123; <span class="attr">devTools</span>: <span class="literal">true</span> &#125; : &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> [state, send] = useMachine(persistedTodosMachine, options)</span><br><span class="line"><span class="built_in">console</span>.table(state.context.todos)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/todomvc-state/print-todos.gif" alt="Print the todos to the console"></p><p>So the items are deserialized correctly, let&#39;s dig further. Let&#39;s print the context inside the individual Todo items</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useActor &#125; <span class="keyword">from</span> <span class="string">&#x27;@xstate/react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Todo</span>(<span class="params">&#123; todoRef &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, send] = useActor(todoRef)</span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef(<span class="literal">null</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(state.context)</span><br><span class="line">  <span class="keyword">const</span> &#123; id, title, completed &#125; = state.context</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hmm, seems the <code>completed</code> property gets &quot;lost&quot; on the way to the item</p><p><img src="/blog/images/todomvc-state/completed-to-false.gif" alt="Print individual Todo item"></p><p>Ok, so this goes into the weeds of <code>useActor</code>, so I will stop. This failing test example shows that you still need end-to-end tests, since they can discover problems in your logic, in your code bundling pipeline, in your hosting, in your configuration - all the things that can go wrong for your users can be tested against using Cypress end-to-end tests.</p><h3><span id="update-the-fix">Update - the fix</span></h3><p><a href="https://twitter.com/DavidKPiano/status/1314241597027090432">David K has fixed the Codesandbox</a>, see <a href="https://github.com/bahmutov/xstate-todomvc/commit/08f526b86b843ca91f3d38282852c618efdb7772">b7772</a>.</p><h2><span id="send-state-events">Send state events</span></h2><p>If we can access and verify the context, we can also drive the application by sending events from the test to the state machine. For example, let&#39;s add several todos not via user interface, but via state events.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;adds todos&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    onBeforeLoad(win) &#123;</span><br><span class="line">      win.__xstate__ = &#123;</span><br><span class="line">        register: <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">          state.xstate = x</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.wrap(state)</span><br><span class="line">    .its(<span class="string">&#x27;xstate&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;send&#x27;</span>, &#123; <span class="attr">type</span>: <span class="string">&#x27;NEWTODO.COMMIT&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;first todo&#x27;</span> &#125;)</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>So we can &quot;drive&quot; the application by sending events to the state machine, and triggering actions, rather than always going through the user interface</p><p><img src="/blog/images/todomvc-state/new-todo.png" alt="Adding new todo by sending an event to the state machine"></p><blockquote class="pullquote"><p>🦉 <a href="https://github.com/cypress-io/cypress-realworld-app">Cypress RealWorld App</a> is using such state action approach in most tests to quickly log into the application bypassing the user interface (which is covered by its own dedicated tests).</p></blockquote><h2><span id="listen-to-events">Listen to events</span></h2><p>While the application is working, the state machine is processing events triggered by the React application. We can listen to these events to confirm they are happening.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;listens to events&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>, &#123;</span><br><span class="line">    onBeforeLoad(win) &#123;</span><br><span class="line">      win.__xstate__ = &#123;</span><br><span class="line">        register: <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">          state.xstate = x</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// start listening to xstate events</span></span><br><span class="line">  cy.wrap(state)</span><br><span class="line">    .its(<span class="string">&#x27;xstate&#x27;</span>)</span><br><span class="line">    .invoke(<span class="string">&#x27;subscribe&#x27;</span>, <span class="function">(<span class="params">state, event</span>) =&gt;</span> cy.stub().as(<span class="string">&#x27;events&#x27;</span>)(event))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if we add the todo via DOM</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).clear().type(<span class="string">&#x27;write better tests&#123;enter&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then we will have the event in the state machine</span></span><br><span class="line">  cy.get(<span class="string">&#x27;@events&#x27;</span>).should(<span class="string">&#x27;have.been.calledWith&#x27;</span>, &#123;</span><br><span class="line">    type: <span class="string">&#x27;NEWTODO.COMMIT&#x27;</span>,</span><br><span class="line">    value: <span class="string">&#x27;write better tests&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice how there are lots of events, but we only confirm the one we are interested in using:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;@events&#x27;</span>).should(<span class="string">&#x27;have.been.calledWith&#x27;</span>, &#123;</span><br><span class="line">  type: <span class="string">&#x27;NEWTODO.COMMIT&#x27;</span>,</span><br><span class="line">  value: <span class="string">&#x27;write better tests&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/todomvc-state/listen.gif" alt="Listen to the state events"></p><h2><span id="see-also">See also</span></h2><ul><li>source code at <a href="https://github.com/bahmutov/xstate-todomvc">bahmutov/xstate-todomvc</a></li><li><a href="https://www.cypress.io/blog/2019/02/28/shrink-the-untestable-code-with-app-actions-and-effects/">Shrink the Untestable Code With App Actions And Effects</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#model-based-app&quot;&gt;Model-based app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#state-visualization&quot;&gt;State visualization&lt;/a&gt;&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="model-based testing" scheme="https://glebbahmutov.com/blog/tags/model-based-testing/"/>
    
  </entry>
  
  <entry>
    <title>Difference between cy.route and cy.route2</title>
    <link href="https://glebbahmutov.com/blog/cy-route-vs-route2/"/>
    <id>https://glebbahmutov.com/blog/cy-route-vs-route2/</id>
    <published>2020-10-07T04:00:00.000Z</published>
    <updated>2020-10-07T12:04:31.355Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="route">route</span></h2><p>Cypress has two commands for <a href="https://on.cypress.io/network-requests">controlling the network</a> during tests: <a href="https://on.cypress.io/route">cy.route</a> and newer <a href="https://on.cypress.io/route2">cy.route2</a>. This blog post explains the difference.</p><p>Cypress executes tests in the same browser window as the application itself, just in a different iframe. When loading the application Cypress wraps all methods of the object <code>XMLHttpRequest</code>. Thus when the application executes <code>new XMLHttpRequest() ...</code> to fire a network request, Cypress is aware of the network call by the virtue of the application calling the already wrapped methods.</p><p><img src="/blog/images/routes/route.png" alt="cy.route intercepts network calls by wrapping XMLHttpRequest object"></p><p>While the above approach works, it is very limited. For example, you could not spy or stub HTTP calls made using <code>fetch</code> function. If your application was using <code>fetch</code> and you wanted to observe or control those network calls from your tests you had to either delete <code>window.fetch</code> and force your application to use a polyfill built on top of XMLHttpRequest, or you could stub the <code>window.fetch</code> method using <a href="https://on.cypress.io/stub">cy.stub</a> via Sinon library.</p><p>For a short workaround we have implemented automatic <code>fetch</code> polyfill via <a href="http://on.cypress.io/changelog#4-9-0">experimentalFetchPolyfill</a> option, but this was still not enough. We really wanted to allow the test code to observe, stub, and modify any HTTP request.</p><h2><span id="route2">route2</span></h2><p>Enter <code>route2</code> - a universal HTTP network control function. It fundamentally is a different beast from <code>route</code>. It no longer works in the browser - instead the network interception and control happen in the network proxy module outside of the browser. When Cypress launches a browser, it points the browser back at Cypress, so that the browser &quot;thinks&quot; Cypress is its network proxy. You can see this command line switch when running Chrome for example by going to the <code>chrome://version</code> tab</p><p><img src="/blog/images/routes/proxy.png" alt="Cypress launches Chrome browser with proxy command line switch pointing back at the Cypress app"></p><p>If Cypress is the proxy for the application, then all HTTP traffic from the application is observable: the page loaded, the static resources like CSS, JavaScript, and images, and any Ajax request, no matter how it is made by the app. You can observe these requests flowing through the proxy module by running Cypress with an environment variable <code>DEBUG</code> set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DEBUG&#x3D;cypress:network:* npx cypress open</span><br><span class="line">...</span><br><span class="line">cypress:network:agent addRequest called &#123; isHttps: false, href: &#39;http:&#x2F;&#x2F;localhost:7080&#x2F;&#39; &#125;</span><br><span class="line">...</span><br><span class="line">cypress:network:agent addRequest called &#123; isHttps: false, href: &#39;http:&#x2F;&#x2F;localhost:7080&#x2F;styles.css&#39; &#125;</span><br><span class="line">...</span><br><span class="line">cypress:network:agent addRequest called &#123; isHttps: false, href: &#39;http:&#x2F;&#x2F;localhost:7080&#x2F;app.js&#39; &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The above terminal log shows the application request the document itself, then requesting <code>styles.css</code> and <code>app.js</code> resources. These requests all go through the Cypress network proxy module where they can be observed (spied upon), modified (both outgoing and incoming), and stubbed (where the proxy responds with mock data).</p><p><img src="/blog/images/routes/network-proxy.png" alt="All application requests travel through the Cypress Network Proxy"></p><blockquote class="pullquote"><p>🗃 Find the code examples from this post in the &quot;cy.route2&quot; recipe in the <a href="https://github.com/cypress-io/cypress-example-recipes">cypress-example-recipes</a></p></blockquote><p>We can modify any request, for example we might want to insert some CSS into the <code>styles.css</code> during a test</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cy.route2(<span class="string">&#x27;styles.css&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">  req.reply(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">`<span class="subst">$&#123;res.body&#125;</span></span></span><br><span class="line"><span class="string">      li &#123;</span></span><br><span class="line"><span class="string">        border: 1px solid pink;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above code modifies the response from the server by appending an extra CSS rule.</p><p><img src="/blog/images/routes/css.png" alt="Modified CSS highlights the list elements during the test"></p><p>Similarly, it is simple to stub <code>fetch</code> calls and avoid going to the server completely.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows fruits&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fruits = [<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Banana&#x27;</span>, <span class="string">&#x27;Cantaloupe&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  cy.route2(<span class="string">&#x27;/favorite-fruits&#x27;</span>, fruits)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  fruits.forEach(<span class="function">(<span class="params">fruit</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.contains(<span class="string">&#x27;.favorite-fruits li&#x27;</span>, fruit)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/routes/fruits.png" alt="Checking if the list of fruits is displayed correctly"></p><p>Even better is to spy on the server&#39;s response to make sure both the server responds correctly and the application renders the list the right way.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.route2(<span class="string">&#x27;/favorite-fruits&#x27;</span>).as(<span class="string">&#x27;fetchFruits&#x27;</span>)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;requests favorite fruits&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.wait(<span class="string">&#x27;@fetchFruits&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;response.body&#x27;</span>)</span><br><span class="line">  .then(<span class="built_in">JSON</span>.parse) <span class="comment">// convert string to array</span></span><br><span class="line">  .then(<span class="function">(<span class="params">fruits</span>) =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;.favorite-fruits li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, fruits.length)</span><br><span class="line"></span><br><span class="line">    fruits.forEach(<span class="function">(<span class="params">fruit</span>) =&gt;</span> &#123;</span><br><span class="line">      cy.contains(<span class="string">&#x27;.favorite-fruits li&#x27;</span>, fruit)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/routes/spy.png" alt="Spying on the server response"></p><p>Because we can inspect the request before deciding how to proceed, we can deal with the application&#39;s network requests in any way we want. For example, we can create a flexible way to spy on or stub GraphQL requests. Something like this is possible:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> allTodos = [...]</span><br><span class="line"><span class="comment">// routeG is built on top of cy.route2</span></span><br><span class="line">routeG(&#123;</span><br><span class="line">  <span class="comment">// stub any call to &quot;operation: allTodos&quot; with this response</span></span><br><span class="line">  <span class="comment">// that will be placed into &quot;body: data: &#123;...&#125;&quot;</span></span><br><span class="line">  allTodos: &#123;</span><br><span class="line">    allTodos,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="comment">// the application shows the expected number of todos</span></span><br><span class="line">cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, allTodos.length)</span><br></pre></td></tr></table></figure><p>Read my blog post <a href="/blog/smart-graphql-stubbing/" title="Smart GraphQL Stubbing in Cypress">Smart GraphQL Stubbing in Cypress</a> for details.</p><p>You can even rewrite the page itself (using plain text operations, or via bundled <a href="https://on.cypress.io/$">Cypress.$</a>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;modifies the page itself&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> pageUrl = <span class="string">`<span class="subst">$&#123;Cypress.config(<span class="string">&#x27;baseUrl&#x27;</span>)&#125;</span>/`</span></span><br><span class="line"></span><br><span class="line">  cy.route2(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// we are only interested in the HTML root resource</span></span><br><span class="line">    <span class="keyword">if</span> (req.url !== pageUrl) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.reply(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> style = <span class="string">`</span></span><br><span class="line"><span class="string">        position: absolute;</span></span><br><span class="line"><span class="string">        bottom: 0;</span></span><br><span class="line"><span class="string">        left: 0;</span></span><br><span class="line"><span class="string">        width: 100%;</span></span><br><span class="line"><span class="string">        background-color: pink;</span></span><br><span class="line"><span class="string">        text-align: center;</span></span><br><span class="line"><span class="string">        text-size: large;</span></span><br><span class="line"><span class="string">        padding: 1em;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line"></span><br><span class="line">      res.body += <span class="string">`&lt;footer style=&quot;<span class="subst">$&#123;style&#125;</span>&quot;&gt;⚠️ This is a Cypress test ⚠️&lt;/footer&gt;`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;footer&#x27;</span>, <span class="string">&#x27;Cypress test&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/routes/modify-html.png" alt="The test modifies the page it loads"></p><blockquote class="pullquote"><p>👏 <code>cy.route2</code> would not become a reality without hard work by Zach Bloomquist who does not have time to <a href="https://twitter.com/flotwig">tweet much</a>, but lots of time to <a href="https://github.com/flotwig">code</a>.</p></blockquote><h2><span id="see-more">See more</span></h2><ul><li><a href="https://on.cypress.io/route">cy.route</a> and <a href="https://on.cypress.io/route2">cy.route2</a> API pages</li><li>Cypress <a href="https://on.cypress.io/network-requests">Network Requests Guide</a></li><li><a href="https://github.com/cypress-io/cypress-example-recipes#stubbing-and-spying">cy.route2 recipe</a></li></ul><p>In the future we plan to retire the original <code>cy.route</code> and replace it with <code>cy.route2</code>. We also plan to retire <code>experimentalFetchPolyfill</code> in favor of <code>cy.route2</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;route&quot;&gt;route&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Cypress has two commands for &lt;a href=&quot;https://on.cypress.io/network-requests&quot;&gt;controlling the netwo
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Rocks and Stones</title>
    <link href="https://glebbahmutov.com/blog/rocks-and-stones/"/>
    <id>https://glebbahmutov.com/blog/rocks-and-stones/</id>
    <published>2020-10-06T04:00:00.000Z</published>
    <updated>2020-10-10T16:09:50.956Z</updated>
    
    <content type="html"><![CDATA[<p>What are you working on today? What will you work on tomorrow? Next week? Next month?</p><p>I would answer these questions with:</p><ul><li>today I am working on A and B</li><li>tomorrow I will probably work on C</li><li>I don&#39;t know what I will work next week, but I would love to find some time to work on X</li><li>next month? I have no idea</li></ul><p>At any time during the day, I can only tell you the 2-3 things that I am currently working on, or plan to work in the nearest future. Everything else is up in the air, and is pretty random. Maybe I will work on feature X next week, but more likely I will work on something else. Maybe I will finish X this week, or maybe something more important will interrupt me, and I will get to X next month. Maybe next year. Maybe never - that&#39;s ok too.</p><p>Am I a bad developer? Am I bad at planning? Why can&#39;t I be more like a plumber or a construction worker and estimate the list of tasks for the next two weeks (and forget planning the next two months, that&#39;s impossible!) - is planning even possible?</p><p>Some people say <a href="https://twitter.com/matryer/status/1313089174321405958">no</a>, and <a href="https://dev.to/tlakomy/why-i-don-t-like-story-point-driven-estimates-28h7">hell no</a>, <a href="https://www.youtube.com/watch?v=QVBlnCTu9Ms">estimation is impossible</a>.</p><h2><span id="software-is-not-construction">Software is not construction</span></h2><p>First, let me address the question of estimation in software development versus other trades. If you work on constructing a house, and this is your first construction job - your estimates are probably going to be waaaay off. If this is your 10th or 100th house, your estimates are probably going to be pretty spot on, if there are no unforeseen circumstances, like a weather disaster (you never know with <a href="/blog/climate-emergency/" title="Climate Emergency">Climate Emergency</a>), or a construction permit delay.</p><p>Thus a construction worker with more experience can estimate the upcoming construction job, since it largely similar to the jobs they have already finished.</p><p>The software development is different. Yes, some tasks might be repetitive and can be estimated roughly: if you ask me to set up a continuous integration service for a small GitHub repository, I will estimate it at 10 minutes, since I can copy one of my existing <a href="/blog/example-ci-configs/" title="Example CI configs">Example CI configs</a> and be done.</p><blockquote class="pullquote"><p>By the way, writing blog posts to publicly document common development tasks is an excellent way to become more productive yourself and make every developer around you a little more productive too, as I described in <a href="/blog/multiple-benefits/" title="Multiple Benefits">Multiple Benefits</a> post.</p></blockquote><p>But if you do the same task again and again, the software development allows you to perform a trick that is <em>impossible</em> or at least is very hard to pull off in the building construction trade: you can automate it or invent a completely new way to skip the task altogether. You can automate large tasks, or even <a href="https://kentcdodds.com/blog/automation">10 second ones</a> - it is worth it. This is the creative part of the software development, where you literally can build a world-changing system in your garage, or bedroom, or college dorm, or library room. Do you want to make billions? Then do not let your development team do repetitive tasks! Accept that everything they do is potentially something brand new; something no one has ever done; something that hopefully is a super useful invention. And as a second side of this coin, accept that accurate estimates for tasks no one on your team has done before are thus impossible.</p><p>If you cannot live with such ambiguity, leave the software development world and join a construction crew. This is good honest work with tangible results and estimates matching reality (aside from very large projects known for their cost overruns).</p><h2><span id="rocks-and-stones">Rocks and stones</span></h2><p><img src="/blog/images/rocks/rock-and-stones.png" alt="Rocks and stones, an artist rendering"></p><p>When we as a team plan a sprint for the next two weeks we naturally consider somewhat larger tasks - features and fixing important bugs. No one wants to spend the spring planning meeting time (which is super expensive: 8 engineers for a 1 hour meeting is a full day of focused work!) discussing how to properly prioritize a two line change to the user documentation:</p><blockquote class="pullquote"><p>- I think it is equally important as updating the year in the footer, I say 1 story point</p><p>- No, it is slightly more important, but I agree that it is 1 story point</p><p>- All in favor ...</p></blockquote><p>Scheduling such large feature &quot;rocks&quot;, as I call them, is like placing them in the two-week sprint &quot;bucket&quot;. The sprint planning is done when N rocks are in the bucket. Will we finish them? No one knows, since the size of the rock is like Heisenberg quantum uncertainty - you only know the size of the task once it <del>collapses</del> is finished.</p><blockquote class="pullquote"><p>By the way, when we estimate the size of each rock, we often ignore the fact that it depends on who is doing it. The developers are not identical replacements, thus the estimate should depend on the person assigned, yet we often estimate first, then assign! At least I have never seen such <a href="/blog/missing-feature-in-every-project-planning-app/" title="sprint-planning feature">sprint-planning feature</a>.</p></blockquote><p>So now every developer grabs a &quot;rock&quot; and works on it. What about all other, smaller stuff that our users might need? A small documentation update to clarify its meaning (like <a href="https://github.com/cypress-io/cypress-documentation/pull/3209">this one</a> or <a href="https://github.com/cypress-io/cypress-documentation/pull/3216">this one</a>)? When do we schedule it and how do we prioritize such tasks? How do we effectively argue that this part of documentation is unclear and would <a href="https://github.com/cypress-io/cypress/pull/5346#issuecomment-701376447">slow down our users</a>?</p><p>A software product (an application, a CLI tool, a website) potentially has lots and lots of small things that require tiny fixes, content rewrites, error message improvements, etc. We cannot join such updates into larger &quot;rocks&quot; - then our updates would be infrequent and arbitrary. So when and how do we iterate over software, its documentation, its supporting docs like examples, blog posts, webinars, and workshops? Without addressing user pain points, or reacting to the customer complaints our software will lack polish, will forever be &quot;almost good&quot;. We as a company would appear unresponsive and slow-moving. Just like building a wall from large rocks only, such approach naturally breaks down after stacking two or three levels of rocks. New England is full of such walls without mortar; they used to mark property boundary, and there was plenty of rocks strewn across the region after the last Ice Age.</p><blockquote class="pullquote"><p>🌎 🔥 Speaking of Ice Age - have you considered how the year 2020 is going to be the coldest year in the foreseeable future due to <a href="/blog/climate-emergency/" title="Climate Emergency">Climate Emergency</a>? Yup, our planet is heating up, and can get into a super scary runaway <a href="https://phys.org/news/2018-08-earth-hothouse-state.html">hothouse scenario</a> unless we stop using <em>all fossil fuels</em> soon.</p></blockquote><p><img src="/blog/images/rocks/wall.jpg" alt="Stone wall near Boston"></p><p>A natural solution to prioritizing and scheduling small tasks (I call them &quot;stones&quot;) is to let the developers themselves find a good time to fit them into the workday. A small documentation update might take 10 minutes - just enough to fill a time gap between other tasks or meetings. Or as something to code during a boring sprint-planning meeting!</p><p>Now a million dollar question:</p><blockquote><p>If we let developers to scope, prioritize, and schedule small tasks, why not let them scope, prioritize, and schedule large tasks too?</p></blockquote><p>After all - the developers working on project X might be the right people to judge the difficulty of every task, their relative priorities, and how to effectively complete as many as possible. I do not say &quot;chaos, do whatever you want&quot;. I am saying - try to imitate a mason laying a wall who uses rocks and stones of different sizes depending on the current area in order to fill it efficiently without gaps. If someone can fill the day fully with tasks of various sizes that matter to the users - that&#39;s enough for me.</p><p><img src="/blog/images/rocks/arc.jpg" alt="Masterfully built stone arc"></p><h2><span id="planning-vs-celebration">Planning vs celebration</span></h2><p>We put such emphasis on sprint planning, asking about rough or accurate time estimates, trying to fill every developer&#39;s bucket. Letting developers fill their days themselves:</p><ul><li>would probably fill their days more efficiently</li><li>would more accurately represent the distribution of task sizes across the project; I strongly believe the task sizes follow <a href="https://en.wikipedia.org/wiki/Power_law">Power Law</a> - there are lots of smaller tasks and a few big ones</li><li>respect the developers&#39; expertise and judgement</li><li>free time!</li></ul><p>So what do we do instead of the sprint planning meeting? We celebrate what we have actually accomplished. Literally. We look back at all the issues closed during the sprint, all pull requests, all blog posts, all public presentations - anything that we have done, and we celebrate them, and we discuss:</p><ul><li>What was difficult? How could we make it better next time?</li><li>What was simple and effective? How can we replicate the success next time?</li></ul><p>And the most important, ultimate question:</p><ul><li>Now that this particular task is done, what can we do next to build on top of it?</li></ul><p>For example:</p><blockquote class="pullquote"><p>We have completed a feature, what do we need to do to release it with the biggest impact?</p><p>We have fixed a bug, how do we deliver the update to the users blocked by the bug?</p><p>We have finished a part of a larger project, what parts have we just unblocked?</p><p>We have created a useful internal tool to perform utility task X, how can we spread the word to get more programming street cred in the open source community?</p><p>We have made an example explaining our software, or conducted a webinar, or recorded a conference talk. Where are all the places in our documentation we should include it?</p></blockquote><p>I often see &quot;what is your definition of &#39;done&#39;?&quot; type of discussions; yet with sprint planning rush, we often skip the actual &quot;useful to the users&quot; part of &#39;done&#39;, instead preferring to be done when the code gets merged and the JIRA story moves to the &quot;Done&quot; column. Switching the focus to the celebration puts the focus back on the user; a complete story is a trigger for an avalanche of more stories to be put back into the pile.</p><h2><span id="faq">FAQ</span></h2><p>Let me try answering common questions I hear when I object to the typical Agile sprint-planning process. If you have more questions, please let me know, I am on Twitter <a href="https://twitter.com/bahmutov">@bahmutov</a>.</p><details>  <summary>If the developers pick their tasks, how do we make sure they actually perform my super important task that is critical to the survival of the company?</summary>Easy. You (the person who considers the task X to be of utmost importance) have to argue / explain / convince others that the task is very important. If you cannot, the demise of the project / team / company will prove you right. And if the company goes on - well, maybe the task was not as critical. If you truly believe the task is a <em>must</em>, maybe you could even do it yourself? Or convince the company to hire a person to do it?</details><details>  <summary>Without time estimates the department X and department Y cannot synchronize the delivery of two parts of the project</summary>Often, I think such synchronization (tasks X and Y should be performed by certain deadline) is a mistake, and instead a sequence would work better: once the task X is finished, then the task Y can start. For example, writing the marketing release materials should often start <em>after</em> the software feature is finished, instead of &quot;predicting&quot; the outcome.On the other hand, sometimes teams do need to really deliver the software parts at the same time: compatible backend API and the frontend for example should be developed in parallel. But I doubt estimating the code is as useful here as putting focus on <em>iterative</em> development where the teams communicate and try to bite off small chunks of the backend and the frontend work to be delivered.</details><details>  <summary>How would new hires or developers with little experience pick their tasks?</summary>Great question. A new hire definitely would need help understanding the company mission, user needs, and project scope. I suggest the new engineers pair with more experienced members of the team to learn the project better before transitioning to semi-autonomous and fully independent work.</details><details>  <summary>What is the role of the product owner in this scenario?</summary>The product owner represents the customer. They should know the customer&#39;s problem really well and come up with some approximation to the solution, and then help engineers define the tasks to implement the solution. The product owner should provide the input on behalf of the customer, and label tasks in the proposed solution as &quot;important&quot;, &quot;less important&quot;, &quot;nice to have&quot; - whatever the labeling system you might pick. The product owner can also collect all the extra information to describe the impact of each task better: how many users would benefit from the bug fix X? How many people said they would sign up for a paid plan, if only it had feature Y?</details><details>  <summary>What is the role of the project manager in this scenario?</summary>Unblocker. The project manager should make sure that every member of the team is as productive as they can be; and if there is someone experiencing a difficulty, unblock them. Is someone sitting waiting for CI to finish because the CI is now a bottleneck? Get a budget for bigger CI. Is someone picking up tasks that require using a new shiny framework A? Get them an <a href="https://egghead.io/">egghead.io</a> subscription to learn the framework A. Is someone complaining about code organization? Make sure people on the team have a meeting about code organization to figure out what is going on.</details><details>  <summary>What is the role of the scrum master?</summary>Not sure. If the product owner is the one running around collecting all additional insights and adding them to the tasks, so that the developers make better choices, and the project manager unblocks the engineers to be their most productive, and there is no sprint planning - then the scrum master slowly dissolves in the morning air until nothing remains.</details><details>  <summary>What is the role of the team lead?</summary>The team lead works on the solution, overall architecture, task definitions, putting systems together, etc. They should be responsible for ensuring the tasks are possible to accomplish, and solve the customer&#39;s problems. The team lead should also notice potential problems creeping into the software while the engineers focus on the individual tasks.</details><details>  <summary>What is the role of the management?</summary>Everyone from C-level executives down to the product owner and the team lead have an absolutely essential and supremely important role: aligning everyone in the company and across every team in the same direction to solve the customer&#39;s problems. If everyone on my team understands what problem we are solving, and how we go about it - then the team members will pick the tasks to work on with clear understanding of how it all fits together.The manager should also listen to the engineers to determine if someone is carrying too many responsibilities. The best solution in that case is to hire a junior engineer to help at first and then take over some of the tasks.</details><details>  <summary>What stops engineers from only picking small &quot;stones&quot; to work on?</summary>Picking the task to work on is a question of motivation and balance. A motivated engineer would pick tasks that are important (see &quot;the role of the management&quot;) to increase their importance to the company. Sometimes they might bite more than they can chew, failing to finish the task. That is ok - projects fail left and right. We can still derive <a href="/blog/multiple-benefits/" title="other benefits">other benefits</a> even from a failed task. But by letting people pick their own tasks we can achieve a balance - tasks large and small will be picked up.Finally, it is up to the project manager and the team lead to observe the efficiency and the motivation of the team. If someone keeps picking small stones to work on, and you believe they are capable of more - talk to them. If someone constantly tries to hoist rocks, yet never finishing - talk to them too!</details><details>  <summary>What happens to the daily standup in this scenario?</summary>Honestly, I don&#39;t think the daily standup is any different in this case. If you do have a daily standup to communicate as a team, sure. If you do not have it - no need to start one. All we have done was to eliminate the sprint-planning session and expand the sprint retrospective into a &quot;celebration&quot; meeting.</details><details>  <summary>What about sprint velocity? How do we know if we are productive?</summary>You replace estimating the distance to be traveled with looking back at the odometer. You can see how productive your team was over the last week / month / year by actually looking at the things accomplished. Look at the items from the completed list discussed during the &quot;sprint celebration&quot; and count the numbers month to month. If the numbers are going down - you are less productive as a team. Maybe you lost some team members? If the numbers are going up - congratulations. Check out how I looked back at my <a href="/blog/what-i-have-done/" title="own work">own work</a>.</details><details>  <summary>How do we use Jira or GitHub to facilitate the &quot;no estimates&quot; approach?</summary>Every issue or task should be described in full details. Any kind of user feedback, client impact, etc - all this information should be reflected in the task via labels, tags, and other meta information. If you are a product owner and think the feature X would be important to the customers, label the task to implement feature X &quot;important&quot;. By collecting all information and attaching it to the tasks, you will allow the engineers to intelligently and deliberately pick a story to work on.As soon as a task is picked up, the engineer should assign it, so that no one else works on it. The rest proceeds as usual.</details><details>  <summary>Will the engineers be constantly interrupted by something else thrown into the list of tasks?</summary>The list of tasks will constantly be growing, changing, and be pruned. Every engineer is free to ignore this list (within limits, a bug in production probably brings all hands on deck to fix it as soon as possible), until they are done with the previous task. An engineer can pick a personal subset of tasks to work on every day, or every couple of hours - it depends on those rocks and stones and how quickly they are finished. But there is no need to artificially pick N rocks and M stones to work on for the next two weeks because &quot;that&#39;s our sprint, and we promised to deliver it&quot;. Use your best judgement to pick the next task or two, finish them, and pick the next ones. It is that easy. At the end of the sprint, review your accomplishments, celebrate and build on top of them.</details><details>  <summary>But I need to plan the next quarter, I need an accurate roadmap</summary>It is funny how we spend more time updating and obsessing over the roadmap (things that we cannot sell), yet review the changelog less often (things that we <em>do have</em> and <em>can sell</em> 💰💰💰). It is fine to have a roadmap, maybe even rough time frames (next month, next quarter, next year), but I would concentrate more on delivering concrete benefits to the user every day rather than obsessing over the spring of next year.</details><h2><span id="see-more">See more</span></h2><ul><li>Read <a href="/blog/multiple-benefits/" title="Multiple Benefits">Multiple Benefits</a> and <a href="/blog/developer-value/" title="Developer value">Developer value</a> blog posts</li><li>Start <a href="/blog/training-new-developers-like-you-were-a-loan-shark/" title="Training new developers like you were a loan shark">Training new developers like you were a loan shark</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;What are you working on today? What will you work on tomorrow? Next week? Next month?&lt;/p&gt;
&lt;p&gt;I would answer these questions with:&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
  </entry>
  
  <entry>
    <title>Smart GraphQL Stubbing in Cypress</title>
    <link href="https://glebbahmutov.com/blog/smart-graphql-stubbing/"/>
    <id>https://glebbahmutov.com/blog/smart-graphql-stubbing/</id>
    <published>2020-10-04T04:00:00.000Z</published>
    <updated>2020-10-05T14:24:53.454Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="pullquote"><p>🧭 Find the source code for this blog post in the repository <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a></p></blockquote><!-- toc --><ul><li><a href="#testing-graphql-calls">Testing GraphQL calls</a></li><li><a href="#testing-without-network-control">Testing without network control</a></li><li><a href="#route2">route2</a></li><li><a href="#operation-name">Operation name</a></li><li><a href="#refactoring-common-code">Refactoring common code</a></li><li><a href="#inspecting-requests">Inspecting requests</a></li><li><a href="#bonus-1-number-of-requests">Bonus 1 - number of requests</a></li><li><a href="#learn-more">Learn more</a></li></ul><!-- tocstop --><h2><span id="testing-graphql-calls">Testing GraphQL calls</span></h2><p>I have implemented a TodoMVC application using GraphQL backend: you can add new todos, mark them completed, and delete them.</p><p><img src="/blog/images/graphql/app.gif" alt="Application in action"></p><p>All HTTP requests to the backend go through the same endpoint <code>POST /</code>, making traditional stubbing using Cypress <code>cy.route</code> command difficult.</p><p><img src="/blog/images/graphql/app-graphql-calls.gif" alt="All GraphQL calls look the same"></p><p>In this blog post I will show how to spy on network calls using the new much more powerful command <a href="https://on.cypress.io/route2">cy.route2</a>. I don&#39;t know if this approach would become the official Cypress library for working with GraphQL; this is my own exploration. Previously I have explored <a href="/blog/e2e-testing-graphql-using-cypress/" title="stubbing the entire backend">stubbing the entire backend</a> during testing, but I do see a value in using the actual backend during end-to-end testing.</p><h2><span id="testing-without-network-control">Testing without network control</span></h2><p>Before I start spying and stubbing network calls from the application to the backend, let&#39;s try writing a test that does NOT control the network, and cannot even observe the GraphQL network calls. Since we do not control the backend either, we are left with guesses about what data our application receives from the backend. Thus if we want to check how the user toggles a todo, we have to &quot;play&quot; against the user interface only. We cannot do specific actions during the test like:</p><ul><li>load 2 todos</li><li>find the first todo</li><li>assert it is not completed yet</li><li>click on the checkbox</li><li>the first todo should have class completed</li></ul><p>Instead our test has to hope that there is at least a single todo returned by the backend. The test cannot assume the first item is NOT complete at the start; instead it only can check if the class changes after clicking on the checkbox.</p><figure class="highlight js"><figcaption><span>cypress/integration/ui-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;TodoMVC&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;toggles todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> startClass</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;li.todo&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.length.gt&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">      .first()</span><br><span class="line">      .invoke(<span class="string">&#x27;attr&#x27;</span>, <span class="string">&#x27;class&#x27;</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">        startClass = x</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">&#x27;li.todo&#x27;</span>).first().find(<span class="string">&#x27;.toggle&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the class names should change</span></span><br><span class="line">    cy.get(<span class="string">&#x27;li.todo&#x27;</span>)</span><br><span class="line">      .first()</span><br><span class="line">      .invoke(<span class="string">&#x27;attr&#x27;</span>, <span class="string">&#x27;class&#x27;</span>)</span><br><span class="line">      .should(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">        expect(x).to.not.equal(startClass)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/graphql/toggle-todo.gif" alt="Without controlling the data our test can only toggle the Todo"></p><p>The test is non-deterministic: notice how every run is either &quot;incomplete -&gt; complete Todo&quot; or &quot;complete -&gt; incomplete Todo&quot; scenario. Without tightly setting up the backend data and without spying or stubbing the network call fetching the data, the test has no way of performing the same actions.</p><h2><span id="route2">route2</span></h2><p>Recently we have introduced <a href="https://on.cypress.io/route2">cy.route2</a> command that can intercept any HTTP call made by the application: it can intercept static resources like HTML and CSS, it can intercept any Ajax call (<code>XMLHttpRequest</code> and <code>fetch</code>). Thus we can build powerful abstractions on top of <code>cy.route2</code> with the following main features:</p><ul><li>you can stub a call using <code>cy.route2(..., &lt;response object&gt;)</code></li><li>you can inspect an outgoing request with <code>cy.route2(..., (req) =&gt; ... inspect req)</code> without stubbing it</li><li>you can stub a call using <code>cy.route2(..., (req) =&gt; ... req.reply(...))</code> which provides a way to do dynamic stubbing</li><li>you can inspect and even modify the server&#39;s response with <code>cy.route2(..., (req) =&gt; ... req.reply((res) =&gt; ...)</code> with the server&#39;s response being the <code>res</code> variable</li></ul><p>Let&#39;s use this to deal with GraphQL calls our application makes.</p><h2><span id="operation-name">Operation name</span></h2><p>Every GraphQL call I see in this application sends a JSON object in the request, and receives a JSON object back. Every request includes a field <code>operationName</code> with values <code>allTodos</code>, <code>AddTodo</code>, <code>updateTodo</code>, <code>DeleteTodo</code> in our application.</p><p><img src="/blog/images/graphql/operation-name.gif" alt="Operation name in every request"></p><p>Let&#39;s use the operation name to distinguish the network calls. Traditionally the REST API calls would have the HTTP method to do the same, but here we can spy on the request, parse it, and stub the first request that loads the data using <code>operationName: allTodos</code>  request. We will use the <a href="https://on.cypress.io/route2">cy.route2</a> command to spy on the <code>fetch POST /</code> request, but without stubbing it at first, just printing the request object sent to the server.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;TodoMVC with GraphQL cy.route2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;completes the first todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.route2(</span><br><span class="line">      &#123;</span><br><span class="line">        method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      (req) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> g = <span class="built_in">JSON</span>.parse(req.body)</span><br><span class="line">        <span class="built_in">console</span>.log(g)</span><br><span class="line">      &#125;,</span><br><span class="line">    )</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The printed object shows the operation name, the query, and the empty variables object, since fetching all todos does not need to send any variables.</p><p><img src="/blog/images/graphql/all-todos.png" alt="Printed GraphQL request object"></p><p>Let&#39;s stub the response - this will always load the same todos in the application, allowing us to reliably test completing an item user story:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> allTodos = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;use GraphQL&#x27;</span>, <span class="attr">completed</span>: <span class="literal">false</span>, <span class="attr">__typename</span>: <span class="string">&#x27;Todo&#x27;</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">    title: <span class="string">&#x27;test with Cypress&#x27;</span>,</span><br><span class="line">    completed: <span class="literal">true</span>,</span><br><span class="line">    __typename: <span class="string">&#x27;Todo&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">cy.route2(</span><br><span class="line">  &#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  (req) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> g = <span class="built_in">JSON</span>.parse(req.body)</span><br><span class="line">    <span class="keyword">if</span> (g.operationName === <span class="string">&#x27;allTodos&#x27;</span>) &#123;</span><br><span class="line">      req.reply(&#123;</span><br><span class="line">        body: &#123;</span><br><span class="line">          data: &#123;</span><br><span class="line">            allTodos,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// must mimic the backend headers, CORS is a thing</span></span><br><span class="line">        headers: &#123;</span><br><span class="line">          <span class="string">&#x27;access-control-allow-origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>The test replies to GraphQL operations <code>allTodos</code> with the same list of items. All other requests will be passed to the backend unchanged, since we did not execute the <code>req.reply</code> call.</p><p>Let&#39;s finish writing the full test: we know the first item is incomplete; thus we can confirm the first list item gets the expected class when clicked.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy.route2(...)</span><br><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  .first()</span><br><span class="line">  .should(<span class="string">&#x27;not.have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br><span class="line">  .find(<span class="string">&#x27;.toggle&#x27;</span>)</span><br><span class="line">  .click(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line">cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).first().should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The test fails the last assertion - the Todo item nevers gets the expected <code>completed</code> class for some reason.</p><p><img src="/blog/images/graphql/test-fails.png" alt="The first item never gets the expected class"></p><p>Hmm, we see 2 GraphQL requests happening after clicking on the <code>.toggle</code> checkbox. The application sends <code>updateTodo</code> query and then fetches the updated list of todos. But we have stubbed the <code>operationName: allTodos</code> and are returning the original list. An ideal test in my opinion would do the following in this case:</p><ul><li>stub the <code>operation: allTodos</code> request like we did to return known list of Todos</li><li>stub the <code>operation: UpdateTodo</code> request to confirm the right call to the backend is performed after clicking on the item</li><li>stub the <code>operation: allTodos</code> request with changed data matching what the server normally would return</li></ul><p>We can add this logic to our test inside the <code>cy.route2</code> handler:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> allTodosCount = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">cy.route2(</span><br><span class="line">  &#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  (req) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> g = <span class="built_in">JSON</span>.parse(req.body)</span><br><span class="line">    <span class="keyword">if</span> (g.operationName === <span class="string">&#x27;allTodos&#x27;</span>) &#123;</span><br><span class="line">      allTodosCount += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (allTodosCount === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// return the list of todos for the first &quot;allTodos&quot;</span></span><br><span class="line">        req.reply(&#123;</span><br><span class="line">          body: &#123;</span><br><span class="line">            data: &#123;</span><br><span class="line">              allTodos,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          headers: &#123;</span><br><span class="line">            <span class="string">&#x27;access-control-allow-origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (allTodosCount === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// return the updated list of todos for the second &quot;allTodos&quot;</span></span><br><span class="line">        <span class="keyword">const</span> completedFirstTodo = Cypress._.cloneDeep(allTodos)</span><br><span class="line">        completedFirstTodo[<span class="number">0</span>].completed = <span class="literal">true</span></span><br><span class="line">        req.reply(&#123;</span><br><span class="line">          body: &#123;</span><br><span class="line">            data: &#123;</span><br><span class="line">              allTodos: completedFirstTodo,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          headers: &#123;</span><br><span class="line">            <span class="string">&#x27;access-control-allow-origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// do not allow any more unexpected calls</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Did not expect more allTodos requests&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (g.operationName === <span class="string">&#x27;updateTodo&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// confirm the web app sends the right variables</span></span><br><span class="line">      <span class="comment">// to make a todo completed</span></span><br><span class="line">      expect(g.variables).to.deep.equal(&#123;</span><br><span class="line">        id: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        completed: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      req.reply()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Unexpected operation <span class="subst">$&#123;g.operationName&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"><span class="comment">// the rest of the test</span></span><br></pre></td></tr></table></figure><p>The test now passes and works the same - and it never sends stray requests to the server (via <code>updateTodo</code> request).</p><p><img src="/blog/images/graphql/complete-test.gif" alt="The consistent test using GraphQL stubbing"></p><p>Since we can spy and stub GraphQL requests, our tests can do everything we might want from the <a href="https://on.cypress.io/network-requests">Cypress Network Guide</a>. But our test is pretty verbose. Can we do better?</p><h2><span id="refactoring-common-code">Refactoring common code</span></h2><p>Our <code>cy.route2(...)</code> calls are very verbose - they parse the request, look at the operation name property, respond with an appropriate stub. We should factor out this logic into a nice little helper. I call my helper <code>routeG</code> since it is <code>route2 + GraphQL</code> logic. The main idea is to make it simple to deal with GraphQL operations, inspect the outgoing requests, and check the variables passed back and forth.</p><ol><li>We are constantly parsing the request and response JSON objects to check the operation name. The helper method should take care of parsing request bodies</li><li>The call stub has to set the CORS headers on every request, we probably want to move these common headers into a factory method to avoid adding to every request</li></ol><p>I called my library <code>routeG</code> - similar to <code>cy.route2</code> but meant for GraphQL. Here is how it works - you can use it directly to stub calls using operation names.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; routeG &#125; <span class="keyword">from</span> <span class="string">&#x27;./routeG&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;stubs all todos (simpler)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> allTodos = [...]</span><br><span class="line">  routeG(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// stub any call to &quot;operation: allTodos&quot; with this response</span></span><br><span class="line">      <span class="comment">// that will be placed into &quot;body: data: &#123;...&#125;&quot;</span></span><br><span class="line">      allTodos: &#123;</span><br><span class="line">        allTodos,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// extra options</span></span><br><span class="line">    &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">&#x27;access-control-allow-origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  )</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, allTodos.length)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Every time application calls GraphQL method with <code>operationName: allTodos</code> our interceptor built on top of <code>cy.route2</code> responds with the given list of todo items.</p><p><img src="/blog/images/graphql/stub1.png" alt="Every allTodos call is stubbed"></p><p>Since we pass the headers with every response, let&#39;s use another method <code>routeG</code> exports to make a method that adds those headers automatically.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initRouteG &#125; <span class="keyword">from</span> <span class="string">&#x27;./routeG&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;stubs all todos (best)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// make our own routeG with automatically attached headers</span></span><br><span class="line">  <span class="keyword">const</span> routeG = initRouteG(&#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;access-control-allow-origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  routeG(&#123;</span><br><span class="line">    <span class="comment">// stub any call to &quot;operation: allTodos&quot; with this response</span></span><br><span class="line">    <span class="comment">// that will be placed into &quot;body: data: &#123;...&#125;&quot;</span></span><br><span class="line">    allTodos: &#123;</span><br><span class="line">      allTodos,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, allTodos.length)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Great. What about multiple queries? For example in our &quot;complete todo&quot; test we needed different responses to the <code>allTodos</code> requests, and we needed a single response to the <code>updateTodo</code> request. Sure - <code>routeG</code> accepts an object with keys being the operations, and the values are either single stubs or lists of stubs for first call, second call, etc.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;completes the first todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// respond to every request (if there is a stub)</span></span><br><span class="line">  <span class="comment">// with same CORS headers</span></span><br><span class="line">  <span class="keyword">const</span> routeG = initRouteG(&#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;access-control-allow-origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> completedFirstTodo = Cypress._.cloneDeep(allTodos)</span><br><span class="line">  completedFirstTodo[<span class="number">0</span>].completed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// respond twice (differently) to `operation: allTodos` calls</span></span><br><span class="line">  <span class="comment">// and respond once to `updateTodo` call</span></span><br><span class="line">  routeG(&#123;</span><br><span class="line">    <span class="comment">// when application loads the list, reply with the initial list</span></span><br><span class="line">    allTodos: [</span><br><span class="line">      &#123;</span><br><span class="line">        allTodos,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// but for the second request reply with updated list</span></span><br><span class="line">      &#123;</span><br><span class="line">        allTodos: completedFirstTodo,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// when the app tries to update a todo</span></span><br><span class="line">    <span class="comment">// stub the call so it does not go to the server</span></span><br><span class="line">    updateTodo: &#123;&#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  <span class="comment">// make first item completed</span></span><br><span class="line">  <span class="comment">// check the UI, since it should be updated correctly</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/graphql/routeG.gif" alt="Complete Todo test with 3 stubs"></p><h2><span id="inspecting-requests">Inspecting requests</span></h2><p>When we test completing an item, we want to confirm the GraphQL calls going to the backend. It should have the right operation name, and have the right variables. Our helper <code>routeG</code> takes core of it automatically - it records all GraphQL requests automatically. If we want to inspect them, just use the <code>response</code> property from the <code>routeG(...)</code> call.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; requests &#125; = routeG(&#123; ... &#125;)</span><br><span class="line"><span class="comment">// complete the first item</span></span><br><span class="line"><span class="comment">// check the update call to the server</span></span><br><span class="line">cy.log(<span class="string">&#x27;check call **updateTodo**&#x27;</span>)</span><br><span class="line">cy.wrap(requests)</span><br><span class="line">  .its(<span class="string">&#x27;updateTodo.0&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;deep.contain&#x27;</span>, &#123;</span><br><span class="line">    operationName: <span class="string">&#x27;updateTodo&#x27;</span>,</span><br><span class="line">    variables: &#123;</span><br><span class="line">      id: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">      completed: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>All requests are saved by the operation name. We can see them all in the <code>cy.wrap(requests)</code> object.</p><p><img src="/blog/images/graphql/requests.png" alt="All GraphQL requests are linked in a single object"></p><h2><span id="bonus-1-number-of-requests">Bonus 1 - number of requests</span></h2><p>When using <code>cy.route</code> or <code>cy.route2</code> the only way to confirm the number of requests was to wait for each one using <a href="https://on.cypress.io/wait"><code>cy.wait(&lt;alias&gt;)</code></a>. For example, to assert there were two Ajax calls:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.route2(...).as(<span class="string">&#x27;ajax&#x27;</span>)</span><br><span class="line">cy.wait(<span class="string">&#x27;@ajax&#x27;</span>)</span><br><span class="line">cy.wait(<span class="string">&#x27;@ajax&#x27;</span>)</span><br></pre></td></tr></table></figure><p>With <code>routeG</code> and its <code>requests</code> object, you simply assert the length of the array using <a href="https://on.cypress.io/its"><code>cy.its</code></a> with its built-in <a href="https://on.cypress.io/retry-ability">retry-ability</a>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; requests &#125; = routeG(&#123;...&#125;)</span><br><span class="line"><span class="comment">// check if the app really called &quot;operationName: allTodos&quot; twice</span></span><br><span class="line">cy.wrap(requests).its(<span class="string">&#x27;allTodos&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2><span id="learn-more">Learn more</span></h2><p>I might play more with <code>routeG</code> to see if I can write useful end-to-end tests for my web applications, and if it turns useful, I might move it from <a href="https://github.com/bahmutov/todo-graphql-example">bahmutov/todo-graphql-example</a> into its own NPM package. Meanwhile, check out:</p><ul><li>I have described my early attempts at stubbing GraphQL calls from Cypress tests in blog posts <a href="/blog/e2e-testing-graphql-using-cypress/" title="E2E Testing json-graphql-server using Cypress">E2E Testing json-graphql-server using Cypress</a> and <a href="/blog/mock-graphql-with-lunar-in-cypress-tests/" title="Mocking GraphQL with Lunar in Cypress End-to-End Tests">Mocking GraphQL with Lunar in Cypress End-to-End Tests</a></li><li><a href="https://github.com/tgriesser">Tim Griesser</a> maintains <a href="https://github.com/tgriesser/cypress-graphql-mock">cypress-graphql-mock</a> that might be long-term Cypress plugin for dealing with GraphQL</li><li>just for kicks you might want to test React components that use GraphQL using <a href="https://github.com/bahmutov/cypress-react-unit-test">cypress-react-unit-test</a> which allows you to just specify a Mock GraphQL Provider around the mounted component; see example links in the repo</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;pullquote&quot;&gt;&lt;p&gt;🧭 Find the source code for this blog post in the repository &lt;a href=&quot;https://github.com/bahmutov/todo-grap
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="graphql" scheme="https://glebbahmutov.com/blog/tags/graphql/"/>
    
  </entry>
  
  <entry>
    <title>Multiple Benefits</title>
    <link href="https://glebbahmutov.com/blog/multiple-benefits/"/>
    <id>https://glebbahmutov.com/blog/multiple-benefits/</id>
    <published>2020-09-30T04:00:00.000Z</published>
    <updated>2020-10-09T17:56:31.743Z</updated>
    
    <content type="html"><![CDATA[<p>Many people think the purpose of software development is <em>the software</em>. No. I think the purpose of software development is a better <em>understanding of the problem</em>. Our users, clients, customers might have a problem, and we, the developers, need to find a solution.</p><p>Certainly, writing software could be a solution. Often it solves a part of the client&#39;s problem, while introducing new challenges. Documentation, process improvements, tutorials, blog posts, training sessions - these all could be better solutions to the client&#39;s problem than writing a new software feature. Thus I think the absolute emphasis some organizations put on code commits and features, while ignoring the other types of output, is a misguided and self-limiting approach.</p><h2><span id="the-relative-benefits">The relative benefits</span></h2><p>I often &quot;count&quot; how many benefits we can get from working on the client&#39;s problem, and how much long-term value we can derive. Here are my rules of thumb:</p><ul><li>if we write private code to be deployed, then we get 1x benefit. The code might solve the problem, might not, we often do not know very well until the code is done. We might get paid for writing this code though, but it will also cost us to maintain the code.</li><li>if we write any internal documentation for our own practices (think an internal company wiki), we probably get 0.1x benefit from it. Maybe at some point this wiki will help us write software for the client, but maybe it won&#39;t. Internal documentation requires maintenance, thus it will cost us. I guarantee that wiki will get out of date and will be confusing to the newer hires. Thus I rate private wikis very low and do not contribute to them anymore.</li><li>writing public blog posts describing good development processes, or problems solved, or how-tos I would rate at 5x. Because you get multiple benefits from this:<ul><li>you investigate the problem, thus your understanding increases</li><li>you write better because the final result is <em>public</em>. And I always do a better job when the results are public rather than private</li><li>you raise your own profile by writing about the problem, attracting attention and building your reputation. This is a nice benefit that allows employees to advance in their careers</li><li>you bring the search traffic to your blog. Some companies <em>pay external developers</em> to write articles about everything under the sun just to get that search traffic, see <a href="https://blog.logrocket.com/">LogRocket blog</a> and <a href="https://blog.bitsrc.io/">BitSrc.io</a></li></ul></li><li>speaking on the subject at a meetup or a conference gives approximately the same 5x benefit in my opinion. A conference talk might have a strong boost, but I believe it is short-lived compared to a well-written article, and the SEO on the article is stronger. But the preparation for public presentation requires definitely a deeper understanding of the work you have done</li><li>every blog post and public presentation relevant to the company&#39;s software should be linked to from the documentation. Some people read the docs, some people learn better by reading tutorials, some people love watching a video of a presentation - give users all possible ways to learn, while exposing the work to more eyeballs</li><li>making an open source tool solving the problem well enough gives 10x benefits<ul><li>the work is typically of higher quality - again, because the code is open for everyone&#39;s criticism and inspection prompts its authors to make an effort</li><li>the project can benefit from input and work of the people from the open source community</li><li>the code might be reused multiple times, bringing your own <a href="../developer-value/">developer value</a> to the cool $1mil</li><li>by the way, open source projects can benefit from a free infrastructure provided by code source hosting companies (GitHub, GitLab), continuous integration (no need to pay for your own Jenkins torture device), testing and hosting services, etc</li></ul></li><li>short term exploratory projects commonly called &quot;spikes&quot; are 0.5x - on one hand they help us understand the problem better, but often I do not see any tangible output aside from a single developer getting a better understanding of the problem or its possible solution. This benefit is short-lived; the developer forgets, or moves to another organization. Make sure the spikes produce a public blog post, a library, an update to documentation, something tangible.</li></ul><p>Wait, how can open sourcing code bring <em>more</em> benefits than selling the code to a paying customer? Well, in my experience, few customers require <em>exactly</em> a single piece of code. Most of the time, making a successful business is 10% &quot;special sauce&quot; code and 90% of-the-shelf code ... that does not need to be private. And thus we can safely open source that 90% of the code, get the benefits I have described above, get public recognition, etc. etc.</p><h2><span id="an-example">An example</span></h2><p>This is how I translate the above list into practice. Recently, I wanted to find for sure if some Cypress recipes randomly failing on CI had a real flake in their tests. Normally debugging a failing test is a time sink, right? No if we derive some benefits from this work.</p><ul><li>I wrote a script to run the project again and again. The script, although public, lived in the recipes&#39; repository and was not reusable. 1x benefit, since it was not reusable and no one could easily benefit from it in the wider community.</li><li>By using the script I did find a bunch of tests that had problems in their timing and fixed them. Nice. Even wrote a new section for the blog post <a href="https://www.cypress.io/blog/2020/03/20/working-with-select-elements-and-select2-widgets-in-cypress/">Working with Select elements and Select2 widgets in Cypress</a>. Extra nice.</li><li>Then I thought about the script and how to make it into its own open source project. To make it into a general <code>cypress run</code> wrapper I needed to parse the command line arguments people might provide like <code>cypress run --browser chrome --record --group frontend ...</code> the same way <code>cypress</code> does it. Thus I <a href="https://github.com/cypress-io/cypress/issues/7760">added it</a> as a feature to Cypress itself. Ok so far probably 1x benefit.</li><li>Once the <a href="https://on.cypress.io/changelog#4-11-0">CLI parsing was released</a> (benefitting any user who wants to write own Cypress wrapper), I created <a href="https://github.com/bahmutov/cypress-repeat">cypress-repeat</a> and <a href="https://github.com/bahmutov/cypress-expect">cypress-expect</a> - multiple benefits from my original effort that accrue to both Cypress and to me personally</li><li>The same logic I have shown could also be used to implement <a href="https://docs.percy.io/docs/cypress">@cypress/percy</a> module to avoid launching a child process, since now their wrapper could parse its arguments separately from Cypress&#39; arguments. This strengthening of Cypress ecosystem brings its own benefit, let&#39;s say 1x</li><li>The same wrapper could also be used by the CI providers like AWS Amplify in their integration of <a href="https://www.cypress.io/blog/2019/10/02/cypress-integrated-with-aws-amplify-console-for-end-to-end-testing/">Cypress Dashboard with their own project web UIs</a> - another 1x benefit</li><li>Finally, I have written a blog post about different ways to use <a href="https://on.cypress.io/module-api">Cypress NPM Module API</a> in <a href="../wrap-cypress-using-npm/">Wrap Cypress Using NPM Module API</a>. This blog post can be shared, linked from Cypress documentation, etc. It could become a topic fo a future webinar presentation or a meetup talk.</li></ul><p>Simple software, but I derived multiple benefits from developing it.</p><h2><span id="bonus-1-discover-benefits">Bonus 1 - Discover benefits</span></h2><p>I use the following questions to never &quot;leave&quot; benefits on the table.</p><details>  <summary>A video of my meetup or conference talk was published</summary>Should I link the video and the slides to my <a href="https://glebbahmutov.com/videos">talks page</a>? Can I comment on the video with the link to the slides? If the video is on YouTube, should I add it to my <a href="https://www.youtube.com/playlist?list=PLP9o9QNnQuAaBT88NVahOO9UuV6DOjqjt">talks playlist</a>?</details><details>  <summary>We just finished a private support meeting with a company answering specific questions</summary>Can we add 2 - 3 questions to our website and documentation so other users can find answers without a private meeting? Can we clarify the relevant documentation and fill the gaps?</details><details>  <summary>I have written a blog post</summary>Should I link it to the relevant section in our documentation? Does it make sense to make this blog post into a meetup talk or a webinar?</details>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Many people think the purpose of software development is &lt;em&gt;the software&lt;/em&gt;. No. I think the purpose of software development is a bett
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
  </entry>
  
  <entry>
    <title>Wrap Cypress Using NPM Module API</title>
    <link href="https://glebbahmutov.com/blog/wrap-cypress-using-npm/"/>
    <id>https://glebbahmutov.com/blog/wrap-cypress-using-npm/</id>
    <published>2020-09-29T04:00:00.000Z</published>
    <updated>2020-09-29T12:52:32.325Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="cypress-npm-module-api">Cypress NPM module API</span></h2><p>Cypress test runner has <a href="https://on.cypress.io/module-api">NPM module API</a> that lets you call Cypress programmatically from a Node script. For example, you might get the number of passing and failed tests from the test results.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line">cypress.run().then(<span class="function"><span class="params">testResults</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;passed %d tests, failed %d tests&#x27;</span>,</span><br><span class="line">    testResults.totalPassed, testResults.totalFailed)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When <code>cypress.run</code> executes, it resolves with an object that contains detailed information about all tests that Cypress executed or skipped. But before we can check the test results, we must check if Cypress ran at all - maybe the Cypress binary was not installed? Thus we check using <code>status</code> property:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cypress.run(options)</span><br><span class="line">  .then(<span class="function">(<span class="params">runResults</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (runResults.status === <span class="string">&#x27;failed&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// Cypress could not run, something is terrible wrong</span></span><br><span class="line">      <span class="built_in">console</span>.error(runResults.message)</span><br><span class="line">      <span class="keyword">return</span> process.exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// otherwise the should be test results, but let&#x27;s check first</span></span><br><span class="line">    <span class="keyword">if</span> (runResults.status === <span class="string">&#x27;finished&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// drill into runResults object</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Thus we check <code>runResults.status</code> property that can be either <code>failed</code> or <code>finished</code> to tell if the Test Runner executed before drilling into the test results.</p><p>How do we get the right <code>options</code> object to pass into <code>cypress.run</code> call? You do not want to implement your own CLI parsing logic - because it might parse arguments differently from Cypress&#39; CLI. Recently we have introduced an utility to parse the <code>cypress run ...</code> command line arguments to make creating such Node wrappers very easy.</p><h2><span id="parsing-the-cli-arguments">Parsing the CLI arguments</span></h2><p>When running Cypress, you might be passing <a href="https://on.cypress.io/cli#cypress-run">cypress run CLI parameters</a> to use a specific the browser, record the test results on the <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx cypress run --browser chrome --record</span></span><br></pre></td></tr></table></figure><p>How would you pass the same CLI arguments to <code>cypress.run(&#123;...&#125;)</code> Node call? You need to parse the CLI arguments and convert to the equivalent options object. Recently we have <a href="https://on.cypress.io/changelog#4-11-0">exposed the CLI parsing logic</a> to allow you to do exactly this:</p><figure class="highlight js"><figcaption><span>src/wrap.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">&#x27;cypress&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> runOptions = <span class="keyword">await</span> cypress.cli.parseRunArguments(process.argv.slice(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(runOptions)</span><br><span class="line"><span class="keyword">const</span> testResults = <span class="keyword">await</span> cypress.run(runOptions)</span><br></pre></td></tr></table></figure><p>If we run this wrap script, it will accurately transform the CLI arguments to an options object</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node ./src/wrap run --browser chrome --record</span></span><br><span class="line">&#123;</span><br><span class="line">  browser: &#x27;chrome&#x27;,</span><br><span class="line">  record: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The same code is used internally by <code>npx cypress run</code> code, thus the Cypress behavior should be the same.</p><h2><span id="meta-testing">Meta testing</span></h2><p>Now that we parse the Cypress arguments using the its own logic, we can create useful <code>cypress run</code> wrappers. For example, I might want to validate the number of passing tests in a project to ensure that accidentally we don&#39;t skip bunch of tests and get a green build only because the tests were not run.</p><p><strong>Tip:</strong> you can find this wrapper in <a href="https://github.com/bahmutov/cypress-expect">bahmutov/cypress-expect</a></p><p>The wrapper needs its own command line parameters, for example we want to specify the number of tests, and the rest of the arguments should go into <code>cypress.cli.parseRunArguments</code> like this:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> run Cypress tests <span class="keyword">in</span> Chrome browser, record on the Dashboard</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> and check <span class="keyword">if</span> there are 5 passing tests</span></span><br><span class="line">npx cypress-expect run --expect 5 --browser chrome --record</span><br></pre></td></tr></table></figure><p>The <code>cypress-expect</code> needs to grab its own parameter <code>--expect</code> and then let Cypress&#39; logic to parse the rest of the arguments. We can use the parsing module <a href="https://github.com/vercel/arg#readme">arg</a> for this:</p><figure class="highlight js"><figcaption><span>cypress-expect/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> arg = <span class="built_in">require</span>(<span class="string">&#x27;arg&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> args = arg(&#123;</span><br><span class="line">  <span class="string">&#x27;--passing&#x27;</span>: <span class="built_in">Number</span>, <span class="comment">// number of total passing tests to expect</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// let Cypress parse the CLI arguments unclaimed by `arg`</span></span><br><span class="line"><span class="keyword">const</span> cypressOptions = <span class="keyword">await</span> cypress.cli.parseRunArguments(args._)</span><br></pre></td></tr></table></figure><p>Once Cypress runs, we can check if the two numbers match - and if they don&#39;t we can fail the program.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testResults = <span class="keyword">await</span> cypress.run(cypressOptions)</span><br><span class="line"><span class="keyword">if</span> (testResults.status === <span class="string">&#x27;finished&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (testResults.totalPassed !== args[<span class="string">&#x27;--passing&#x27;</span>]) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(</span><br><span class="line">      <span class="string">&#x27;ERROR: expected %d passing tests, got %d&#x27;</span>,</span><br><span class="line">      args[<span class="string">&#x27;--passing&#x27;</span>],</span><br><span class="line">      testResults.totalPassed,</span><br><span class="line">    )</span><br><span class="line">    process.exit(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>On top of the exact match, we can specify the minimum expected number of passing tests. We can even extend the program in the future to do meta-testing - allow specifying tests we expect to fail or to skip.</p><h2><span id="repeat-tests">Repeat tests</span></h2><p>If our tests suffer from flake, we can run the tests multiple times to catch the flaky behavior. The project <a href="https://github.com/bahmutov/cypress-repeat">cypress-repeat</a> does exactly this - it runs the same project the specified number of times to flush out conditions leading to flaky tests.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx cypress-repeat run -n &lt;N&gt; ... rest of <span class="string">&quot;cypress run&quot;</span> arguments</span></span><br></pre></td></tr></table></figure><p>The arguments are parsed the same way as in <code>cypress-expect</code></p><figure class="highlight js"><figcaption><span>cypress-repeat/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> arg = <span class="built_in">require</span>(<span class="string">&#x27;arg&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> args = arg(&#123;</span><br><span class="line">  <span class="string">&#x27;-n&#x27;</span>: <span class="built_in">Number</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> cypressOptions = <span class="keyword">await</span> cypress.cli.parseRunArguments(args._)</span><br></pre></td></tr></table></figure><p>Then we iterate and run the same test N times - and we can adjust the options to avoid clashing with previously recorded groups.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Bluebird = <span class="built_in">require</span>(<span class="string">&#x27;bluebird&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cypressOptions = <span class="keyword">await</span> cypress.cli.parseRunArguments(args._)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allRunOptions = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; repeatNtimes; k += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> runOptions = clone(cypressOptions)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (options.record &amp;&amp; options.group) &#123;</span><br><span class="line">    runOptions.group = options.group</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (runOptions.group &amp;&amp; repeatNtimes &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// make sure if we are repeating this example</span></span><br><span class="line">      <span class="comment">// then the recording has group names on the Dashboard</span></span><br><span class="line">      <span class="comment">// like &quot;example-1-of-20&quot;, &quot;example-2-of-20&quot;, ...</span></span><br><span class="line">      runOptions.group += <span class="string">`-<span class="subst">$&#123;k + <span class="number">1</span>&#125;</span>-of-<span class="subst">$&#123;repeatNtimes&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  allRunOptions.push(runOptions)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// now can iterate over all run options and run Cypress for every object</span></span><br><span class="line">Bluebird.mapSeries(allRunOptions, <span class="function">(<span class="params">runOptions, k, n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> cypress.run(ruOptions)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>By using <code>cypress-repeat</code> and running projects five, even ten times in a row on CI we are able to flush out all the weird test situations that cause flake and finally fix them.</p><h2><span id="link-to-cypress-dashboard">Link to Cypress Dashboard</span></h2><p>If you record a Cypress run with <code>cypress run --record</code> you will see the Dashboard URL shown in the terminal output.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(Run Starting)</span><br><span class="line"></span><br><span class="line">┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│ Cypress:    5.2.0                                                                              │</span><br><span class="line">│ Browser:    Electron 83 (headless)                                                             │</span><br><span class="line">│ Specs:      1 found (app_spec.js)                                                              │</span><br><span class="line">│ Params:     Tag: false, Group: false, Parallel: false                                          │</span><br><span class="line">│ Run URL:    https://dashboard.cypress.io/projects/abc123/runs/1321                             │</span><br><span class="line">└────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>If you have your own CI scripts you might want to grab this URL to send in a build notification or add to a test status page, linking back to the recorded run. Now it is simple to do by writing own wrapper</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cypress.run(...)</span><br><span class="line">  .then(<span class="function"><span class="params">testResults</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (testResults.status === <span class="string">&#x27;finished&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Dashboard URL&#x27;</span>, testResults.runUrl)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2><span id="links">Links</span></h2><ul><li><a href="https://github.com/bahmutov/cypress-expect">bahmutov/cypress-expect</a> wrapper lets you specify the total expected number of passing tests</li><li><a href="https://github.com/bahmutov/cypress-repeat">bahmutov/cypress-repeat</a> runs Cypress multiple times in a row</li><li><a href="https://github.com/cypress-io/cypress/blob/develop/cli/types/cypress-npm-api.d.ts">Cypress NPM module .d.ts</a> file has the latest type information for <code>cypress.run</code> results</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;cypress-npm-module-api&quot;&gt;Cypress NPM module API&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Cypress test runner has &lt;a href=&quot;https://on.cypress.io/module-api
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Components People Test</title>
    <link href="https://glebbahmutov.com/blog/components-people-test/"/>
    <id>https://glebbahmutov.com/blog/components-people-test/</id>
    <published>2020-09-26T04:00:00.000Z</published>
    <updated>2020-09-26T18:14:11.919Z</updated>
    
    <content type="html"><![CDATA[<p>Long long time ago (aka in August of 2020) one curious reader named <a href="https://twitter.com/rauchg">Guillermo Rauch</a> in a moment of contemplation <a href="https://twitter.com/rauchg/status/1289761175253602305">asked on Twitter</a> what books people (re)read:</p><p><img src="/blog/images/book-component/book-tweet.png" alt="What books people love to read question"></p><p>This short question has prompted lots of responses. People on Twitter are really helpful, aren&#39;t they? Then Guillermo has collected the feedback in one single Notion table with book links, cover images, and number of votes for every book. How do I know about it? Because he <a href="https://rauchg.com/2020/books-people-reread">has blogged about it</a> on his blog!</p><p><img src="/blog/images/book-component/blog.png" alt="The produced blog post"></p><p>That blog is open source and available at <a href="https://github.com/rauchg/blog">github.com/rauchg/blog</a>. It is a great example of an application based on <a href="https://nextjs.org/">Next.js</a> React framework. We can look at the <a href="https://github.com/rauchg/blog/blob/master/pages/2020/books-people-reread.js">source for the post</a> - it is fetching the reading list data, then renders a number of <code>Book</code> components on the page:</p><figure class="highlight js"><figcaption><span>/pages/2020/books-people-reread.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  loadPageChunk,</span><br><span class="line">  queryCollection,</span><br><span class="line">  getCollectionSchemaNameIndex</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;../../lib/notion&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getStaticProps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">recordMap</span>: &#123; collection, collection_view &#125; &#125; = <span class="keyword">await</span> loadPageChunk(&#123;</span><br><span class="line">    chunkNumber: <span class="number">0</span>,</span><br><span class="line">    limit: <span class="number">50</span>,</span><br><span class="line">    verticalColumns: <span class="literal">false</span>,</span><br><span class="line">    cursor: &#123;<span class="attr">stack</span>: [[&#123;<span class="attr">table</span>: <span class="string">&quot;block&quot;</span>, <span class="attr">id</span>: ..., <span class="attr">index</span>: <span class="number">0</span>&#125;]]&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Page = withViews(<span class="function">(<span class="params">&#123; tweets, views, books &#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Post tweets=&#123;tweets&#125;&gt;</span><br><span class="line">        &lt;P&gt;</span><br><span class="line">        Last night I &lt;a href=<span class="string">&quot;https://twitter.com/rauchg/status/1289761175253602305&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;</span><br><span class="line">          asked a question&lt;/a&gt; on Twitter: what books have you read more than once?</span><br><span class="line">        &lt;/P&gt;</span><br><span class="line">        ...</span><br><span class="line">      &lt;/Post&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;books&quot;</span>&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        books.map(<span class="function"><span class="params">book</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Book</span> <span class="attr">key</span>=<span class="string">&#123;book.URL&#125;</span> &#123;<span class="attr">...book</span>&#125; /&gt;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">&#123; URL, Name, Image, ASIN, Votes &#125;</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">main</span> <span class="attr">ref</span>=<span class="string">&#123;targetRef&#125;</span>&gt;</span></span></span><br><span class="line">    &lt;a href=&#123;URL&#125; target=&quot;_blank&quot;&gt;</span><br><span class="line">      &lt;span className=&quot;image&quot; style=&#123;&#123;</span><br><span class="line">        backgroundImage: isInViewport ? `url($&#123;Image ||</span><br><span class="line">          `https://images-na.ssl-images-amazon.com/images/P/$&#123;ASIN&#125;._LZZZZZZZ_.jpg`</span><br><span class="line">        &#125;)` : &#x27;&#x27;</span><br><span class="line">      &#125;&#125; /&gt;</span><br><span class="line">      &lt;span className=&quot;title&quot;&gt;</span><br><span class="line">        &#123; Name &#125;</span><br><span class="line">        &#123;</span><br><span class="line">          Votes &gt; 1 ?</span><br><span class="line">            &lt;span className=&quot;votes&quot;&gt;🔥 &#123; Votes &#125;&lt;/span&gt; : null</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s play with this source.</p><h2><span id="testing-the-book-component">Testing The Book Component</span></h2><p>How does the <code>Book</code> component render when there is no image? Or no votes? Or a single vote? Or lots of votes? Answering all this questions might be hard by just looking at the source code. I know this is not an application meant to be money-making enterprise, but if we cannot easily test a non-production piece of code, would we know how to test the production code? Practice makes perfect, so let&#39;s practice.</p><p>I have forked the blog repo to <a href="https://github.com/bahmutov/blog-1">github.com/bahmutov/blog-1</a> and cloned it locally. To write the tests I have installed <a href="https://github.com/cypress-io/cypress">cypress</a> and <a href="https://github.com/bahmutov/cypress-react-unit-test">cypress-react-unit-test</a>. Recently we have added <a href="https://github.com/bahmutov/cypress-react-unit-test/pull/422">Next.js support</a>, thus I wanted to export the <code>Book</code> component and start testing.</p><figure class="highlight js"><figcaption><span>/pages/2020/books-people-reread.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">&#123; URL, Name, Image, ASIN, Votes &#125;</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test needs to mount the component and pass props - I grabbed them from the published blog post page.</p><figure class="highlight js"><figcaption><span>cypress/components/pages/2020/books.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&quot;cypress-react-unit-test&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Book &#125; <span class="keyword">from</span> <span class="string">&quot;../../../../pages/2020/books-people-reread&quot;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&quot;Book&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&quot;works&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> props = &#123;</span><br><span class="line">      URL:</span><br><span class="line">        <span class="string">&quot;https://www.amazon.com/How-Win-Friends-Influence-People/dp/0671027034&quot;</span>,</span><br><span class="line">      ASIN: <span class="string">&quot;0671027034&quot;</span>,</span><br><span class="line">      Name: <span class="string">&quot;How to Win Friends &amp; Influence People&quot;</span>,</span><br><span class="line">      Votes: <span class="number">100</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    mount(<span class="xml"><span class="tag">&lt;<span class="name">Book</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>);</span><br><span class="line">    cy.get(<span class="string">&quot;a&quot;</span>).should(<span class="string">&quot;have.attr&quot;</span>, <span class="string">&quot;href&quot;</span>, props.URL);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The component renders in the browser controlled by Cypress and I can see it. The test can validate the result using all standard <a href="https://on.cypress.io/api">Cypress commands</a>. Cypress is watching the spec file and every file it includes, thus every time I save the changed test the test reruns automatically. I can change the component&#39;s source code and the test reruns too. Thus I can play with the look and behavior of the component to verify it does its thing as expected. The video below shows the component rendering different vote tallies while I change the props; then I change the component&#39;s style to see how the votes badge looks in different colors.</p><center>  <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/BB4_wUAwthI?loop=1&autoplay=1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p><strong>Tip:</strong> since Cypress bundles the spec and the component, there is no server to start to run these component tests, unlike with the full end-to-end tests that need an url to load. Thus we run tests using simply <code>yarn cypress open</code> to open Cypress GUI, or with <code>yarn cypress run</code> to execute all tests headlessly.</p><h2><span id="testing-the-page-component">Testing The Page Component</span></h2><p>If we can mount the Book component and test it &quot;live&quot; like a real mini web application, what about the Page component? Why not? Let&#39;s write a component test to see how multiple books are displayed on the page. All we need is feed the exported Page (that&#39;s the default export) a list of books and let the test run.</p><figure class="highlight js"><figcaption><span>cypress/components/pages/2020/books.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&quot;cypress-react-unit-test&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Page, &#123; Book &#125; <span class="keyword">from</span> <span class="string">&quot;../../../../pages/2020/books-people-reread&quot;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&quot;Books page&quot;</span>, &#123; <span class="attr">viewportWidth</span>: <span class="number">1024</span>, <span class="attr">viewportHeight</span>: <span class="number">1024</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// tip: move books list to the fixtures folder and load</span></span><br><span class="line">  <span class="comment">// using https://on.cypress.io/fixture or by directly importing it</span></span><br><span class="line">  <span class="keyword">const</span> books = [</span><br><span class="line">    &#123;</span><br><span class="line">      URL:</span><br><span class="line">        <span class="string">&quot;https://www.amazon.com/How-Win-Friends-Influence-People/dp/0671027034&quot;</span>,</span><br><span class="line">      ASIN: <span class="string">&quot;0671027034&quot;</span>,</span><br><span class="line">      Name: <span class="string">&quot;How to Win Friends &amp; Influence People&quot;</span>,</span><br><span class="line">      Votes: <span class="number">7</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ];</span><br><span class="line">  it(<span class="string">&quot;renders bunch of books&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> props = &#123;</span><br><span class="line">      tweets: <span class="number">101</span>,</span><br><span class="line">      views: <span class="number">500</span>,</span><br><span class="line">      books,</span><br><span class="line">    &#125;;</span><br><span class="line">    mount(<span class="xml"><span class="tag">&lt;<span class="name">Page</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The test loads and shows the blog post</p><p><img src="/blog/images/book-component/page.png" alt="The Page component test"></p><p><strong>Note:</strong> ignore the error message - I have opened <a href="https://github.com/bahmutov/cypress-react-unit-test/issues/452">an issue</a> to find a way to fix this.</p><p>Do you see the tiny user interface problem with our Book component? The votes badge can split across the lines, and it should not. Here is a video of me fixing the issue using Cypress live reload to see the results.</p><center>  <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/GhWqNiS8eVQ?loop=1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Before you wave away the badge issue as an artifact of the test runner - no, it is real, you just need to find a browser width that shows it.</p><p><img src="/blog/images/book-component/resolution.gif" alt="The original blog shows the same badge behavior we just fixed"></p><h2><span id="test-realistically">Test Realistically</span></h2><p>A while ago someone named Guillermo Rauch (must be a namesake of that Guillermo who loves reading) <a href="https://twitter.com/rauchg/status/807626710350839808">tweeted</a> the following about testing:</p><p><img src="/blog/images/book-component/testing.png" alt="Test using mostly integration tests"></p><p>I have thought about this message for a while, and even responded in <a href="https://www.youtube.com/watch?v=5FnalKRjpZk">my conference talk at AssertJS</a>, <a href="https://slides.com/bahmutov/assertjs">slides</a>. Of course, <a href="https://twitter.com/bahmutov/status/962367892674285568">my response is a lot less popular</a> - I love my friends, who help me keep low profile by not trending my tweets too much 😋.</p><p><img src="/blog/images/book-component/response.png" alt="Write unit and end-to-end tests only"></p><p>Let me explain the naming &quot;unit&quot; tests I used above.</p><p>In my opinion, the component tests in a web application are really exercising <em>units of a web app interface</em>, thus I called my library for mounting the component inside a real browser <code>cypress-react-UNIT-test</code>, same for <code>cypress-vue-unit-test</code>, <code>cypress-svelte-unit-test</code>, etc. Now we are moving away from this nomenclature, since it is confusing the users, now we explicitly call such tests the &quot;component tests&quot;. Still, with this in mind you can see the logic of my tweet above.</p><p>Today I would like to amend my response. Yes, test the application&#39;s behavior using end-to-end tests to verify the code has been built, configured, and deployed correctly. Testing the full preview deploys using Vercel is a good example I have described in the blog post <a href="../develop-preview-test/">develop-preview-test</a>. By the way, Vercel is run by someone named Guillermo Rauch too - is this a super common name or what?!</p><p>The component testing I have shown in this blog post is <em>not that different</em> from end-to-end tests. The component is running as a mini web application in a real browser. You interact with the component using Cypress commands that use user interface without any knowledge of the underlying framework - similar to the way a real user would.</p><p>These e2e and component tests are <em>realistic</em>. And that&#39;s a very good thing.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Long long time ago (aka in August of 2020) one curious reader named &lt;a href=&quot;https://twitter.com/rauchg&quot;&gt;Guillermo Rauch&lt;/a&gt; in a moment 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="react" scheme="https://glebbahmutov.com/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Book</title>
    <link href="https://glebbahmutov.com/blog/cypress-book/"/>
    <id>https://glebbahmutov.com/blog/cypress-book/</id>
    <published>2020-09-18T04:00:00.000Z</published>
    <updated>2020-09-18T13:42:29.578Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take a web application and try to explain it to our users. For example <a href="http://todomvc.com/">todomvc.com</a> - how do you write a tutorial or a guide to using it? In this blog post I will show a simple and effective way to write a web app tutorial using Markdown and Cypress tests. The created tutorial will never get out of date with respect to the application, since it will be continuously updated and verified using end-to-end tests.</p><p><strong>Note:</strong> you can find the example application in <a href="https://github.com/bahmutov/cypress-book-todomvc">bahmutov/cypress-book-todomvc</a> and the finished guide at <a href="https://glebbahmutov.com/cypress-book-todomvc/">glebbahmutov.com/cypress-book-todomvc/</a>.</p><h2><span id="write-cypress-tests-in-readme">Write Cypress tests in README</span></h2><p>Using <a href="../tags/markdown/">Markdown documents</a> is my favorite way of writing guides and tutorials (and these blog posts!). It is simple, most code editors include some Markdown preview, and once I push the code to GitHub, it automatically renders Markdown files, including images.</p><p>Let&#39;s say we are writing a tutorial for TodoMVC application in the project&#39;s README.md file. We might explain to the user that when the application loads, there is an initial screen with an input box.</p><pre><code>This application starts with an input field.![Initial screen](./images/initial.png)</code></pre><p>Where do we get that application screenshot? We could grab it manually and add as a file to the repository. But what if the application changes? Outdates screenshots are confusing the users. You know what is always up-to-date? The end-to-end tests.</p><blockquote><p>What if we could use end-to-end tests to update our screenshots?</p></blockquote><p>Going one step further - what if the tests producing the screenshots lived very close to the tutorial itself to avoid getting out of sync?</p><blockquote><p>What if the test producing the screenshots was located inside the README markdown text?</p></blockquote><p>I have created a way to run a Cypress test straight from a Markdown file using <a href="https://github.com/cypress-io/cypress-fiddle">cypress-fiddle</a>. Just surround a JavaScript block with a special comment and point Cypress at it. Here is a test titled &quot;Initial&quot; from the README.md file</p><pre><code>&lt;!-- fiddle Initial --&gt;<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;input&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">cy.screenshot(<span class="string">&#x27;initial&#x27;</span>)</span><br></pre></td></tr></table></figure>&lt;!-- fiddle-end --&gt;</code></pre><p>Since we don&#39;t want to show the test itself (it will just confuse the user), we can &quot;hide&quot; it in the README source by placing it inside an HTML block</p><pre><code>&lt;details style=&quot;display:none&quot;&gt;&lt;summary&gt;Initial view&lt;/summary&gt;&lt;!-- fiddle Initial --&gt;<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;input&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">cy.screenshot(<span class="string">&#x27;initial&#x27;</span>)</span><br></pre></td></tr></table></figure>&lt;!-- fiddle-end --&gt;&lt;/details&gt;</code></pre><p>When GitHub renders this README it shows &quot;details&quot; block. User or developer can click it to see the test commands.</p><p><img src="/blog/images/cypress-book/details.gif" alt="GitHub showing the details HTML element"></p><p>We can write tests to add and complete todos - they tests can be quite complicated. We can even write a longer test that shows the entire user story with several screenshots. Here is a section of the README showing how the user can complete todos:</p><pre><code>## Completing tasksOnce there are several todo items, the user can mark some items &quot;done&quot; andthen clear them using a button.![Completed several items](./images/completed-todos.png)You can see just the completed items using the filters below the list![Just completed items](./images/just-completed-todos.png)The &quot;Clear completed&quot; button is at the bottom and becomes visible only ifthere are completed items.![Footer](./images/footer.png)Hover over the button and click on it![Clear completed button](./images/clear-completed.png)Only a single active todo remains![Single remaining todo](./images/remaining-todo.png)&lt;details style=&quot;display:none&quot;&gt;&lt;!-- fiddle Completing tasks --&gt;<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;.new-todo&#x27;</span>)</span><br><span class="line">  .type(<span class="string">&#x27;write in Markdown&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  .type(<span class="string">&#x27;code in JavaScript&#123;enter&#125;&#x27;</span>)</span><br><span class="line">  .type(<span class="string">&#x27;test in Cypress&#123;enter&#125;&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">cy.contains(<span class="string">&#x27;.view&#x27;</span>, <span class="string">&#x27;code in JavaScript&#x27;</span>).find(<span class="string">&#x27;.toggle&#x27;</span>).click()</span><br><span class="line">cy.contains(<span class="string">&#x27;.view&#x27;</span>, <span class="string">&#x27;test in Cypress&#x27;</span>).find(<span class="string">&#x27;.toggle&#x27;</span>).click()</span><br><span class="line">cy.get(<span class="string">&#x27;.todo-list li.completed&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">cy.screenshot(<span class="string">&#x27;completed-todos&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cy.contains(<span class="string">&#x27;.filters li&#x27;</span>, <span class="string">&#x27;Completed&#x27;</span>).click()</span><br><span class="line">cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">cy.screenshot(<span class="string">&#x27;just-completed-todos&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cy.contains(<span class="string">&#x27;.filters li&#x27;</span>, <span class="string">&#x27;All&#x27;</span>).click()</span><br><span class="line">cy.get(<span class="string">&#x27;footer.footer&#x27;</span>).screenshot(<span class="string">&#x27;footer&#x27;</span>)</span><br><span class="line">cy.contains(<span class="string">&#x27;Clear completed&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">$el</span>) =&gt;</span> &#123;</span><br><span class="line">    $el.css(&#123;</span><br><span class="line">      textDecoration: <span class="string">&#x27;underline&#x27;</span>,</span><br><span class="line">      border: <span class="string">&#x27;1px solid pink&#x27;</span>,</span><br><span class="line">      borderRadius: <span class="string">&#x27;2px&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">cy.get(<span class="string">&#x27;footer.footer&#x27;</span>).screenshot(<span class="string">&#x27;clear-completed&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// clear completed items and take a screenshot</span></span><br><span class="line"><span class="comment">// of the single active todo</span></span><br><span class="line">cy.contains(<span class="string">&#x27;Clear completed&#x27;</span>).click()</span><br><span class="line">cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">cy.screenshot(<span class="string">&#x27;remaining-todo&#x27;</span>)</span><br></pre></td></tr></table></figure>&lt;!-- fiddle-end --&gt;&lt;/details&gt;</code></pre><p>Here is how the above section of the README looks once the test runs and the screenshots are created.</p><p><img src="/blog/images/cypress-book/completing.gif" alt="Completing todos section of the README"></p><p>Now that we have tests embedded in the README, let&#39;s talk about screenshots</p><h2><span id="copy-screenshots">Copy screenshots</span></h2><p>When <a href="https://on.cypress.io/screenshot"><code>cy.screenshot</code></a> command takes a screenshot, it is automatically saved as <code>cypress/screenshots/&lt;spec name&gt;/&lt;test name&gt;.png</code> file. We want to move it to a different spot, maybe rename it and post-process it (prepare for the web, or add watermark). We can use the &#39;after:screenshot&#39; event to work with each screenshot:</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">&#x27;after:screenshot&#x27;</span>, <span class="function">(<span class="params">details</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// copy and rename the image</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <a href="https://github.com/bahmutov/cypress-book-todomvc">bahmutov/cypress-book-todomvc</a> <code>cypress/plugins/index.js</code> code we:</p><ul><li>ignore screenshots take on test failure</li><li>ignore screenshots without a name. A screenshot for the tutorial should be taken with <code>cy.screenshot(&lt;name&gt;)</code></li><li>copy the screenshot to <code>images</code> folder</li><li>we only overwrite screenshots in the <code>images</code> folder when running on CI. This ensures that we don&#39;t forget to check in updates screenshots</li></ul><p>If we do generate the &quot;true&quot; images on CI, how do we get them back to the repository?</p><h2><span id="continuous-integration">Continuous Integration</span></h2><p>To run tests on CI and to commit any new or changed screenshots, I will use <a href="../trying-github-actions/">GitHub Actions</a>. We need to run Cypress tests and commit any changed files, pushing them back to the repository.</p><figure class="highlight yml"><figcaption><span>.github/workflows/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">main</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">cypress-run:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span> <span class="string">🧪</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">start:</span> <span class="string">npm</span> <span class="string">start</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># now let&#x27;s see any changed files</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">See</span> <span class="string">changed</span> <span class="string">files</span> <span class="string">👀</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">git</span> <span class="string">status</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># and commit and push them back to GH if any</span></span><br><span class="line">      <span class="comment"># https://github.com/mikeal/publish-to-github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">changed</span> <span class="string">files</span> <span class="string">🆙</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">mikeal/publish-to-github-action@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">site</span> <span class="string">🏗</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br></pre></td></tr></table></figure><p>If there are no changed or new screenshots, the repo stays as is.</p><h2><span id="publish-static-site">Publish static site</span></h2><p>We already have a beautiful README file at <a href="https://github.com/bahmutov/cypress-book-todomvc">bahmutov/cypress-book-todomvc</a>, but we can also convert it into a static tutorial page for TodoMVC application. Let&#39;s use <a href="https://vuepress.vuejs.org/">VuePress</a> to convert README.md into an optimized static site.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D vuepress</span><br><span class="line">+ vuepress@1.5.4</span><br></pre></td></tr></table></figure><p>We can configure the site title and path, and let&#39;s show a sidebar</p><figure class="highlight js"><figcaption><span>.vuepress/config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  title: <span class="string">&#x27;Cypress Book TodoMVC&#x27;</span>,</span><br><span class="line">  description: <span class="string">&#x27;Cypress tests inside README that update the screenshots&#x27;</span>,</span><br><span class="line">  base: <span class="string">&#x27;/cypress-book-todomvc/&#x27;</span>,</span><br><span class="line">  themeConfig: &#123;</span><br><span class="line">    sidebar: <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now run the command <code>npx vuepress build</code> and there will be a static site in <code>.vuepress/dist</code> folder.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ npx vuepress build</span><br><span class="line">wait Extracting site metadata...</span><br><span class="line">tip Apply theme @vuepress/theme-default ...</span><br><span class="line">tip Apply plugin container (i.e. &quot;vuepress-plugin-container&quot;) ...</span><br><span class="line">tip Apply plugin @vuepress/register-components (i.e. &quot;@vuepress/plugin-register-components&quot;) ...</span><br><span class="line">tip Apply plugin @vuepress/active-header-links (i.e. &quot;@vuepress/plugin-active-header-links&quot;) ...</span><br><span class="line">tip Apply plugin @vuepress/search (i.e. &quot;@vuepress/plugin-search&quot;) ...</span><br><span class="line">tip Apply plugin @vuepress/nprogress (i.e. &quot;@vuepress/plugin-nprogress&quot;) ...</span><br><span class="line"></span><br><span class="line">✔ Client</span><br><span class="line">  Compiled successfully in 8.73s</span><br><span class="line"></span><br><span class="line">✔ Server</span><br><span class="line">  Compiled successfully in 5.40s</span><br><span class="line"></span><br><span class="line">wait Rendering static HTML...</span><br><span class="line">success Generated static files in .vuepress/dist.</span><br></pre></td></tr></table></figure><p>Since we build the site at CI, we can deploy it right away to GitHub Pages from our <code>main.yml</code> file.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">site</span> <span class="string">🏗</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># push static site, but only from the default branch</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Publish</span> <span class="string">site</span> <span class="string">🌐</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">github.ref</span> <span class="string">==</span> <span class="string">&#x27;refs/heads/master&#x27;</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">publish_dir:</span> <span class="string">./.vuepress/dist</span></span><br></pre></td></tr></table></figure><p>You can see the pretty site at <a href="https://glebbahmutov.com/cypress-book-todomvc/">glebbahmutov.com/cypress-book-todomvc/</a>. Note that VuePress completely hides the test blocks due to <code>&lt;details style=&quot;display:none&quot;&gt;</code> markup.</p><h2><span id="bonus-1-test-runner-screenshots">Bonus 1 - test runner screenshots</span></h2><p>By default the <a href="https://on.cypress.io/screenshot"><code>cy.screenshot</code></a> command takes the screenshot of the application. You can also take the screenshot of the entire window, including the command log column on the left.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;.new-todo&#x27;</span>).type(<span class="string">&#x27;I ❤️ tests&#123;enter&#125;&#x27;</span>)</span><br><span class="line">cy.get(<span class="string">&#x27;.todo-list li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">cy.screenshot(<span class="string">&#x27;demo-test&#x27;</span>, &#123; <span class="attr">capture</span>: <span class="string">&#x27;runner&#x27;</span>, <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br></pre></td></tr></table></figure><p>Which produces the following screenshot:</p><p><img src="/blog/images/cypress-book/demo-test.png" alt="Screenshot of the Test Runner"></p><h2><span id="bonus-2-movies">Bonus 2 - movies</span></h2><p>While <code>cypress-book</code> is a project for making application tutorials using screenshots, I am also thinking how to produce little movies from tests. You can follow the project at <a href="http://github.com/bahmutov/cypress-movie">bahmutov/cypress-movie</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take a web application and try to explain it to our users. For example &lt;a href=&quot;http://todomvc.com/&quot;&gt;todomvc.com&lt;/a&gt; - how do y
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="markdown" scheme="https://glebbahmutov.com/blog/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>What I Have Done - An Analysis</title>
    <link href="https://glebbahmutov.com/blog/what-i-have-done/"/>
    <id>https://glebbahmutov.com/blog/what-i-have-done/</id>
    <published>2020-09-01T04:00:00.000Z</published>
    <updated>2020-09-02T15:34:53.832Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> this blog post right here is post number <strong>500</strong> 🎉🎊 so it is a good opportunity to take a quantitative look back.</p><h2><span id="the-daily-logs">The daily logs</span></h2><p>Since March of 2019 I have kept detailed daily notes about the tasks I have been working on. I used Markdown format and <a href="https://typora.io/">Typora editor</a>, listing everything: GitHub issues, pull requests, meetings, writing blog posts, preparing and delivering presentations, etc. You can find these monthly logs in the repository <a href="https://github.com/bahmutov/daily-logs">bahmutov/daily-logs</a>. I have redacted private and confidential information from the source files before creating the repository, thus the logs do accurately reflect my daily work.</p><p><img src="/blog/images/daily-logs/typora.png" alt="Typora editor with three monthly files opened"></p><p>You can find the monthly files grouped by year: <a href="https://github.com/bahmutov/daily-logs/tree/main/2019">2019</a> and <a href="https://github.com/bahmutov/daily-logs/tree/main/2020">2020</a>. Every day is level 2 heading, with the items in a plain list:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># March 2019</span><br><span class="line"></span><br><span class="line">## Wednesday 2019-03-06</span><br><span class="line"></span><br><span class="line">- iterate and publish [cypress-watch-and-reload](https:&#x2F;&#x2F;github.com&#x2F;bahmutov&#x2F;cypress-watch-and-reload) plugin @example</span><br><span class="line">- a few improvements to testing workshop: loading state test, warning about state reset @example</span><br><span class="line">- add custom command example to circleci-orb repo @feature</span><br><span class="line">- created **redacted** Cypress-io organization team @internal</span><br><span class="line">- created example with CircleCI parallel runs depending on branches for Spectrum [circleci-parallel-based-on-env](https:&#x2F;&#x2F;github.com&#x2F;bahmutov&#x2F;circleci-parallel-based-on-env) @example</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">## Thursday 2019-03-07</span><br><span class="line"></span><br><span class="line">- can CircleCI distinguish own branches from forked pull requests? @example</span><br><span class="line">  - https:&#x2F;&#x2F;circleci.com&#x2F;docs&#x2F;2.0&#x2F;oss&#x2F;</span><br><span class="line">  - https:&#x2F;&#x2F;circleci.com&#x2F;docs&#x2F;2.0&#x2F;example-configs&#x2F;</span><br><span class="line">  - Success: internal branches are running in parallel, while external pull requests run serially https:&#x2F;&#x2F;github.com&#x2F;bahmutov&#x2F;circleci-parallel-based-on-env BUT there is still an issue how to make CircleCI &#x2F; GitHub required check to work with one or the other job</span><br><span class="line">- Published GoDaddy webinar blog post https:&#x2F;&#x2F;www.cypress.io&#x2F;blog&#x2F;2019&#x2F;03&#x2F;07&#x2F;how-godaddy-created-a-culture-of-quality&#x2F; @slides</span><br><span class="line">- tweaked my code example for &#96;getCookie&#96; documentation page @example</span><br><span class="line">- cleaned up outside contribution to our &#96;debugging&#96; documentation page https:&#x2F;&#x2F;github.com&#x2F;cypress-io&#x2F;cypress-documentation&#x2F;issues&#x2F;1430 @example</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Every top level item has a category tag. The &quot;official&quot; tags are:</p><ul><li><code>@example</code> task for when I created an example or a demo application to show a concept, like examples in the <a href="https://github.com/cypress-io/cypress-example-kitchensink">cypress-example-kitchensink</a> and <a href="https://github.com/cypress-io/cypress-example-recipes">cypress-example-recipes</a> repositories. I also tag most of the work related to the documentation with <code>@example</code> because our docs do have lots of examples.</li><li><code>@feature</code> is the new code or fixing bugs or writing tests or documenting new feature</li><li><code>@internal</code> are utility tasks that are usually private to Cypress</li><li><code>@support</code> supporting our users</li><li><code>@slides</code> preparing for a public presentation, working on slides, sending a proposal</li><li><code>@presentation</code> the actual public presentation in front of people</li><li><code>@learning</code> is when I was learning something new</li><li><code>@hiring</code> working to hire someone</li><li><code>@blog</code> writing a blog post for <a href="https://www.cypress.io/blog/">https://www.cypress.io/blog/</a>, <a href="https://glebbahmutov.com/blog/">https://glebbahmutov.com/blog/</a>, or some 3rd party blog</li></ul><p>Having these lightweight daily logs helps me during the team&#39;s daily standup (copy/paste into the chat bot), or to talk during the ongoing work with the team. It also tremendously helps me to remember the recent items whenever I need a link or a code snippet to share. It also helps me with &quot;Todo&quot; lists to avoid forgetting things I plan to work on in the future. Thus some of the lists are checklists, and it is ok to have some of them unfinished.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- fix incorrect links in changelog 3.2.0 @feature</span><br><span class="line">- sync with **redacted** about static site and headless content @feature</span><br><span class="line">- [x] reply to **redacted** about Connect.tech @slides</span><br><span class="line">- [x] reply to QA Guild podcast @slides</span><br><span class="line">- [ ] can we batch Renovate bot upgrades? Opened https:&#x2F;&#x2F;github.com&#x2F;cypress-io&#x2F;cypress-example-kitchensink&#x2F;issues&#x2F;220</span><br><span class="line">- [x] update json schemas blog post and demo project https:&#x2F;&#x2F;github.com&#x2F;bahmutov&#x2F;todo-api-with-json-schema @slides</span><br></pre></td></tr></table></figure><h2><span id="totals">Totals</span></h2><p>We can extract the items from Markdown files, group them by tag, and save the totals per month using the scripts in the repo.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run count</span><br><span class="line"></span><br><span class="line">total items 3050</span><br><span class="line">wrote file counted.json</span><br><span class="line">wrote file counted.csv</span><br><span class="line">wrote file counted.md</span><br></pre></td></tr></table></figure><p>I generate <a href="https://github.com/bahmutov/daily-logs/blob/main/counted.csv">counted.csv</a>, <a href="https://github.com/bahmutov/daily-logs/blob/main/counted.json">counted.json</a>, and even <a href="https://github.com/bahmutov/daily-logs/blob/main/counted.md">counted.md</a> files. Let&#39;s look at what I have done in total over the past year and a half.</p><table><thead><tr><th>label</th><th>blog</th><th>example</th><th>feature</th><th>hiring</th><th>internal</th><th>learning</th><th>presentation</th><th>slides</th><th>support</th></tr></thead><tbody><tr><td>03-March-2019</td><td>10</td><td>33</td><td>51</td><td>6</td><td>16</td><td>6</td><td>5</td><td>27</td><td>5</td></tr><tr><td>04-April-2019</td><td>7</td><td>31</td><td>63</td><td>10</td><td>19</td><td>9</td><td>6</td><td>38</td><td>3</td></tr><tr><td>05-May-2019</td><td>11</td><td>24</td><td>67</td><td>11</td><td>14</td><td>4</td><td>3</td><td>15</td><td>1</td></tr><tr><td>06-June-2019</td><td>6</td><td>25</td><td>80</td><td>5</td><td>16</td><td>9</td><td>2</td><td>19</td><td>6</td></tr><tr><td>07-July-2019</td><td>7</td><td>24</td><td>80</td><td>13</td><td>21</td><td>5</td><td>1</td><td>28</td><td>4</td></tr><tr><td>08-August-2019</td><td>8</td><td>21</td><td>51</td><td>18</td><td>16</td><td>5</td><td>3</td><td>13</td><td>10</td></tr><tr><td>09-September-2019</td><td>9</td><td>12</td><td>80</td><td>13</td><td>18</td><td>8</td><td>4</td><td>31</td><td>11</td></tr><tr><td>10-October-2019</td><td>3</td><td>23</td><td>68</td><td>2</td><td>10</td><td>4</td><td>4</td><td>12</td><td>9</td></tr><tr><td>11-November-2019</td><td>7</td><td>22</td><td>69</td><td>1</td><td>9</td><td>4</td><td>4</td><td>8</td><td>9</td></tr><tr><td>12-December-2019</td><td>6</td><td>30</td><td>78</td><td>11</td><td>11</td><td>1</td><td>4</td><td>9</td><td>8</td></tr><tr><td>01-January-2020</td><td>5</td><td>47</td><td>83</td><td>3</td><td>7</td><td>2</td><td>2</td><td>7</td><td>8</td></tr><tr><td>02-February-2020</td><td>2</td><td>30</td><td>89</td><td>1</td><td>4</td><td>3</td><td>4</td><td>13</td><td>4</td></tr><tr><td>03-March-2020</td><td>13</td><td>41</td><td>96</td><td>2</td><td>11</td><td>5</td><td>3</td><td>16</td><td>3</td></tr><tr><td>04-April-2020</td><td>3</td><td>42</td><td>118</td><td>0</td><td>11</td><td>3</td><td>6</td><td>16</td><td>6</td></tr><tr><td>05-May-2020</td><td>7</td><td>58</td><td>112</td><td>0</td><td>8</td><td>5</td><td>3</td><td>19</td><td>9</td></tr><tr><td>06-June-2020</td><td>15</td><td>41</td><td>111</td><td>0</td><td>11</td><td>6</td><td>5</td><td>21</td><td>7</td></tr><tr><td>07-July-2020</td><td>14</td><td>47</td><td>81</td><td>1</td><td>10</td><td>7</td><td>2</td><td>7</td><td>3</td></tr><tr><td>08-August-2020</td><td>9</td><td>24</td><td>54</td><td>0</td><td>14</td><td>5</td><td>3</td><td>13</td><td>6</td></tr><tr><td><strong>total</strong></td><td>142</td><td>575</td><td>1431</td><td>97</td><td>226</td><td>91</td><td>64</td><td>312</td><td>112</td></tr><tr><td><strong>total (%)</strong></td><td>4.66</td><td>18.85</td><td>46.92</td><td>3.18</td><td>7.41</td><td>2.98</td><td>2.10</td><td>10.23</td><td>3.67</td></tr><tr><td><strong>average</strong></td><td>8</td><td>32</td><td>80</td><td>5</td><td>13</td><td>5</td><td>4</td><td>17</td><td>6</td></tr></tbody></table><p>The <strong>total (%)</strong> number divides the total of the current column against the sum of all items (3050) to show the relative number of particular tag. The <strong>average</strong> number for each column divides the total for each column by 18 months.</p><p>You can throw the above CSV into a chart, I like to plot the average breakdown of all tasks by type to get a sense of where I have spent most of my efforts.</p><p><img src="/blog/images/daily-logs/categories.png" alt="Every task type vs total as percentage"></p><p>Let&#39;s take a look at the top three types of work I have done over the past 18 months, and then at the rest.</p><h2><span id="my-top-three">My top three</span></h2><h3><span id="features-features-features">Features, features, features</span></h3><p>Every month, on average, I worked on <strong>80</strong> items that could be considered &quot;feature work&quot;: actual features for Cypress test runner and its numerous parts, build tooling, etc. This number includes the bug fixes as well - anything that touches the code and changes how it works is a &quot;feature&quot; in general sense.</p><p><img src="/blog/images/daily-logs/features.png" alt="Feature work month by month"></p><p>Even better, as the chart above shows, my productivity has generally increased lately. This is due to accumulating a lot of knowledge of Cypress internals and its build steps, and also due to putting effort to bring new features to the users, like <a href="../my-vision-for-component-tests/">component testing</a> which keeps me interested and strongly motivated.</p><h3><span id="more-examples-please">More examples please</span></h3><p>My second biggest chunk of work is creating new examples for our users. On average, I have worked on examples <strong>32</strong> times a month. In my personal opinion, no software can be successful without lots and lots and lots examples. We are working on a complex tool, it gets tricky very quickly (unfortunately), and our users will only be successful when you show them how to handle the different test scenarios.</p><p>I wanted to do more - yes, we do have <a href="https://example.cypress.io">example.cypress.io</a> with small examples, and <a href="https://github.com/cypress-io/cypress-example-recipes">cypress-example-recipes</a> with more than 70 larger recipes. I have contributed to both repos a lot, here is the <a href="https://github.com/cypress-io/cypress-example-recipes/graphs/contributors">recipes repo for example</a>:</p><p><img src="/blog/images/daily-logs/recipes.png" alt="My contributions to the cypress-example-recipes repo"></p><p>But we could do more. This is why I wrote <a href="https://github.com/cypress-io/cypress-fiddle">cypress-fiddle</a> and made a prototype site <a href="https://glebbahmutov.com/cypress-examples/">glebbahmutov.com/cypress-examples/</a> from <a href="https://github.com/bahmutov/cypress-examples">bahmutov/cypress-examples</a>; this project would allow our team to write 10 times more examples than we have right now in a shorter amount of time.</p><h3><span id="presentations">Presentations</span></h3><p>The last top item that has occupied my time was preparing and giving presentations. I have done <a href="https://glebbahmutov.com/videos">conference talks</a>, <a href="https://on.cypress.io/webinars">Cypress webinars</a>, and internal presentations at other companies. Every talk requires preparation, on average I have 5 times as many prep tasks (tagged <code>@slides</code>) as the presentations themselves (tagged <code>@presentation</code>).</p><h2><span id="the-bottom-four">The bottom four</span></h2><p>From the report, you can see I don&#39;t spend much time in the meetings, interviewing candidates, supporting users, or learning. Let&#39;s dig into these numbers a little bit, since they are a little bit misleading.</p><p>I can count myself lucky. I had very few internal meetings, under 10% of my tasks. The Cypress engineering process is pretty lightweight, and does not require too much team syncing. Thus the <code>@internal</code> items are only occupying a tiny percentage of my weekly activities. It might change in the future, as the company is growing. We will see.</p><p>Another interesting trend relates to hiring. I have joined Cypress 3 years ago in May of 2017 when the entire company had only five people. As we grew, I had to interview a lot of people to hire for every engineering position. As we reached our current size, the need to personally interview every candidate disappeared. Thus I could spend more time writing examples, while essentially stopping interviewing in the recent months.</p><p><img src="/blog/images/daily-logs/interviews.png" alt="Interviewing vs working on examples"></p><p>There are very few items marked <code>@support</code> - not because I do not answer users&#39; questions in <a href="https://on.cypress.io/chat">Cypress chat</a> or on Twitter, or via GH issues. I answer these public questions a lot, usually by sending links to examples! Thus I would mark work to create a public example and send it to the user as <code>@example</code>. Most of the items marked <code>@support</code> is an actual user session with our Cypress users due to some difficulty in setting up Cypress in their environment, or running into a problem in a specific app, etc - the paid support.</p><p>Finally, the tasks marked <code>@learning</code> are honestly an undercount of the daily stream of articles, videos, and tutorials I go through. I just don&#39;t always remember to add them into the daily log. I would say about one or two items per day should be in this category, but alas I don&#39;t have a record to support it.</p><h2><span id="github-activity">GitHub Activity</span></h2><p>I am lucky to do most of my work in the open using mostly public GitHub repositories, issues, and NPM packages. Thus one can see (mostly) everything from the pas 18 months in the table below.</p><!-- prettier-ignore-start --><table><thead><tr><th>Month</th><th>GH</th><th>Commits</th><th>New repos</th><th>PRs</th><th>Reviews</th><th>Opened issues</th><th>Total</th><th>Level</th></tr></thead><tbody><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2019/03-March-2019.md">March 2019</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2019-03-01&amp;to=2019-03-31">Link</a></td><td>697</td><td>13</td><td>45</td><td>8</td><td>72</td><td>138</td><td>100%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2019/04-April-2019.md">April 2019</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2019-04-01&amp;to=2019-04-30">Link</a></td><td>1391</td><td>7</td><td>49</td><td>8</td><td>58</td><td>122</td><td>88%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2019/05-May-2019.md">May 2019</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2019-05-01&amp;to=2019-05-31">Link</a></td><td>1038</td><td>8</td><td>52</td><td>10</td><td>47</td><td>117</td><td>85%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2019/06-June-2019.md">June 2019</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2019-06-01&amp;to=2019-06-30">Link</a></td><td>925</td><td>12</td><td>43</td><td>13</td><td>31</td><td>99</td><td>72%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2019/07-July-2019.md">July 2019</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2019-07-01&amp;to=2019-07-31">Link</a></td><td>1663</td><td>13</td><td>44</td><td>16</td><td>63</td><td>136</td><td>99%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2019/08-August-2019.md">August 2019</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2019-08-01&amp;to=2019-08-31">Link</a></td><td>378</td><td>4</td><td>26</td><td>7</td><td>31</td><td>68</td><td>50%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2019/09-September-2019.md">September 2019</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2019-09-01&amp;to=2019-09-30">Link</a></td><td>715</td><td>10</td><td>24</td><td>11</td><td>30</td><td>75</td><td>54%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2019/10-October-2019.md">October 2019</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2019-10-01&amp;to=2019-10-31">Link</a></td><td>1095</td><td>5</td><td>42</td><td>18</td><td>41</td><td>106</td><td>77%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2019/11-November-2019.md">November 2019</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2019-11-01&amp;to=2019-11-30">Link</a></td><td>1012</td><td>11</td><td>39</td><td>23</td><td>58</td><td>131</td><td>95%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2019/12-December-2019.md">December 2019</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2019-12-01&amp;to=2019-12-31">Link</a></td><td>1169</td><td>11</td><td>32</td><td>27</td><td>35</td><td>105</td><td>76%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2020/01-January-2020.md">January 2020</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2020-01-01&amp;to=2020-01-31">Link</a></td><td>802</td><td>7</td><td>62</td><td>34</td><td>41</td><td>144</td><td>104%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2020/02-February-2020.md">February 2020</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2020-02-01&amp;to=2020-02-29">Link</a></td><td>1190</td><td>10</td><td>79</td><td>42</td><td>80</td><td>211</td><td>160%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2020/03-March-2020.md">March 2020</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2020-03-01&amp;to=2020-03-31">Link</a></td><td>1386</td><td>9</td><td>81</td><td>34</td><td>74</td><td>198</td><td>143%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2020/04-April-2020.md">April 2020</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2020-04-01&amp;to=2020-04-30">Link</a></td><td>1145</td><td>29</td><td>85</td><td>26</td><td>89</td><td>229</td><td>166%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2020/05-May-2020.md">May 2020</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2020-05-01&amp;to=2020-05-31">Link</a></td><td>1311</td><td>30</td><td>89</td><td>38</td><td>102</td><td>259</td><td>188%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2020/06-June-2020.md">June 2020</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2020-06-01&amp;to=2020-06-30">Link</a></td><td>1183</td><td>8</td><td>51</td><td>35</td><td>66</td><td>160</td><td>116%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2020/07-July-2020.md">July 2020</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2020-07-01&amp;to=2020-07-31">Link</a></td><td>943</td><td>7</td><td>62</td><td>35</td><td>57</td><td>161</td><td>117%</td></tr><tr><td><a href="https://github.com/bahmutov/daily-logs/blob/main/2020/08-August-2020.md">August 2020</a></td><td><a href="https://github.com/bahmutov?tab=overview&amp;from=2020-08-01&amp;to=2020-08-31">Link</a></td><td>743</td><td>4</td><td>19</td><td>27</td><td>14</td><td>64</td><td>46%</td></tr></tbody></table><!-- prettier-ignore-end --><p><strong>Total</strong> = new repos + PRs + reviews + opened issues</p><p>We take the first month of March 2019 as the base level of 100% and normalize the GH work against that month.</p><p><strong>Level</strong> = month&#39;s total / 138 * 100</p><p>Let&#39;s plot the <strong>Level</strong> column. I see a mostly productive 2020. I have skipped August 2020 since I am taking a couple of weeks off. August 2019 is also a &quot;down&quot; month since the entire family went on a trip.</p><p><img src="/blog/images/daily-logs/gh-activity.png" alt="GitHub activity normalized against the first month"></p><p>The daily logs and the GitHub activity are in agreement with each other - compare the above contributions chart to the &quot;hiring vs examples&quot; chart - the overall shape of the red example bars matches the GitHub activity chart here.</p><p>I love my open source work at <a href="https://github.com/cypress-io">github.com/cypress-io</a> and in personal repositories <a href="https://github.com/bahmutov">github.com/bahmutov</a>. I hope my next 18 months are as productive!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this blog post right here is post number &lt;strong&gt;500&lt;/strong&gt; 🎉🎊 so it is a good opportunity to take a quantitat
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
      <category term="markdown" scheme="https://glebbahmutov.com/blog/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>It Is OK to Get Stuck Sometimes</title>
    <link href="https://glebbahmutov.com/blog/it-is-ok-to-get-stuck/"/>
    <id>https://glebbahmutov.com/blog/it-is-ok-to-get-stuck/</id>
    <published>2020-08-25T04:00:00.000Z</published>
    <updated>2020-08-25T14:04:05.206Z</updated>
    
    <content type="html"><![CDATA[<p>Everyone gets stuck sometimes. I love and enjoy coding in JavaScript, have been doing it for a while, yet sometimes I commit simple mistakes. Most of the times, the linter or the tests catch them. But sometimes a harder to catch error slips through, stumbling me for a while. Recently, our open source test runner Cypress continuous integration broke due to Mac application code signing.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> electron-osx-sign Error executing file:</span><br><span class="line">&gt; Stdout:</span><br><span class="line">&gt; Stderr: ...&#x2F;node_modules&#x2F;@ffmpeg-installer&#x2F;darwin-x64&#x2F;ffmpeg: No such file or directory</span><br></pre></td></tr></table></figure><p>We just merged a very large <a href="https://github.com/cypress-io/cypress/pull/7753">v5.0 pull request</a>, so I naturally suspected the problem to be due to this large code change. The squashed commit included Electron application upgrade, Node version change, and lots of code and dependency changes.</p><p>The funny thing was that it has built and signed the binary from the merge commit, and the CI has started failing on the <em>next</em> build. Even funnier was that I could build and code sign Mac application just fine on my laptop using exactly the same source code. The final piece of the puzzle (that actually should have been my clue) was that the missing file &quot;.../node_modules/@ffmpeg-installer/darwin-x64/ffmpeg&quot; was actually present! Hmm. I started my investigation in <a href="https://github.com/cypress-io/cypress/issues/8299">issue #8299</a>. I spent probably two full days looking for the source of the problem, trying to update Electron builder, playing with Mac machine versions, etc.</p><p>After 2 days I brought in the big guns: the Cypress&#39; author Brian Mann pair-programmed with me on this issue. We looked at each part of the code, ran the individual actions by themselves - it all seemed to work separately, yet fail together. Altogether we spent around 4-6 hours looking at the CI machine, learnt VIM (normally we code using VSCode) to be able to edit files directly on the CI machine, etc.</p><p>Nothing.</p><p>While looking at some unrelated thing we accidentally looked at the file <a href="https://github.com/cypress-io/cypress/blob/abf4d858694e1be3ae6b93da42c6678ad22ba290/scripts/after-pack-hook.js">scripts/after-pack-hook.js</a> and Brian saw something suspicious. This code that copies files from each subfolder used <code>async / await</code> keywords:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;copying node_modules to&#x27;</span>, outputFolder)</span><br><span class="line"></span><br><span class="line">packages.forEach(<span class="keyword">async</span> (packageNodeModules) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;copying&#x27;</span>, packageNodeModules)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sourceFolder = join(params.packager.info._appDir, packageNodeModules)</span><br><span class="line">  <span class="keyword">const</span> destinationFolder = join(outputFolder, packageNodeModules)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> fs.copy(sourceFolder, destinationFolder)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;all node_modules subfolders copied to&#x27;</span>, outputFolder)</span><br></pre></td></tr></table></figure><p>The debug output on the CI machine looked correct:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">copying node_modules to ...</span><br><span class="line">copying folderA</span><br><span class="line">copying folderB</span><br><span class="line">copying folderC</span><br><span class="line">copying folderD</span><br><span class="line">...</span><br><span class="line">all node_modules subfolders copied to ...</span><br></pre></td></tr></table></figure><p>Do you see it? Exactly - the <code>packages.forEach</code> does NOT wait for the result of the callback function, even if it is marked <code>async</code>. Thus this code did NOT wait for the files to be copied, it just went on to the code signing part! The fix was a one line change in <a href="https://github.com/cypress-io/cypress/pull/8378">PR #8378</a>.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- packages.forEach(async (packageNodeModules) =&gt; &#123;</span></span><br><span class="line"><span class="addition">+ for await (const packageNodeModules of packages) &#123;</span></span><br></pre></td></tr></table></figure><p>Sigh.</p><p>So the code signing used to work accidentally, and once we upgraded the Electron framework and changed the dependencies, the copying slowed down enough for the code signing to not find the <code>ffmpeg</code> file when needed. Yet when we looked at the failed build, the copying has finished and <code>ffmpeg</code> was present, confusing us.</p><p>Last note: if we logged the folder copy operations <em>after</em> the fact we would have seen the problem, since we would see the log lines out of order:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">copying node_modules to ...</span><br><span class="line">all node_modules subfolders copied to ...</span><br><span class="line">copied folderA</span><br><span class="line">copied folderB</span><br><span class="line">copied folderC</span><br><span class="line">copied folderD</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Everyone gets stuck sometimes. I love and enjoy coding in JavaScript, have been doing it for a while, yet sometimes I commit simple mista
      
    
    </summary>
    
      <category term="people" scheme="https://glebbahmutov.com/blog/categories/people/"/>
    
    
      <category term="javascript" scheme="https://glebbahmutov.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Test the Preview Vercel Deploys</title>
    <link href="https://glebbahmutov.com/blog/develop-preview-test/"/>
    <id>https://glebbahmutov.com/blog/develop-preview-test/</id>
    <published>2020-08-20T04:00:00.000Z</published>
    <updated>2020-08-20T16:20:51.615Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#the-site">The site</a></li><li><a href="#vercel-deployment">Vercel deployment</a><ul><li><a href="#index-page">Index page</a></li></ul></li><li><a href="#preview-deploys">Preview deploys</a></li><li><a href="#testing">Testing</a><ul><li><a href="#testing-previews">Testing previews</a></li></ul></li><li><a href="#github-checks">GitHub Checks</a></li><li><a href="#cypress-dashboard">Cypress Dashboard</a></li><li><a href="#cypress-gh-integration">Cypress GH Integration</a></li><li><a href="#more-info">More info</a></li></ul><!-- tocstop --><h2><span id="the-site">The site</span></h2><p>Let&#39;s play with a personal site made using <a href="https://www.11ty.dev/">11ty</a>. You can find the source code in the repo <a href="https://github.com/bahmutov/eleventy-example">bahmutov/eleventy-example</a>. We start with a basic page in the <code>README.md</code> file.</p><figure class="highlight md"><figcaption><span>README.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># My site</span></span><br><span class="line"><span class="quote">&gt; A static site using [<span class="string">11ty</span>](<span class="link">https://www.11ty.dev/</span>)</span></span><br></pre></td></tr></table></figure><p>Install the <code>11ty</code> NPM package</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D @11ty/eleventy</span></span><br><span class="line">+ @11ty/eleventy@0.11.0</span><br></pre></td></tr></table></figure><p>And start the local site</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx eleventy --serve</span></span><br><span class="line">Writing _site/README/index.html from ./README.md.</span><br><span class="line">Writing _site/index.html from ./index.html.</span><br><span class="line">Wrote 2 files in 0.08 seconds (v0.11.0)</span><br><span class="line">Watching…</span><br><span class="line">[Browsersync] Access URLs:</span><br><span class="line"> -----------------------------------</span><br><span class="line">       Local: http://localhost:8081</span><br><span class="line">    External: http://10.0.0.141:8081</span><br><span class="line"> -----------------------------------</span><br><span class="line">          UI: http://localhost:3001</span><br><span class="line"> UI External: http://localhost:3001</span><br><span class="line"> -----------------------------------</span><br><span class="line">[Browsersync] Serving files from: _site</span><br></pre></td></tr></table></figure><p>The static page does not look like much - but the generator is fast and simple to use.</p><p><img src="/blog/images/deploy-preview-test/readme.png" alt="README page"></p><p><strong>Tip:</strong> by default <code>eleventy --start</code> serves the page at port 8080. If that port is busy, it automatically serves at the next available port, in this case the site was serves at port 8081.</p><h2><span id="vercel-deployment">Vercel deployment</span></h2><p>We need the entire world to see our awesome site. Let&#39;s deploy it using <a href="https://vercel.com/">Vercel</a> platform. I have created a new project and picked &quot;11ty&quot; application&#39;s default settings for the build command and output folder.</p><p><img src="/blog/images/deploy-preview-test/settings.png" alt="Vercel project settings page"></p><p>I have linked the Vercel project with the GitHub repository <a href="https://github.com/bahmutov/eleventy-example">bahmutov/eleventy-example</a></p><p><img src="/blog/images/deploy-preview-test/git-integration.png" alt="Vercel project is linked to the GitHub repository"></p><p>Every time we push a new commit to the <code>main</code> branch, the static site is built and deployed globally under a subdomain of <code>vercel.app</code>.</p><p><img src="/blog/images/deploy-preview-test/domains.png" alt="Production site lives at this domain"></p><p>Here is the production site deployed from the <code>main</code> branch.</p><p><img src="/blog/images/deploy-preview-test/main.png" alt="Deployed main branch is the production"></p><h3><span id="index-page">Index page</span></h3><p>We probably want to deploy the top level index page as well, and navigate to the <code>/README</code> page. Let&#39;s throw a root <code>index.html</code> there</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>11ty Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hi there<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Check out <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/README&quot;</span>&gt;</span>the README<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The navigation works: when the users clicks on the link, the browser goes to the <code>/README</code> page. When the user clicks the browser&#39;s &quot;back&quot; button, it navigates back to the index page.</p><p><img src="/blog/images/deploy-preview-test/navigation.gif" alt="Navigation is working locally"></p><h2><span id="preview-deploys">Preview deploys</span></h2><p>I want to deploy the new index page - but I am not sure if the top level navigation is going to work with an actual domain (because I seriously doubt my programming skills). It would be a nice idea to deploy the full site to a temporary <em>preview domain</em> first, test it out, and if it works correctly, then merge the pull request to the <code>main</code> branch, which deploys to production.</p><p>I will create a new branch <code>add-index-page</code> and commit the new code there:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~&#x2F;git&#x2F;eleventy-example on add-index-page</span><br><span class="line">$ git log --oneline</span><br><span class="line">1407be3 (HEAD -&gt; add-index-page) add index page with navigation</span><br></pre></td></tr></table></figure><p>In my GitHub repository I have installed the <a href="https://vercel.com/docs/git-integrations/vercel-for-github">Vercel GitHub App</a> which automatically deploys every pull request.</p><p><img src="/blog/images/deploy-preview-test/vercel-for-github.png" alt="Vercel for GitHub"></p><p>By pushing the new branch to the repository and opening a pull request <a href="https://github.com/bahmutov/eleventy-example/pull/2">#2</a> I trigger the deployment. The Vercel bot comments on the PR with the deployed URL</p><p><img src="/blog/images/deploy-preview-test/preview-comment.png" alt="Preview deployment comment"></p><p>We can click on the preview URL to visit the deployed site and confirm manually that the navigation works</p><p><img src="/blog/images/deploy-preview-test/preview.gif" alt="Preview deployment shows the navigation is working"></p><p>The PR preview URL <code>https://eleventy-example-git-add-index-page.bahmutov.vercel.app/</code> is a concatenation of the project name &quot;eleventy-example&quot;, the source type &quot;git&quot;, the branch name &quot;add-index-page&quot;, my user name &quot;bahmutov&quot;, and the top level domain name &quot;vercel.app&quot;. In addition, there is a unique preview URL for <em>every commit</em>. You can find these URLs at the Vercel deploy page.</p><p><img src="/blog/images/deploy-preview-test/urls.png" alt="PR preview URLs"></p><p>If we push more commits to the branch <code>add-index-page</code>, the new deploys will get their new unique <code>eleventy-example-&lt;HASH&gt;.vercel.app</code> URLs, while the latest branch preview will still have the top level <code>&lt;project&gt;-git-&lt;branch&gt;-&lt;username&gt;.vercel.app</code> URL.</p><h2><span id="testing">Testing</span></h2><p>We have tried the PR preview manually, but a better idea to prevent bugs in the deployed web applications is to write automated end-to-end tests using <a href="https://www.cypress.io">Cypress</a>. Let&#39;s install Cypress and write a test in our pull request.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress</span></span><br></pre></td></tr></table></figure><p>When we ran the site locally, we tested it at the <code>localhost:8080</code>. Let&#39;s put this setting into <code>cypress.json</code> file.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:8080&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our spec file will perform what we have done manually - it will navigate by using the link to the <code>/README</code> page and back.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line">describe(<span class="string">&quot;11ty&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&quot;navigates&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// find more Cypress commands at</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/api</span></span><br><span class="line">    cy.visit(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    cy.contains(<span class="string">&quot;Hi there&quot;</span>);</span><br><span class="line">    cy.contains(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;the README&quot;</span>).click();</span><br><span class="line">    cy.location(<span class="string">&quot;pathname&quot;</span>).should(<span class="string">&quot;match&quot;</span>, <span class="regexp">/\/README\/$/</span>);</span><br><span class="line">    cy.go(<span class="string">&quot;back&quot;</span>);</span><br><span class="line">    cy.contains(<span class="string">&quot;Hi there&quot;</span>); <span class="comment">// back on the index page</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Start Cypress with <code>npx cypress open</code> while the application is running and observe the test passing for the right reason. Hover over each command to observe the site&#39;s DOM snapshot and how it changed in response to the anchor <code>click</code> or <code>cy.go(&#39;back&#39;)</code> command.</p><p><img src="/blog/images/deploy-preview-test/navigation-test.gif" alt="Navigation test passing locally"></p><p><strong>Tip:</strong> read how to write flake-free Cypress tests when navigating from page to page in the blog post <a href="https://www.cypress.io/blog/2020/08/17/when-can-the-test-navigate/">When Can The Test Navigate?</a>.</p><h3><span id="testing-previews">Testing previews</span></h3><p>We ran the above test locally. Let&#39;s run the same test automatically against the deployed preview URL. Luckily for us, Vercel for GitHub dispatches <em>deployment</em> events to GitHub, and we can write a GitHub Action that would execute in response to this event. Let&#39;s first simply print the event object to see if it has the target preview URL to test.</p><p><strong>Tip:</strong> if you have never used GitHub Actions, read my <a href="../trying-github-actions/">Trying GitHub Actions</a> blog post.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="comment"># https://docs.github.com/en/actions/reference/events-that-trigger-workflows</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">deployment</span>, <span class="string">deployment_status</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">show-event:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Dump</span> <span class="string">GitHub</span> <span class="string">context</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_CONTEXT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;$GITHUB_CONTEXT&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>push</code> event happens for every commit. This would give us a chance to test the site separately from the deployment. For example, we could lint the site&#39;s source text and run the Cypress tests against the site running locally.</li><li><code>deployment</code> event happens when Vercel starts the preview deploy - it does not have the deploy URL</li><li><code>deployment_status</code> event is sent by Vercel twice. First, when the preview deployment starts, and second time when the preview deployment finishes.</li></ul><p>Notice that the <code>deployment_status</code> is not listed in the PR checks - they are &quot;hidden&quot; or overwritten by the &quot;deployment&quot; event, which to me seems like a bad user interface.</p><p><img src="/blog/images/deploy-preview-test/deployment-checks.png" alt="GitHub pull request checks"></p><p>Instead, we need to look at the &quot;Actions&quot; tab to see the <code>ci</code> workflows run, and by clicking inside figure out they ran triggered by the <code>deployment_status</code> events.</p><p><img src="/blog/images/deploy-preview-test/ci-events.png" alt="CI events for every commit"></p><p>The pending <code>deployment_status</code> event has the following information inside the <code>github</code> JSON event</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;description&quot;: &quot;Vercel is deploying your app&quot;,</span><br><span class="line">&quot;environment&quot;: &quot;Preview&quot;,</span><br><span class="line">&quot;state&quot;: &quot;pending&quot;,</span><br><span class="line">&quot;target_url&quot;: &quot;https:&#x2F;&#x2F;eleventy-example-5ccl0n3a7.vercel.app&quot;</span><br></pre></td></tr></table></figure><p>The second <code>deployment_status</code> event inside the GitHub CI action has status</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;description&quot;: &quot;Deployment has completed&quot;,</span><br><span class="line">&quot;environment&quot;: &quot;Preview&quot;,</span><br><span class="line">&quot;state&quot;: &quot;success&quot;,</span><br><span class="line">&quot;target_url&quot;: &quot;https:&#x2F;&#x2F;eleventy-example-5ccl0n3a7.vercel.app&quot;</span><br></pre></td></tr></table></figure><p>We can limit the GitHub Action to only run a job when an expression is true. In our case we want to run end-to-end tests only after successful deploy - and we want to pass the &quot;target_url&quot; as <code>baseUrl</code> parameter. We can pass the base url using the <code>CYPRESS_BASE_URL</code> environment variable. Here is our updated workflow file</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="comment"># https://docs.github.com/en/actions/reference/events-that-trigger-workflows</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">deployment</span>, <span class="string">deployment_status</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="comment"># only runs this job on successful deploy</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event_name</span> <span class="string">==</span> <span class="string">&#x27;deployment_status&#x27;</span> <span class="string">&amp;&amp;</span> <span class="string">github.event.deployment_status.state</span> <span class="string">==</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Dump</span> <span class="string">GitHub</span> <span class="string">context</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_CONTEXT:</span> <span class="string">$&#123;&#123;</span> <span class="string">toJson(github)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$GITHUB_CONTEXT&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Cypress</span> <span class="string">🌲</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">CYPRESS_BASE_URL:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.deployment_status.target_url</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>When we push the commit, we can see the CI jobs skipped - except for the last job.</p><p><img src="/blog/images/deploy-preview-test/skip-jobs.png" alt="Skip all jobs but one - which runs on successful deployment"></p><p>I love requiring certain test jobs to pass before a pull request can be merged. Thus I set up protected branches with <code>e2e</code> job required to allow merging.</p><p><img src="/blog/images/deploy-preview-test/protected-branch.png" alt="Protected branch `main` requires `e2e` job to pass successfully"></p><p>The E2E job runs ... and fails!</p><p><img src="/blog/images/deploy-preview-test/fails.png" alt="Our test against the preview URL fails"></p><p><strong>Tip:</strong> debugging realistic test failures is much simpler when you have access to the screenshots and test run videos, I recommend using <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a> to <a href="https://www.cypress.io/blog/2018/08/28/record-test-artifacts-from-any-ci/">record the test artifacts from any CI</a>.</p><p>Hmm, seems Vercel does not add a trailing slash when serving the production version of the code, while <code>11ty</code> running locally does add one.</p><p><img src="/blog/images/deploy-preview-test/trailing-slash.png" alt="The difference in trailing slashes"></p><p>Testing against the deployed preview URLs just showed its usefulness. Let&#39;s update the test to be less strict.</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- cy.location(&quot;pathname&quot;).should(&quot;match&quot;, /\/README\/$/);</span></span><br><span class="line"><span class="addition">+ cy.location(&quot;pathname&quot;).should(&quot;include&quot;, &quot;/README&quot;);</span></span><br></pre></td></tr></table></figure><p>Perfect. The test passes locally and against the preview URL.</p><p><img src="/blog/images/deploy-preview-test/passing-e2e.png" alt="Passing E2E test"></p><p>Once the checks are green, I am confident and merge the pull request into the <code>main</code> branch. Vercel then deploys the production site. I can also remove extra CI events and only run the GitHub workflow on successful deployment. To install, cache and run Cypress we can use <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a>:</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="comment"># https://docs.github.com/en/actions/reference/events-that-trigger-workflows</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">deployment_status</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="comment"># only runs this job on successful deploy</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.deployment_status.state</span> <span class="string">==</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Cypress</span> <span class="string">🌲</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">CYPRESS_BASE_URL:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.deployment_status.target_url</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="github-checks">GitHub Checks</span></h2><p>There is one more detail that GitHub gets wrong when running tests on <code>deployment_status</code> event. It seems to be confused about <em>which commit</em> is tested, so it never reports the status back to the Pull Request. For example in <a href="https://github.com/bahmutov/eleventy-example/pull/3">#3</a> we see a pending check.</p><p><img src="/blog/images/deploy-preview-test/no-status.png" alt="The e2e CI check is pending even after the tests have finished"></p><p>To fix this, we can send the commit status ourselves using GitHub REST API call. Here is the added section of the GitHub workflow file. If the Cypress tests pass, we post success. If the Cypress tests fail, or any job step fails, we post the failure status.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ci.yml file</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Cypress</span> <span class="string">🌲</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">CYPRESS_BASE_URL:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.deployment_status.target_url</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#job-status-check-functions</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">✅</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">success()</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="comment"># set the merge commit status check</span></span><br><span class="line">  <span class="comment"># using GitHub REST API</span></span><br><span class="line">  <span class="comment"># see https://docs.github.com/en/rest/reference/repos#create-a-commit-status</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">curl</span> <span class="string">--request</span> <span class="string">POST</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--url</span> <span class="string">https://api.github.com/repos/$&#123;&#123;</span> <span class="string">github.repository</span> <span class="string">&#125;&#125;/statuses/$&#123;&#123;</span> <span class="string">github.sha</span> <span class="string">&#125;&#125;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--header</span> <span class="string">&#x27;authorization: Bearer $<span class="template-variable">&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span>&#x27;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--header</span> <span class="string">&#x27;content-type: application/json&#x27;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--data</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">      &quot;context&quot;: &quot;e2e&quot;,</span></span><br><span class="line"><span class="string">      &quot;state&quot;: &quot;success&quot;,</span></span><br><span class="line"><span class="string">      &quot;description&quot;: &quot;Cypress tests passed&quot;</span></span><br><span class="line"><span class="string">    &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">tests</span> <span class="string">🚨</span></span><br><span class="line">  <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">failure()</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">curl</span> <span class="string">--request</span> <span class="string">POST</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--url</span> <span class="string">https://api.github.com/repos/$&#123;&#123;</span> <span class="string">github.repository</span> <span class="string">&#125;&#125;/statuses/$&#123;&#123;</span> <span class="string">github.sha</span> <span class="string">&#125;&#125;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--header</span> <span class="string">&#x27;authorization: Bearer $<span class="template-variable">&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span>&#x27;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--header</span> <span class="string">&#x27;content-type: application/json&#x27;</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--data</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">      &quot;context&quot;: &quot;e2e&quot;,</span></span><br><span class="line"><span class="string">      &quot;state&quot;: &quot;failure&quot;,</span></span><br><span class="line"><span class="string">      &quot;description&quot;: &quot;Cypress tests failed&quot;</span></span><br><span class="line"><span class="string">    &#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>You can see the example run in PR <a href="https://github.com/bahmutov/eleventy-example/pull/4">#4</a>. The check &quot;e2e&quot; matches the required check name, thus the pull request is all green.</p><p><img src="/blog/images/deploy-preview-test/post-status.png" alt="Posted commit checks"></p><p>When we look at the Action steps, we can see the &quot;Post success&quot; step ran, while the &quot;Post failure&quot; step was skipped.</p><p><img src="/blog/images/deploy-preview-test/post-jobs.png" alt="Job steps"></p><p>We can even provide a link that would take us from the status check straight to the workflow run by forming the full <code>target_url</code> property when posting the status check.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--data &#39;&#123;</span><br><span class="line">  &quot;context&quot;: &quot;e2e&quot;,</span><br><span class="line">  &quot;state&quot;: &quot;success&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;Cypress tests passed&quot;,</span><br><span class="line">  &quot;target_url&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;$&#123;&#123; github.repository &#125;&#125;&#x2F;actions&#x2F;runs&#x2F;$&#123;&#123; github.run_id &#125;&#125;&quot;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><p>This creates the little &quot;Details&quot; link on the right.</p><p><img src="/blog/images/deploy-preview-test/target_url.png" alt="Run URL in the status check"></p><h2><span id="cypress-dashboard">Cypress Dashboard</span></h2><p>I have mentioned before that every Cypress run generates a video, and every failed Cypress test automatically saves the screenshot of the failure. You can store these test artifacts on GitHub, or send them to the <a href="https://on.cypress.io/dashboard-introduction">Cypress Dashboard</a> where they can be easily viewed. Let&#39;s set up our project for recording.</p><p>In the Cypress Desktop GUI select the &quot;Runs&quot; tab.</p><p><img src="/blog/images/deploy-preview-test/runs.png" alt="Cypress Runs tab"></p><p>Click the &quot;Set up project to record&quot; button.</p><p>I will place the &quot;eleventy-example&quot; project under my personal &quot;Gleb OSS&quot; organization that has the <a href="https://on.cypress.io/organizations#Requesting-OSS-plan-for-an-org">Cypress Open Source Software billing plan</a>. The test recordings will be public - everyone should be able to see them.</p><p><img src="/blog/images/deploy-preview-test/set-up-project.png" alt="Setting up the project"></p><p>Once I click &quot;Set up project&quot; button, its project id will be added to the <code>cypress.json</code> file and the recording key is shown. Please keep this <a href="https://on.cypress.io/projects#Record-key">key private</a>.</p><p><img src="/blog/images/deploy-preview-test/record-settings.png" alt="Project recording key"></p><p>I will set the recording key as a GitHub Action Secret in my repository.</p><p><img src="/blog/images/deploy-preview-test/secret.png" alt="Set the record key as GH Action Secret"></p><p>Let&#39;s update the GitHub workflow file to record test results and artifacts. We are using <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a>, thus we need to add <code>record: true</code> parameter and pass the recording secret as an environment variable.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># updated ci.yml file</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Cypress</span> <span class="string">🌲</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v2</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">record:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">CYPRESS_BASE_URL:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.deployment_status.target_url</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The tests run on GitHub and show the recorded run URL <code>https://dashboard.cypress.io/projects/y2sysj/runs/1</code></p><p><img src="/blog/images/deploy-preview-test/recording-url.png" alt="Recorded test runs show the Dashboard URL"></p><p>At the <a href="https://dashboard.cypress.io/projects/y2sysj/runs">Dashboard page</a> you can see every spec, every video, every screenshot, and lots of <a href="https://on.cypress.io/analytics">test analytics</a>.</p><p><img src="/blog/images/deploy-preview-test/first-run.png" alt="First recorded run"></p><h2><span id="cypress-gh-integration">Cypress GH Integration</span></h2><p>If we are using GitHub and Cypress Dashboard, we might as well use the <a href="https://on.cypress.io/github-integration">Cypress GitHub Integration App</a>. I can add it to all my repositories, or just install it for selected repository &quot;eleventy-example&quot;.</p><p><img src="/blog/images/deploy-preview-test/gh-app.png" alt="Installing Cypress GitHub App"></p><p>Once installed, we can configure how the Cypress GH App comments on pull requests and sets status checks.</p><p><img src="/blog/images/deploy-preview-test/configure-gh-app.png" alt="Configure Cypress GitHub App"></p><p>Let&#39;s try a new pull request <a href="https://github.com/bahmutov/eleventy-example/pull/6">#6</a> - we will see Vercel&#39;s comment and Cypress&#39; GH comment.</p><p><img src="/blog/images/deploy-preview-test/comments.png" alt="Cypress GitHub App comments on the pull requests"></p><p>Cypress GH App adds its own status check to the commit.</p><p><img src="/blog/images/deploy-preview-test/checks.png" alt="Full set of commit status checks"></p><p>Because we have the Cypress GH status check, we could remove our custom test job check implemented using <code>curl</code> commands. I will leave them in for completeness sake.</p><h2><span id="more-info">More info</span></h2><p>If you want to test a site deployed to GitHub Pages, read <a href="../triple-tested/">Triple Tested Static Site Deployed to GitHub Pages Using GitHub Actions</a>.</p><p>You can test deployed previews using <a href="../gatsby-netlify-circle-and-cypress/">Netlify + CircleCI combination</a></p><p>For full confidence, we do recommend adding <a href="https://on.cypress.io/visual-testing">visual testing</a> using open source or commercial service to your functional end-to-end tests. Visual testing will prevent any CSS or style regressions from creeping into your site.</p><p>We also recommend for complex web applications to measure the <a href="https://on.cypress.io/code-coverage">code coverage</a> to ensure all implemented features are covered by end-to-end tests. E2E tests are extremely effective at covering a lot of code.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#the-site&quot;&gt;The site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vercel-deployment&quot;&gt;Vercel deployment&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#index-p
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Test The Interface Not The Implementation</title>
    <link href="https://glebbahmutov.com/blog/test-the-interface/"/>
    <id>https://glebbahmutov.com/blog/test-the-interface/</id>
    <published>2020-08-05T04:00:00.000Z</published>
    <updated>2020-08-05T14:54:59.454Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#background">Background</a></li><li><a href="#the-setup">The setup</a></li><li><a href="#hello-world">Hello World</a></li><li><a href="#expandcollapse">ExpandCollapse</a></li><li><a href="#login-form">Login form</a><ul><li><a href="#bdd-assertions">BDD assertions</a></li><li><a href="#selector-playground">Selector Playground</a></li></ul></li><li><a href="#network-requests">Network requests</a><ul><li><a href="#pizza-toppings">Pizza toppings</a></li><li><a href="#remotepizza-with-ajax-call">RemotePizza with Ajax call</a></li><li><a href="#1-dependency-injection">1. Dependency injection</a></li><li><a href="#2-dependency-injection-with-delay">2. Dependency injection with delay</a></li><li><a href="#3-stubbing-the-default-property">3. Stubbing the default property</a></li><li><a href="#4-mocking-named-imports">4. Mocking named imports</a></li><li><a href="#5-stubbing-network">5. Stubbing network</a></li></ul></li><li><a href="#conclusion">Conclusion</a></li><li><a href="#relate-blog-posts">Relate blog posts</a></li></ul><!-- tocstop --><p><strong>Note:</strong> you can find the source code for this blog post with both Jest + RTL and Cypress + CTL specs in the repository <a href="https://github.com/bahmutov/rtl-article-2019">rtl-article-2019</a>.</p><h2><span id="background">Background</span></h2><p>This blog post is based on the excellent series of posts from <a href="https://blog.sapegin.me/">Artem Sapegin</a> about testing front-end code. In particular, this blog post follows the examples from <a href="https://blog.sapegin.me/all/react-testing-3-jest-and-react-testing-library/">Modern React testing, part 3: Jest and React Testing Library</a> blog post. As the title says, we will be testing React components, only instead of using Jest test runner plus <a href="https://testing-library.com/docs/react-testing-library/intro">@testing-library/react</a> (known as RTL) I will be using <a href="https://www.cypress.io">Cypress</a> + <a href="https://github.com/bahmutov/cypress-react-unit-test">cypress-react-unit-test</a> to run the tests. Fear not - the change will be minimal, because we also will be using <a href="https://testing-library.com/docs/cypress-testing-library/intro">@testing-library/cypress</a> (also called CTL). Thus our component tests will <em>look exactly</em> (well, almost, they will in fact be simpler) like before.</p><h2><span id="the-setup">The setup</span></h2><p>We install the testing tools using NPM commands</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress cypress-react-unit-test @testing-library/cypress</span></span><br><span class="line">+ @testing-library/cypress@6.0.0</span><br><span class="line">+ cypress@4.11.0</span><br><span class="line">+ cypress-react-unit-test@4.11.2</span><br></pre></td></tr></table></figure><p>The <code>cypress.json</code> file has all Cypress global configuration settings, where I enable <a href="https://on.cypress.io/experiments#Component-Testing">component testing</a> and <a href="https://www.cypress.io/blog/2020/06/29/experimental-fetch-polyfill/">fetch polyfill</a> experimental features.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;experimentalComponentTesting&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;experimentalFetchPolyfill&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;testFiles&quot;</span>: <span class="string">&quot;**/*cy-spec.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;componentFolder&quot;</span>: <span class="string">&quot;src&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The project uses <a href>react-scripts</a> to run the application, thus we should point Cypress to bundle specs using the same settings as the application.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-react-unit-test/plugins/react-scripts&#x27;</span>)(on, config);</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Finally, we need to load the <code>@testing-library/cypress</code> from the Cypress support file - this will set up the querying commands like <code>cy.findByText</code> we will use in our tests.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/bahmutov/cypress-react-unit-test#install</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-react-unit-test/support&#x27;</span>);</span><br><span class="line"><span class="comment">// https://testing-library.com/docs/cypress-testing-library/intro</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;@testing-library/cypress/add-commands&#x27;</span>);</span><br></pre></td></tr></table></figure><p>I like having component and unit tests close to the source files, thus our tests will live in the <code>src/components/__tests__</code> folder. There are Jest + RTL spec files there already; they use suffix <code>.spec.js</code>, so I will give Cypress component spec files <code>.cy-spec.js</code> suffix.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">src/components/</span><br><span class="line">  __tests__/</span><br><span class="line">    # Jest + RTL test files</span><br><span class="line">    ExpandCollapse.spec.js</span><br><span class="line">    Hello.spec.js</span><br><span class="line">    Login.spec.js</span><br><span class="line">    Pizza.spec.js</span><br><span class="line">    RemotePizza_*.spec.js</span><br><span class="line">    # Cypress + CTL test files</span><br><span class="line">    ExpandCollapse.cy-spec.js</span><br><span class="line">    Hello.cy-spec.js</span><br><span class="line">    Login.cy-spec.js</span><br><span class="line">    Pizza.cy-spec.js</span><br><span class="line">    RemotePizza.cy-spec.js</span><br><span class="line"></span><br><span class="line">  # component source files</span><br><span class="line">  ExpandCollapse.js</span><br><span class="line">  Login.js</span><br><span class="line">  Pizza.js</span><br><span class="line">  RemotePizza.js</span><br></pre></td></tr></table></figure><p>To limit Jest to only run <code>__tests_/*.spec.js</code> files we can add the following to the <code>package.json</code> file</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;jest&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;testMatch&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;**/__tests__/**/*.spec.js&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are several <code>RemotePizza_*.spec.js</code> Jest files showing the different ways of dealing with the network calls. We will look at them later; dealing with method stubbing and network control is one of the nicer Cypress features. For now, let&#39;s start with &quot;Hello World&quot; example.</p><h2><span id="hello-world">Hello World</span></h2><p>We can start by inspecting a Jest + RTL spec file <code>Hello.spec.js</code> - it does not even have a corresponding component source file, since it renders an inline JSX.</p><figure class="highlight js"><figcaption><span>src/components/__tests__/Hello.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&#x27;@testing-library/react&#x27;</span>;</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;hello world&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; getByText &#125; = render(<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello Jest!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>);</span><br><span class="line">  expect(getByText(<span class="string">&#x27;Hello Jest!&#x27;</span>)).toBeTruthy();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The same test but using <code>cypress-react-unit-test</code> replaces <code>render</code> with <code>mount</code> and synchronous calls like <code>render</code>, <code>getByText</code> with implicitly <em>asynchronous</em> commands.</p><figure class="highlight js"><figcaption><span>src/components/__tests__/Hello.cy-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-react-unit-test&#x27;</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;hello world&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello Jest!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>);</span><br><span class="line">  cy.findByText(<span class="string">&#x27;Hello Jest!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> In @testing-library/cypress v6 synchronous commands like <code>getBy*</code> were removed in favor of asynchronous commands like <code>findBy*</code></p><p>Open Cypress and click the spec filename</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx cypress open</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn cypress open</span></span><br></pre></td></tr></table></figure><p><img src="/blog/images/test-interface/click-test.png" alt="Click on the spec filename"></p><p>The component is mounted and shows up on the right side of the browser. The commands from the test <code>mount</code> and <code>findByText</code> are shown in the Command Log on the left.</p><p><img src="/blog/images/test-interface/hello-test.png" alt="Hello world test"></p><p>The Command Log is magical. This is where you can time travel and get more information about every command by clicking on it. Open the DevTools to see more information - because this is a real browser and real DOM elements.</p><p><img src="/blog/images/test-interface/hello-test-devtools.gif" alt="Inspecting the results of command cy.findByText"></p><p>You can see how <code>cy.findByText</code> command searched the document to find the element. Because this is a real DOM node, it is highlighted on the right automatically as you hover over its reference.</p><p><strong>Tip:</strong> you see the <code>&lt;Unknown ...&gt;</code> in the Command Log for the <code>mount</code> command - this is because the component has no JSX name. In majority of cases you would see the JSX name because there would be a function name or component class name:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;hello world component&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> HelloWorld = <span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello Jest!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">HelloWorld</span> /&gt;</span></span>);</span><br><span class="line">  cy.findByText(<span class="string">&#x27;Hello Jest!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/test-interface/name.png" alt="Component name displayed in the Command Log"></p><p><strong>Tip 2:</strong> Cypress has built-in <a href="https://on.cypress.io/contains">.contains</a> command that searches by text or regular expression. Thus the above test could be written as</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;hello world component&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> HelloWorld = <span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello Jest!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">HelloWorld</span> /&gt;</span></span>);</span><br><span class="line">  cy.contains(<span class="string">&#x27;Hello Jest!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Just like <code>cy.findTextBy</code>, if the text does not appear in the DOM within 4 seconds, the <code>cy.contains</code> command fails.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;fails if text is not found&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> HelloWorld = <span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello Jest!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">HelloWorld</span> /&gt;</span></span>);</span><br><span class="line">  cy.contains(<span class="string">&#x27;Hello Mocha!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/test-interface/not-found.gif" alt="Command fails after retrying for four seconds"></p><p>We can shorten the retry time globally or per command if we know that our application updates faster.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;fails if text is not found&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> HelloWorld = <span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello Jest!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">HelloWorld</span> /&gt;</span></span>);</span><br><span class="line">  cy.contains(<span class="string">&#x27;Hello Mocha!&#x27;</span>, &#123;<span class="attr">timeout</span>: <span class="number">200</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/test-interface/not-found-200.gif" alt="Command fails after retrying for 200 milliseconds"></p><p>The test still fails searching for the text that is not there, but now it fails after retrying for only 200ms. Cypress test runner has the built-in <a href="https://on.cypress.io/retry-ability">retry-ability</a> which allows the tests to be less flaky, and allows us to write tests where every command is asynchronous, even if the test code looks &quot;simple&quot;. This is well shown in the next spec file testing the <code>ExpandCollapse.js</code> component.</p><h2><span id="expandcollapse">ExpandCollapse</span></h2><p>The original Jest component test is below. It renders the component, clicks on the button and checks if the children elements are shown. Then it clicks on the button again and asserts the children elements are hidden.</p><figure class="highlight js"><figcaption><span>src/components/__tests__/ExpandCollapse.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render, fireEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;@testing-library/react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ExpandCollapse <span class="keyword">from</span> <span class="string">&#x27;../ExpandCollapse&#x27;</span>;</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;button expands and collapses the content&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> children = <span class="string">&#x27;Hello world&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; getByRole, queryByText &#125; = render(</span><br><span class="line">    &lt;ExpandCollapse excerpt=<span class="string">&quot;Information about dogs&quot;</span>&gt;&#123;children&#125;&lt;/ExpandCollapse&gt;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  expect(queryByText(children)).not.toBeTruthy();</span><br><span class="line"></span><br><span class="line">  fireEvent.click(getByRole(<span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">name</span>: <span class="regexp">/expand/i</span> &#125;));</span><br><span class="line"></span><br><span class="line">  expect(queryByText(children)).toBeTruthy();</span><br><span class="line"></span><br><span class="line">  fireEvent.click(getByRole(<span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">name</span>: <span class="regexp">/collapse/i</span> &#125;));</span><br><span class="line"></span><br><span class="line">  expect(queryByText(children)).not.toBeTruthy();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The test is synchronous - every action like firing the click event MUST be handled by the component synchronously in order for the test to work. For example, the component has the following logic to re-render on click:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;button</span><br><span class="line">  aria-expanded=&#123;isExpanded ? <span class="string">&#x27;true&#x27;</span> : <span class="string">&#x27;false&#x27;</span>&#125;</span><br><span class="line">  onClick=&#123;<span class="function">() =&gt;</span> setExpanded(!isExpanded)&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>Later we will break the above test by introducing <code>setTimeout</code> into <code>onClick</code> handler, breaking the test. But first let&#39;s see the equivalent Cypress spec file.</p><figure class="highlight js"><figcaption><span>src/components/__tests__/ExpandCollapse.cy-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ExpandCollapse <span class="keyword">from</span> <span class="string">&#x27;../ExpandCollapse&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-react-unit-test&#x27;</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;button expands and collapses the content&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> children = <span class="string">&#x27;Hello world&#x27;</span>;</span><br><span class="line">  mount(</span><br><span class="line">    &lt;ExpandCollapse excerpt=<span class="string">&quot;Information about dogs&quot;</span>&gt;&#123;children&#125;&lt;/ExpandCollapse&gt;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  cy.findByText(children).should(<span class="string">&#x27;not.exist&#x27;</span>);</span><br><span class="line">  cy.findByRole(<span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">name</span>: <span class="regexp">/expand/i</span> &#125;).click();</span><br><span class="line">  cy.findByText(children); <span class="comment">// should exist assertion is built-in</span></span><br><span class="line">  cy.findByRole(<span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">name</span>: <span class="regexp">/collapse/i</span> &#125;).click();</span><br><span class="line">  cy.findByText(children).should(<span class="string">&#x27;not.exist&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The test looks almost exactly the same, and very similar to the <code>HelloWorld</code> spec.</p><ul><li>we use <code>cy.findByText</code> and <code>cy.findByRole</code> commands to find the elements to test</li><li>we can add an assertion to &quot;flip&quot; the meaning of the command. For example, after clicking on the &quot;Collapse&quot; button, the element with text &quot;Hello world&quot; should not longer exist in the DOM</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.findByRole(<span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">name</span>: <span class="regexp">/collapse/i</span> &#125;).click();</span><br><span class="line">cy.findByText(children).should(<span class="string">&#x27;not.exist&#x27;</span>);</span><br></pre></td></tr></table></figure><p>The Cypress commands are declarative and asynchronous. The component might have the internal logic to only re-render after 1000ms when clicking the &quot;Collapse&quot; button - let&#39;s change the component to this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;button</span><br><span class="line">  aria-expanded=&#123;isExpanded ? <span class="string">&#x27;true&#x27;</span> : <span class="string">&#x27;false&#x27;</span>&#125;</span><br><span class="line">  onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> setExpanded(!isExpanded), <span class="number">1000</span>)&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>Instead of immediately updating the DOM, the component now &quot;waits&quot; 1 second. Our Jest test fails.</p><p><img src="/blog/images/test-interface/jest-fails.png" alt="Jest test fails if the component updates asynchronously"></p><p>In fact, the Jest test as written fails even if the component has a delay of just zero milliseconds: <code>setTimeout(..., 0)</code>. The Cypress tests meanwhile are happy as a clam. We can change the component update from synchronous to asynchronous, we can change the delay - it is fine, the Test Runner will retry its commands until the timeout or the DOM updates</p><p><img src="/blog/images/test-interface/expand-collapse.gif" alt="Modifying the component&#39;s delay while the test re-runs"></p><p>The component tests in Cypress are meant to interact with the component using its public API: the props and the DOM without assuming anything about its internal code.</p><h2><span id="login-form">Login form</span></h2><p>Our next example component renders a form with submit button. When the user fills the input fields and clicks the Submit button, the function <code>onSubmit</code> passed from the parent component as a prop is called.</p><figure class="highlight js"><figcaption><span>src/components/Login.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Login</span>(<span class="params">&#123; onSubmit &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [username, setUsername] = React.useState(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [password, setPassword] = React.useState(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> handleSubmit = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    onSubmit(&#123; username, password &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form onSubmit=&#123;handleSubmit&#125; data-testid=<span class="string">&quot;loginForm&quot;</span>&gt;</span><br><span class="line">      &lt;h3&gt;Login&lt;/h3&gt;</span><br><span class="line">      &lt;label&gt;</span><br><span class="line">        Username</span><br><span class="line">        &lt;input</span><br><span class="line">          name=<span class="string">&quot;username&quot;</span></span><br><span class="line">          value=&#123;username&#125;</span><br><span class="line">          onChange=&#123;<span class="function"><span class="params">event</span> =&gt;</span> setUsername(event.target.value)&#125;</span><br><span class="line">          data-testid=<span class="string">&quot;loginForm-username&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/label&gt;</span><br><span class="line">      &lt;label&gt;</span><br><span class="line">        Password</span><br><span class="line">        &lt;input</span><br><span class="line">          name=<span class="string">&quot;password&quot;</span></span><br><span class="line">          type=<span class="string">&quot;password&quot;</span></span><br><span class="line">          value=&#123;password&#125;</span><br><span class="line">          onChange=&#123;<span class="function"><span class="params">event</span> =&gt;</span> setPassword(event.target.value)&#125;</span><br><span class="line">          data-testid=<span class="string">&quot;loginForm-password&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/label&gt;</span><br><span class="line">      &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;Log <span class="keyword">in</span>&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The Cypress test is below; we create a stub function using the built-in <a href="https://on.cypress.io/stub">cy.stub</a> command. The stubs are reset automatically before each test, thus we don&#39;t need to worry about resetting them ourselves.</p><figure class="highlight js"><figcaption><span>src/components/__tests__/Login.cy-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;../Login&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-react-unit-test&#x27;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;form&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">&#x27;submits username and password using testing-library&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> username = <span class="string">&#x27;me&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> password = <span class="string">&#x27;please&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> onSubmit = cy.stub();</span><br><span class="line">    mount(<span class="xml"><span class="tag">&lt;<span class="name">Login</span> <span class="attr">onSubmit</span>=<span class="string">&#123;onSubmit&#125;</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">    cy.findByLabelText(<span class="regexp">/username/i</span>).type(username);</span><br><span class="line">    cy.findByLabelText(<span class="regexp">/password/i</span>).type(password);</span><br><span class="line">    cy.findByRole(<span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">name</span>: <span class="regexp">/log in/i</span> &#125;)</span><br><span class="line">      .click()</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// use explicit assertion using sinon-chai matchers</span></span><br><span class="line">        <span class="comment">/* eslint-disable-next-line no-unused-expressions */</span></span><br><span class="line">        expect(onSubmit).to.be.calledOnce;</span><br><span class="line">        expect(onSubmit).to.be.calledWith(&#123;</span><br><span class="line">          username,</span><br><span class="line">          password,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/test-interface/login.gif" alt="Login test"></p><p>The test passes - our component does call the passed <code>onSubmit</code> prop with the password and the username object.</p><p><strong>Tip:</strong> Cypress takes a video of the entire test run and screenshot images on test failures by default, you probably want to keep the sensitive data like the password out of the Command Log. Read the blog post <a href="../keep-passwords-secret-in-e2e-tests/">Keep passwords secret in E2E tests</a> to learn how.</p><h3><span id="bdd-assertions">BDD assertions</span></h3><p>The assertion block using <code>.then</code> that checks the function stub gives away the asynchronous nature of the test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.findByRole(<span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">name</span>: <span class="regexp">/log in/i</span> &#125;)</span><br><span class="line">  .click()</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// use explicit assertion using sinon-chai matchers</span></span><br><span class="line">    <span class="comment">/* eslint-disable-next-line no-unused-expressions */</span></span><br><span class="line">    expect(onSubmit).to.be.calledOnce;</span><br><span class="line">    expect(onSubmit).to.be.calledWith(&#123;</span><br><span class="line">      username,</span><br><span class="line">      password,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>We need this <code>.then</code> block to run the synchronous code <code>expect(onSubmit)...</code> assertions <em>after</em> the <code>click()</code> command. We can avoid using <code>.then</code> by giving the stub an alias using <a href="https://on.cypress.io/as">.as</a> command. Later we can retrieve the stub using this alias and use <a href="https://on.cypress.io/assertions">BDD assertions</a>. The relevant changes in the test are below:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a stub and save under an alias</span></span><br><span class="line">mount(<span class="xml"><span class="tag">&lt;<span class="name">Login</span> <span class="attr">onSubmit</span>=<span class="string">&#123;cy.stub().as(</span>&#x27;<span class="attr">submit</span>&#x27;)&#125; /&gt;</span></span>);</span><br><span class="line">...</span><br><span class="line">cy.findByRole(<span class="string">&#x27;button&#x27;</span>, &#123;</span><br><span class="line">  name: <span class="regexp">/log in/i</span>,</span><br><span class="line">&#125;).click();</span><br><span class="line"></span><br><span class="line">cy.get(<span class="string">&#x27;@submit&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;be.calledOnce&#x27;</span>)</span><br><span class="line">  <span class="comment">// .and is an alias to .should</span></span><br><span class="line">  .and(<span class="string">&#x27;calledWith&#x27;</span>, &#123; username, password &#125;);</span><br></pre></td></tr></table></figure><p>The test passes and you can see the alias in the Command Log when the stub is called.</p><p><img src="/blog/images/test-interface/stub-alias.png" alt="Stub alias shows when the function was called"></p><p>Cypress <a href="https://on.cypress.io/stubs-spies-and-clocks">stubs and spies</a> are built on top of the powerful <a href="https://sinonjs.org/">Sinon.js</a> library, and Cypress includes <a href="https://on.cypress.io/assertions#Sinon-Chai">Sinon-Chai</a> assertion matchers. These assertions help you confirm the methods are called precisely as intended.</p><h3><span id="selector-playground">Selector Playground</span></h3><p>When the test typed the username and the password, we used <code>@testing-library/cypress</code> command <code>findByLabelText</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.findByLabelText(<span class="regexp">/username/i</span>).type(username);</span><br><span class="line">cy.findByLabelText(<span class="regexp">/password/i</span>).type(password);</span><br></pre></td></tr></table></figure><p>The <code>Login</code> component does have <a href="https://on.cypress.io/best-practices#Selecting-Elements">good testing attributes</a> on those input fields though:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;username&quot;</span> value=&#123;username&#125;</span><br><span class="line">  onChange=&#123;<span class="function"><span class="params">event</span> =&gt;</span> setUsername(event.target.value)&#125;</span><br><span class="line">  data-testid=<span class="string">&quot;loginForm-username&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;password&quot;</span> type=<span class="string">&quot;password&quot;</span> value=&#123;password&#125;</span><br><span class="line">  onChange=&#123;<span class="function"><span class="params">event</span> =&gt;</span> setPassword(event.target.value)&#125;</span><br><span class="line">  data-testid=<span class="string">&quot;loginForm-password&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>Thus we can let Cypress pick the selector for us using <a href="https://on.cypress.io/selector-playground">Selector Playground</a>. It will inspect every DOM element we hover over to suggest the most precise Cypress built-in command to select that element. In our case, the Selector Playground suggest using the <code>data-testid</code> attribute.</p><p><img src="/blog/images/test-interface/selector-playground.gif" alt="Selector Playground suggesting command for selecting the username input field"></p><p>The copied command <code>cy.get(&#39;[data-testid=loginForm-username]&#39;)</code> can be pasted directly into the spec file, and then we need to add <code>.type()</code> command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;[data-testid=loginForm-username]&#x27;</span>).type(username)</span><br></pre></td></tr></table></figure><p>Picking selector commands using the Selector Playground is a nifty little tool for quickly writing tests.</p><h2><span id="network-requests">Network requests</span></h2><h3><span id="pizza-toppings">Pizza toppings</span></h3><p>The final component we are going to test renders the list of pizza toppings. If the list of topics is passed via a prop, the test is simple.</p><figure class="highlight js"><figcaption><span>src/components/Pizza.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Pizza</span>(<span class="params">&#123; ingredients &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h3&gt;Pizza&lt;/h3&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;ingredients.map(<span class="function"><span class="params">ingredient</span> =&gt;</span> (</span><br><span class="line">          &lt;li key=&#123;ingredient&#125;&gt;&#123;ingredient&#125;&lt;/li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>src/components/__tests__/Pizza.cy-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-react-unit-test&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Pizza <span class="keyword">from</span> <span class="string">&#x27;../Pizza&#x27;</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;contains all ingredients&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ingredients = [<span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;mozzarella&#x27;</span>, <span class="string">&#x27;pineapples&#x27;</span>];</span><br><span class="line">  <span class="comment">// component Pizza shows the passed list of toppings</span></span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">Pizza</span> <span class="attr">ingredients</span>=<span class="string">&#123;ingredients&#125;</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> ingredient <span class="keyword">of</span> ingredients) &#123;</span><br><span class="line">    cy.findByText(ingredient);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/test-interface/pizza.gif" alt="Verifying every topping is rendered"></p><h3><span id="remotepizza-with-ajax-call">RemotePizza with Ajax call</span></h3><p>But what if the component fetches the list of toppings from a remote REST API? Let&#39;s look at the <code>RemotePizza</code> component</p><figure class="highlight js"><figcaption><span>src/components/RemotePizza.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fetchIngredients <span class="keyword">as</span> defaultFetchIngredients &#125; <span class="keyword">from</span> <span class="string">&#x27;../services&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">RemotePizza</span>(<span class="params">&#123; fetchIngredients &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [ingredients, setIngredients] = React.useState([]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleCook = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fetchIngredients().then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      setIngredients(response.args.ingredients);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h3&gt;Pizza&lt;/h3&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleCook&#125;&gt;Cook&lt;/button&gt;</span><br><span class="line">      &#123;ingredients.length &gt; <span class="number">0</span> &amp;&amp; (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;ingredients.map(<span class="function">(<span class="params">ingredient</span>) =&gt;</span> (</span><br><span class="line">            &lt;li key=&#123;ingredient&#125;&gt;&#123;ingredient&#125;&lt;/li&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RemotePizza.defaultProps = &#123;</span><br><span class="line">  fetchIngredients: <span class="function">(<span class="params">url</span>) =&gt;</span> defaultFetchIngredients(url),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Let&#39;s write component tests confirming the fetched pizza toppings are displayed correctly. We can take several approaches to this.</p><h3><span id="1-dependency-injection">1. Dependency injection</span></h3><p>The component allows passing the fetcher function via a prop. Thus we can pass a stub like before</p><figure class="highlight js"><figcaption><span>src/components/__tests__/RemotePizza.cy-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> RemotePizza <span class="keyword">from</span> <span class="string">&#x27;../RemotePizza&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-react-unit-test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ingredients = [<span class="string">&#x27;bacon&#x27;</span>, <span class="string">&#x27;tomato&#x27;</span>, <span class="string">&#x27;mozzarella&#x27;</span>, <span class="string">&#x27;pineapples&#x27;</span>];</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;RemotePizza&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;stubs via prop (di)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchIngredients = cy.stub().resolves(&#123; <span class="attr">args</span>: &#123; ingredients &#125; &#125;);</span><br><span class="line">    mount(<span class="xml"><span class="tag">&lt;<span class="name">RemotePizza</span> <span class="attr">fetchIngredients</span>=<span class="string">&#123;fetchIngredients&#125;</span> /&gt;</span></span>);</span><br><span class="line">    cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="regexp">/cook/i</span>).click();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> ingredient <span class="keyword">of</span> ingredients) &#123;</span><br><span class="line">      cy.contains(ingredient);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/test-interface/remote-pizza-di.png" alt="Passing fetch stub as a prop"></p><h3><span id="2-dependency-injection-with-delay">2. Dependency injection with delay</span></h3><p>How does our component behave when the remote server responds after a delay? Let&#39;s pass a stub that resolves after one second delay using the <a href="http://bluebirdjs.com/docs/api-reference.html">Bluebird Promise</a> library <a href="https://on.cypress.io/bundled-tools">bundled with Cypress</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;stubs via prop (di with delay)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fetchIngredients = cy</span><br><span class="line">    .stub()</span><br><span class="line">    <span class="comment">// resolves after 1 second delay</span></span><br><span class="line">    .resolves(</span><br><span class="line">      Cypress.Promise.resolve(&#123; <span class="attr">args</span>: &#123; ingredients &#125; &#125;).delay(<span class="number">1000</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">RemotePizza</span> <span class="attr">fetchIngredients</span>=<span class="string">&#123;fetchIngredients&#125;</span> /&gt;</span></span>);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="regexp">/cook/i</span>).click();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> ingredient <span class="keyword">of</span> ingredients) &#123;</span><br><span class="line">    cy.contains(ingredient);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The test passes just fine - but it shows the need for some kind of loading indicator. Our users would not know what is happening while the toppings are being fetched.</p><p><img src="/blog/images/test-interface/pizza-delay.gif" alt="The component shows nothing while the toppings are being fetched"></p><h3><span id="3-stubbing-the-default-property">3. Stubbing the default property</span></h3><p>We can &quot;reach&quot; into the component and replace the default fetch method from our test using the <code>defaultProps</code> object exposed by the component.</p><figure class="highlight js"><figcaption><span>src/components/RemotePizza.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RemotePizza.defaultProps = &#123;</span><br><span class="line">  fetchIngredients: <span class="function">(<span class="params">url</span>) =&gt;</span> defaultFetchIngredients(url),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Our test stubs the method <code>RemotePizza.defaultProps</code></p><figure class="highlight js"><figcaption><span>src/components/__tests__/RemotePizza.cy-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;mocks method via defaultProps&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.stub(RemotePizza.defaultProps, <span class="string">&#x27;fetchIngredients&#x27;</span>).resolves(&#123;</span><br><span class="line">    args: &#123; ingredients &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">RemotePizza</span> /&gt;</span></span>);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="regexp">/cook/i</span>).click();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> ingredient <span class="keyword">of</span> ingredients) &#123;</span><br><span class="line">    cy.contains(ingredient);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/test-interface/stub-default.png" alt="Stubbing a method in the default props object"></p><h3><span id="4-mocking-named-imports">4. Mocking named imports</span></h3><p>Our <code>RemotePizza</code> component imports the default fetcher from the services module.</p><figure class="highlight js"><figcaption><span>src/components/RemotePizza.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fetchIngredients <span class="keyword">as</span> defaultFetchIngredients &#125; <span class="keyword">from</span> <span class="string">&#x27;../services&#x27;</span>;</span><br></pre></td></tr></table></figure><p>The Jest test mocked the exported function <code>fetchIngredients</code>.</p><figure class="highlight js"><figcaption><span>src/components/__tests__/RemotePizza_jestmock.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fetchIngredients &#125; <span class="keyword">from</span> <span class="string">&#x27;../../services&#x27;</span>;</span><br><span class="line"></span><br><span class="line">jest.mock(<span class="string">&#x27;../../services&#x27;</span>);</span><br><span class="line"></span><br><span class="line">afterEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  fetchIngredients.mockReset();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// during test</span></span><br><span class="line">fetchIngredients.mockResolvedValue(&#123; <span class="attr">args</span>: &#123; ingredients &#125; &#125;);</span><br></pre></td></tr></table></figure><p>In Cypress we can mock the <code>fetchIngredients</code> import using the included Sinon <a href="https://on.cypress.io/stub">cy.stub</a> just like before.</p><figure class="highlight js"><figcaption><span>src/components/__tests__/RemotePizza.cy-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// prepare for import mocking</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> services <span class="keyword">from</span> <span class="string">&#x27;../../services&#x27;</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;mocks named import from services&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.stub(services, <span class="string">&#x27;fetchIngredients&#x27;</span>).resolves(&#123; <span class="attr">args</span>: &#123; ingredients &#125; &#125;);</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">RemotePizza</span> /&gt;</span></span>);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="regexp">/cook/i</span>).click();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> ingredient <span class="keyword">of</span> ingredients) &#123;</span><br><span class="line">    cy.contains(ingredient);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>To mock a named ES6 module import, we import the entire module using wildcard syntax, which gives us an object. Then we stub the method of that object, just like we did when stubbing method <code>fetchIngredients</code> of the object <code>RemotePizza.defaultProps</code>.</p><p><img src="/blog/images/test-interface/stub-import.png" alt="Stubbing named ES6 module import"></p><p>Note that all Cypress spies and stubs created during the test are <a href="https://on.cypress.io/stubs-spies-and-clocks">reset automatically</a>, thus you do not have to reset them manually.</p><h3><span id="5-stubbing-network">5. Stubbing network</span></h3><p>The above tactics for stubbing the component&#39;s method all reached deep into its implementation. With Cypress&#39; <a href="https://on.cypress.io/network-requests">built-in network control</a> we can avoid testing the component&#39;s internals and stub the outgoing Ajax request instead.</p><figure class="highlight js"><figcaption><span>src/components/__tests__/RemotePizza.cy-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;download ingredients from internets (network mock)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.server();</span><br><span class="line">  <span class="comment">// using https://on.cypress.io/route</span></span><br><span class="line">  <span class="comment">// to stub every request to particular URL a response</span></span><br><span class="line">  cy.route(<span class="string">&#x27;https://httpbin.org/anything*&#x27;</span>, &#123; <span class="attr">args</span>: &#123; ingredients &#125; &#125;).as(</span><br><span class="line">    <span class="string">&#x27;pizza&#x27;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">RemotePizza</span> /&gt;</span></span>);</span><br><span class="line">  cy.contains(<span class="string">&#x27;button&#x27;</span>, <span class="regexp">/cook/i</span>).click();</span><br><span class="line">  cy.wait(<span class="string">&#x27;@pizza&#x27;</span>); <span class="comment">// make sure the network stub was used</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> ingredient <span class="keyword">of</span> ingredients) &#123;</span><br><span class="line">    cy.contains(ingredient);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The test passes and we can see the Ajax request information in the ROUTES table of the Command Log.</p><p><img src="/blog/images/test-interface/stub-ajax.png" alt="Stubbing Ajax network request"></p><p>We can also add a delay to the network response to simulate a slow server response:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.route(&#123;</span><br><span class="line">  url: <span class="string">&#x27;https://httpbin.org/anything*&#x27;</span>,</span><br><span class="line">  response: &#123; <span class="attr">args</span>: &#123; ingredients &#125; &#125;,</span><br><span class="line">  delay: <span class="number">1000</span>,</span><br><span class="line">&#125;).as(<span class="string">&#x27;pizza&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/test-interface/stub-ajax-delay.gif" alt="Stubbing Ajax network request with delay of 1 second"></p><p>Using <a href="https://on.cypress.io/route">cy.route</a> we can spy or stub network requests made by the component with ease.</p><h2><span id="conclusion">Conclusion</span></h2><ul><li>If you have existing Jest + React Testing Library tests you can quickly port them to run as Cypress component tests using <a href="https://github.com/bahmutov/cypress-react-unit-test">cypress-react-unit-test</a> + <a href="https://testing-library.com/docs/cypress-testing-library/intro">@testing-library/cypress</a>. The commands are identical.</li><li>Cypress <a href="https://on.cypress.io/test-runner">Test Runner</a> offers advantages over running tests in the terminal<ul><li>full browser with DevTools: Electron, Chrome, Firefox, Edge instead of its emulation</li><li>Command Log with time-traveling debugger</li><li>Selector Playground</li><li>screenshots on failure</li><li>videos of the test runs on the CI server</li></ul></li><li>Cypress test syntax is declarative, and every command runs asynchronously - you can change the implementation of your components and the tests still work correctly using the built-in automatic retries</li><li>You can control the behavior of the component by passing properties when mounting it, stubbing exposed method, mocking module imports and stubbing network calls</li></ul><p>You can fine the source code and the spec files described in this blog post in repo <a href="https://github.com/bahmutov/rtl-article-2019">rtl-article-2019</a>.</p><h2><span id="relate-blog-posts">Relate blog posts</span></h2><ul><li><a href="../my-vision-for-component-tests/">My Vision for Component Tests in Cypress</a></li><li><a href="https://itnext.io/unit-testing-react-components-with-cypress-4d4cf8cd59a0">Unit Testing React components with Cypress</a></li><li><a href="https://dev.to/bahmutov/test-react-component-with-cypress-react-unit-test-example-4d99">Test React Component with cypress-react-unit-test Example</a></li><li><a href="../tic-tac-toe-component-tests/">Tic-Tac-Toe Component Tests</a></li><li><a href="https://medium.com/@bahmutov/using-env-and-env-test-from-react-component-tests-c11aa2040bc8">Using .env and .env.test from React component tests</a></li><li><a href="../open-source-visual-testing-of-components/">Visual testing for React components using open source tools</a></li><li><a href="https://dev.to/bahmutov/12-recipes-for-testing-react-applications-using-cypress-react-unit-test-46g6">12 Recipes for testing React applications using cypress-react-unit-test</a> (compare to <a href="https://dev.to/jooforja/12-recipes-for-testing-react-applications-using-testing-library-1bh2#portal">12 Recipes for testing React applications using Testing Library</a>)</li><li><a href="https://medium.com/swlh/cypress-unit-testing-react-components-with-typescript-77b38e5043b3">Cypress Unit Testing React Components With TypeScript</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-setup&quot;&gt;The setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hello-world&quot;&gt;Hello
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Why Cypress?</title>
    <link href="https://glebbahmutov.com/blog/why-cypress/"/>
    <id>https://glebbahmutov.com/blog/why-cypress/</id>
    <published>2020-07-22T04:00:00.000Z</published>
    <updated>2020-07-22T15:06:50.439Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="doing-e2e-tests-is-hard-what39s-the-point-of-even-using-cypress">Doing E2E tests is hard. What&#39;s the point of even using Cypress</span></h2><p>Yes, writing end-to-end tests is hard ... because the existing tools were built for testing static sites and could not deal well with dynamic web apps. Cypress specifically was designed to solve the testing challenges presented by modern dynamic web application, and we think Cypress solves them very well.</p><p>Read the <a href="https://on.cypress.io/key-differences">Key Differences</a> section of our documentation to understand how Cypress works, and how specifically it fits the modern web development. As far as being difficult: our users rave how writing end-to-end tests using Cypress is ... easy to learn and actually something they love!</p><p><img src="/blog/images/why-cypress/tweets2.png" alt="People love writing tests using Cypress"></p><p><img src="/blog/images/why-cypress/tweets3.png" alt="More people love writing tests using Cypress"></p><p>Search Twitter using keyword &quot;cypress.io&quot; <a href="https://twitter.com/search?q=cypress.io&amp;src=typed_query&amp;f=live">here</a> and see for yourself what people are saying.</p><h2><span id="i-can-already-write-these-types-of-tests-using-jest-and-enzyme">I can already write these types of tests using Jest and Enzyme</span></h2><p>No, you cannot.</p><p>With Cypress you get a full real browser (Electron, Chrome, Edge, Firefox) to run your tests, with all browser APIs and a way to access the underlying machinery. This is the environment your application code will execute when the users run it.</p><p>With Jest / Enzyme / Ava / Mocha / Tape / etc you can write unit tests that execute inside JavaScript DOM emulation, output results to the terminal, have some spotty access to browser API emulations, and are nothing like the real world. Even if you jump through hoops and run your Jest / ... / X tests in a real browser using something like Karma to control the browser, then you still are limited to the component tests and not running the full end-to-end tests, you are still only exercising pieces of code.</p><p>With Cypress the setup is a single command, and you are good to go:</p><ul><li>install Cypress with <code>npm i -D cypress</code></li><li>run Cypress with <code>npx cypress open</code></li><li>start writing tests</li></ul><p>That&#39;s it. You get the benefits of running inside a real browser, exercising your full web application and the servers, full DevTools, etc.</p><p>If you want to compare apples to apples, you probably want to compare <em>component tests</em> that run in Cypress with the unit tests you write in Jest / Enzyme. Cypress supports the component tests too, and <a href="../my-vision-for-component-tests/">here is my vision for them</a>. And here is what people think about Cypress tests vs Jest tests</p><p><img src="/blog/images/why-cypress/component-test.png" alt="A person has compared Cypress component test to Jest test"></p><h2><span id="full-e2e-tests-are-slow">Full E2E tests are slow</span></h2><p>The full end-to-end tests are as fast as your application is. Often Cypress is <a href="https://www.cypress.io/blog/2018/02/05/when-can-the-test-start/">faster than your application</a> and you have to slow it down. But I think personally the speed of an individual test is a misleading metric you should not optimize for. You should instead optimize for development speed and debugging speed.</p><h3><span id="development-speed">Development speed</span></h3><p>How fast can you write useful tests that exercise the full system and catch all potential sources of errors: logical code errors, configuration errors, deployment errors, visual errors, accessability errors, etc? Cypress users spend only minutes writing tests that go through the user stories, <a href="https://on.cypress.io/code-coverage">covering a lot of code</a> with every single E2E test and getting the confidence the entire system works.</p><h3><span id="debugging-speed">Debugging speed</span></h3><p>If there is a test failure, how fast can you determine the source of the error and fix it? With Cypress tests running on CI you have screenshots and videos, stack traces, history of test runs - you can pretty much compare the failed run to the last successful run to <a href="https://www.cypress.io/blog/2020/06/25/when-can-the-test-log-out/">understand why the test has failed</a>.</p><p>If the test fails while you are running Cypress tests locally using <code>cypress open</code>, you have so many options for <a href="https://on.cypress.io/debugging">debugging the test</a>, and you have the full browser DevTools at your disposal. You have time traveling debugger, <a href="https://www.cypress.io/blog/2020/05/20/faster-debugging-with-test-failure-code-frames-in-cypress-4-6/">code frames</a>, custom commands, etc.</p><h3><span id="continuous-integration-speed">Continuous Integration speed</span></h3><p>I agree that CI tests should finish quickly. The way to achieve short total CI time is to run end-to-end tests in parallel. You can use such <a href="https://on.cypress.io/parallelization">parallelization</a> via Cypress Dashboard, <a href="https://github.com/kensho/multi-cypress">roll your own</a>, or use CI-specific method of splitting tests. In &quot;normal&quot; CI runs, with dependencies cached, I find the E2E test run time under 3-5 minutes acceptable. And if I need to speed them up, with parallelization I can spin more CI boxes to cut the time further.</p><h2><span id="more-info">More info</span></h2><p>Still skeptical? I understand. Well, try it yourself. Cypress is free and open source and has excellent documentation. Try writing a test, and see if you change your mind.</p><ul><li><a href="../should-i-start-with-cypress/">Should I start with Cypress?</a></li><li><a href="https://on.cypress.io/writing-your-first-test">Writing your first test</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;doing-e2e-tests-is-hard-what39s-the-point-of-even-using-cypress&quot;&gt;Doing E2E tests is hard. What&amp;#39;s the point of even using C
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How to Testify About Environment at a Public Hearing</title>
    <link href="https://glebbahmutov.com/blog/how-to-testify/"/>
    <id>https://glebbahmutov.com/blog/how-to-testify/</id>
    <published>2020-07-11T04:00:00.000Z</published>
    <updated>2020-07-11T20:33:19.495Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I have testified at several meetings in favor of stronger laws and policies to address <a href="../climate-emergency/">the climate catastrophe</a>. I believe the more people testify in favor, the more vocal support for these policies will be, and the sooner we will get these policies passed. Only an overwhelming number of testimonies can overwhelm an inertia to keep the status quo, and we don&#39;t have time to keep the things the way they are now - the planet <a href="https://medium.com/@JKSteinberger/cogs-in-the-climate-machine-167cf16750dd">is dying</a>.</p><p>If you care about the planet, your life, and the generation after us, you have to say so. Here is how to testify during a hearing.</p><ol><li><p>Find about the hearings. I usually get these announcements from a local environmental organization like <a href="https://350mass.org/">350mass.org</a>. Join one or several organizations from the list below and will know about things you can do each month</p><ul><li><a href="https://350mass.org/">350mass.org</a></li><li><a href="https://citizensclimatelobby.org/">citizensclimatelobby.org</a></li><li><a href="https://www.sunrisemovement.org/">sunrisemovement.org</a></li><li><a href="https://www.sierraclub.org/">sierraclub.org</a></li></ul></li><li><p>Research the subject of the hearing. Attend a webinar, read the relevant info online, etc. Usually, the organization announcing the public hearing will have this information collected in one place. For example, before testifying about offshore wind power I have watched the informational webinar and read the info online at <a href="https://www.boem.gov/Vineyard-Wind-SEIS-Virtual-Meeting">https://www.boem.gov/Vineyard-Wind-SEIS-Virtual-Meeting</a>.</p></li><li><p>Register to speak at the hearing. The hearings are conducted online because of the pandemic, so please register to attend / speak online.</p></li><li><p>Find out the time limit, most hearings allow up to 3 - 5 minutes per testimony.</p></li><li><p>Write your testimony down. I prefer writing how a mixture of personal story and scientific facts. I usually write 3-4 short paragraphs total, see examples below.</p></li><li><p>Practice reading your testimony a couple of times to get the timing right.</p></li><li><p>Join the hearing at the scheduled date, sometimes you need to use a special link so you are in the speaking queue.</p></li><li><p>Read your testimony when called.</p></li><li><p>Send the written testimony if the hearing allows submitting it in writing too!</p></li><li><p>Share your testimony with friends, on social media, and on your website, if you have one. Seeing you speak up will prompt more people to raise their voices too.</p></li></ol><p>That&#39;s it - it is a lot less scarry that you might think, and speaking up is very important.</p><h2><span id="questions-and-answers">Questions and answers</span></h2><ul><li><em>Isn&#39;t my testimony useless, don&#39;t they listen to lobbyists only?</em></li></ul><p>Yes, money talks. But money has to overcome obstacles like your testimony, and the more obstacles there are, the more money you need to lobby. Thus at some threshold, the vocal support wins over the lobbyists. Especially at the local and state levels, some policies do NOT clash head to head with monied opposition. For example, expanding the safer cycling streets in your town needs your vocal support to overcome the inertia, not moneyed lobbying.</p><ul><li><em>What if people judge me, or harass me? I do not want my name made public</em></li></ul><p>If you want your government to act, you have to take a stand and say so publicly. You need to at least state your name and where you live to testify, from what I have seen. A good thing about testifying in favor of environment causes, is that it actually looks good for you. Who doesn&#39;t want to save the planet? Who doesn&#39;t like trees or locally-grown organic food?</p><ul><li><em>Can I testify if I am not an expert?</em></li></ul><p>You are testifying about how you think the proposal would affect <em>you and people around you</em>, in my opinion. Research the proposal (item #2 on the list) and you will be fine. It will not be embarrassing, I guarantee it. Listen to a couple of hearings - you will see people from all walks of life speaking about the subject as they perceive it.</p><p>What is more embarrassing in my opinion are paid-for shills for moneyed interests. I have seen &quot;think tanks&quot; and politicians spew numbers in support of their positions (usually conveniently against doing anything about the climate crisis), and these numbers were for sure pulled out of their asses, I thought. You will do just fine.</p><h2><span id="examples">Examples</span></h2><p>Below are a few testimonies I have given recently. I have changed the text to remove my personal information.</p><ul><li><a href="../gas-ban-testimony/">My testimony in support of banning gas infrastructure in new construction in Cambridge, MA</a></li></ul><h3><span id="safe-bicycle-network-plan-in-cambridge">Safe bicycle network plan in Cambridge</span></h3><p>I am Gleb Bahmutov from &quot;street name&quot; and I ride my bicycle from Huron avenue to Central square to work. My wife rides her electrical scooter to work in &quot;place name&quot; and my son rides his bicycle to &quot;school name&quot; and to &quot;park name&quot;.</p><p>Cycling is the most convenient and fastest way to get around Cambridge, so why more people are not doing it? In my conversation with my family and with other people, the number one concern is safety. Nothing else matters it seems, but being afraid of getting hit by a car is what stops people from taking advantage of this transportation mode.</p><p>During the Corona shutdown we felt so much safer riding around, it was unbelievable. Now the cars are back, and I am afraid for my son&#39;s life again. The recent shared street initiative helps - I love riding Garden and Harvard streets, and I see many more people now with kids riding now. But we got to do better. And we got to protect people on many more streets.</p><p>Which brings me to the timeframe. Protecting more streets is nice. But it takes only a second for a car to suddenly turn without looking and to hit a bicyclist. So why does it take 5 years to offer these basic safety protections? Will this ordinance have teeth and be implemented month by month? Or will we wait another five years while nothing would be done?</p><p>Thank you.</p><h3><span id="building-offshore-wind-farm-of-the-coast-of-massachusetts">Building offshore wind farm of the coast of Massachusetts</span></h3><p>Hello, this is Gleb Bahmutov B-A-H-M-U-T-O-V from Boston, thank you for taking my call.</p><p>I am fully 100% in favor of offshore wind energy. If we want to avoid catastrophic climate collapse, we must stop burning fossil fuels today. Offshore wind gives us an immediate and technologically possible solution.</p><p>But I want to quickly address concerns about fishing. Some people say &quot;what about fishing, will all these new windmills cut into the fishing area, etc&quot;. According to  scientists, the ocean is currently doing two things for us in regards to the climate. First, because of the water&#39;s properties, the Earth&#39;s oceans absorb 90-95% of the heat we accumulate, saving us, the land dwellers from being fried from excessive heat. Every second the ocean&#39;s waters receive energy equivalent of 3 to 5 atomic bombs. Every second.</p><p>Second, the ocean&#39;s water dissolves a lot of the atmospheric carbon, &quot;burying&quot; it so to speak. Only this carbon is still there, slowly turning the water acidic. According to science the Great Barrier reef in Australia is dying due to warmer, acidic waters that literally dissolve marine microorganisms. Within 10 years this reef might die completely taking about 1/3 of all marine species with it.</p><p>The coast of New England is no different. Warmer waters are already affecting the marine life, and if this process continues, our entire fishing ecosystem might collapse. It is not the question of &quot;how will offshore wind affect the fishing industry?&quot;. The question we have to ask ourselves is &quot;will we build the offshore wind fast enough to prevent the marine life collapse going on right now?&quot;</p><p>Thank you.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I have testified at several meetings in favor of stronger laws and policies to address &lt;a href=&quot;../climate-emergency/&quot;&gt;the clima
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/tags/climate/"/>
    
  </entry>
  
  <entry>
    <title>Write Your First Vue Component Test</title>
    <link href="https://glebbahmutov.com/blog/first-vue-component-test/"/>
    <id>https://glebbahmutov.com/blog/first-vue-component-test/</id>
    <published>2020-07-02T04:00:00.000Z</published>
    <updated>2020-07-02T16:44:07.192Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#application">Application</a></li><li><a href="#end-to-end-tests">End-to-end tests</a></li><li><a href="#components">Components</a></li><li><a href="#component-tests">Component tests</a></li><li><a href="#app-component">App component</a></li><li><a href="#next-steps">Next steps</a></li></ul><!-- tocstop --><p>Let&#39;s create a new Vue application and write a component test using <a href="https://www.cypress.io">Cypress</a> + <a href="https://github.com/bahmutov/cypress-vue-unit-test">cypress-vue-unit-test</a> combo. We will use <a href="https://cli.vuejs.org/">Vue CLI v3</a> to scaffold our application and you can find the complete application in <a href="https://github.com/bahmutov/vue-component-test-example">bahmutov/vue-component-test-example</a> repository.</p><h2><span id="application">Application</span></h2><ol><li>First install the Vue CLI globally</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cli.vuejs.org&#x2F;</span><br></pre></td></tr></table></figure><ol start="2"><li>Create a new application</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vue create vue-component-test-example</span><br><span class="line">Vue CLI v4.4.6</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>I picked the &quot;default&quot; option to use Babel and ESLint. The folder contains the scaffolded files</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls -a</span><br><span class="line">..gitignorenode_modulespublic</span><br><span class="line">..README.mdpackage-lock.jsonsrc</span><br><span class="line">.gitbabel.config.jspackage.json</span><br></pre></td></tr></table></figure><ol start="3"><li>We can start the application and see it run at <code>localhost:8080</code> url</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run serve</span><br></pre></td></tr></table></figure><p><img src="/blog/images/vue-unit/vue-app.png" alt="The application running at localhost:8080"></p><h2><span id="end-to-end-tests">End-to-end tests</span></h2><p>We definitely recommend ensuring your web application&#39;s quality by writing end-to-end tests. With <a href="https://www.cypress.io">Cypress</a> E2E tests are:</p><ul><li>fast to write and run</li><li>effective at covering lots of code</li><li>can perform visual testing via 3rd-party plugins</li></ul><p>You can write E2E tests for Vue applications by using the official <a href="https://cli.vuejs.org/core-plugins/e2e-cypress.html">@vue/cli-plugin-e2e-cypress</a> plugin. And I suggest reading one of the many blog posts on this topic, like <a href="https://medium.com/js-dojo/end-to-end-testing-a-vuejs-hackernews-clone-23b9415fd5c5">End-To-End Testing A VueJS HackerNews Clone</a>. In this blog post I want to show how to move <a href="https://www.youtube.com/watch?v=5FnalKRjpZk&amp;amp=&amp;t=0s&amp;amp=&amp;index=5">down one level of the testing pyramid</a> to perform <em>component testing</em>.</p><h2><span id="components">Components</span></h2><p>In our current application the <code>App.vue</code> uses <code>HelloWorld.vue</code> component.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img alt&#x3D;&quot;Vue logo&quot; src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;HelloWorld msg&#x3D;&quot;Welcome to Your Vue.js App&quot;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &#39;.&#x2F;components&#x2F;HelloWorld.vue&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>The logic inside a component might become pretty complex. To guarantee the component still works as expected as the project becomes more complex, we need tests - and the closer the tests are to the way our users are going to use in the browser, the better. In this blog post I will show how to write realistic component tests that run in a true browser using <a href="https://github.com/bahmutov/cypress-vue-unit-test">cypress-vue-unit-test</a>.</p><h2><span id="component-tests">Component tests</span></h2><p>Let&#39;s update our project to be able to write Cypress component tests.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vue add cypress-experimental</span></span><br><span class="line"></span><br><span class="line">📦  Installing vue-cli-plugin-cypress-experimental...</span><br><span class="line"></span><br><span class="line">+ vue-cli-plugin-cypress-experimental@1.0.0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The <a href="https://github.com/JessicaSachs/vue-cli-plugin-cypress-experimental">vue-cli-plugin-cypress-experimental</a> scaffolds an example component test and adds <a href="https://github.com/cypress-io/cypress">Cypress</a> and <a href="https://github.com/bahmutov/cypress-vue-unit-test">cypress-vue-unit-test</a> dev dependencies.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm ls cypress cypress-vue-unit-test</span></span><br><span class="line">vue-component-test-example@0.1.0 /Users/gleb/git/vue-component-test-example</span><br><span class="line">├── cypress@4.9.0</span><br><span class="line">└── cypress-vue-unit-test@3.0.0</span><br></pre></td></tr></table></figure><p>You can see the component testing enabled in <code>cypress.json</code> file</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;experimentalComponentTesting&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;componentFolder&quot;</span>: <span class="string">&quot;tests/components&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s write a component test for <code>HelloWorld.vue</code> component to make sure it correctly renders the property <code>msg</code>.</p><figure class="highlight js"><figcaption><span>tests/components/HelloWorld.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-vue-unit-test&#x27;</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;../../src/components/HelloWorld.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;HelloWorld&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;Works awesomely&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// mount command comes from</span></span><br><span class="line">    <span class="comment">// https://github.com/bahmutov/cypress-vue-unit-test</span></span><br><span class="line">    mount(HelloWorld, &#123; <span class="attr">propsData</span>: &#123;<span class="attr">msg</span>: <span class="string">&#x27;Hello, Cypress!&#x27;</span>&#125; &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// now we can use any Cypress command to interact with the component</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/api</span></span><br><span class="line">    cy.contains(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Hello, Cypress!&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the test we import the component and mount it using a function from <code>cypress-vue-unit-test</code>. We pass props using <code>propsData</code> option and then the component becomes a full-fledged web application! Let&#39;s see this in action.</p><p>We can see the new script <code>test:components</code> added by <a href="https://github.com/JessicaSachs/vue-cli-plugin-cypress-experimental">vue-cli-plugin-cypress-experimental</a>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run</span></span><br><span class="line">Scripts available in vue-component-test-example via `npm run-script`:</span><br><span class="line">  serve</span><br><span class="line">    vue-cli-service serve</span><br><span class="line">  build</span><br><span class="line">    vue-cli-service build</span><br><span class="line">  lint</span><br><span class="line">    vue-cli-service lint</span><br><span class="line">  test:components</span><br><span class="line">    vue-cli-service test:components</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm run <span class="built_in">test</span>:components</span></span><br></pre></td></tr></table></figure><p>With the above command we have started Cypress. We see a couple of component spec files in the window that opens</p><p><img src="/blog/images/vue-unit/desktop-gui.png" alt="The component tests list"></p><p><strong>Tip:</strong> use browser drop down to select a different browser amongst the browsers detected on your machine.</p><p><img src="/blog/images/vue-unit/desktop-gui-browsers.png" alt="Cypress allows to run tests using any detected supported browser"></p><p>Click on &quot;HelloWorld.spec.js&quot; file to start the test. The test shows the component running inside the browser.</p><p><img src="/blog/images/vue-unit/passing-test.png" alt="Passing HelloWorld.spec test"></p><p>We can confirm the <code>msg</code> prop was rendered in the right H1 element by hovering over the command in the Command Log on the left. The found element is highlighted in the DOM snapshot on the right.</p><p><img src="/blog/images/vue-unit/contains.png" alt="The cy.contains command finds the expected element and text"></p><p>As you edit the spec file and save it, the tests automatically re-run.</p><p><img src="/blog/images/vue-unit/update-test.gif" alt="Re-running the test on spec file save"></p><p>In fact, if you change the spec or any file it imports, even indirectly, the tests will re-run. For example, let&#39;s change <code>HelloWorld.vue</code> to show the message in H2 element instead of H1.</p><p><img src="/blog/images/vue-unit/change-h2.gif" alt="Changing the component and updating the test"></p><p>In the movie above we jumped to the failing test command using <a href="https://www.cypress.io/blog/2020/05/20/faster-debugging-with-test-failure-code-frames-in-cypress-4-6/">Cypress Test Error Frames</a>. Clicking on the error location opens my text editor at the right command.</p><h2><span id="app-component">App component</span></h2><p>Everything in a modern Vue application is built out of components. The <code>src/App.vue</code> is a component too! Let&#39;s write a test to ensure there are essential links.</p><figure class="highlight js"><figcaption><span>tests/components/App.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-vue-unit-test&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;../../src/App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;App&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;works&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mount(App)</span><br><span class="line">    cy.contains(<span class="string">&#x27;h3&#x27;</span>, <span class="string">&#x27;Essential Links&#x27;</span>)</span><br><span class="line">      .next().find(<span class="string">&#x27;li&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The correct links are found by first finding the <code>h3</code> element, then its <a href="https://on.cypress.io/next">next sibling</a> and then finding all <code>li</code> elements under it.</p><p><img src="/blog/images/vue-unit/app-test.png" alt="App.vue component test"></p><h2><span id="next-steps">Next steps</span></h2><p>We are very excited about component tests running inside a real browser with full <a href="https://on.cypress.io/api">Cypress API</a>, built-in <a href="https://github.com/bahmutov/cypress-vue-unit-test#code-coverage">code coverage</a>, huge list of <a href="https://on.cypress.io/plugins">plugins</a> for <a href="https://on.cypress.io/visual-testing">visual testing</a> and other tasks, Dashboard support, etc. Give <a href="https://github.com/bahmutov/cypress-vue-unit-test">cypress-vue-unit-test</a> a try, open any issues found, give us feedback!</p><p>Happy Vue Testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#application&quot;&gt;Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#end-to-end-tests&quot;&gt;End-to-end tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#co
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="vuejs" scheme="https://glebbahmutov.com/blog/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Stop The Money Pipeline</title>
    <link href="https://glebbahmutov.com/blog/stop-the-money-pipeline/"/>
    <id>https://glebbahmutov.com/blog/stop-the-money-pipeline/</id>
    <published>2020-06-17T04:00:00.000Z</published>
    <updated>2020-07-01T20:39:46.364Z</updated>
    
    <content type="html"><![CDATA[<p>Maybe huge banks are financing fossil fuels and thus the planet&#39;s destruction. You can read the entire list at <a href="https://www.ran.org/">Rainforest Action Network</a> website. They publish <a href="https://www.ran.org/issue/banks_and_climate/">banking report</a> every year, for example here <a href="https://www.ran.org/wp-content/uploads/2020/05/BOCC__2020_Summary_vENG_spread.pdf">2020 report</a>. In summary, these banks are the worst twelve.</p><p><img src="/blog/images/banks/twelve.png" alt="Twelve worst banks financing fossil fuel projects"></p><p>Stopping these banks is a huge goal of the climate movement - see the <a href="https://www.stopthemoneypipeline.com/">https://www.stopthemoneypipeline.com/</a> for actions. In spirit of stopping the money that finance the destruction, I have switched my accounts too.</p><ol><li>I have canceled <strong>Bank of America</strong> account and went with a local <a href="https://www.watertownsavings.com/">Watertown Savings Bank</a>.</li></ol><center>  <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/i3_vlXdt-2I" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Because it is important to talk about the climate crisis, I have <a href="https://twitter.com/bahmutov/status/1257686182043037697">tweeted about it</a>, tagging the Bank of America in the tweet. I have also called them to cancel the account and listed by reason for this.</p><p><img src="/blog/images/banks/boa-tweet.png" alt="Cutting Bank of America card tweet"></p><ol start="2"><li>I have canceled my <strong>Chase</strong> credit card (that I loved). Again, I have posted the video online and told the bank my reason for canceling the account with them was their investment in fossil fuels.</li></ol><center>  <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/TaiU1xqcxp4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Screenshot of the <a href="https://twitter.com/bahmutov/status/1260702956598562816">tweet</a></p><p><img src="/blog/images/banks/chase-tweet.png" alt="Cutting Chase card tweet"></p><p>So far I have not replaced the card - I am still looking at options at <a href="https://www.greenamerica.org/better-banking/take-charge-your-card/find-responsible-credit-cards">greenamerica.org</a>.</p><ol start="3"><li>Finally, constructing fossil fuel infrastructure requires insurance. <strong>Liberty Mutual</strong> from Boston is a leader in insuring gas pipelines, oil exploration, etc. On the other hand, they were selling insurance to me for my home - insurance that is certain to become more expensive as climate breakdown increases the natural disasters. So I have switched from Liberty Mutual to <a href="travelers.com">Traveler&#39;s</a>, <a href="https://twitter.com/bahmutov/status/1268994645259882496">tweeting about it</a></li></ol><p><img src="/blog/images/banks/liberty-tweet.png" alt="Liberty Mutual tweet"></p><p>I have called Liberty Mutual to cancel the account, and told them my reason. I also told them that I will be paying 5% per year more but I would not be paying money to be used against me and my family&#39;s future.</p><blockquote><p>I invite you to vote with your money and switch to financial institutions that do not destroy the planet. There are plenty of choices!</p></blockquote><h2><span id="update-1">Update 1</span></h2><p>After this blog post I found out that Traveler&#39;s insurance also <a href="https://www.insureourfuture.us/updates/2020/6/27/ct-climate-activists-fly-plane-with-banner-through-travelers-pga-tournament">invests in fossil projects</a>. Thus I looked around and found <a href="https://www.lemonade.com">Lemonade</a> - an insurance company that will <a href="https://www.lemonade.com/blog/divest_coal/">never invest in fossil fuels</a> as noted by <a href="https://www.insureourfuture.us/updates/2019/3/4/lemonade-is-first-us-insurance-company-to-reject-fossil-fuel-investments">others</a>.</p><p>I switched my insurance to Lemonade - and I must tell you: they have an amazing web app and mobile app experience. I have never seen a better service sign up. Never ever! Every insurance parameter was easy to understand and change and the entire thing was a pleasure. Give Lemonade a try through this referral link <a href="https://lemonade.com/r/glebbahmutov">https://lemonade.com/r/glebbahmutov</a>, you will feel better because your premiums will not go towards burning our planet.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Maybe huge banks are financing fossil fuels and thus the planet&amp;#39;s destruction. You can read the entire list at &lt;a href=&quot;https://www.r
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/tags/climate/"/>
    
  </entry>
  
  <entry>
    <title>Visual testing for React components using open source tools</title>
    <link href="https://glebbahmutov.com/blog/open-source-visual-testing-of-components/"/>
    <id>https://glebbahmutov.com/blog/open-source-visual-testing-of-components/</id>
    <published>2020-06-16T04:00:00.000Z</published>
    <updated>2020-07-15T15:04:56.123Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take a look at a modern React application like this <a href="https://github.com/raravi/sudoku">Sudoku</a> game that you can play online at <a href="https://sudoku-raravi.now.sh/">https://sudoku-raravi.now.sh/</a>.</p><!-- toc --><ul><li><a href="#talks">Talks</a></li><li><a href="#sudoku-game">Sudoku game</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#numbers-component">Numbers component</a></li><li><a href="#cypress-react-unit-test">cypress-react-unit-test</a></li><li><a href="#visual-testing">Visual testing</a></li><li><a href="#controlling-the-clock">Controlling the clock</a></li><li><a href="#deterministic-board">Deterministic board</a></li><li><a href="#local-workflow">Local workflow</a></li><li><a href="#continuous-integration">Continuous Integration</a></li><li><a href="#pull-request-workflow">Pull request workflow</a></li><li><a href="#summary">Summary</a></li><li><a href="#more-info">More info</a></li></ul><!-- tocstop --><h2><span id="talks">Talks</span></h2><p>I have covered this topic in a JSNationLive 2020 presentation</p><center>  <iframe src="https://slides.com/bahmutov/i-see-what-is-going-on/embed?style=light" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></center><p>Video (20 minutes)</p><center>  <iframe width="560" height="315" src="https://www.youtube.com/embed/00BNExlJUU8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Later I have shown an expanded version of this talk at Des Moines meetup</p><center>  <iframe src="https://slides.com/bahmutov/visual-testing/embed?style=light" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe></center><p>Video (1 hour video)</p><center>  <iframe width="560" height="315" src="https://www.youtube.com/embed/gUFdU5fQs4o" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h2><span id="sudoku-game">Sudoku game</span></h2><p>The game is nicely done. There are different difficulty levels, game modes and it looks very polished.</p><iframe style="width: 100%; height: 400px" src="https://www.youtube-nocookie.com/embed/lxWEE0vDq6c" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>It is a well-designed web application with responsive styles for 3 different browser widths</p><iframe style="width: 100%; height: 400px" src="https://www.youtube-nocookie.com/embed/w00vpIEVZPQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>The application is made out of React components, which we can see in the <code>src</code> folder, or by using React DevTools. There is <code>&lt;App /&gt;</code> and <code>&lt;Game /&gt;</code> components, and lots of smaller components matching the sections of the user interface.</p><iframe style="width: 100%; height: 400px" src="https://www.youtube-nocookie.com/embed/f9sbdiAEHxs" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2><span id="implementation">Implementation</span></h2><p>Let&#39;s look at the code. <strong>Note:</strong> you can find my fork of the game at <a href="https://github.com/bahmutov/sudoku">bahmutov/sudoku</a>, which includes all code shown in this blog post.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure><p>The <code>App</code> component creates the React context object, imports the application&#39;s styles and creates the <code>Game</code> component</p><figure class="highlight js"><figcaption><span>src/App.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Game &#125; <span class="keyword">from</span> <span class="string">&#x27;./Game&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; SudokuProvider &#125; <span class="keyword">from</span> <span class="string">&#x27;./context/SudokuContext&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * App is the root React component.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;SudokuProvider&gt;</span><br><span class="line">      &lt;Game /&gt;</span><br><span class="line">    &lt;/SudokuProvider&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>Game</code> component is much larger source file, because it brings all the logic together</p><figure class="highlight js"><figcaption><span>src/Game.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Header &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/layout/Header&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; GameSection &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/layout/GameSection&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; StatusSection &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/layout/StatusSection&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Footer &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/layout/Footer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getUniqueSudoku &#125; <span class="keyword">from</span> <span class="string">&#x27;./solver/UniqueSudoku&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSudokuContext &#125; <span class="keyword">from</span> <span class="string">&#x27;./context/SudokuContext&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Game = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>Game</code> component renders all the components shown above, passing props that receive user events</p><figure class="highlight js"><figcaption><span>src/Game.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;&gt;</span><br><span class="line">    &lt;div className=&#123;overlay?<span class="string">&quot;container blur&quot;</span>:<span class="string">&quot;container&quot;</span>&#125;&gt;</span><br><span class="line">      &lt;Header onClick=&#123;onClickNewGame&#125;/&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;innercontainer&quot;</span>&gt;</span><br><span class="line">        &lt;GameSection</span><br><span class="line">          onClick=&#123;<span class="function">(<span class="params">indexOfArray</span>) =&gt;</span> onClickCell(indexOfArray)&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;StatusSection</span><br><span class="line">          onClickNumber=&#123;<span class="function">(<span class="params">number</span>) =&gt;</span> onClickNumber(number)&#125;</span><br><span class="line">          onChange=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> onChangeDifficulty(e)&#125;</span><br><span class="line">          onClickUndo=&#123;onClickUndo&#125;</span><br><span class="line">          onClickErase=&#123;onClickErase&#125;</span><br><span class="line">          onClickHint=&#123;onClickHint&#125;</span><br><span class="line">          onClickMistakesMode=&#123;onClickMistakesMode&#125;</span><br><span class="line">          onClickFastMode=&#123;onClickFastMode&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;Footer /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2><span id="numbers-component">Numbers component</span></h2><p>Among individual smaller components there is <code>Numbers</code> component that you can use to enter numbers into the grid.</p><p><img src="/blog/images/sudoku/numbers.gif" alt="Numbers component"></p><p>The Numbers component receives its inputs from the parent component in two ways: via a context and via props.</p><figure class="highlight js"><figcaption><span>src/components/Numbers.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSudokuContext &#125; <span class="keyword">from</span> <span class="string">&#x27;../context/SudokuContext&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * React component for the Number Selector in the Status Section.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Numbers = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; numberSelected &#125; = useSudokuContext();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;status__numbers&quot;</span>&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>].map(<span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (numberSelected === number.toString()) &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              &lt;div className=<span class="string">&quot;status__number status__number--selected&quot;</span></span><br><span class="line">                key=&#123;number&#125;</span><br><span class="line">                onClick=&#123;<span class="function">() =&gt;</span> props.onClickNumber(number.toString())&#125;&gt;&#123;number&#125;&lt;/div&gt;</span><br><span class="line">            )</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">              &lt;div className=<span class="string">&quot;status__number&quot;</span> key=&#123;number&#125;</span><br><span class="line">                onClick=&#123;<span class="function">() =&gt;</span> props.onClickNumber(number.toString())&#125;&gt;&#123;number&#125;&lt;/div&gt;</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For example, the currently selected number (if any) is grabbed from the context.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; numberSelected &#125; = useSudokuContext();</span><br></pre></td></tr></table></figure><p>The click handler is grabbed from the <code>props</code> argument and used to send the clicked number back to the parent component.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Numbers = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  &lt;div className=<span class="string">&quot;status__number&quot;</span> key=&#123;number&#125;</span><br><span class="line">    onClick=&#123;<span class="function">() =&gt;</span> props.onClickNumber(number.toString())&#125;&gt;&#123;number&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we want to refactor the above component, how do we ensure that we don&#39;t break it? How do we ensure that it renders in exactly the same way, and that when the user clicks, the number is sent to the parent component? How do we write component tests?</p><p>In my view, the component receives its inputs, the props and the context, and generates some output. The output is both the DOM nodes the component renders, and the <code>props.onClickNumber</code> invocations on click. Let&#39;s make sure the component works this way.</p><h2><span id="cypress-react-unit-test">cypress-react-unit-test</span></h2><p>To test the React components I will install <a href="https://github.com/bahmutov/cypress-react-unit-test">cypress-react-unit-test</a>. This adaptor allows the <a href="https://github.com/cypress-io/cypress">Cypress</a> test runner to mount React components like little mini web applications and then use the full Cypress API to interact with them. Our application uses <code>react-scripts</code>, thus the setup is trivial</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-react-unit-test/support&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-react-unit-test/plugins/react-scripts&#x27;</span>)(on, config)</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;experimentalComponentTesting&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;componentFolder&quot;</span>: <span class="string">&quot;src&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s write our first test.</p><figure class="highlight js"><figcaption><span>src/components/Numbers.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-react-unit-test&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Numbers &#125; <span class="keyword">from</span> <span class="string">&#x27;./Numbers&#x27;</span></span><br><span class="line">describe(<span class="string">&#x27;Numbers&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;shows all numbers&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mount(<span class="xml"><span class="tag">&lt;<span class="name">Numbers</span> /&gt;</span></span>);</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>].forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">      cy.contains(<span class="string">&#x27;.status__number&#x27;</span>, k)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Open Cypress with <code>yarn cypress open</code> or <code>npx cypress open</code> and run the test. There is no need to start the application, because we are working with an individual component, not with a page.</p><p>Hmm, the test passes, all the numbers are there. But the component does not look right!</p><p><img src="/blog/images/sudoku/numbers-without-css.png" alt="First test to check all numbers are present"></p><p>I think it is very important to <em>see</em> the component to understand what the users will experience. Our component needs styles - and the styles are in the <code>src/app.css</code> file. Because we point the <code>cypress/plugins/index.js</code> at the <code>react-scripts</code> settings, the spec files will use the same loaders and bundlers as the application code. Which means we can import <code>app.css</code> from the spec file too:</p><figure class="highlight js"><figcaption><span>src/components/Numbers.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Numbers &#125; <span class="keyword">from</span> <span class="string">&#x27;./Numbers&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../App.css&#x27;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="/blog/images/sudoku/numbers-with-css.png" alt="Include App.css in the test file"></p><p>This is better, but still not exactly the same. Since the CSS assumes certain document structure, we need to surround our <code>&lt;Numbers/&gt;</code> with elements with specific class names.</p><figure class="highlight js"><figcaption><span>src/components/Numbers.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mount(</span><br><span class="line">  &lt;div className=<span class="string">&quot;innercontainer&quot;</span>&gt;</span><br><span class="line">    &lt;section className=<span class="string">&quot;status&quot;</span>&gt;</span><br><span class="line">      &lt;Numbers /&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>This looks much better - now we see what the user is going to see.</p><p><img src="/blog/images/sudoku/numbers-styled.png" alt="Numbers component styled during test"></p><p>Super. We can also confirm that the component calls the prop <code>onClickNumber</code> when the user clicks a number in the DOM:</p><figure class="highlight js"><figcaption><span>src/components/Numbers.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;reacts to a click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  mount(</span><br><span class="line">    &lt;div className=<span class="string">&quot;innercontainer&quot;</span>&gt;</span><br><span class="line">      &lt;section className=<span class="string">&quot;status&quot;</span>&gt;</span><br><span class="line">        &lt;Numbers onClickNumber=&#123;cy.stub().as(<span class="string">&#x27;click&#x27;</span>)&#125;/&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">  cy.contains(<span class="string">&#x27;.status__number&#x27;</span>, <span class="string">&#x27;9&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;@click&#x27;</span>).should(<span class="string">&#x27;have.been.calledWith&#x27;</span>, <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the test above we pass <a href="https://on.cypress.io/stub">cy.stub</a> and confirm it was called with expected number 9 when the user clicks on the DOM element.</p><p><img src="/blog/images/sudoku/number-click.png" alt="Confirm the click happens"></p><p>How does our component look when there is a selected number? In order to test this, we need to wrap the <code>&lt;Numbers /&gt;</code> component with a mock context provider.</p><figure class="highlight js"><figcaption><span>src/components/Numbers.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;SudokuContext&#125; <span class="keyword">from</span> <span class="string">&#x27;../context/SudokuContext&#x27;</span></span><br><span class="line">describe(<span class="string">&#x27;Numbers&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;shows selected number&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mount(</span><br><span class="line">      &lt;SudokuContext.Provider value=&#123;&#123; <span class="attr">numberSelected</span>: <span class="string">&#x27;4&#x27;</span> &#125;&#125; &gt;</span><br><span class="line">        &lt;div className=<span class="string">&quot;innercontainer&quot;</span>&gt;</span><br><span class="line">          &lt;section className=<span class="string">&quot;status&quot;</span>&gt;</span><br><span class="line">            &lt;Numbers /&gt;</span><br><span class="line">          &lt;/section&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/SudokuContext.Provider&gt;</span><br><span class="line">    )</span><br><span class="line">    cy.contains(<span class="string">&#x27;.status__number&#x27;</span>, <span class="string">&#x27;4&#x27;</span>).should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;status__number--selected&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The number <code>4</code> does have the expected class <code>status__number--selected</code> and we do see the color difference.</p><p><img src="/blog/images/sudoku/selected-number.png" alt="Selected number 4"></p><p>Ok, but do we need to look at the tests to tell if the component looks correctly? Do we need a human in the loop? What if we change the <code>App.css</code> file and accidentally break some other component? This game has its own polished style, it would be a shame to break it accidentally.</p><h2><span id="visual-testing">Visual testing</span></h2><p>If we want to confirm the look of the component, we could assert every computed CSS property of every DOM node ... but that would be unbelievably brittle and hard to maintain. Instead, we could render the component into an image and <em>look at it</em>. While computers are not very good (yet) at understanding images, they are really good at <em>comparing</em> them. So let&#39;s generate screenshots of our component with different inputs and store those images with the code. Any time there is a pull request, we will repeat the above steps and then compare the new images pixel by pixel with saved good images.</p><p>There are many <a href="https://on.cypress.io/visual-testing">commercial services</a> that do this, but in this blog post I will use open source image comparison plugin for Cypress called <a href="https://github.com/palmerhq/cypress-image-snapshot">cypress-image-snapshot</a>. We can install it as a dev dependency and include its files in the support and plugins files.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-react-unit-test/support&#x27;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-image-snapshot/command&#x27;</span>).addMatchImageSnapshotCommand()</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-react-unit-test/plugins/react-scripts&#x27;</span>)(on, config)</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-image-snapshot/plugin&#x27;</span>).addMatchImageSnapshotPlugin(on, config)</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we get a new Cypress command <code>cy.matchImageSnapshot(&lt;snapshot name&gt;)</code>. Let&#39;s use it to create image snapshot of the Number component with selected digit &quot;4&quot;.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows selected number&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  mount(</span><br><span class="line">    &lt;SudokuContext.Provider value=&#123;&#123; <span class="attr">numberSelected</span>: <span class="string">&#x27;4&#x27;</span> &#125;&#125; &gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;innercontainer&quot;</span>&gt;</span><br><span class="line">        &lt;section className=<span class="string">&quot;status&quot;</span>&gt;</span><br><span class="line">          &lt;Numbers /&gt;</span><br><span class="line">        &lt;/section&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/SudokuContext.Provider&gt;</span><br><span class="line">  )</span><br><span class="line">  cy.contains(<span class="string">&#x27;.status__number&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;status__number--selected&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.status__numbers&#x27;</span>)</span><br><span class="line">    .matchImageSnapshot(<span class="string">&#x27;numbers-selected&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>In the test we have confirmed the component has been rendered using an assertion</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;.status__number&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">  .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;status__number--selected&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Then we create an image with the entire <code>.status__numbers</code> DOM element rendered.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;.status__numbers&#x27;</span>)</span><br><span class="line">  .matchImageSnapshot(<span class="string">&#x27;numbers-selected&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The snapshots are saved in <code>cypress/snapshots</code> folder.</p><p><img src="/blog/images/sudoku/numbers-selected.snap.png" alt="Numbers component with selected number 4"></p><p>If we edit the CSS file <code>src/App.css</code> and change the text padding around the numbers like this:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.status__number &#123;</span><br><span class="line"><span class="deletion">-   padding: 12px 0;</span></span><br><span class="line"><span class="addition">+   padding: 10px 0;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test runs - and the generated snapshot (under the hood <code>cypress-image-snapshot</code> uses <a href="https://on.cypress.io/screenshot">cy.screenshot</a>) is slightly different. It is hard to notice, so the pixel by pixel comparison done by the computer is perfect tool for automating it. The <code>cypress-image-snapshot</code> plugin produces the diff image in <code>cypress/snapshots/**/__diff_output__</code> folder. The diff image has three parts: on the left is the original baseline image. On the right is the current image. In the middle there is a composite image highlighting the difference.</p><p><img src="/blog/images/sudoku/numbers-selected.diff.png" alt="Padding difference is caught by image comparison"></p><p>The visual snapshots replace a lot of individual assertions. For example, there is no need to confirm that individual numbers are present in the DOM. Instead we can confirm the number of DOM elements with the class (to make sure the component has rendered) and take a single snapshot.</p><figure class="highlight js"><figcaption><span>src/components/Numbers.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;shows all numbers&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  mount(</span><br><span class="line">    &lt;div className=<span class="string">&quot;innercontainer&quot;</span>&gt;</span><br><span class="line">      &lt;section className=<span class="string">&quot;status&quot;</span>&gt;</span><br><span class="line">        &lt;Numbers /&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">-  <span class="comment">// trying to assert every number in the DOM</span></span><br><span class="line">-  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>].forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">-    cy.contains(<span class="string">&#x27;.status__number&#x27;</span>, k)</span><br><span class="line">-  &#125;)</span><br><span class="line">+ cy.get(<span class="string">&#x27;.status__number&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">9</span>)</span><br><span class="line">+ cy.get(<span class="string">&#x27;.status__numbers&#x27;</span>).matchImageSnapshot(<span class="string">&#x27;all-numbers&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>A single image snapshot can confirm so much - as long as the components render consistently from the same data. Let&#39;s look how to ensure it.</p><h2><span id="controlling-the-clock">Controlling the clock</span></h2><p>Inside the app, we have a timer that shows elapsed time since the start of the game</p><p><img src="/blog/images/sudoku/timer.gif" alt="Game timer"></p><figure class="highlight js"><figcaption><span>src/App.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;shows the timer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  <span class="comment">// the timer starts at zero, so this is probably ok</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;.status__time&#x27;</span>, <span class="string">&#x27;00:00&#x27;</span>)</span><br><span class="line">    .matchImageSnapshot(<span class="string">&#x27;timer-zero&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, how do we make sure we take consistent snapshot of a timer element that keeps changing? By controlling the <a href="https://on.cypress.io/stubs-spies-and-clocks">clock</a> using <a href="https://on.cypress.io/clock">cy.clock</a> and <a href="https://on.cypress.io/tick">cy.tick</a>.</p><figure class="highlight js"><figcaption><span>src/App.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;shows the timer&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.clock()</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.status__time&#x27;</span>, <span class="string">&#x27;00:00&#x27;</span>)</span><br><span class="line">    .matchImageSnapshot(<span class="string">&#x27;timer-zero&#x27;</span>)</span><br><span class="line">  cy.tick(<span class="number">700</span> * <span class="number">1000</span>)</span><br><span class="line">  cy.contains(<span class="string">&#x27;.status__time&#x27;</span>, <span class="string">&#x27;11:40&#x27;</span>)</span><br><span class="line">    .matchImageSnapshot(<span class="string">&#x27;timer-passed&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Because we explicitly control the app&#39;s clock, the timer stays frozen at &quot;00:00&quot; when we take the first snapshot, and stays frozen at &quot;11:40&quot; when we take the second snapshot 700 seconds later. A nice bonus for this technique is that we can test an application with long actions in a blink of an eye.</p><p><img src="/blog/images/sudoku/control-the-clock.gif" alt="Controlling the clock test"></p><h2><span id="deterministic-board">Deterministic board</span></h2><p>If we can test the smaller components, why can&#39;t we mount the entire <code>&lt;App&gt;</code> and take an image snapshot? That would give us a lot of confidence.</p><figure class="highlight js"><figcaption><span>src/App.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;shows the board&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  <span class="comment">// DOES NOT WORK, JUST FOR DEMO</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.container&#x27;</span>).matchImageSnapshot(<span class="string">&#x27;the-game&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Unfortunately the above test would not work. We cannot just take a snapshot - the board is generated randomly every time the game starts. Every new board will produce a new image, breaking the test.</p><p><img src="/blog/images/sudoku/random-board.gif" alt="Random board"></p><p>Let&#39;s look how the game generates the board data. The <code>&lt;App&gt;</code> component has the <code>&lt;Game&gt;</code> child component, which imports a function to generate the board.</p><figure class="highlight js"><figcaption><span>src/Game.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getUniqueSudoku &#125; <span class="keyword">from</span> <span class="string">&#x27;./solver/UniqueSudoku&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_createNewGame</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [temporaryInitArray, temporarySolvedArray] = getUniqueSudoku(difficulty, e);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To generate the same board, we will stub the ES6 import <code>getUniqueSudoku</code>. I have intercepted the results from <code>getUniqueSudoku()</code> call using the DevTools and saved the two arrays as two JSON fixture files.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/fixtures/init-array.json</span></span><br><span class="line">[<span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, ...]</span><br><span class="line"><span class="comment">// cypress/fixtures/solved-array.json</span></span><br><span class="line">[<span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;4&quot;</span>, ...]</span><br></pre></td></tr></table></figure><p>Plugin <code>cypress-react-unit-test</code> comes with a Babel plugin that can mock ES6 module imports, and for any application that uses <code>react-scripts</code> it should work automatically. Let mock the <code>getUniqueSudoku</code> import and return the arrays loaded from the fixture files.</p><figure class="highlight js"><figcaption><span>src/App.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> UniqueSudoku <span class="keyword">from</span> <span class="string">&#x27;./solver/UniqueSudoku&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;shows the board&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;init-array&#x27;</span>).then(<span class="function"><span class="params">initArray</span> =&gt;</span> &#123;</span><br><span class="line">    cy.fixture(<span class="string">&#x27;solved-array&#x27;</span>).then(<span class="function"><span class="params">solvedArray</span> =&gt;</span> &#123;</span><br><span class="line">      cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>).returns([initArray, solvedArray])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.clock()</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.container&#x27;</span>).matchImageSnapshot(<span class="string">&#x27;the-game&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test always generates the same board, freezes the clock at &quot;00:00&quot; and generates a consistent snapshot image. Building on top of this approach, we can write a test that plays a move, since we have a deterministic board to start with.</p><figure class="highlight js"><figcaption><span>src/App.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> UniqueSudoku <span class="keyword">from</span> <span class="string">&#x27;./solver/UniqueSudoku&#x27;</span></span><br><span class="line">it(<span class="string">&#x27;plays one move&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;init-array&#x27;</span>).then(<span class="function"><span class="params">initArray</span> =&gt;</span> &#123;</span><br><span class="line">    cy.fixture(<span class="string">&#x27;solved-array&#x27;</span>).then(<span class="function"><span class="params">solvedArray</span> =&gt;</span> &#123;</span><br><span class="line">      cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>).returns([initArray, solvedArray])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.clock()</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.game__cell&#x27;</span>).first().click()</span><br><span class="line">  <span class="comment">// we can even look at the solved array!</span></span><br><span class="line">  cy.contains(<span class="string">&#x27;.status__number&#x27;</span>, <span class="string">&#x27;6&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;.game__cell&#x27;</span>).first()</span><br><span class="line">    .should(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;game__cell--highlightselected&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.container&#x27;</span>).matchImageSnapshot(<span class="string">&#x27;same-game-made-one-move&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/sudoku/play-move.png" alt="Test that makes a move"></p><p>While a screenshot is nice, the power of Cypress comes from its full browser experience and time-traveling debugging feature. The video below shows what every test command does as we hover it.</p><iframe style="width: 100%; height: 400px" src="https://www.youtube-nocookie.com/embed/WcXZpqAKwQQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><strong>Tip:</strong> if a lot of tests load the same fixture, you can load it once and store in a closure variable.</p><figure class="highlight js"><figcaption><span>src/App.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> initArray</span><br><span class="line"><span class="keyword">let</span> solvedArray</span><br><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;init-array&#x27;</span>).then(<span class="function"><span class="params">arr</span> =&gt;</span> initArray = arr)</span><br><span class="line">  cy.fixture(<span class="string">&#x27;solved-array&#x27;</span>).then(<span class="function"><span class="params">arr</span> =&gt;</span> solvedArray = arr)</span><br><span class="line">&#125;)</span><br><span class="line">it(<span class="string">&#x27;plays one move&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>).returns([initArray, solvedArray])</span><br><span class="line">  cy.clock()</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Read blog post <a href="../import-cypress-fixtures/">Import Cypress fixtures</a> for details.</p><h2><span id="local-workflow">Local workflow</span></h2><p>We can write visual tests for our components and generate consistent images by mocking data and the clock. Is this enough to use visual testing in our day-to-day life?</p><p>No.</p><p>If we take a visual snapshot in Cypress GUI opened with <code>yarn cypress open</code> on Mac we will get an image with a specific resolution, for example 1300x600 pixels. When we take the same snapshot in the headless mode using <code>yarn cypress run</code> we will get an image with only the half resolution in each dimension: 650x300 pixels. This is due to pixel density of the graphical application vs headless rendering mode. Thus I <em>disable snapshots</em> in the interactive mode from the support file.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; addMatchImageSnapshotCommand &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-image-snapshot/command&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (Cypress.config(<span class="string">&#x27;isInteractive&#x27;</span>)) &#123;</span><br><span class="line">  Cypress.Commands.add(<span class="string">&#x27;matchImageSnapshot&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.log(<span class="string">&#x27;Skipping snapshot 👀&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  addMatchImageSnapshotCommand()</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-react-unit-test/support&#x27;</span>)</span><br></pre></td></tr></table></figure><p>When the test is running, the Command Log shows the places where the snapshots would be taken.</p><p><img src="/blog/images/sudoku/skip-snapshots.png" alt="Skipped snapshots"></p><p>To really take a snapshot, I execute <code>yarn cypress run</code>, inspect any new snapshot files, add them to the source control and push the code to the remote repository.</p><p>If I need to update a saved image snapshot, I can delete the snapshot image and execute <code>yarn cypress run</code> to save new image. Or I can run Cypress with environment variable telling the <code>cypress-image-snapshot</code> to update every snapshot if there is difference.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> CYPRESS_updateSnapshots=<span class="literal">true</span> yarn cypress run</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> make sure to inspect every changed snapshot before committing, since all snapshots can be updated during the above command.</p><h2><span id="continuous-integration">Continuous Integration</span></h2><p>Even when saving image snapshots in the headless mode we can encounter problems. For example, if we save the image snapshots on Mac and compare them to the images generated on Linux CI, there will be tiny pixel differences due to font rendering, aliasing, and different browser versions.</p><p><img src="/blog/images/sudoku/ci-diff.png" alt="Mac vs Linux font rendering"></p><p>The image above shows the detected pixel differences between <code>00:00</code> rendered on Mac (left) and on Linux (right). Even these tiny differences still fail the test.</p><p>We can configure the <a href="https://github.com/palmerhq/cypress-image-snapshot">cypress-image-snapshot</a> command to accept a small percentage of different pixels per image.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// when adding matchImageSnapshot command</span></span><br><span class="line">addMatchImageSnapshotCommand(&#123;</span><br><span class="line">  failureThreshold: <span class="number">0.03</span>, <span class="comment">// threshold for entire image</span></span><br><span class="line">  failureThresholdType: <span class="string">&#x27;percent&#x27;</span>, <span class="comment">// percent of image or number of pixels</span></span><br><span class="line">  customDiffConfig: &#123; <span class="attr">threshold</span>: <span class="number">0.1</span> &#125;, <span class="comment">// threshold for each pixel</span></span><br><span class="line">  capture: <span class="string">&#x27;viewport&#x27;</span>, <span class="comment">// capture viewport in screenshot</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>I do not trust such thresholds, since they can miss actual visual problems. Instead I recommend generating image snapshots using exactly the same environment as the one on CI. This is simple to do using Docker containers from <a href="https://github.com/cypress-io/cypress-docker-images">cypress-docker-images</a>. Instead of running the command <code>yarn cypress run</code> to generate or update snapshots, we will use a Docker image locally.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">     <span class="attr">&quot;docker:run&quot;</span>: <span class="string">&quot;docker run -it -v $PWD:/e2e -w /e2e cypress/included:4.5.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Because the component tests do not require a server, we can run them with a single command using the pre-installed Cypress Docker image <code>cypress/included:&lt;version&gt;</code>. On CI we can use a Docker with exactly the same OS dependencies, fonts and browser version. Here is an example CI config</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">cypress-run:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">container:</span> <span class="string">cypress/browsers:node12.13.0-chrome80-ff74</span></span><br></pre></td></tr></table></figure><p>The Docker image <code>cypress/included:4.5.0</code> is built from <code>cypress/browsers:node12.13.0-chrome80-ff74</code> image with Cypress globally installed. Thus the browser should render the same HTML pages in exactly the same way.</p><h2><span id="pull-request-workflow">Pull request workflow</span></h2><p>Let&#39;s discuss what happens with image snapshots during pull requests. When someone opens a PR with a new feature or a bug fix, it is beneficial to separate the <em>functional</em> tests from the <em>visual</em> tests. If a button has changed its appearance, the functional tests should pass, and the visual tests should fail. This will tell us quickly if there are visual differences due to layout, color, or style changes.</p><p>For this purpose, <a href="https://github.com/bahmutov/sudoku">bahmutov/sudoku</a> runs tests on CI with an environment variable that tells the <a href="https://github.com/palmerhq/cypress-image-snapshot">cypress-image-snapshot</a> plugin to generate image diffs, but not fail the command <code>matchImageSnapshot</code>.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span> <span class="string">🧪</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="comment"># let&#x27;s go through the tests and generate all diffs</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">failOnSnapshotDiff=false</span></span><br></pre></td></tr></table></figure><p>At the end of the run we can find these diff images and report them separately using GitHub commit status check.</p><figure class="highlight js"><figcaption><span>scripts/set-gh-check.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getVisualDiffs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> globby(<span class="string">&#x27;cypress/snapshots/**/__diff_output__/**.png&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">getVisualDiffs().then(<span class="function"><span class="params">list</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> setGitHubCommitStatus(list.length, envOptions)</span><br><span class="line">&#125;).catch(onError)</span><br></pre></td></tr></table></figure><p>If there are any DIFF images, then the status check will be <code>fail</code>. The video below shows a pull request where at first there are visual changes. Then the tests are updated and the next commit has no visual differences.</p><iframe style="width: 100%; height: 400px" src="https://www.youtube-nocookie.com/embed/BDgqweqR36Y" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>Whenever there are visual differences, you can inspect the diff images if you store them on CI as test artifacts; the snapshots are stored in <code>cypress/snapshots</code> folder.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Store</span> <span class="string">snapshots</span> <span class="string">📸</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">snapshots</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">cypress/snapshots</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">commit</span> <span class="string">status</span> <span class="string">🖼</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">node</span> <span class="string">./scripts/set-gh-check.js</span></span><br></pre></td></tr></table></figure><h2><span id="summary">Summary</span></h2><p>In this blog post we have looked at writing React component tests and using visual diffing to compare the current image against the good baseline image. We must generate the same image, which we can do by mocking the data and the clock to be deterministic. We also need to ensure that the snapshots are generated using exactly the same environment to be pixel-perfect matches.</p><p>Finally, we briefly looked at the visual tests during pull request workflow. Looking back at the entire work, I conclude:</p><ul><li>writing React component tests using <a href="https://github.com/bahmutov/cypress-react-unit-test">cypress-react-unit-test</a> is fast and easy</li><li><a href="https://github.com/palmerhq/cypress-image-snapshot">cypress-image-snapshot</a> plugin allows one to do visual testing for free, but we have to do a lot of work to manage images, render them, and review them during pull requests</li></ul><p>I would strongly recommend giving a commercial visual testing service a try: Applitools, Happo.io, and Percy.io have Cypress plugins and are free to try and cheap use.</p><h2><span id="more-info">More info</span></h2><p>Take a look at the example Sudoku repository, and especially at the long list of short videos there: <a href="https://github.com/bahmutov/sudoku#videos">bahmutov/sudoku#videos</a>. These videos show every part of the process I have described in this blog in more detail.</p><p>You should also read the <a href="https://on.cypress.io/visual-testing">Cypress visual testing guide</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take a look at a modern React application like this &lt;a href=&quot;https://github.com/raravi/sudoku&quot;&gt;Sudoku&lt;/a&gt; game that you can pla
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="react" scheme="https://glebbahmutov.com/blog/tags/react/"/>
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Import Cypress fixtures</title>
    <link href="https://glebbahmutov.com/blog/import-cypress-fixtures/"/>
    <id>https://glebbahmutov.com/blog/import-cypress-fixtures/</id>
    <published>2020-06-15T04:00:00.000Z</published>
    <updated>2020-06-15T13:35:07.115Z</updated>
    
    <content type="html"><![CDATA[<p>In <a href="https://github.com/bahmutov/sudoku">bahmutov/sudoku</a> I am loading two JSON fixtures to mock a method that creates the new board. This ensures the game always starts with the same numbers and generates the same image for <a href="https://www.youtube.com/playlist?list=PLP9o9QNnQuAYhotnIDEUQNXuvXL7ZmlyZ">visual testing</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-react-unit-test&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> UniqueSudoku <span class="keyword">from</span> <span class="string">&#x27;./solver/UniqueSudoku&#x27;</span></span><br><span class="line">describe(<span class="string">&#x27;App&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;mocks board creation&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.fixture(<span class="string">&#x27;init-array&#x27;</span>).then(<span class="function"><span class="params">initArray</span> =&gt;</span> &#123;</span><br><span class="line">      cy.fixture(<span class="string">&#x27;solved-array&#x27;</span>).then(<span class="function"><span class="params">solvedArray</span> =&gt;</span> &#123;</span><br><span class="line">        cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>).returns([initArray, solvedArray])</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.clock()</span><br><span class="line">    mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.game__cell--filled&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">45</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.container&#x27;</span>).matchImageSnapshot(<span class="string">&#x27;same-game-mocked-sudoku&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/sudoku/game-board.png" alt="Mocked board creation produces the same Sudoku game"></p><p>The JSON fixtures are simple arrays, we are using <a href="https://on.cypress.io/fixture">cy.fixture</a> command to load them.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/fixtures/init-array.json</span></span><br><span class="line">[<span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>, ...]</span><br><span class="line"><span class="comment">// cypress/fixtures/solved-array.json</span></span><br><span class="line">[<span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;4&quot;</span>, ...]</span><br></pre></td></tr></table></figure><p>After the first test passes, we can write a test that plays one or several moves, then another test that sets the entire board and wins the game, etc. All these tests will load the same two fixture files at the start.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;App&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;mocks board creation&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.fixture(<span class="string">&#x27;init-array&#x27;</span>).then(<span class="function"><span class="params">initArray</span> =&gt;</span> &#123;</span><br><span class="line">      cy.fixture(<span class="string">&#x27;solved-array&#x27;</span>).then(<span class="function"><span class="params">solvedArray</span> =&gt;</span> &#123;</span><br><span class="line">        cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>).returns([initArray, solvedArray])</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.clock()</span><br><span class="line">    mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;plays a move&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.fixture(<span class="string">&#x27;init-array&#x27;</span>).then(<span class="function"><span class="params">initArray</span> =&gt;</span> &#123;</span><br><span class="line">      cy.fixture(<span class="string">&#x27;solved-array&#x27;</span>).then(<span class="function"><span class="params">solvedArray</span> =&gt;</span> &#123;</span><br><span class="line">        cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>).returns([initArray, solvedArray])</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.clock()</span><br><span class="line">    mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;wins the game&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// load the solved array</span></span><br><span class="line">    <span class="comment">// and set the initial array to be same without one move</span></span><br><span class="line">    cy.fixture(<span class="string">&#x27;solved-array&#x27;</span>).then(<span class="function"><span class="params">solvedArray</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> almostSolved = [...solvedArray]</span><br><span class="line">      <span class="comment">// by setting entry to &quot;0&quot; we effectively clear the cell</span></span><br><span class="line">      almostSolved[<span class="number">0</span>] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">      cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>).returns([almostSolved, solvedArray])</span><br><span class="line">    &#125;)</span><br><span class="line">    cy.clock()</span><br><span class="line">    mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="beforeeach">beforeEach</span></h2><p>Loading the same fixture files in every test?! We can do better. First, let&#39;s load the fixtures in the <code>beforeEach</code> hook and save them in the test context. We will need to change our test functions from arrow functions to actual <code>function</code> functions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;init-array&#x27;</span>).as(<span class="string">&#x27;initArray&#x27;</span>)</span><br><span class="line">  cy.fixture(<span class="string">&#x27;solved-array&#x27;</span>).as(<span class="string">&#x27;solvedArray&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;mocks board creation&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>)</span><br><span class="line">    .returns([<span class="built_in">this</span>.initArray, <span class="built_in">this</span>.solvedArray])</span><br><span class="line">  cy.clock()</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;plays a move&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>)</span><br><span class="line">    .returns([<span class="built_in">this</span>.initArray, <span class="built_in">this</span>.solvedArray])</span><br><span class="line">  cy.clock()</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Cypress <a href="https://on.cypress.io/as">.as</a> command saves the loaded object in the test context, which is available as a property during the test.</p><h2><span id="before">before</span></h2><p>The hook <code>beforeEach</code> runs with every test, can we load the fixtures <em>once</em>? We can run the code once using <code>before</code> hook, but that will cause a problem.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;init-array&#x27;</span>).as(<span class="string">&#x27;initArray&#x27;</span>)</span><br><span class="line">  cy.fixture(<span class="string">&#x27;solved-array&#x27;</span>).as(<span class="string">&#x27;solvedArray&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;mocks board creation&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ✅ works</span></span><br><span class="line">  cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>)</span><br><span class="line">    .returns([<span class="built_in">this</span>.initArray, <span class="built_in">this</span>.solvedArray])</span><br><span class="line">  cy.clock()</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;plays a move&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 🔥 DOES NOT WORK</span></span><br><span class="line">  <span class="comment">// this.initArray is undefined</span></span><br><span class="line">  <span class="comment">// this.solvedArray is undefined</span></span><br><span class="line">  cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>)</span><br><span class="line">    .returns([<span class="built_in">this</span>.initArray, <span class="built_in">this</span>.solvedArray])</span><br><span class="line">  cy.clock()</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runner runs the <code>before</code> hook before the very first test, sets the fixtures as properties, and the first test passes. Then the test runner clears the test context and runs the second test. Thus during the second test, the properties <code>initArray</code> and <code>solvedArray</code> are undefined.</p><p>To get around this problem, let&#39;s use closure variables.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> initArray</span><br><span class="line"><span class="keyword">let</span> solvedArray</span><br><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">&#x27;init-array&#x27;</span>).then(<span class="function"><span class="params">arr</span> =&gt;</span> initArray = arr)</span><br><span class="line">  cy.fixture(<span class="string">&#x27;solved-array&#x27;</span>).then(<span class="function"><span class="params">arr</span> =&gt;</span> solvedArray = arr)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;mocks board creation&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>)</span><br><span class="line">    .returns([initArray, solvedArray])</span><br><span class="line">  cy.clock()</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;plays a move&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>)</span><br><span class="line">    .returns([initArray, solvedArray])</span><br><span class="line">  cy.clock()</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I strongly recommend using closure variables instead of <code>this</code> properties. The closure variables are clearly visible and do not depend on <code>function</code> vs <code>() =&gt; &#123;&#125;</code> syntax.</p><h2><span id="imports">imports</span></h2><p>Another possible solution for JSON fixtures it to ... import them from the fixture file. Cypress will bundle the JSON files just fine.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> initArray <span class="keyword">from</span> <span class="string">&#x27;../cypress/fixtures/init-array.json&#x27;</span></span><br><span class="line"><span class="keyword">import</span> solvedArray <span class="keyword">from</span> <span class="string">&#x27;../cypress/fixtures/solved-array.json&#x27;</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;mocks board creation&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>)</span><br><span class="line">    .returns([initArray, solvedArray])</span><br><span class="line">  cy.clock()</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">&#x27;plays a move&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.stub(UniqueSudoku, <span class="string">&#x27;getUniqueSudoku&#x27;</span>)</span><br><span class="line">    .returns([initArray, solvedArray])</span><br><span class="line">  cy.clock()</span><br><span class="line">  mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In &lt;a href=&quot;https://github.com/bahmutov/sudoku&quot;&gt;bahmutov/sudoku&lt;/a&gt; I am loading two JSON fixtures to mock a method that creates the new 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Tic-Tac-Toe Component Tests</title>
    <link href="https://glebbahmutov.com/blog/tic-tac-toe-component-tests/"/>
    <id>https://glebbahmutov.com/blog/tic-tac-toe-component-tests/</id>
    <published>2020-06-03T04:00:00.000Z</published>
    <updated>2020-06-03T19:51:00.767Z</updated>
    
    <content type="html"><![CDATA[<p>Let&#39;s take React <a href="https://codepen.io/gaearon/pen/LyyXgK">Tic-Tac-Toe example</a> by someone named D Abramov. He must be somewhat important person, since this example was included in the <a href="https://reactjs.org/tutorial/tutorial.html">React Tutorial</a>. You can find my version of the game at <a href="https://github.com/bahmutov/react-tic-tac-toe-example">bahmutov/react-tic-tac-toe-example</a>.</p><p><img src="/blog/images/tic-tac-toe/game.png" alt="Tic-tac-toe game"></p><p>The project uses <code>react-scripts</code> to bundle and serve the application. The application itself only has 3 files in the <code>src</code> folder</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">repo&#x2F;</span><br><span class="line">  package.json</span><br><span class="line">  src&#x2F;</span><br><span class="line">    index.jsx</span><br><span class="line">    app.jsx</span><br><span class="line">    app.css</span><br></pre></td></tr></table></figure><p>The application file <code>src/app.jsx</code> has a few components: Square, Board, Game and a function <code>calculateWinner</code>.</p><p><img src="/blog/images/tic-tac-toe/app.png" alt="Main application file"></p><h2><span id="e2e-vs-component-tests">E2E vs component tests</span></h2><p>Usually, I consider end-to-end tests the most effective way to confirm the application works. The Cypress test interacts with the loaded application like a real user, and any error in its logic, code, bundling, or deployment is likely to be caught.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Tic-tac-toe&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;plays&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">&#x27;http://localhost:3000&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.square&#x27;</span>).eq(<span class="number">0</span>).click() <span class="comment">// X</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.square&#x27;</span>).eq(<span class="number">1</span>).click() <span class="comment">// O</span></span><br><span class="line">    <span class="comment">// more commands until one player wins</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The tests are nice, but what if we want to concentrate on the <code>Square</code> component? Maybe we want to refactor it, maybe we want to see how it looks with different styles or props, there could be lots of reasons we want to really stress this component in isolation from the main application.</p><h2><span id="component-tests">Component tests</span></h2><p>By adding <a href="https://github.com/bahmutov/cypress-react-unit-test">cypress-react-unit-test</a> to the repo we can easily write component tests. Let&#39;s confirm the <code>Square</code> component shows the value passed via a prop. For now we can simply export <code>Square</code> from the <code>app.jsx</code> and import it in the test file, and we can place the spec file alongside the component.</p><figure class="highlight js"><figcaption><span>src/app.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button className=<span class="string">&quot;square&quot;</span> onClick=&#123;props.onClick&#125;&gt;</span><br><span class="line">      &#123;props.value&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>src/Square.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-react-unit-test&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Square &#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Square&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;renders value&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mount(<span class="xml"><span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&quot;X&quot;</span> /&gt;</span></span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;.square&#x27;</span>, <span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/tic-tac-toe/square.png" alt="Square test"></p><p>We import the component and mount it, and then use Cypress commands to interact with the live  component. Let&#39;s confirm it calls the passed prop on click. Ordinarily one would write a new unit test to separate the value test from the click test. But Cypress has built-in time traveling debugger, records movies on CI, takes screenshots on failures - you don&#39;t need to make component tests tiny just to have a good debugging experience. So I will continue expanding the same test.</p><figure class="highlight js"><figcaption><span>src/Square.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-react-unit-test&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Square &#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Square&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;renders value&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mount(<span class="xml"><span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&quot;X&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;cy.stub().as(</span>&#x27;<span class="attr">click</span>&#x27;)&#125; /&gt;</span></span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;.square&#x27;</span>, <span class="string">&#x27;X&#x27;</span>).click()</span><br><span class="line">    cy.get(<span class="string">&#x27;@click&#x27;</span>).should(<span class="string">&#x27;be.called&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes.</p><p><img src="/blog/images/tic-tac-toe/square-click.png" alt="Square click test"></p><h2><span id="styles">Styles</span></h2><p>The square component looks like a regular button, not like a board cell in the real game. This is because we only mounted the markup and never applied any styles to it. There are <a href="https://github.com/bahmutov/cypress-react-unit-test#options">multiple options</a> for styling components during tests, but the simplest is just to import the application&#39;s CSS from the spec file.</p><figure class="highlight js"><figcaption><span>src/Square.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-react-unit-test&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Square &#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./app.css&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Square&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;renders value&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mount(<span class="xml"><span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&quot;X&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;cy.stub().as(</span>&#x27;<span class="attr">click</span>&#x27;)&#125; /&gt;</span></span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;.square&#x27;</span>, <span class="string">&#x27;X&#x27;</span>).click()</span><br><span class="line">    cy.get(<span class="string">&#x27;@click&#x27;</span>).should(<span class="string">&#x27;be.called&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/tic-tac-toe/square-style.png" alt="styled Square"></p><p>We can <code>import &#39;./app.css&#39;</code> because the specs are bundled using the same Webpack config as the application; if you can import a resource from the application code, you should be able to import it from the component test file.</p><h2><span id="mocking-imports">Mocking imports</span></h2><p>We have passed <a href="https://on.cypress.io/stub">cy.stub</a> to the component. This stub comes from <a href="https://sinonjs.org/">Sinon.js</a> included with Cypress. It works great when stubbing individual functions or a method on an object. But what about mocking ES6 module exports and imports?</p><p>The game component determines the winner by calling <code>calculateWinner</code> function. The exact details are unimportant, but the code around it looks like this:</p><p><img src="/blog/images/tic-tac-toe/calculate-winner.png" alt="Game calls calculateWinner"></p><p>From the component test, we cannot reach and overwrite a private function <code>calculateWinner</code>. But we could move it into an external module and import it.</p><figure class="highlight js"><figcaption><span>src/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateWinner</span>(<span class="params">squares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> lines = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>],</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> [a, b, c] = lines[i];</span><br><span class="line">    <span class="keyword">if</span> (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;</span><br><span class="line">      <span class="keyword">return</span> squares[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>src/app.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;calculateWinner&#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"><span class="comment">// use calculateWinner to determine the winner</span></span><br></pre></td></tr></table></figure><p>Now let&#39;s write a component test for the <code>Game</code> component - and mock the ES6 module import.</p><figure class="highlight js"><figcaption><span>src/Game.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-react-unit-test&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Game &#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./app.css&#x27;</span></span><br><span class="line"><span class="comment">// import the module with exports we want to mock</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> utils <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Game&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;declares winner&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.stub(utils, <span class="string">&#x27;calculateWinner&#x27;</span>).returns(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">    mount(<span class="xml"><span class="tag">&lt;<span class="name">Game</span> /&gt;</span></span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;Winner: X&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes - note how <code>Winner: X</code> is immediately displayed, even before the first move is played 😀</p><p><img src="/blog/images/tic-tac-toe/winner-x.png" alt="Help X win right away by mocking the ES6 module import"></p><h2><span id="unit-tests">Unit tests</span></h2><p>We can write more end-to-end and component tests, using built-in code coverage as a guide. But what about the above function <code>calculateWinner</code>? Do we only indirectly test it via component tests? No. We should also directly test it using unit tests.</p><figure class="highlight js"><figcaption><span>src/utils.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; calculateWinner &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line">describe(<span class="string">&#x27;calculateWinner&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _ = <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">const</span> x = <span class="string">&#x27;X&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> o = <span class="string">&#x27;O&#x27;</span></span><br><span class="line">  it(<span class="string">&#x27;calls no winner for empty board&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(calculateWinner(</span><br><span class="line">      [</span><br><span class="line">        _, _, _,</span><br><span class="line">        _, _, _,</span><br><span class="line">        _, _, _,</span><br><span class="line">      ]</span><br><span class="line">    )).to.equal(<span class="literal">null</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;calls winner for X&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(calculateWinner(</span><br><span class="line">      [</span><br><span class="line">        _, _, x,</span><br><span class="line">        x, o, x,</span><br><span class="line">        _, o, x,</span><br><span class="line">      ]</span><br><span class="line">    )).to.equal(x)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;calls winner for O&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    expect(calculateWinner(</span><br><span class="line">      [</span><br><span class="line">        _, _, o,</span><br><span class="line">        x, o, x,</span><br><span class="line">        o, o, x,</span><br><span class="line">      ]</span><br><span class="line">    )).to.equal(o)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We exercise different <a href="../data-coverage/">data inputs</a> rather than code paths to make sure the function works correctly. The tests do not have a GUI, but the Command Log still shows useful information.</p><p><img src="/blog/images/tic-tac-toe/unit-tests.png" alt="Unit tests"></p><p>If there is an error, the code frame immediately shows the problem. For example if we change the last assertion to <code>)).to.equal(x)</code> we get the <a href="https://www.cypress.io/blog/2020/05/20/faster-debugging-with-test-failure-code-frames-in-cypress-4-6/">precise source code location</a></p><p><img src="/blog/images/tic-tac-toe/error-location.png" alt="Error location"></p><h2><span id="more-info">More info</span></h2><p>For more reasons behind component testing, read <a href="../my-vision-for-component-tests/">My Vision for Component Tests</a> blog posts, and visit the <a href="https://github.com/bahmutov/cypress-react-unit-test">cypress-react-unit-test</a> repo.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Let&amp;#39;s take React &lt;a href=&quot;https://codepen.io/gaearon/pen/LyyXgK&quot;&gt;Tic-Tac-Toe example&lt;/a&gt; by someone named D Abramov. He must be somew
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="react" scheme="https://glebbahmutov.com/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Be careful when running all specs together</title>
    <link href="https://glebbahmutov.com/blog/run-all-specs/"/>
    <id>https://glebbahmutov.com/blog/run-all-specs/</id>
    <published>2020-05-28T04:00:00.000Z</published>
    <updated>2020-05-28T21:36:11.979Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#example-application">Example application</a></li><li><a href="#support-file">Support file</a></li><li><a href="#before-hooks">Before hooks</a></li><li><a href="#before-hooks-when-running-all-specs">Before hooks when running all specs</a></li><li><a href="#beforeeach-hook">BeforeEach hook</a></li><li><a href="#solution">Solution</a></li></ul><!-- tocstop --><h2><span id="example-application">Example application</span></h2><p>In our example application we have two spec files and a support file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">repo&#x2F;</span><br><span class="line">  cypress&#x2F;</span><br><span class="line">    integration&#x2F;</span><br><span class="line">      spec-a.js</span><br><span class="line">      spec-b.js</span><br><span class="line">    support&#x2F;</span><br><span class="line">      index.js</span><br><span class="line">  cypress.json</span><br></pre></td></tr></table></figure><p>The spec files have two tests each.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec-a.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">&#x27;spec a&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;works&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;works 2&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/spec-b.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">&#x27;spec b&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;works&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;works 2&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="support-file">Support file</span></h2><p>The support file is initially empty. Let&#39;s add a single <code>console.log</code> message.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;support file&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The support file runs in the browser, right before the spec file runs. We can see the support file and the spec file downloaded by the test runner in the DevTools console (blue arrow).</p><p><img src="/blog/images/run-all-specs/two-scripts.png" alt="Support file"></p><p>The two scripts (support file and the spec file) are requested by the test runner via XHR calls and then evaluated.</p><p><img src="/blog/images/run-all-specs/script-names.png" alt="Support and spec files"></p><p>The above download mechanism is just an implementation detail. In effect it means the test runner is evaluating scripts in this order:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;support/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;integration/spec-a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can see that both files were bundled using Cypress&#39; built-in preprocessor.</p><p><img src="/blog/images/run-all-specs/support-bundle.png" alt="Support file bundle"></p><p><img src="/blog/images/run-all-specs/spec-bundle.png" alt="Spec file bundle"></p><p>Which means our tests are really running the following <em>concatenated</em> script:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// support/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;support file&#x27;</span>)</span><br><span class="line"><span class="comment">// integration/spec-a.js</span></span><br><span class="line">context(<span class="string">&#x27;spec a&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;works&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;works 2&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="before-hooks">Before hooks</span></h2><p>Let&#39;s place a hook into support file and a hook into the spec file.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;support file&#x27;</span>)</span><br><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;support file: before hook&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/spec-a.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;spec-a file: before hook&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">context(<span class="string">&#x27;spec a&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;works&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;works 2&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test <code>spec-a.js</code> runs and the DevTools console prints the expected output</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">support file</span><br><span class="line">support file: before hook</span><br><span class="line">spec-a file: before hook</span><br></pre></td></tr></table></figure><p>This makes sense - the support file comes first, thus its hook is executed before the spec file&#39;s hook. Similarly, if we add a hook to <code>spec-b.js</code> it will execute in the same order</p><figure class="highlight js"><figcaption><span>cypress/integration/spec-b.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;spec-b file: before hook&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">context(<span class="string">&#x27;spec b&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;works&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;works 2&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>DevTools console messages:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">support file</span><br><span class="line">support file: before hook</span><br><span class="line">spec-b file: before hook</span><br></pre></td></tr></table></figure></p><h2><span id="before-hooks-when-running-all-specs">Before hooks when running all specs</span></h2><p>Great, but what happens when the user selects &quot;Run all specs&quot; button?</p><p><img src="/blog/images/run-all-specs/run-all-specs-button.png" alt="Run all specs button"></p><p>We see 4 tests finish in the Test Runner, and in the DevTools Network tab we can see the support file plus each spec file requested by the test runner.</p><p><img src="/blog/images/run-all-specs/run-all-specs.png" alt="Specs requested"></p><p>The scripts are then evaluated one after another, which is equivalent to running the following test code</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;support file&#x27;</span>)</span><br><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;support file: before hook&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;spec-a file: before hook&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">context(<span class="string">&#x27;spec a&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;works&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;works 2&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;spec-b file: before hook&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">context(<span class="string">&#x27;spec b&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;works&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;works 2&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The console prints the messages we expect</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">support file</span><br><span class="line">support file: before hook</span><br><span class="line">spec-a file: before hook</span><br><span class="line">spec-b file: before hook</span><br></pre></td></tr></table></figure><p>Good, no surprises here, but notice that <em>all</em> hooks executed before <em>all</em> tests. This is noticeable when adding a log message in each test.</p><p><img src="/blog/images/run-all-specs/log-from-test.png" alt="all before hooks ran before the tests"></p><p>If you assume that <code>spec-b: before</code> hook runs AFTER tests from <code>spec-a.js</code> but before tests in <code>spec-b.js</code>, you might get a wrong result here.</p><h2><span id="beforeeach-hook">BeforeEach hook</span></h2><p>Let&#39;s switch from <code>before</code> to <code>beforeEach</code> hook.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;support file&#x27;</span>)</span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;support file: beforeEach hook&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/spec-a.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;spec-a file: beforeEach hook&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/spec-b.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;spec-b file: beforeEach hook&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>When we run a single spec, the DevTools show the following messages.</p><p><img src="/blog/images/run-all-specs/spec-a-before-each.png" alt="Support and spec-a with beforeEach hooks"></p><p>Spec-b runs the same way by itself.</p><p>Now let&#39;s run <em>all specs</em> together. Just like before, this will be equivalent to executing this concatenated script.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;support file&#x27;</span>)</span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;support file: beforeEach hook&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;spec-a file: beforeEach hook&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">context(<span class="string">&#x27;spec a&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;works&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;works 2&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;spec-b file: beforeEach hook&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">context(<span class="string">&#x27;spec b&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;works&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;works 2&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Do you see the problem? Look at the printed console messages.</p><p><img src="/blog/images/run-all-specs/all-hooks.png" alt="All beforeEach hooks executed for each test"></p><p><em>Every hook</em> has run for every test. We probably did not mean for the <code>beforeEach</code> hook from <code>spec-b.js</code> to run before every test from <code>spec-a.js</code>, right? But because they were all in the same script at the root level, all three hooks are executed for every test.</p><h2><span id="solution">Solution</span></h2><ol><li><p>Never use &quot;Run all specs&quot; button. In fact, when you execute <code>cypress run</code>, Cypress never runs <em>all specs</em> together. Instead it executes &quot;support file + spec-a&quot;, then it separately executes &quot;support file + spec-b&quot; scripts.</p></li><li><p>Be wary of placing <code>before</code> or <code>beforeEach</code> hooks at the root level, instead prefer moving them into <code>describe</code> and <code>context</code> suites. This isolates the hooks, limiting them to the tests in that suite.</p></li></ol><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;support file&#x27;</span>)</span><br><span class="line">beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;support file: beforeEach hook&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/spec-a.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">&#x27;spec a&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;spec-a file: beforeEach hook&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;works&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;works 2&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/spec-b.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">&#x27;spec b&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;spec-b file: beforeEach hook&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;works&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;works 2&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(<span class="number">1</span>).to.equal(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/run-all-specs/isolate-hooks.png" alt="Isolated hooks"></p><p>When we place the hooks into a suite like above, they apply correctly to the tests inside their suite.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#example-application&quot;&gt;Example application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#support-file&quot;&gt;Support file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a h
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Keep Examples Up To Date</title>
    <link href="https://glebbahmutov.com/blog/keep-examples-up-to-date/"/>
    <id>https://glebbahmutov.com/blog/keep-examples-up-to-date/</id>
    <published>2020-05-22T04:00:00.000Z</published>
    <updated>2020-05-22T14:51:20.482Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#examples-examples-examples">Examples, examples, examples</a></li><li><a href="#concentrate-on-the-most-important-dependencies">Concentrate on the most important dependencies</a></li><li><a href="#set-up-ci">Set up CI</a></li><li><a href="#add-version-badges">Add version badges</a></li><li><a href="#auto-updating-badges">Auto-updating badges</a></li></ul><!-- tocstop --><h2><span id="examples-examples-examples">Examples, examples, examples</span></h2><p>I love building tools and I love having many examples for each tool. Lots of examples make it simpler to understand how the tool works. For example <a href="https://github.com/bahmutov/cypress-react-unit-test">cypress-react-unit-test</a> for testing React components has LOTS of both internal and external examples as you can see in the screenshot below:</p><p><img src="/blog/images/example-dependencies/examples.png" alt="Long list of examples"></p><p><strong>Tip:</strong> I give external example repos their own GitHub topic, in this case the topic <a href="https://github.com/topics/cypress-react-unit-test-example">cypress-react-unit-test-example</a> has 23 GitHub repositories.</p><p>It is a challenge to keep external example repos up to date with the latest version of <code>cypress-react-unit-test</code> as this user calls out:</p><p><img src="/blog/images/example-dependencies/tweet.png" alt="Tweet asking to update try-cra-app-typescript"></p><p>So how do we keep <a href="https://github.com/bahmutov/try-cra-app-typescript">try-cra-app-typescript</a> up-to-date?</p><h2><span id="concentrate-on-the-most-important-dependencies">Concentrate on the most important dependencies</span></h2><p>Each example might have multiple dependencies. The above project has</p><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@testing-library/jest-dom&quot;</span>: <span class="string">&quot;^4.2.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@testing-library/react&quot;</span>: <span class="string">&quot;^9.3.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@testing-library/user-event&quot;</span>: <span class="string">&quot;^7.1.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@types/jest&quot;</span>: <span class="string">&quot;^24.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@types/node&quot;</span>: <span class="string">&quot;^12.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@types/react&quot;</span>: <span class="string">&quot;^16.9.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@types/react-dom&quot;</span>: <span class="string">&quot;^16.9.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;react&quot;</span>: <span class="string">&quot;^16.13.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;react-dom&quot;</span>: <span class="string">&quot;^16.13.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;react-scripts&quot;</span>: <span class="string">&quot;3.4.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typescript&quot;</span>: <span class="string">&quot;~3.7.2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;cypress&quot;</span>: <span class="string">&quot;4.3.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cypress-react-unit-test&quot;</span>: <span class="string">&quot;3.0.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Because this is an example meant to demo <code>cypress-react-unit-test</code> + Cypress, we will ignore production dependencies and will only update <code>cypress</code> and <code>cypress-react-unit-test</code> dev dependencies. I will use <a href="https://renovate.whitesourcesoftware.com/">Renovate Bot</a> to automatically open pull requests when new versions of these two dependencies are published on NPM. Following the advice I gave in <a href="../whitelist-renovate/">How To Update Only Some Dependencies Using Renovate App</a> here is <code>renovate.json</code> file</p><figure class="highlight json"><figcaption><span>renovate.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;config:base&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;automerge&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;schedule&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;every weekend&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;updateNotScheduled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;timezone&quot;</span>: <span class="string">&quot;America/New_York&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;masterIssue&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;enabledManagers&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;npm&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;packageRules&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;packagePatterns&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;*&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;excludePackagePatterns&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;cypress&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cypress-react-unit-test&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;enabled&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We only need to update the dependencies we care about, and we can update them once a week during the weekend hours. When I enable Renovate GitHub Application for this repository, the app immediately opens a master issue showing the possible updates.</p><p><img src="/blog/images/example-dependencies/master-issue.png" alt="Renovate master issue"></p><h2><span id="set-up-ci">Set up CI</span></h2><p>To safely update any dependency, we must have tests and continuous integration service to run them. Following <a href="../example-ci-configs/">Example CI configs</a> I will use <a href="../trying-github-actions/">GitHub Actions</a> with <a href="https://github.com/cypress-io/github-action">cypress-io/github-action</a>.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">cypress-run:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cypress-io/github-action@v1</span></span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> I always have the CI badge in the README file pointing at the <code>master</code> branch.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[![ci status][ci image]][ci url]</span><br><span class="line">[ci image]: https:&#x2F;&#x2F;github.com&#x2F;bahmutov&#x2F;try-cra-app-typescript&#x2F;workflows&#x2F;ci&#x2F;badge.svg?branch&#x3D;master</span><br><span class="line">[ci url]: https:&#x2F;&#x2F;github.com&#x2F;bahmutov&#x2F;try-cra-app-typescript&#x2F;actions</span><br></pre></td></tr></table></figure><p>Now I can click on <code>cypress</code> or <code>cypress-react-unit-test</code> checkbox in the Renovate&#39;s master issue to open a pull request to update the dependency.</p><p><img src="/blog/images/example-dependencies/update-cypress.png" alt="Click checkbox next to the dependency to update"></p><p>A few seconds later a new pull request appears: Cypress dependency has been updated to v4.6.0 in <code>package.json</code> file; now it is being tested by GitHub Actions workflow.</p><p><img src="/blog/images/example-dependencies/update-cypress-pr.png" alt="Update Cypress pull request"></p><p>Once the CI finishes successfully we can manually merge the pull request or let Renovate Bot auto-merge it after an hour or so.</p><p><img src="/blog/images/example-dependencies/update-cypress-pr-green.png" alt="Cypress can be updated since the tests are green"></p><p><strong>Tip:</strong> if you use semantic release and automate the changelog writing, Renovate pull requests will show a very useful changelog. This makes it easier for the reviewer to decide how to proceed.</p><p><img src="/blog/images/example-dependencies/changelog.gif" alt="Renovate includes the release changelog from the dependency"></p><p>Sometimes a Renovate pull request shows a failed attempt to update. For example, the API for mounting component has changed between v3 and v4 (this was a breaking change).</p><p><img src="/blog/images/example-dependencies/failed-update.png" alt="Failed pull request to update cypress-react-unit-test"></p><p>We can inspect the CI output to see the error message.</p><p><img src="/blog/images/example-dependencies/failure.png" alt="Mount method has changed between v3 and v4"></p><p>I will still merge this pull request, but then I will update the tests to use <code>cypress-react-unit-test</code> using the new API. You can see the changes in commit <a href="https://github.com/bahmutov/try-cra-app-typescript/commit/aed44a77ec300d1f5af3639067ca4f86155385bb">aed44a</a>.</p><h2><span id="add-version-badges">Add version badges</span></h2><p>I want to make it obvious to anyone looking at the <a href="https://github.com/bahmutov/cypress-react-unit-test">cypress-react-unit-test</a> what the compatible Cypress and <code>cypress-react-unit-test</code> versions are right now. The simplest way in my opinion is to put the current dependency versions into the README as badges. I have a little utility for this <a href="https://github.com/bahmutov/dependency-version-badge">dependency-version-badge</a>. We can simply run the tool using <code>npx</code> and insert two badges into the README at the first line</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx -p dependency-version-badge update-badge cypress cypress-react-unit-test</span></span><br><span class="line">npx: installed 3 in 2.091s</span><br><span class="line">⚠️ Could not find version badge for dependency &quot;cypress&quot;</span><br><span class="line">Insert new badge on the first line</span><br><span class="line">saving updated readme with cypress@4.6.0</span><br><span class="line">⚠️ Could not find version badge for dependency &quot;cypress-react-unit-test&quot;</span><br><span class="line">Insert new badge on the first line</span><br><span class="line">saving updated readme with cypress-react-unit-test@4.2.3</span><br></pre></td></tr></table></figure><p>The badges use shields.io to pull SVG of the badge and set the text to the dependency&#39;s name and version.</p><p><img src="/blog/images/example-dependencies/badges-markdown.png" alt="The first line of the README.md"></p><p>The rendered README file looks nice</p><p><img src="/blog/images/example-dependencies/badges.png" alt="Rendered README file with CI and version badges"></p><h2><span id="auto-updating-badges">Auto-updating badges</span></h2><p>We have manually set the badges with dependencies, but keeping them up to date manually is too much work. Let&#39;s update them automatically using GitHub Action. I will add another workflow file that should only run when pushing new code to <code>master</code> branch. We can further limit this action to only execute when the commit includes changes to <code>README</code>, <code>package.json</code> or the workflow file itself.</p><figure class="highlight yml"><figcaption><span>.github/workflows/badges.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">badges</span></span><br><span class="line"><span class="comment"># update README badge only if the README file changes</span></span><br><span class="line"><span class="comment"># or if the package.json file changes, or this file changes</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">README.md</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">package.json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.github/workflows/badges.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Badges</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Update</span> <span class="string">version</span> <span class="string">badges</span> <span class="string">🏷</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npx</span> <span class="string">-p</span> <span class="string">dependency-version-badge</span> <span class="string">update-badge</span> <span class="string">cypress</span> <span class="string">cypress-react-unit-test</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># commit any changed files</span></span><br><span class="line">      <span class="comment"># https://github.com/mikeal/publish-to-github-action</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">any</span> <span class="string">changes</span> <span class="string">to</span> <span class="string">repo</span> <span class="string">📤</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">mikeal/publish-to-github-action@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Usually there are no changes and the workflow finishes without pushing any new code</p><p><img src="/blog/images/example-dependencies/no-badge-updates.png" alt="Badges workflow when the versions stay the same"></p><p>But let&#39;s say we change the <code>cypress-react-unit-test</code> version in <code>package.json</code>. We can do it manually to simulate the version change, but normally Renovate would merge a pull request with version bump.</p><figure class="highlight diff"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &quot;cypress-react-unit-test&quot;: &quot;4.2.3&quot;</span></span><br><span class="line"><span class="addition">+ &quot;cypress-react-unit-test&quot;: &quot;4.2.2&quot;</span></span><br></pre></td></tr></table></figure><p>The &quot;badges&quot; workflow runs and updates the markdown in the README file. Notice the changed Markdown file in Git status before pushing the change from the GitHub Action back to the repository.</p><p><img src="/blog/images/example-dependencies/badge-update.png" alt="Badges action has changed the README file"></p><p>You can see the automatic commit in the list of commits.</p><p><img src="/blog/images/example-dependencies/commits.png" alt="Commits show README update"></p><p><img src="/blog/images/example-dependencies/badge-commit.png" alt="README update commit shows the updated badge"></p><p>Now the example repository will stay up to date, and make it obvious to our users if the example shown is still applicable.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#examples-examples-examples&quot;&gt;Examples, examples, examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#concentrate-on-the-most-impo
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="markdown" scheme="https://glebbahmutov.com/blog/tags/markdown/"/>
    
      <category term="renovate" scheme="https://glebbahmutov.com/blog/tags/renovate/"/>
    
  </entry>
  
  <entry>
    <title>Mocking named TypeScript imports during tests</title>
    <link href="https://glebbahmutov.com/blog/mocking-named-typescript-imports/"/>
    <id>https://glebbahmutov.com/blog/mocking-named-typescript-imports/</id>
    <published>2020-05-20T04:00:00.000Z</published>
    <updated>2020-05-20T14:15:21.818Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> you can find the companion source code in <a href="https://github.com/bahmutov/mock-ts-imports">bahmutov/mock-ts-imports</a> repository.</p><p>Imagine we have the following 2 TypeScript files.</p><figure class="highlight ts"><figcaption><span>math.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>user.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&#x27;./math&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> compute = <span class="function">(<span class="params">a, b</span>) =&gt;</span> add(a, b)</span><br></pre></td></tr></table></figure><p>Both files use <em>named imports and exports</em> which causes problems trying to stub them from the tests.</p><h2><span id="testing-direct-named-import">Testing direct named import</span></h2><p>Let&#39;s write unit test to confirm the function <code>add</code> works. I will use <a href="https://github.com/avajs/ava">Ava</a> test runner. To directly load TS spec files (and source code), I will use <code>ts-node</code> and <code>ava-ts</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D ava ava-ts typescript ts-node</span></span><br><span class="line">+ ava-ts@0.25.2</span><br><span class="line">+ ts-node@8.10.1</span><br><span class="line">+ ava@3.8.2</span><br><span class="line">+ typescript@3.9.3</span><br></pre></td></tr></table></figure><p>Our first test</p><figure class="highlight ts"><figcaption><span>math-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&#x27;ava&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;add&#125; <span class="keyword">from</span> <span class="string">&#x27;./math&#x27;</span></span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;add&#x27;</span>, <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// testing the original function</span></span><br><span class="line">  t.deepEqual(add(<span class="number">2</span>, <span class="number">3</span>), <span class="number">5</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>It passes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npx ava-ts math-spec.ts</span><br><span class="line"></span><br><span class="line">  1 passed</span><br></pre></td></tr></table></figure><h2><span id="testing-transient-named-import">Testing transient named import</span></h2><p>The module <code>math.ts</code> exports <code>add</code> that module <code>user.ts</code> calls during <code>compute</code> execution. Can we write a test for <code>user.ts</code> that stubs this indirect <code>math.ts add</code> export? Can we write a test where <code>compute</code> calls real <code>add</code>, and another test calls stubbed <code>add</code>?</p><figure class="highlight ts"><figcaption><span>user-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &quot;compute&quot; imports &quot;add&quot; from &quot;./math&quot; using named import</span></span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&#x27;ava&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; compute &#125; <span class="keyword">from</span> <span class="string">&#x27;./user&#x27;</span></span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;real add&#x27;</span>, <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// no stubbing</span></span><br><span class="line">  t.deepEqual(compute(<span class="number">2</span>, <span class="number">3</span>), <span class="number">5</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;stubbed add&#x27;</span>, <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// somehow stub &quot;add&quot; from &quot;./math.ts&quot; to return known value like 100</span></span><br><span class="line">  stubSomehow(<span class="string">&#x27;./math&#x27;</span>, <span class="string">&#x27;add&#x27;</span>).returns(<span class="number">100</span>)</span><br><span class="line">  t.deepEqual(compute(<span class="number">2</span>, <span class="number">3</span>), <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Yes - by using a nice utility <a href="https://github.com/EmandM/ts-mock-imports">ts-mock-imports</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i ts-mock-imports sinon</span></span><br><span class="line">+ sinon@9.0.2</span><br><span class="line">+ ts-mock-imports@1.3.0</span><br></pre></td></tr></table></figure><p>I am installing <code>ts-mock-imports</code> and its peer dependency <a href="https://sinonjs.org/">Sinon</a>.</p><p>Let&#39;s mock named imports, even if they are loaded indirectly.</p><figure class="highlight ts"><figcaption><span>user-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &quot;compute&quot; imports &quot;add&quot; from &quot;./math&quot; using named import</span></span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&#x27;ava&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; compute &#125; <span class="keyword">from</span> <span class="string">&#x27;./user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ImportMock &#125; <span class="keyword">from</span> <span class="string">&#x27;ts-mock-imports&#x27;</span></span><br><span class="line"><span class="comment">// to mock &quot;./math add&quot; export need to import entire module</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">&#x27;./math&#x27;</span></span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;real add&#x27;</span>, <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// no stubbing</span></span><br><span class="line">  t.deepEqual(compute(<span class="number">2</span>, <span class="number">3</span>), <span class="number">5</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;stubbed add&#x27;</span>, <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// somehow stub &quot;add&quot; from &quot;./math.ts&quot; to return known value like 100</span></span><br><span class="line">  ImportMock.mockFunction(math, <span class="string">&#x27;add&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  t.deepEqual(compute(<span class="number">2</span>, <span class="number">3</span>), <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Note that we had to import <code>./math</code> as <code>math</code> object to be able to mock a named import <code>add</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx ava-ts user-spec.ts</span></span><br><span class="line"></span><br><span class="line">  2 passed</span><br></pre></td></tr></table></figure><p>Under the hood, the <code>mockFunction</code> uses <a href="https://sinonjs.org/releases/v9.0.2/stubs/">Sinon stubs</a>.</p><h2><span id="restore-mocks">Restore mocks</span></h2><p>Once mocked, the function <code>math.add</code> will stay mocked until restored.</p><figure class="highlight ts"><figcaption><span>user-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">&#x27;real add&#x27;</span>, <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// no stubbing</span></span><br><span class="line">  t.deepEqual(compute(<span class="number">2</span>, <span class="number">3</span>), <span class="number">5</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;stubbed add&#x27;</span>, <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// somehow stub &quot;add&quot; from &quot;./math.ts&quot; to return known value like 100</span></span><br><span class="line">  ImportMock.mockFunction(math, <span class="string">&#x27;add&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  t.deepEqual(compute(<span class="number">2</span>, <span class="number">3</span>), <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;add stays stubbed&#x27;</span>, <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  t.deepEqual(compute(<span class="number">-1</span>, <span class="number">7</span>), <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx ava-ts user-spec.ts</span></span><br><span class="line"></span><br><span class="line">  3 passed</span><br></pre></td></tr></table></figure><p>I strongly recommend each test starts by restoring any mocked functions.</p><figure class="highlight ts"><figcaption><span>user-spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(ImportMock.restore)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;real add&#x27;</span>, <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// no stubbing</span></span><br><span class="line">  t.deepEqual(compute(<span class="number">2</span>, <span class="number">3</span>), <span class="number">5</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;stubbed add&#x27;</span>, <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// somehow stub &quot;add&quot; from &quot;./math.ts&quot; to return known value like 100</span></span><br><span class="line">  ImportMock.mockFunction(math, <span class="string">&#x27;add&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  t.deepEqual(compute(<span class="number">2</span>, <span class="number">3</span>), <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;add stays stubbed&#x27;</span>, <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  t.deepEqual(compute(<span class="number">-1</span>, <span class="number">7</span>), <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The third test will correctly fail, because the mock <code>add</code> no longer returns 100.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx ava-ts user-spec.ts</span></span><br><span class="line"></span><br><span class="line">  2 passed</span><br><span class="line">  1 failed</span><br><span class="line"></span><br><span class="line">  add stays stubbed</span><br><span class="line"></span><br><span class="line">  /Users/gleb/git/mock-ts-imports/user-spec.ts:22</span><br><span class="line"></span><br><span class="line">   21: test(&#x27;add stays stubbed&#x27;, t =&gt; &#123;</span><br><span class="line">   22:   t.deepEqual(compute(-1, 7), 100)</span><br><span class="line">   23: &#125;)</span><br><span class="line"></span><br><span class="line">  Difference:</span><br><span class="line"></span><br><span class="line">  - 6</span><br><span class="line">  + 100</span><br></pre></td></tr></table></figure><p>You can also change and restore individual mock</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">&#x27;stub and restore&#x27;</span>, <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> stub = ImportMock.mockFunction(math, <span class="string">&#x27;add&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">  t.deepEqual(compute(<span class="number">2</span>, <span class="number">3</span>), <span class="number">100</span>)</span><br><span class="line">  stub.returns(<span class="number">42</span>)</span><br><span class="line">  t.deepEqual(compute(<span class="number">2</span>, <span class="number">3</span>), <span class="number">42</span>)</span><br><span class="line">  stub.restore()</span><br><span class="line">  t.deepEqual(compute(<span class="number">2</span>, <span class="number">3</span>), <span class="number">5</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="more-info">More info</span></h2><ul><li><a href="../mocha-and-sinon/">Mocha and Sinon</a></li><li><a href="../lock-down-sinon-stub/">Lock Down Sinon Stub</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can find the companion source code in &lt;a href=&quot;https://github.com/bahmutov/mock-ts-imports&quot;&gt;bahmutov/mock-ts-i
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="typescript" scheme="https://glebbahmutov.com/blog/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>My Vision for Component Tests in Cypress</title>
    <link href="https://glebbahmutov.com/blog/my-vision-for-component-tests/"/>
    <id>https://glebbahmutov.com/blog/my-vision-for-component-tests/</id>
    <published>2020-04-29T04:00:00.000Z</published>
    <updated>2020-04-29T18:52:42.487Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#example-application">Example application</a></li><li><a href="#the-goal">The Goal</a></li><li><a href="#adding-tests">Adding tests</a></li><li><a href="#code-coverage">Code coverage</a></li><li><a href="#component-test">Component test</a></li><li><a href="#styles">Styles</a></li><li><a href="#testing-the-interface">Testing the interface</a></li><li><a href="#graphql-example">GraphQL example</a></li><li><a href="#components-all-the-way-down">Components all the way down</a></li><li><a href="#benefits">Benefits</a></li><li><a href="#examples">Examples</a></li><li><a href="#future-plans">Future plans</a></li><li><a href="#thank-you">Thank you</a></li></ul><!-- tocstop --><p>I have been talking about framework-specific component testing for ages now. I have even coded a bunch of adaptors like <a href="https://github.com/bahmutov/cypress-react-unit-test">cypress-react-unit-test</a>, <a href="https://github.com/bahmutov/cypress-vue-unit-test">cypress-vue-unit-test</a> and others, that allow mounting individual components into Cypress and run them as full-fledged mini-web applications. While the initial solution was technically ok, due to the way Cypress works it has a long list of issues: React Hooks do not work, styles are often lost, etc.</p><p>I am excited to say that we have an [experimental support][<a href="https://github.com/cypress-io/cypress/releases/tag/v4.5.0]">https://github.com/cypress-io/cypress/releases/tag/v4.5.0]</a> for a new way of binding test code in Cypress v4.5.0 that seems to solve <em>all known problems</em>. In this blog post I will show how it might work, once we release it.</p><center><strong>⚠️ Warning:</strong> component testing is currently in Alpha release. If you find a problem, please open an issue in the adaptor repo (like <a href="https://github.com/bahmutov/cypress-react-unit-test">bahmutov/cypress-react-unit-test</a>, <a href="https://github.com/bahmutov/cypress-vue-unit-test">bahmutov/cypress-vue-unit-test</a>). Use this awesome feature at your own risk.</center><h2><span id="example-application">Example application</span></h2><p>I will take a nice Todo application from blog post <a href="https://www.digitalocean.com/community/tutorials/how-to-build-a-react-to-do-app-with-react-hooks">How To Build a React To-Do App with React Hooks</a> as the starting point. You can see this application yourself at its original <a href="https://codesandbox.io/s/oj3qm2zq06">https://codesandbox.io/s/oj3qm2zq06</a> URL.</p><p><img src="/blog/images/components/app-code.png" alt="React Todo App"></p><p>I have downloaded the code from the sandbox to my repo <a href="https://github.com/bahmutov/react-todo-with-hooks">https://github.com/bahmutov/react-todo-with-hooks</a>; it has a CSS file and two JS files - very compact example.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/repo</span><br><span class="line">  public/</span><br><span class="line">    index.html</span><br><span class="line">  src/</span><br><span class="line">    App.css</span><br><span class="line">    App.js</span><br><span class="line">    index.js</span><br><span class="line">  package.json</span><br></pre></td></tr></table></figure><p>The application is bundled and served using <a href="https://www.npmjs.com/package/react-scripts">react-scripts</a> which is often used to serve modern React applications.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;react&quot;</span>: <span class="string">&quot;16&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;react-dom&quot;</span>: <span class="string">&quot;16&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;react-scripts&quot;</span>: <span class="string">&quot;3.1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;react-scripts start&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;react-scripts build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;react-scripts test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eject&quot;</span>: <span class="string">&quot;react-scripts eject&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="the-goal">The Goal</span></h2><p>I have noticed that the application allows us to mark Todo items as completed, but it never allows to &quot;undo&quot; completing an item. Once the task is done, there is no way to get it back to the initial incomplete state.</p><p><img src="/blog/images/components/complete.gif" alt="Completing an item cannot be undone"></p><p>I would like to change &quot;complete&quot; an item into &quot;toggle&quot; an item. But I don&#39;t know the code of the application, so it is dangerous to simply start hacking. We need tests first; and we want to make sure we test the entire application before changing its behavior.</p><h2><span id="adding-tests">Adding tests</span></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress</span></span><br><span class="line">+ cypress@4.5.0</span><br></pre></td></tr></table></figure><p>Our first full end-to-end test goes through a typical user story.</p><figure class="highlight js"><figcaption><span>cypress/integration/todo-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line">describe(<span class="string">&#x27;Todo App&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;completes an item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// base url is stored in &quot;cypress.json&quot; file</span></span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// there are several existing todos</span></span><br><span class="line">    cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    cy.log(<span class="string">&#x27;**adding a todo**&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.input&#x27;</span>).type(<span class="string">&#x27;write tests&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">&#x27;**completing a todo**&#x27;</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;write tests&#x27;</span>).contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;Complete&#x27;</span>).click()</span><br><span class="line">    cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;write tests&#x27;</span>)</span><br><span class="line">      .should(<span class="string">&#x27;have.css&#x27;</span>, <span class="string">&#x27;text-decoration&#x27;</span>, <span class="string">&#x27;line-through solid rgb(74, 74, 74)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cy.log(<span class="string">&#x27;**removing a todo**&#x27;</span>)</span><br><span class="line">    <span class="comment">// due to quarantine, we have to delete an item</span></span><br><span class="line">    <span class="comment">// without completing it</span></span><br><span class="line">    cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;Meet friend for lunch&#x27;</span>).contains(<span class="string">&#x27;button&#x27;</span>, <span class="string">&#x27;x&#x27;</span>).click()</span><br><span class="line">    cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;Meet friend for lunch&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs and passes</p><p><img src="/blog/images/components/e2e-test.gif" alt="Full Cypress end-to-end test"></p><h2><span id="code-coverage">Code coverage</span></h2><p>Did we test all code paths in our application? The simplest way for us to find out is to measure how much of the application&#39;s code was executed by running this one e2e test. We can follow the <a href="https://on.cypress.io/code-coverage">Cypress Code Coverage Guide</a> to set up coverage reporting.</p><center>  <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/edgeQZ8UpD0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><ol><li>Instrument the application&#39;s code while running. For any application that uses <code>react-scripts</code> we can use module <a href="https://github.com/cypress-io/instrument-cra">cypress-io/instrument-cra</a> to do so on the fly.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D @cypress/instrument-cra</span></span><br><span class="line">+ @cypress/instrument-cra@1.1.0</span><br></pre></td></tr></table></figure><p>When we start the application, we preload this module first - and we will have application&#39;s code instrumented.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;react-scripts -r @cypress/instrument-cra start&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>We need to add <a href="https://github.com/cypress-io/code-coverage">@cypress/code-coverage</a> to Cypress to merge coverage from tests and save report</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D @cypress/code-coverage</span></span><br><span class="line">+ @cypress/code-coverage@3.1.0</span><br></pre></td></tr></table></figure><p>This plugin should be loaded from the support and plugins files</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@cypress/code-coverage/support&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;@cypress/code-coverage/task&#x27;</span>)(on, config)</span><br><span class="line">  <span class="comment">// IMPORTANT to return the config object</span></span><br><span class="line">  <span class="comment">// with the any changed environment variables</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Start Cypress again and run the test. You see &quot;Saving coverage from ...&quot; and &quot;Coverage report&quot; messages at the end of the run.</p><p><img src="/blog/images/components/code-coverage-messages.png" alt="Code coverage messages"></p><p>In the folder <code>coverage</code> you will find the report in several formats, let&#39;s open the static HTML one</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> open coverage/lcov-report/index.html</span></span><br></pre></td></tr></table></figure><p>Our single end-to-end test was <em>very effective</em> at covering almost all lines of the application.</p><p><img src="/blog/images/components/code-coverage.png" alt="Total code coverage"></p><p>We can drill down into individual file coverage.</p><p><img src="/blog/images/components/code-coverage-app.png" alt="A single line missed"></p><h2><span id="component-test">Component test</span></h2><p>The line we missed is inside <code>TodoForm</code> component, and it is kind of hard to confirm its behavior. We can easily write an end-to-end test that tries to &quot;enter&quot; empty input.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;input&#x27;</span>).type(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">// there are still 3 todos</span></span><br><span class="line">cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>BUT it does not confirm the property <code>addTodo</code> is not called at all. We really want to test the component, not the entire application.</p><p>Let&#39;s write a component test.</p><ol><li>Install <a href="https://github.com/bahmutov/cypress-react-unit-test">cypress-react-unit-test v4+</a></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D cypress-react-unit-test</span></span><br><span class="line">+ @cypress-react-unit-test@4.0.0</span><br></pre></td></tr></table></figure><ol start="2"><li>In <code>cypress.json</code> enable <a href="https://on.cypress.io/experimental">experimental Cypress feature</a></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:3000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;testFiles&quot;</span>: <span class="string">&quot;**/*spec.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;experimentalComponentTesting&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;componentFolder&quot;</span>: <span class="string">&quot;src&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While end-to-end tests reside by default in <code>cypress/integration</code> folder, let&#39;s place component tests right alongside the source code in <code>src</code> folder. We will filter the spec files using <code>&quot;testFiles&quot;: &quot;**/*spec.js&quot;</code> parameter.</p><ol start="3"><li>Load <code>cypress-react-unit-test</code> from the support and plugins files</li></ol><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;cypress-react-unit-test/support&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;cypress-react-unit-test/plugins/cra-v3&#x27;</span>)(on, config)</span><br><span class="line">  <span class="comment">// IMPORTANT to return the config object</span></span><br><span class="line">  <span class="comment">// with the any changed environment variables</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unlike end-to-end tests, the component specs must be bundled the same way as the application code is. Thus we have added <a href="https://github.com/bahmutov/cypress-react-unit-test/blob/master/docs/recipes.md">multiple plugins helpers</a> that find and use the bundling options your application is using. In this case, Cypress will find the Webpack config from <code>react-scripts</code> module and will use it.</p><p>Let&#39;s write component test!</p><figure class="highlight js"><figcaption><span>src/TodoForm.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;TodoForm&#125; <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;mount&#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-react-unit-test&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;TodoForm&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;ignores empty input&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> addTodo = cy.stub()</span><br><span class="line">    mount(<span class="xml"><span class="tag">&lt;<span class="name">TodoForm</span> <span class="attr">addTodo</span>=<span class="string">&#123;addTodo&#125;</span> /&gt;</span></span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;input&#x27;</span>).type(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      expect(addTodo).not.have.been.called</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">&#x27;input&#x27;</span>).type(<span class="string">&#x27;hello there&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      expect(addTodo).to.be.calledWith(<span class="string">&#x27;hello there&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The component test directly imports <code>TodoForm</code> from the application code and mounts it using <code>mount</code> method from the <code>cypress-react-unit-test</code>. Once the component is mounted, it runs as a &quot;mini&quot; web application. We can use normal Cypress commands against it! Think of <code>mount</code> as <code>cy.visit</code> for components.</p><p><img src="/blog/images/components/todo-form-test.gif" alt="TodoForm component test"></p><p>You can see the component run inside Cypress iframe (where a regular web application usually runs during end-to-end test). You can interact with the component, inspect it using DevTools, see how it behaves using time-traveling debugger - all Cypress benefits apply both to end-to-end tests and to component tests. Plus code coverage is included by default!</p><h2><span id="styles">Styles</span></h2><p>When mounting a component, you might want to apply additional styles to make it look the same as in real application. The <code>mount</code> <a href="https://github.com/bahmutov/cypress-react-unit-test#options">command options</a> let you specify inline style, CSS filename or external stylesheets. For example, here is the <code>Todo</code> component test.</p><figure class="highlight js"><figcaption><span>src/Todo.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Todo&#125; <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span></span><br><span class="line">it(<span class="string">&#x27;renders new item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> todo = &#123;</span><br><span class="line">    text: <span class="string">&#x27;test item&#x27;</span>,</span><br><span class="line">    isCompleted: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// application loads Bulma library from public/index.html</span></span><br><span class="line">  <span class="comment">// so let&#x27;s load it from the component test too</span></span><br><span class="line">  mount(</span><br><span class="line">    &lt;Todo todo=&#123;todo&#125; /&gt;,</span><br><span class="line">    &#123;</span><br><span class="line">      stylesheets: [</span><br><span class="line">        <span class="string">&#x27;https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.css&#x27;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo button&#x27;</span>, <span class="string">&#x27;Complete&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/components/todo1.png" alt="First Todo test"></p><p>The buttons looks &quot;normal&quot;, but the entire component still does not look the same - because our styles come from <code>src/App.css</code> and require certain DOM structure. Let&#39;s recreate the structure and load additional CSS file in our test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;renders with styles&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> todo = &#123;</span><br><span class="line">    text: <span class="string">&#x27;test item&#x27;</span>,</span><br><span class="line">    isCompleted: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> TestTodo = <span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">Todo</span> <span class="attr">todo</span>=<span class="string">&#123;todo&#125;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  mount(</span><br><span class="line">    &lt;TestTodo /&gt;,</span><br><span class="line">    &#123;</span><br><span class="line">      stylesheets: [</span><br><span class="line">        <span class="string">&#x27;https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.css&#x27;</span></span><br><span class="line">      ],</span><br><span class="line">      cssFile: <span class="string">&#x27;src/App.css&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo button&#x27;</span>, <span class="string">&#x27;Complete&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/components/todo2.png" alt="Second Todo test"></p><p>Looks good.</p><h2><span id="testing-the-interface">Testing the interface</span></h2><p>As I <a href="https://www.youtube.com/watch?v=5FnalKRjpZk&amp;amp=&amp;t=0s&amp;amp=&amp;index=5">argued before</a> - a component test is just a unit test where props are inputs and side effects like DOM, network calls, etc are outputs. Let&#39;s confirm that Todo component calls the <code>removeTodo</code> prop when the user clicks &quot;Remove&quot; button.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;deletes an item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> todo = &#123;</span><br><span class="line">    text: <span class="string">&#x27;test item&#x27;</span>,</span><br><span class="line">    isCompleted: <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> removeTodo = cy.stub().as(<span class="string">&#x27;remove&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  mount(</span><br><span class="line">    &lt;Todo todo=&#123;todo&#125; index=&#123;<span class="number">123</span>&#125; removeTodo=&#123;removeTodo&#125; /&gt;,</span><br><span class="line">    &#123;</span><br><span class="line">      stylesheets: [</span><br><span class="line">        <span class="string">&#x27;https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.css&#x27;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  cy.contains(<span class="string">&#x27;.todo&#x27;</span>, <span class="string">&#x27;test item&#x27;</span>)</span><br><span class="line">    .find(<span class="string">&#x27;[data-cy=&quot;remove&quot;]&#x27;</span>).click()</span><br><span class="line">  cy.get(<span class="string">&#x27;@remove&#x27;</span>).should(<span class="string">&#x27;have.been.calledWith&#x27;</span>, <span class="number">123</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/components/todo3.png" alt="Removing todo"></p><h2><span id="graphql-example">GraphQL example</span></h2><p>Notice how we directly passed a stub into the component as a property - because the component &quot;lives&quot; right inside the spec. By having direct access to the component, you can do amazing things - like combine mock and live GraphQL calls, see <a href="https://github.com/bahmutov/test-apollo">bahmutov/test-apollo</a></p><figure class="highlight js"><figcaption><span>test-apollo/src/Library.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Library, GET_BOOKS&#125; <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;mount&#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-react-unit-test&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; MockedProvider &#125; <span class="keyword">from</span> <span class="string">&#x27;@apollo/react-testing&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mocking GraphQL requests using</span></span><br><span class="line"><span class="comment">// https://www.apollographql.com/docs/react/development-testing/testing/#mockedprovider</span></span><br><span class="line">describe(<span class="string">&#x27;Library&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.fixture(<span class="string">&#x27;books&#x27;</span>).as(<span class="string">&#x27;books&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;shows loading while making the query&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// delays the response by 3 seconds</span></span><br><span class="line">    <span class="keyword">const</span> mocks = [</span><br><span class="line">      &#123;</span><br><span class="line">        request: &#123;</span><br><span class="line">          query: GET_BOOKS</span><br><span class="line">        &#125;,</span><br><span class="line">        result: <span class="built_in">this</span>.books,</span><br><span class="line">        delay: <span class="number">3000</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">    mount(</span><br><span class="line">      &lt;MockedProvider mocks=&#123;mocks&#125; addTypename=&#123;<span class="literal">false</span>&#125;&gt;</span><br><span class="line">        &lt;Library /&gt;</span><br><span class="line">      &lt;/MockedProvider&gt;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 😀 compare declarative testing vs promise waits in</span></span><br><span class="line">    <span class="comment">// https://www.apollographql.com/docs/react/development-testing/testing/#testing-final-state</span></span><br><span class="line">    cy.contains(<span class="string">&#x27;Loading ...&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;[data-cy=book]&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    cy.contains(<span class="string">&#x27;Loading ...&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/components/graphql-test.gif" alt="Mocking GraphQL with delay component test"></p><h2><span id="components-all-the-way-down">Components all the way down</span></h2><p>Component testing can work with components of any size. We have tested <code>TodoForm</code> and <code>Todo</code> components, let&#39;s test the top-level <code>App</code> component.</p><figure class="highlight js"><figcaption><span>src/App.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;mount&#125; <span class="keyword">from</span> <span class="string">&#x27;cypress-react-unit-test&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;App&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mount(</span><br><span class="line">      &lt;App /&gt;,</span><br><span class="line">      &#123;</span><br><span class="line">        stylesheets: [</span><br><span class="line">          <span class="string">&#x27;https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.css&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;works&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;input.input&#x27;</span>).type(<span class="string">&#x27;Test with Cypress&#123;enter&#125;&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">      .contains(<span class="string">&#x27;Meet friend for lunch&#x27;</span>)</span><br><span class="line">      .find(<span class="string">&#x27;[data-cy=remove]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">&#x27;.todo&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs and looks ... almost like the complete application!</p><p><img src="/blog/images/components/app-test.gif" alt="App component test"></p><p>Component testing gives you a flexibility over the scope of the code you want to test. In addition to testing your application as a whole via end-to-end tests you can test a subset of the application &quot;tree&quot;. If your application has the top level authentication that is hard to bypass from an end-to-end test - you can test the component that sits right under the authentication provider.</p><p>Finally, while we are testing components, let&#39;s test a few functions using unit tests. While this was always possible in Cypress, component testing mounting mode makes it much closer to testing the real code, because bundling the component spec is done using your application&#39;s settings.</p><figure class="highlight js"><figcaption><span>src/App.spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App, &#123;toggleOneTodo&#125; <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span></span><br><span class="line">describe(<span class="string">&#x27;App&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;toggles correctly&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> todos = [&#123;</span><br><span class="line">      isCompleted: <span class="literal">false</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      isCompleted: <span class="literal">false</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      isCompleted: <span class="literal">false</span></span><br><span class="line">    &#125;]</span><br><span class="line">    <span class="keyword">const</span> newTodos = toggleOneTodo(todos, <span class="number">2</span>)</span><br><span class="line">    expect(newTodos).to.deep.equal([&#123;</span><br><span class="line">        isCompleted: <span class="literal">false</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        isCompleted: <span class="literal">false</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        isCompleted: <span class="literal">true</span></span><br><span class="line">      &#125;])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>From the smallest units of code to the largest components - you control the scale of <em>what</em> you want to test.</p><h2><span id="benefits">Benefits</span></h2><p>In my completely biased personal opinion, Cypress component testing using the real browser has many advantages</p><table><thead><tr><th>Feature</th><th>Cypress + <code>cypress-X-unit-test</code></th></tr></thead><tbody><tr><td>Test runs in real browser</td><td>✅</td></tr><tr><td>Cross-platform</td><td>Chrome / Firefox / Microsoft Edge</td></tr><tr><td>Uses full mount</td><td>✅</td></tr><tr><td>Test speed</td><td>as fast as the app works in the browser</td></tr><tr><td>Test can use additional plugins</td><td>use any <a href="https://on.cypress.io/plugins">Cypress plugin</a></td></tr><tr><td>Test can interact with component</td><td>use any <a href="https://on.cypress.io/api">Cypress command</a></td></tr><tr><td>Debugging</td><td>use browser DevTools, Cypress time-traveling debugger</td></tr><tr><td>Re-run tests on file or test change</td><td>✅</td></tr><tr><td>Test output on CI</td><td>terminal, screenshots, videos</td></tr><tr><td>Tests can be run in parallel</td><td>✅ via <a href="https://on.cypress.io/parallelization">parallelization</a></td></tr><tr><td>Test against interface</td><td>✅ and can use <code>@testing-library/cypress</code></td></tr><tr><td>Spying and mocking</td><td>Sinon library</td></tr><tr><td>Code coverage</td><td>✅</td></tr><tr><td>Visual testing</td><td>✅ via <a href="https://on.cypress.io/visual-testing">visual plugins</a></td></tr></tbody></table><h2><span id="examples">Examples</span></h2><p>We have forked a number of 3rd party projects to confirm component testing works.</p><table><thead><tr><th>Repo</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://github.com/bahmutov/try-cra-with-unit-test">try-cra-with-unit-test</a></td><td>Hello world initialized with CRAv3</td></tr><tr><td><a href="https://github.com/bahmutov/try-cra-app-typescript">try-cra-app-typescript</a></td><td>Hello world initialized with CRAv3 <code>--typescript</code></td></tr><tr><td><a href="https://github.com/bahmutov/react-todo-with-hooks">react-todo-with-hooks</a></td><td>Modern web application using hooks</td></tr><tr><td><a href="https://github.com/bahmutov/test-redux-examples">test-redux-examples</a></td><td>Example apps copies from official Redux repo and tested as components</td></tr><tr><td><a href="https://github.com/bahmutov/test-react-hooks-animations">test-react-hooks-animations</a></td><td>Testing React springs fun blob animation</td></tr><tr><td><a href="https://github.com/bahmutov/test-mdx-example">test-mdx-example</a></td><td>Example testing MDX components using Cypress</td></tr><tr><td><a href="https://github.com/bahmutov/test-apollo">test-apollo</a></td><td>Component testing an application that uses Apollo GraphQL library</td></tr><tr><td><a href="https://github.com/bahmutov/test-xstate-react">test-xstate-react</a></td><td>XState component testing using Cypress</td></tr><tr><td><a href="https://github.com/bahmutov/test-react-router-v5">test-react-router-v5</a></td><td>A few tests of React Router v5</td></tr><tr><td><a href="https://github.com/bahmutov/test-material-ui">test-material-ui</a></td><td>Testing Material UI components: date pickers, lists, autocomplete</td></tr><tr><td><a href="https://github.com/bahmutov/test-d3-react-gauge">test-d3-react-gauge</a></td><td>Testing React D3 gauges</td></tr><tr><td><a href="https://github.com/bahmutov/storybook-code-coverage">storybook-code-coverage</a></td><td>Example app where we get 100% code coverage easily with a single integration spec and a few component specs, replacing <a href="https://dev.to/penx/combining-storybook-cypress-and-jest-code-coverage-4pa5">several tools</a></td></tr><tr><td><a href="https://github.com/bahmutov/react-loading-skeleton">react-loading-skeleton</a></td><td>One to one Storybook tests for React skeleton components. Uses local <code>.babelrc</code> settings without Webpack config</td></tr><tr><td><a href="https://github.com/bahmutov/test-swr">test-swr</a></td><td>Component test for <a href="https://github.com/zeit/swr">Zeit SWR</a> hooks for remote data fetching</td></tr></tbody></table><p>To find more examples, see GitHub topic <a href="https://github.com/topics/cypress-react-unit-test-example">cypress-react-unit-test-example</a></p><h2><span id="future-plans">Future plans</span></h2><p>We have already released new versions of <a href="https://github.com/bahmutov/cypress-react-unit-test">cypress-react-unit-test</a> and <a href="https://github.com/bahmutov/cypress-vue-unit-test">cypress-vue-unit-test</a> and plan to upgrade other framework adaptors (Angular, Svelte, etc) to be compatible with <code>experimentalComponentTesting: true</code> mode.</p><h2><span id="thank-you">Thank you</span></h2><p>Special thank you 👏 to <a href="https://twitter.com/dmtrKovalenko">Dmitriy Kovalenko @dmtrKovalenko</a> for making Cypress Test Runner and React adaptor work through these PRs <a href="https://github.com/cypress-io/cypress/pull/5923">#5923</a> and <a href="https://github.com/bahmutov/cypress-react-unit-test/pull/108">#108</a>. They have removed the technical limitations that prevented React Hooks, component styles and other features from working correctly inside the component tests.</p><p>Another big shout out goes to <a href="https://twitter.com/_JessicaSachs">Jessica Sachs @_JessicaSachs</a> for working on component testing support in <a href="https://github.com/bahmutov/cypress-vue-unit-test">cypress-vue-unit-test</a> 👏.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#example-application&quot;&gt;Example application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-goal&quot;&gt;The Goal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ad
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cleaning Up Space on Development Machine</title>
    <link href="https://glebbahmutov.com/blog/cleaning-up-space/"/>
    <id>https://glebbahmutov.com/blog/cleaning-up-space/</id>
    <published>2020-04-10T04:00:00.000Z</published>
    <updated>2020-04-09T15:48:22.684Z</updated>
    
    <content type="html"><![CDATA[<p>If you run out of space on your development machine, you probably have old Docker images sitting around, a giant number of <code>node_modules</code> and maybe a number of old versions of Cypress test runner that you don&#39;t need anymore. Let&#39;s clean everything up.</p><h2><span id="pruning-docker">Pruning Docker</span></h2><p>Let&#39;s <a href="https://docs.docker.com/config/pruning/">prune Docker images</a> first. You can see how many images you have locally and how much space each takes with</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure><p>We can remove all image not currently used that were created more than 24 hours ago:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker image prune -a --filter <span class="string">&quot;until=24h&quot;</span></span><br><span class="line">WARNING! This will remove all images without at least one container associated to them.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br><span class="line"></span><br><span class="line">Deleted Images:</span><br><span class="line">untagged: node:12.4.0</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Total reclaimed space: 31.17GB</span><br></pre></td></tr></table></figure><p>Next you want to look at the stopped Docker containers - they are NOT deleted by default.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure><p>Remove them</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker container prune</span><br><span class="line">WARNING! This will remove all stopped containers.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br><span class="line">...</span><br><span class="line">Total reclaimed space: 8.155GB</span><br></pre></td></tr></table></figure><h2><span id="cleaning-node_modules">Cleaning node_modules</span></h2><p>NPM node modules are like a black hole - they weigh a lot and nothing escapes. You can quickly see how much they take on your disk using <a href="https://github.com/voidcosmos/npkill">npkill</a> utility.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g npkill</span><br><span class="line"><span class="comment"># run npkill from the root folder or from the folder with</span></span><br><span class="line"><span class="comment"># projects that have node_modules</span></span><br><span class="line">$ npkill</span><br></pre></td></tr></table></figure><h2><span id="remove-old-folders">Remove old folders</span></h2><p>You can list the folders by the last access time with:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ls -ltu</span><br><span class="line">total 696</span><br><span class="line">-rw-r--r--   1 gleb  staff  344501 Apr  9 11:02 the-dark-knight.css</span><br><span class="line">drwxr-xr-x  39 gleb  staff    1248 Apr  9 11:02 webamp</span><br><span class="line">drwxr-xr-x  22 gleb  staff     704 Apr  9 11:02 circleci-orb</span><br><span class="line">drwxr-xr-x  41 gleb  staff    1312 Apr  9 11:02 cypress-services</span><br><span class="line">drwxr-xr-x  11 gleb  staff     352 Apr  9 11:02 try-percy-agent-as-npm-module</span><br><span class="line">drwxr-xr-x  15 gleb  staff     480 Apr  9 11:02 test-react-router-v5</span><br><span class="line">drwxr-xr-x  14 gleb  staff     448 Apr  9 11:02 hasura-example</span><br><span class="line">drwxr-xr-x  19 gleb  staff     608 Apr  9 11:02 cypress-vue-unit-test</span><br><span class="line">...</span><br><span class="line">drwxr-xr-x  18 gleb  staff     576 Mar 26  2019 cypress-angular-unit-test</span><br><span class="line">drwxr-xr-x   2 gleb  staff      64 Mar 26  2019 cypress-blog-tests</span><br><span class="line">drwxr-xr-x   6 gleb  staff     192 Mar 26  2019 cypress-colors</span><br><span class="line">drwxr-xr-x  18 gleb  staff     576 Mar 26  2019 cypress-core-marta</span><br><span class="line">drwxr-xr-x  12 gleb  staff     384 Mar 26  2019 cypress-credentials</span><br><span class="line">drwxr-xr-x  11 gleb  staff     352 Mar 26  2019 cypress-dark-example</span><br></pre></td></tr></table></figure><p>You can probably delete the last folders - since you only accessed them a very long time ago.</p><h2><span id="folder-size">Folder size</span></h2><p>On Mac I really enjoy using <code>du</code> utility. For example, you can see the total folder size or top level plus first sublevel</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print just the total &quot;github-action&quot; folder size in human format (Megabytes)</span></span><br><span class="line">$ du -h -d 0 github-action</span><br><span class="line">459Mgithub-action</span><br><span class="line"></span><br><span class="line"><span class="comment"># print the total size of the folder &quot;github-action&quot;</span></span><br><span class="line"><span class="comment"># and sizes of its immediate subfolders</span></span><br><span class="line">$ du -h -d 1 github-action</span><br><span class="line">1.4Mgithub-action/dist</span><br><span class="line">228Kgithub-action/images</span><br><span class="line"> 60Mgithub-action/node_modules</span><br><span class="line">377Mgithub-action/examples</span><br><span class="line"> 40Kgithub-action/.github</span><br><span class="line"> 21Mgithub-action/.git</span><br><span class="line">4.0Kgithub-action/.vscode</span><br><span class="line">459Mgithub-action</span><br></pre></td></tr></table></figure><h2><span id="mac-users-tip">Mac users tip</span></h2><p>In Finder you can select and permanently delete files (without going through the Trash app) using <code>Option</code> + <code>Command</code> + <code>Delete</code> combination.</p><p>From the terminal I recommend using <a href="https://github.com/sindresorhus/trash-cli">trash-cli</a> that is safer to use than <code>rm</code>. <code>trash-cli</code> moves files to Trash so they can be restored.</p><h2><span id="cleaning-old-cypress-binaries">Cleaning old Cypress binaries</span></h2><p>Every time you install Cypress with <code>npm install cypress</code> it downloads NPM package <code>cypress</code> and stores it in the local <code>node_modules</code> folder. Then this NPM package runs its post-install script which checks if you need to download version <code>x.y.z</code> of the Cypress Electron-built binary. These binaries are stored in a central place on your machine to avoid re-downloading the same binary version again and again.</p><p>You can see where the binaries are stored:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/git/cypress-example-todomvc-redux on master</span><br><span class="line">$ npx cypress cache path</span><br><span class="line">/Users/gleb/Library/Caches/Cypress</span><br></pre></td></tr></table></figure><p>And the cached versions</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress cache list</span><br><span class="line">┌─────────┬──────────────┐</span><br><span class="line">│ version │ last used    │</span><br><span class="line">├─────────┼──────────────┤</span><br><span class="line">│ 3.0.1   │ 2 months ago │</span><br><span class="line">├─────────┼──────────────┤</span><br><span class="line">│ 3.0.2   │ 6 months ago │</span><br><span class="line">├─────────┼──────────────┤</span><br><span class="line">│ 3.0.3   │ 2 years ago  │</span><br><span class="line">├─────────┼──────────────┤</span><br><span class="line">│ 3.2.0   │ 3 months ago │</span><br><span class="line">├─────────┼──────────────┤</span><br><span class="line">│ 3.4.0   │ 6 months ago │</span><br><span class="line">├─────────┼──────────────┤</span><br><span class="line">│ 3.4.1   │ 13 days ago  │</span><br><span class="line">├─────────┼──────────────┤</span><br><span class="line">│ 3.5.0   │ 5 months ago │</span><br><span class="line">├─────────┼──────────────┤</span><br><span class="line">...</span><br><span class="line">├─────────┼──────────────┤</span><br><span class="line">│ 4.2.1   │ 10 days ago  │</span><br><span class="line">├─────────┼──────────────┤</span><br><span class="line">│ 4.3.0   │ 4 days ago   │</span><br><span class="line">└─────────┴──────────────┘</span><br></pre></td></tr></table></figure><p>Unfortunately, Cypress NPM modules does not have <a href="https://github.com/cypress-io/cypress/issues/5972"><code>cypress cache prune</code> command yet</a>, so you would need to delete the old folders manually. Let&#39;s see the folders - they are all named <code>/path/to/cache/x.y.z</code>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ls -ltu /Users/gleb/Library/Caches/Cypress</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  4 gleb  staff  128 Apr  9 10:46 4.2.1</span><br><span class="line">drwxr-xr-x  5 gleb  staff  160 Apr  6 19:23 3.8.2</span><br><span class="line">drwxr-xr-x  4 gleb  staff  128 Mar 31 14:26 4.3.0</span><br><span class="line">drwxr-xr-x  4 gleb  staff  128 Mar 16 17:07 4.2.0</span><br><span class="line">...</span><br><span class="line">drwxr-xr-x  3 gleb  staff   96 Mar 15  2019 3.2.0</span><br><span class="line">drwxr-xr-x  3 gleb  staff   96 Jul  9  2018 3.0.2</span><br><span class="line">drwxr-xr-x  3 gleb  staff   96 Jun  3  2018 3.0.1</span><br></pre></td></tr></table></figure><p>Each folder is quite large - unzipped Cypress is big!</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ du -h -d 0 /Users/gleb/Library/Caches/Cypress/4.0.0</span><br><span class="line">546M/Users/gleb/Library/Caches/Cypress/4.0.0</span><br></pre></td></tr></table></figure><p>Let&#39;s remove all cached Cypress v3 versions - that should free up some space!</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf /Users/gleb/Library/Caches/Cypress/3*</span><br></pre></td></tr></table></figure><p>Much better.</p><p><strong>Tip:</strong> if you need to re-install a Cypress binary version you have just deleted, run this command from the project that installed it:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress install</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you run out of space on your development machine, you probably have old Docker images sitting around, a giant number of &lt;code&gt;node_mod
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
      <category term="docker" scheme="https://glebbahmutov.com/blog/tags/docker/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>How To Update Only Some Dependencies Using Renovate App</title>
    <link href="https://glebbahmutov.com/blog/whitelist-renovate/"/>
    <id>https://glebbahmutov.com/blog/whitelist-renovate/</id>
    <published>2020-03-31T04:00:00.000Z</published>
    <updated>2020-03-31T17:25:17.869Z</updated>
    
    <content type="html"><![CDATA[<p>I have a common situation - in an example repo like <a href="https://github.com/cypress-io/netlify-plugin-cypress-example">https://github.com/cypress-io/netlify-plugin-cypress-example</a> we have lots of dependencies, but we are interested only in keeping <em>our Cypress</em> dependencies up to date. In this blog post I will show how to disable all package dependencies and then whitelist just a few ones to be checked.</p><p>I have set up repository <a href="https://github.com/bahmutov/renovate-update-single-module-example">bahmutov/renovate-update-single-module-example</a> to show this in action. There are 2 dependencies: <code>debug</code> and <code>chalk</code>, but I am only interested in keeping <code>debug</code> up-to-date. Here is the full <a href="https://github.com/bahmutov/renovate-update-single-module-example/blob/master/renovate.json">renovate.json</a> file</p><figure class="highlight json"><figcaption><span>renovate.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;config:base&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;enabledManagers&quot;</span>: [<span class="string">&quot;npm&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;packageRules&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;packagePatterns&quot;</span>: [<span class="string">&quot;*&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;excludePackagePatterns&quot;</span>: [<span class="string">&quot;debug&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;enabled&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thus we disable all package updates, except <code>debug</code> using <a href="https://docs.renovatebot.com/configuration-options/#excludepackagepatterns">excludePackagePatterns</a> option, found in <a href="https://docs.renovatebot.com/">Renovate Docs</a>.</p><p>If we go to <a href="https://app.renovatebot.com/dashboard">Renovate Dashboard</a> (access is private to the owner of the Renovate app) we can see our check jobs.</p><p><img src="/blog/images/whitelist-renovate/dashboard.png" alt="Renovate Dashboard"></p><p>Click on any build, and in the DEBUG logs you can search for a module and see if it was disabled.</p><p><img src="/blog/images/whitelist-renovate/disabled.png" alt="Disabled chalk module"></p><h2><span id="read-more">Read more</span></h2><ul><li><a href="https://glebbahmutov.com/blog/zeit-now-renovate-and-app/">Zeit Now GitHub app + Renovate app + Cypress tests = 💝</a></li><li><a href="https://glebbahmutov.com/blog/renovate-app/">Painless Dependency Upgrades with Renovate App</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have a common situation - in an example repo like &lt;a href=&quot;https://github.com/cypress-io/netlify-plugin-cypress-example&quot;&gt;https://github
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="renovate" scheme="https://glebbahmutov.com/blog/tags/renovate/"/>
    
  </entry>
  
  <entry>
    <title>Example CI configs</title>
    <link href="https://glebbahmutov.com/blog/example-ci-configs/"/>
    <id>https://glebbahmutov.com/blog/example-ci-configs/</id>
    <published>2020-03-30T04:00:00.000Z</published>
    <updated>2020-05-27T16:05:16.827Z</updated>
    
    <content type="html"><![CDATA[<p>Each snippet typically installs dependencies (with caching), runs tests and publishes new version to NPM and GitHub using <a href="https://github.com/semantic-release/semantic-release">semantic-release</a>.</p><h2><span id="github-actions">GitHub Actions</span></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">push</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">NPM</span> <span class="string">dependencies</span> <span class="string">📦</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">bahmutov/npm-install@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Show</span> <span class="string">GitHub</span> <span class="string">variables</span> <span class="string">📊</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">github-demo</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Semantic</span> <span class="string">Release</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">cycjimmy/semantic-release-action@v2</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">NPM_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.NPM_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Example repositories <a href="https://github.com/bahmutov/print-env">print-env</a>, <a href="https://github.com/bahmutov/make-empty-github-commit">make-empty-github-commit</a>.</p><p>Read more about GitHub Actions in <a href="../trying-github-actions/">Trying GitHub Actions</a> blog post. If you are doing Cypress End-to-end tests, I recommend using <a href="https://github.com/cypress-io/github-action">Cypress GitHub Action</a></p><h2><span id="circleci">CircleCI</span></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line">  <span class="comment"># Circle Node orb makes it simple to cache dependencies</span></span><br><span class="line">  <span class="comment"># https://circleci.com/orbs/registry/orb/circleci/node</span></span><br><span class="line">  <span class="attr">node:</span> <span class="string">circleci/node@1.1</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">executor:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">node/default</span></span><br><span class="line">      <span class="attr">tag:</span> <span class="string">&#x27;12&#x27;</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">node/with-cache:</span></span><br><span class="line">          <span class="attr">steps:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">install</span> <span class="string">dependencies</span> <span class="string">📦</span></span><br><span class="line">                <span class="attr">command:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">run</span> <span class="string">tests</span> <span class="string">🧪</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">e2e</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">NPM</span> <span class="string">publish</span> <span class="string">🚀</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">semantic-release</span></span><br></pre></td></tr></table></figure><p>Example repositories <a href="https://github.com/bahmutov/term-to-html">term-to-html</a></p><p>If you are doing Cypress End-to-end tests, I recommend using <a href="https://github.com/cypress-io/circleci-orb">Cypress CircleCI Orb</a></p><h2><span id="emoji">Emoji</span></h2><p>In the code samples above I am using emoji to quickly see each step.</p><table><thead><tr><th>Emoji</th><th>Step</th></tr></thead><tbody><tr><td><h3><span id>🛎</span></h3></td><td>Code check out from the repo</td></tr><tr><td><h3><span id>📦</span></h3></td><td>Installing and caching dependencies</td></tr><tr><td><h3><span id>🧹</span></h3></td><td>Linting source code</td></tr><tr><td><h3><span id>🧩</span></h3></td><td>Checking types, for example using <code>tsc --noEmit</code></td></tr><tr><td><h3><span id>💅</span></h3></td><td>Running <a href="./configure-prettier-in-vscode/">Prettier formatter</a></td></tr><tr><td><h3><span id>🚦</span></h3></td><td>Some sanity check before continuing</td></tr><tr><td><h3><span id>🏗</span></h3></td><td>Building application</td></tr><tr><td><h3><span id>🚛</span></h3></td><td>Moving or preparing application</td></tr><tr><td><h3><span id>🗑</span></h3></td><td>Delete file or folder</td></tr><tr><td><h3><span id>🧪</span></h3></td><td>Running tests</td></tr><tr><td><h3><span id>💨</span></h3></td><td>Running smoke tests</td></tr><tr><td><h3><span id>📊</span></h3></td><td>Running a demo step</td></tr><tr><td><h3><span id>📈</span></h3></td><td>Check code coverage</td></tr><tr><td><h3><span id>🚀</span></h3></td><td>Releasing a new version</td></tr></tbody></table><p>Here is how it looks in GitHub Actions</p><p><img src="/blog/images/ci-configs/gh-passed.png" alt="Emoji in GitHub Actions"></p><p><strong>Note:</strong> please do not use emoji in the <em>job names</em> - otherwise your GitHub commit status checks will <a href="https://github.community/t5/How-to-use-Git-and-GitHub/Emojicon-Unicode-symbols-are-not-supported-in-commit-status/td-p/5435">stop working</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Each snippet typically installs dependencies (with caching), runs tests and publishes new version to NPM and GitHub using &lt;a href=&quot;https:
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Testing Sentry Call with Cypress</title>
    <link href="https://glebbahmutov.com/blog/testing-sentry-with-cypress/"/>
    <id>https://glebbahmutov.com/blog/testing-sentry-with-cypress/</id>
    <published>2020-03-28T04:00:00.000Z</published>
    <updated>2020-03-29T23:17:45.493Z</updated>
    
    <content type="html"><![CDATA[<p>I love using <a href="https://sentry.io/welcome/">Sentry</a> for tracking errors in my web applications. Recently I have added crash reporting to our open source <a href="https://github.com/350-mass-cambridge-somerville/350-actions-client">350-mass-cambridge-somerville/350-actions-client</a> project in pull request <a href="https://github.com/350-mass-cambridge-somerville/350-actions-client/pull/24">#24</a> - see the app at <a href="https://www.maclimateactions.com/">https://www.maclimateactions.com/</a>.</p><p>The entire web application is tested using Cypress - let&#39;s validate that the app is sending a crash report to Sentry service using an end-to-end test too. Let&#39;s start a placeholder test that opens the app and does nothing.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;current action&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  beforeEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.server()</span><br><span class="line">    cy.route(<span class="string">&#x27;/actioncards/latest/&#x27;</span>, <span class="string">&#x27;fixture:latest&#x27;</span>)</span><br><span class="line">    cy.visit(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// check the page - should have info from the stubbed response</span></span><br><span class="line">    <span class="comment">// loaded from cypress/fixtures/latest.json</span></span><br><span class="line">    cy.contains(<span class="string">&#x27;Action Card 23&#x27;</span>).should(<span class="string">&#x27;be.visible&#x27;</span>)</span><br><span class="line">    cy.get(<span class="string">&#x27;[data-cy=action-check-display]&#x27;</span>).should(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it.only(<span class="string">&#x27;sends an error to Sentry&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// TODO write test commands</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Once the test runs and stops, open the DevTools inside Cypress. Switch to the application&#39;s context using a drop down. A nice trick to throw an unhandled exception <em>in the application, and not in the DevTools</em> it to make it asynchronous - for example by using <code>setTimeout</code> function. You can do <code>setTimeout(() =&gt; &#123; throw new Error(&#39;test error&#39;) &#125;, 1000)</code> and see Sentry handler executing an XHR call.</p><p><img src="/blog/images/test-sentry/sentry-error.png" alt="Triggering an error manually"></p><p><strong>Note:</strong> by default, Sentry uses <code>fetch</code> protocol to send the error object to its service API. Since Cypress does not support stubbing <code>fetch</code> requests yet, we force every client-side library to drop down to XHR using the example from <a href="https://github.com/cypress-io/cypress-example-recipes#stubbing-and-spying">&quot;Stubbing window.fetch&quot;</a> recipe. We simply delete the <code>window.fetch</code> property when every window is created.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> polyfill</span><br><span class="line"></span><br><span class="line"><span class="comment">// grab fetch polyfill from remote URL, could be also from a local package</span></span><br><span class="line">before(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> polyfillUrl = <span class="string">&#x27;https://unpkg.com/unfetch/dist/unfetch.umd.js&#x27;</span></span><br><span class="line"></span><br><span class="line">  cy.request(polyfillUrl).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    polyfill = response.body</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Cypress.on(<span class="string">&#x27;window:before:load&#x27;</span>, <span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">delete</span> win.fetch</span><br><span class="line">  <span class="comment">// since the application code does not ship with a polyfill</span></span><br><span class="line">  <span class="comment">// load a polyfilled &quot;fetch&quot; from the test</span></span><br><span class="line">  win.eval(polyfill)</span><br><span class="line">  win.fetch = win.unfetch</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s confirm this call happens. We need to prepare to intercept the call from the test. Look at the call&#39;s details, especially at the method and the destination URL.</p><p><img src="/blog/images/test-sentry/error-details.png" alt="Sentry call details"></p><p>Also look at the response object the Sentry service sends back to the caller.</p><p><img src="/blog/images/test-sentry/sentry-response.png" alt="Sentry response object"></p><p>Let&#39;s stub this route using <a href="https://on.cypress.io/route"><code>cy.route</code></a> command and response with similar object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;sends an error to Sentry&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.route(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;https://sentry.io/api/*/store/*&#x27;</span>, &#123;</span><br><span class="line">    id: <span class="string">&#x27;abc123&#x27;</span>,</span><br><span class="line">  &#125;).as(<span class="string">&#x27;sentry&#x27;</span>)</span><br><span class="line">  <span class="comment">// create an error, as if application has thrown it</span></span><br><span class="line">  cy.window().invoke(</span><br><span class="line">    <span class="string">&#x27;setTimeout&#x27;</span>,</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;test error&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">1000</span>,</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// confirm the call has happened</span></span><br><span class="line">  cy.wait(<span class="string">&#x27;@sentry&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs - and we can see the stubbed XHR call to Sentry correctly detected (and stopped)</p><p><img src="/blog/images/test-sentry/sentry-api-call.png" alt="The call to Sentry API does happen on error"></p><p>Great, but - a thrown error is still a thrown error, and Cypress treats is as a test failure. Thus we need to handle it as described in the blog post <a href="https://www.cypress.io/blog/2020/03/03/testing-edge-data-cases-with-network-stubbing-and-app-actions/">Testing Edge Data Cases with Network Stubbing and App Actions</a>. We will expect <code>uncaught:exception</code> event and will confirm it has <em>our test error message</em> and not some other <em>actual application error</em>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;sends an error to Sentry&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.route(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;https://sentry.io/api/*/store/*&#x27;</span>, &#123;</span><br><span class="line">    id: <span class="string">&#x27;abc123&#x27;</span>,</span><br><span class="line">  &#125;).as(<span class="string">&#x27;sentry&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cy.on(<span class="string">&#x27;uncaught:exception&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// only ignore OUR test error message</span></span><br><span class="line">    <span class="keyword">return</span> e.message === <span class="string">&#x27;test error&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create an error, as if application has thrown it</span></span><br><span class="line">  cy.window().invoke(</span><br><span class="line">    <span class="string">&#x27;setTimeout&#x27;</span>,</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;test error&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">1000</span>,</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// confirm the call has happened</span></span><br><span class="line">  cy.wait(<span class="string">&#x27;@sentry&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes. Let&#39;s confirm some of the fields the Sentry browser client sends to the service - it should have at least the error message.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// confirm the call has happened</span></span><br><span class="line">cy.wait(<span class="string">&#x27;@sentry&#x27;</span>)</span><br><span class="line">  .its(<span class="string">&#x27;requestBody&#x27;</span>)</span><br><span class="line">  .should(<span class="function"><span class="params">body</span> =&gt;</span> &#123;</span><br><span class="line">    expect(body.level).to.equal(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    expect(body.exception.values).to.have.length(<span class="number">1</span>)</span><br><span class="line">    expect(body.exception.values[<span class="number">0</span>]).to.deep.contain(&#123;</span><br><span class="line">      type: <span class="string">&#x27;Error&#x27;</span>,</span><br><span class="line">      value: <span class="string">&#x27;test error&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/test-sentry/full-test.png" alt="Passing test asserting Sentry is working correctly"></p><p><strong>Tip:</strong> writing XHR assertions this way is cumbersome, I suggest using helper library <a href="https://github.com/bahmutov/cy-spok">cy-spok</a> in the blog post <a href="https://www.cypress.io/blog/2019/12/23/asserting-network-calls-from-cypress-tests/">Asserting Network Calls from Cypress Tests</a>.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="../connecting-crash-reporting-with-end-to-end-tests/">Connecting crash reporting with end to end tests</a> shows how to add additional test information to Sentry crashes happening during end-to-end tests</li><li><a href="../simple-ajax-testing/">Simple Ajax testing</a> shows how to observe calls to Sentry from Node tests</li><li><a href="../know-unknown-unknowns-with-sentry/">Know unknown unknowns with Sentry</a> is probably my first blog post praising Sentry</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I love using &lt;a href=&quot;https://sentry.io/welcome/&quot;&gt;Sentry&lt;/a&gt; for tracking errors in my web applications. Recently I have added crash repo
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="sentry" scheme="https://glebbahmutov.com/blog/tags/sentry/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
</feed>
