<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2020-03-06T14:00:38.963Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CitizenClimateLobby short pitch</title>
    <link href="https://glebbahmutov.com/blog/ccl-pitch-at-pkg/"/>
    <id>https://glebbahmutov.com/blog/ccl-pitch-at-pkg/</id>
    <published>2020-03-05T05:00:00.000Z</published>
    <updated>2020-03-06T14:00:38.963Z</updated>
    
    <content type="html"><![CDATA[<p>Hi,</p><p>Solving climate crisis is tough. It requires us to change how we behave individually, as communities, and as a city. It will require changes at the state level, but most importantly it requires addressing the problem head-on as a nation.</p><p>I personally think that safe and abundant renewable power is almost here - we have the technology and it already beats coal on price. And the only reason it has not replaced oil and fracking gas is because they don&#39;t pay for the pollution they cause.</p><p>This is where <a href="https://citizensclimatelobby.org/" target="_blank" rel="noopener">CitizenClimateLobby</a> comes in. We are completely non-partizan organization that works at the federal level, and we are successful. We now have in the House the bill called &quot;<a href="https://energyinnovationact.org/" target="_blank" rel="noopener">Energy Innovation and Carbon Dividend Act</a>&quot; that we lobby for, and it has 80 co-sponsors, both Democrats and Republicans. This bill HR 763 will tax every fossil fuel the moment it gets extracted from the ground. This tax would be collected and then distributed to every citizen of the United States. You get this check and buy renewables that suddenly are so much cheaper.</p><p>The bill is NOT the full solution, but a significant step to making the economics of renewables very very attractive.</p><p>Join us - we have a table over there with Gary - we lobby the Congress via personal visits, phone calling and media campaigns, and endorsements from the industry and prominent individuals.</p><p>Make the fossil fuel pollution expensive - and the world will get greener.</p><ul><li><a href="https://citizensclimatelobby.org/" target="_blank" rel="noopener">https://citizensclimatelobby.org/</a></li><li><a href="https://citizensclimatelobby.org/monthly-calling-campaign/" target="_blank" rel="noopener">https://citizensclimatelobby.org/monthly-calling-campaign/</a></li><li><a href="https://energyinnovationact.org/" target="_blank" rel="noopener">https://energyinnovationact.org/</a></li><li><a href="https://www.eventbrite.com/e/pkg-2020-community-conversations-climate-change-tickets-89265199615" target="_blank" rel="noopener">PKG Community Meeting page</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Solving climate crisis is tough. It requires us to change how we behave individually, as communities, and as a city. It will r
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/tags/climate/"/>
    
  </entry>
  
  <entry>
    <title>Support Node 6 installs</title>
    <link href="https://glebbahmutov.com/blog/support-node6-installs/"/>
    <id>https://glebbahmutov.com/blog/support-node6-installs/</id>
    <published>2020-03-03T05:00:00.000Z</published>
    <updated>2020-03-03T14:52:02.360Z</updated>
    
    <content type="html"><![CDATA[<p>What is the minimum version of Node your NPM module requires? You might think it is Node 8 or Node 10 or even Node 6. But in reality you don&#39;t know - because the direct or transient NPM dependencies your project uses might require a different <em>higher</em> version, without even declaring it explicitly in the <code>engines</code> field of their <code>package.json</code> files.</p><p>Recently, we have experienced sudden &quot;bumps&quot; in minimum Node version required for our Cypress NPM package because of <a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">chalk</a> and <a href="https://github.com/sindresorhus/execa" target="_blank" rel="noopener">execa</a> dependencies. While we promised supporting Node v8.0.0, due to these dependencies our true minimum Node version turned out to be v8.12.0!</p><p>The only reliable way to determine if your project runs on Node 8.0.0 is to run your NPM package on Node 8.0.0. In this blog post I will show how to bundle and transpile your NPM package so it truly runs on Node v8.0.0 or even on Node v6.</p><p><strong>Note:</strong> you can find the source code at <a href="https://github.com/bahmutov/support-node-v6" target="_blank" rel="noopener">bahmutov/support-node-v6</a></p><h2><span id="the-problem">The problem</span></h2><p>Let&#39;s start a new NPM application that uses <code>chalk</code> and <code>execa</code> to print the list of files. We want to use the latest versions of all the tools, so we are working on Node v12</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~/git/support-node-v6 on master</span><br><span class="line"><span class="meta">$</span><span class="bash"> nvm use 12</span></span><br><span class="line">Now using node v12.13.0 (npm v6.13.7)</span><br><span class="line">~/git/support-node-v6 on master</span><br><span class="line"><span class="meta">$</span><span class="bash"> npm i -S chalk execa</span></span><br><span class="line">npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line">+ chalk@3.0.0</span><br><span class="line">+ execa@4.0.0</span><br></pre></td></tr></table></figure><p>Here is our application file <code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Chalk is <span class="subst">$&#123;chalk.red(<span class="string">'working'</span>)&#125;</span> if you saw red`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> execa = <span class="built_in">require</span>(<span class="string">'execa'</span>)</span><br><span class="line">execa(<span class="string">'ls'</span>, [<span class="string">'-la'</span>]).then(<span class="function"><span class="params">r</span> =&gt;</span> r.stdout).then(<span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure><p>The app runs and the colors show up (on Node v12)</p><p><img src="/blog/images/support-node6/app.png" alt="chalk and execa work on Node 12"></p><p>Now let&#39;s try the same application on Node v6.</p><p><img src="/blog/images/support-node6/chalk-uses-spread.png" alt="chalk uses spread operator"></p><p>Because <code>chalk</code> uses spread operator, it does not run on Node v6 - and you would need to downgrade to <a href="mailto:`chalk@2.4.2" target="_blank" rel="noopener">`chalk@2.4.2</a><code>. But then the same happens with</code>execa` - it also uses the spread operator!</p><p><img src="/blog/images/support-node6/execa-uses-spread.png" alt="execa uses spread operator"></p><p>You would need to downgrade <code>execa</code> all the way to v1 to get the syntax compatible with Node v6. In the process you just lost soooo many features and fixes from <code>execa</code> and <code>chalk</code>, it is almost sad.</p><p><img src="/blog/images/support-node6/execa-v1.png" alt="execa v1 and chalk v2 work on Node 6"></p><h2><span id="bundling">Bundling</span></h2><p>Let&#39;s switch tactics. Instead of searching for an old version of <code>chalk</code> and <code>execa</code>, let&#39;s install the latest versions - and let&#39;s bundle them into a single JavaScript file. Typically, bundling is done for browsers, but we will use <a href="https://github.com/zeit/ncc" target="_blank" rel="noopener">@zeit/ncc</a> to bundle <em>for Node</em>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S chalk execa</span><br><span class="line">+ execa@4.0.0</span><br><span class="line">+ chalk@3.0.0</span><br><span class="line">$ npm i -D @zeit/ncc</span><br><span class="line">+ @zeit/ncc@0.21.1</span><br></pre></td></tr></table></figure><p>We can use <code>ncc</code> to produce a single JavaScript file from <code>index.js</code> entry using <code>npm run build</code> script</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"ncc build index.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line"></span><br><span class="line">&gt; support-node-v6@1.0.0 build /Users/gleb/git/support-node-v6</span><br><span class="line">&gt; ncc build index.js</span><br><span class="line"></span><br><span class="line">ncc: Version 0.21.1</span><br><span class="line">ncc: Compiling file index.js</span><br><span class="line">106kB  dist/index.js</span><br><span class="line">106kB  [920ms] - ncc 0.21.1</span><br></pre></td></tr></table></figure><p>The bundle we produced does not run on Node 6 yet.</p><p><img src="/blog/images/support-node6/bundle.png" alt="bundle does not work on Node 6 yet"></p><p>But the bundle has <em>all</em> dependencies included. We can remove <code>node_modules</code> folder and run it to prove this.</p><p><img src="/blog/images/support-node6/works-without-node-modules.png" alt="bundle works without node_modules folder"></p><p>Now we can transpile this single file to make it work on (almost) any Node version.</p><h2><span id="transpiling-down">Transpiling down</span></h2><p>I like using TypeScript compiler to transpile code.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"transpile"</span>: <span class="string">"tsc --allowJs --target ES5 dist/index.js --outFile dist/out.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@types/node"</span>: <span class="string">"13.7.6"</span>,</span><br><span class="line">    <span class="attr">"typescript"</span>: <span class="string">"3.8.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This <em>almost</em> works.</p><p><img src="/blog/images/support-node6/needs-entries.png" alt="transpile almost works"></p><p>The bundle is transpiled - the spread operators in <code>chalk</code> and <code>execa</code> have been replaced, but the bundle still has <code>Object.entries</code> method that Node v6 does not understand. We can polyfill this method though.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -S babel-polyfill</span><br><span class="line">+ babel-polyfill@6.26.0</span><br></pre></td></tr></table></figure><p>Then require the polyfill from <code>index.js</code> file</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'babel-polyfill'</span>)</span><br></pre></td></tr></table></figure><p>Let&#39;s build and transpile again.</p><p><img src="/blog/images/support-node6/works-on-node6.png" alt="works on Node 6"></p><p>Nice, the latest dependencies do work on Node v6!</p><h2><span id="tips">Tips</span></h2><h3><span id="run-scripts">Run scripts</span></h3><p>Since we only plan to distribute a single bundle, we can generate the intermediate bundle in the <code>build</code> folder, and run the transpile step post-build.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"ncc build index.js --out build"</span>,</span><br><span class="line">    <span class="attr">"postbuild"</span>: <span class="string">"npm run transpile"</span>,</span><br><span class="line">    <span class="attr">"transpile"</span>: <span class="string">"tsc --allowJs --target ES5 build/index.js --outFile dist/index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"dist"</span>,</span><br><span class="line">  <span class="attr">"files"</span>: [<span class="string">"dist"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="specify-bundled-dependencies">Specify bundled dependencies</span></h3><p>We can see the produced bundle using <code>npm pack --dry</code> command.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line">...</span><br><span class="line">$ npm pack --dry</span><br><span class="line">npm notice</span><br><span class="line">npm notice 📦  support-node-v6@1.0.0</span><br><span class="line">npm notice === Tarball Contents ===</span><br><span class="line">npm notice 598.9kB dist/index.js</span><br><span class="line">npm notice 895B    package.json</span><br><span class="line">npm notice === Tarball Details ===</span><br><span class="line">npm notice name:          support-node-v6</span><br><span class="line">npm notice version:       1.0.0</span><br><span class="line">npm notice filename:      support-node-v6-1.0.0.tgz</span><br><span class="line">npm notice package size:  114.0 kB</span><br><span class="line">npm notice unpacked size: 599.8 kB</span><br><span class="line">npm notice shasum:        f5c816747afe915e9e6cb5ad483050dbe60df662</span><br><span class="line">npm notice integrity:     sha512-pRaaeDthI0+7C[...]XYiVKrziJa60w==</span><br><span class="line">npm notice total files:   2</span><br><span class="line">npm notice</span><br><span class="line">support-node-v6-1.0.0.tgz</span><br></pre></td></tr></table></figure><p>The zipped archive has size 114 kB, which looks like a lot. But remember, that anyone installing this NPM app should only download this single file, which should be as fast as downloading multiple production dependencies. But we still list <code>execa</code> and <code>chalk</code> as production dependencies, thus our users will get two copies of them - the second one coming from the <code>dist/index.js</code> bundle.</p><p>Hmm, NPM understands <a href="http://npm.github.io/using-pkgs-docs/package-json/types/bundleddependencies.html" target="_blank" rel="noopener">bundled dependencies</a> list, but this list forces <code>chalk</code> and <code>execa</code> into the TGZ archive twice!</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"dist"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"ncc build index.js --out build"</span>,</span><br><span class="line">    <span class="attr">"postbuild"</span>: <span class="string">"npm run transpile"</span>,</span><br><span class="line">    <span class="attr">"transpile"</span>: <span class="string">"tsc --allowJs --target ES5 build/index.js --outFile dist/index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"files"</span>: [<span class="string">"dist"</span>],</span><br><span class="line">  <span class="attr">"bundledDependencies"</span>: [<span class="string">"babel-polyfill"</span>, <span class="string">"chalk"</span>, <span class="string">"execa"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ npm pack --dry</span><br><span class="line">npm notice</span><br><span class="line">npm notice 📦  support-node-v6@1.0.0</span><br><span class="line">npm notice === Tarball Contents ===</span><br><span class="line">npm notice 598.9kB dist/index.js</span><br><span class="line">npm notice 958B    package.json</span><br><span class="line">npm notice === Bundled Dependencies ===</span><br><span class="line">npm notice babel-polyfill</span><br><span class="line">npm notice chalk</span><br><span class="line">npm notice execa</span><br><span class="line">npm notice === Tarball Details ===</span><br><span class="line">npm notice name:          support-node-v6</span><br><span class="line">npm notice version:       1.0.0</span><br><span class="line">npm notice filename:      support-node-v6-1.0.0.tgz</span><br><span class="line">npm notice package size:  930.7 kB</span><br><span class="line">npm notice unpacked size: 3.8 MB</span><br><span class="line">npm notice shasum:        aec06c58bc556e0050e54f690ed936978a45341f</span><br><span class="line">npm notice integrity:     sha512-+KVCnHxym0jYp[...]moDzoUVuxD6kQ==</span><br><span class="line">npm notice bundled deps:  3</span><br><span class="line">npm notice bundled files: 1910</span><br><span class="line">npm notice own files:     2</span><br><span class="line">npm notice total files:   1912</span><br><span class="line">npm notice</span><br><span class="line">support-node-v6-1.0.0.tgz</span><br></pre></td></tr></table></figure><p>Thus my advice is to move all production dependencies into <code>devDependencies</code> - they will be included in the bundle as needed and skip using <code>bundledDependencies</code>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"support-node-v6"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"dist"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"ncc build index.js --out build"</span>,</span><br><span class="line">    <span class="attr">"postbuild"</span>: <span class="string">"npm run transpile"</span>,</span><br><span class="line">    <span class="attr">"transpile"</span>: <span class="string">"tsc --allowJs --target ES5 build/index.js --outFile dist/index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"files"</span>: [<span class="string">"dist"</span>],</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-polyfill"</span>: <span class="string">"6.26.0"</span>,</span><br><span class="line">    <span class="attr">"chalk"</span>: <span class="string">"3.0.0"</span>,</span><br><span class="line">    <span class="attr">"execa"</span>: <span class="string">"4.0.0"</span>,</span><br><span class="line">    <span class="attr">"@types/node"</span>: <span class="string">"13.7.7"</span>,</span><br><span class="line">    <span class="attr">"@zeit/ncc"</span>: <span class="string">"0.21.1"</span>,</span><br><span class="line">    <span class="attr">"typescript"</span>: <span class="string">"3.8.3"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s make sure the bundled dependencies work. I have created a new NPM package in a different folder and will install and run the above project using Node v6.</p><p><img src="/blog/images/support-node6/install-from-another-project.png" alt="installing and running the bundled app on Node 6"></p><p>Perfect.</p><h3><span id="source-maps">Source maps</span></h3><p>While <code>@zeit/ncc</code> and <code>typescript</code> can both generate source maps, I could not find a way to connect the two to get the source maps to link an error back to the <em>original</em> source file. If you know how to do this, open a pull request in <a href="https://github.com/bahmutov/support-node-v6" target="_blank" rel="noopener">bahmutov/support-node-v6</a>, please.</p><h3><span id="unsupported-features">Unsupported features</span></h3><p>Some ES6+ syntax and features cannot be transpiled down, for example if your project requires WeakMaps or Proxies - you are out of luck.</p><h2><span id="alternative-use-parcel">alternative: use Parcel</span></h2><p>Instead of <code>@zeit/ncc</code> we can use <a href="https://github.com/parcel-bundler/parcel" target="_blank" rel="noopener">Parcel bundler</a> to bundle code like this:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"parcel build index.js --target node --bundle-node-modules --no-minify"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"parcel-bundler"</span>: <span class="string">"1.12.4"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="see-also">See also</span></h2><ul><li><a href="../javascript-needs-compile-step/">JavaScript needs compile step</a></li><li><a href="../precompiled-javascript/">Precompiled JavaScript</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;What is the minimum version of Node your NPM module requires? You might think it is Node 8 or Node 10 or even Node 6. But in reality you 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="javascript" scheme="https://glebbahmutov.com/blog/tags/javascript/"/>
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Check links in your Markdown documents</title>
    <link href="https://glebbahmutov.com/blog/check-markdown-links/"/>
    <id>https://glebbahmutov.com/blog/check-markdown-links/</id>
    <published>2020-02-12T05:00:00.000Z</published>
    <updated>2020-02-13T14:40:13.809Z</updated>
    
    <content type="html"><![CDATA[<p>I want to sleep better at night, I want to know, everyone who is reading one of the many README files in my <a href="https://github.com/bahmutov/repositories" target="_blank" rel="noopener">GitHub repositories</a> has correct URLs. I love adding links to examples, blog posts, other repos - and I hate when a link is incorrect. In this blog post I will show how to check URLs from Markdown files.</p><ol><li>Install <a href="https://github.com/tcort/markdown-link-check" target="_blank" rel="noopener">markdown-link-check</a> with</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D markdown-link-check</span><br></pre></td></tr></table></figure><ol start="2"><li>Add NPM script for finding all top-level Markdown files (you can modify <code>find</code> command <a href="https://www.computerhope.com/unix/ufind.htm" target="_blank" rel="noopener">1]</a>, <a href="https://www.cyberciti.biz/faq/find-command-exclude-ignore-files/" target="_blank" rel="noopener">2</a> to find more files, if needed). Don&#39;t forget to escape <code>\</code> characters.</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"check:markdown"</span>: <span class="string">"find *.md -exec npx markdown-link-check &#123;&#125; \\;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice both external and local links are checked, but not the <a href="https://github.com/tcort/markdown-link-check/issues/91" target="_blank" rel="noopener">anchor tags ⚠️</a>.</p><p>You can check URLs on Mac and Linux with <code>npm run check:markdown</code> command:</p><p><img src="/blog/images/check-urls/terminal.png" alt="checking the links locally"></p><ol start="3"><li>Call the same script on CI to avoid breaking the links in the future</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="attr">check:markdown</span></span><br></pre></td></tr></table></figure><p><img src="/blog/images/check-urls/ci.png" alt="checking the links on CI"></p><p>We can even find all Markdown files, while excluding <code>node_modules</code> folder with command</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name '*.md' ! -path './node_modules/*' ! -path './examples/*' -exec npx markdown-link-check --quiet &#123;&#125; \;</span><br></pre></td></tr></table></figure><h2><span id="exit-code">Exit code</span></h2><p>We have a problem ... the <code>find -exec</code> will feed each file to <code>markdown-link-check</code> and if one has an error, it just continues onto the next Markdown file, swallowing the error.</p><p>Instead, let&#39;s find all files likes this</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name '*.md' ! -path './node_modules/*'</span><br></pre></td></tr></table></figure><p>This prints each found filename per line like this</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> find . -<span class="built_in">type</span> f -name <span class="string">'*.md'</span> ! -path <span class="string">'./node_modules/*'</span></span></span><br><span class="line">./CODE_OF_CONDUCT.md</span><br><span class="line">./README.md</span><br><span class="line">./browsers/node12.0.0-chrome73-ff68/README.md</span><br><span class="line">./browsers/node8.15.1-chrome73/README.md</span><br><span class="line">./browsers/node10.2.1-chrome74/README.md</span><br><span class="line">./browsers/node13.3.0-chrome79-ff70/README.md</span><br><span class="line">./browsers/node12.13.0-chrome78-ff70-brave78/README.md</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>We can feed these lines into <a href="https://shapeshed.com/unix-xargs/" target="_blank" rel="noopener">xargs</a> program using <code>-L1</code> argument (one argument per lint).</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name '*.md' ! -path './node_modules/*' | xargs -L1 npx markdown-link-check --quiet</span><br></pre></td></tr></table></figure><p>Now we are talking</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> find . -<span class="built_in">type</span> f -name <span class="string">'*.md'</span> ! -path <span class="string">'./node_modules/*'</span> | xargs -L1 npx markdown-link-check --quiet</span></span><br><span class="line"></span><br><span class="line">FILE: ./CODE_OF_CONDUCT.md</span><br><span class="line"></span><br><span class="line">3 links checked.</span><br><span class="line"></span><br><span class="line">FILE: ./README.md</span><br><span class="line"></span><br><span class="line">23 links checked.</span><br><span class="line"></span><br><span class="line">FILE: ./browsers/node12.0.0-chrome73-ff68/README.md</span><br><span class="line"></span><br><span class="line">1 links checked.</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">FILE: ./base/README.md</span><br><span class="line">[✖] ubuntu16-8.16.2</span><br><span class="line">[✖] /ubuntu18-node12.14.1</span><br><span class="line">[✖] /ubuntu19-node12.14.1</span><br><span class="line"></span><br><span class="line">38 links checked.</span><br><span class="line"></span><br><span class="line">ERROR: 3 dead links found!</span><br><span class="line">[✖] ubuntu16-8.16.2 → Status: 400</span><br><span class="line">[✖] /ubuntu18-node12.14.1 → Status: 400</span><br><span class="line">[✖] /ubuntu19-node12.14.1 → Status: 400</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">FILE: ./included/3.6.1/README.md</span><br><span class="line"></span><br><span class="line">1 links checked.</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $?</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>The search fails if any of the links are bad. Now I can sleep tight.</p><p>See example in <a href="https://github.com/cypress-io/cypress-docker-images/pull/244" target="_blank" rel="noopener">cypress-docker-images</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I want to sleep better at night, I want to know, everyone who is reading one of the many README files in my &lt;a href=&quot;https://github.com/b
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
  </entry>
  
  <entry>
    <title>My testimony in support of banning gas infrastructure in new construction in Cambridge, MA</title>
    <link href="https://glebbahmutov.com/blog/gas-ban-testimony/"/>
    <id>https://glebbahmutov.com/blog/gas-ban-testimony/</id>
    <published>2020-01-27T05:00:00.000Z</published>
    <updated>2020-01-29T14:33:53.001Z</updated>
    
    <content type="html"><![CDATA[<p>Tonight I went down to the Cambridge City Council meeting to voice my support for <a href="https://insideclimatenews.org/news/12122019/natural-gas-ban-cities-legal-cambridge-brookline-massachusetts-state-law-berkeley-california" target="_blank" rel="noopener">banning gas infrastructure in new building construction</a>. This is the testimony I gave in front of the mayor and the council.</p><p>Madam mayor, and the council. I am Gleb Bahmutov, I live at Winslow st, I love Cambridge. I am here tonight to express my strongest support for the proposed gas infrastructure in new buildings.</p><p>Last weekend I have enjoyed the unseasonably warm weather. I have enjoyed it for 10 minutes, but then I became terrified. This is abnormal and what will the summer be like? Will we be like Australia and burn? Or more likely will we have a long heat spell that will kill all the crops?</p><p>Terry Eliasen (meteorologist from WBC/CBS Boston) <a href="https://twitter.com/terrywbz/status/1221811069469044738?s=21" target="_blank" rel="noopener">tweeted today</a> that the average Boston temperature was higher than normal by 9.2 F in January. The scientists warn that to avoid the worst consequences of global warming, we need to limit the rise to 1.5 - 2 degrees Celsius, which is 4-5 degrees F. We are at 9.2.If this is not an emergency, I do not know what is.</p><p><img src="/blog/images/warm-january.png" alt="warm January in Boston"></p><p>The Rolling Stones magazine <a href="https://www.rollingstone.com/politics/politics-features/oil-gas-fracking-radioactive-investigation-937389/" target="_blank" rel="noopener">reported last week</a> that brine - the water from fracking they use to push the gases from under the ground is radioactive due to naturally occurring Radon gas but the radiation is concentrated. The industry does not measure the radioactivity, since they don&#39;t want to know it. But if they have to deal with low-level radioactive waste disposal, it will increase the cost of gas by a factor of 100 - and this is even without taking into account gas carbon price we all are about to start paying one way or another.</p><p>Building new gas infrastructure right now means the customers will be locked into paying sharply increasing prices in the nearest future.</p><p>We have plenty of natural offshore wind and solar resources to satisfy all our electricity needs many times over. To say that we can’t switch to all green, all renewable, all safe electricity 50 years after we went to the Moon is a lie, and not a very convincing lie.</p><p>Ban gas infrastructure now.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Tonight I went down to the Cambridge City Council meeting to voice my support for &lt;a href=&quot;https://insideclimatenews.org/news/12122019/na
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/tags/climate/"/>
    
  </entry>
  
  <entry>
    <title>A plea for climate in year 2020</title>
    <link href="https://glebbahmutov.com/blog/a-plea-for-climate-2020/"/>
    <id>https://glebbahmutov.com/blog/a-plea-for-climate-2020/</id>
    <published>2019-12-29T05:00:00.000Z</published>
    <updated>2019-12-29T20:08:49.286Z</updated>
    
    <content type="html"><![CDATA[<p>This is an email I have sent to my friends at the end of December 2019.</p><p>Hello friends,</p><p>Season greetings from Irina, Sky and me, we wish you all the best in 2020!As a new year resolution, we would like to ask everyone to take a moment to think about the climate crisis unfolding around us. If you follow the news, you can see something else going very bad: Australia is on fire, Amazon is burning due to greed, and many places in the world are experiencing water shortages - all are the effects of the warming Earth due to fossil emissions. Many scientists are trying to bring attention to the effects of global climate change in our near future. We are especially worried about Sky and the dead planet he might have to live on as an adult.To learn more about the problem, take a look at <a href="https://www.ipcc.ch/" target="_blank" rel="noopener">https://www.ipcc.ch/</a> and popular summaries in articles like <a href="https://www.theguardian.com/environment/2018/oct/08/global-warming-must-not-exceed-15c-warns-landmark-un-report" target="_blank" rel="noopener">https://www.theguardian.com/environment/2018/oct/08/global-warming-must-not-exceed-15c-warns-landmark-un-report</a> and <a href="https://www.theguardian.com/environment/2018/aug/06/domino-effect-of-climate-events-could-push-earth-into-a-hothouse-state" target="_blank" rel="noopener">https://www.theguardian.com/environment/2018/aug/06/domino-effect-of-climate-events-could-push-earth-into-a-hothouse-state</a> and <a href="https://interactive.carbonbrief.org/impacts-climate-change-one-point-five-degrees-two-degrees/" target="_blank" rel="noopener">https://interactive.carbonbrief.org/impacts-climate-change-one-point-five-degrees-two-degrees/</a> Unfortunately, the governments around the world are not acting with the urgency this crisis requires. It is up to us to save our home for ourselves and our children.</p><p>We are asking you to make a plan in 2020 to attend at least 1 meeting of each volunteer organization below. These are people like you and me trying to avert this catastrophe. You can find a local chapter pretty much everywhere across the USA.</p><p>These are the ones we attend regularly:</p><ul><li><a href="https://350.org/" target="_blank" rel="noopener">https://350.org/</a> acts locally and at the state level to switch to renewable energy</li><li><a href="https://citizensclimatelobby.org/" target="_blank" rel="noopener">https://citizensclimatelobby.org/</a> is trying to pass a federal law to put a price on fossil fuels</li><li><a href="https://www.sunrisemovement.org/" target="_blank" rel="noopener">https://www.sunrisemovement.org/</a> and <a href="https://rebellion.global/" target="_blank" rel="noopener">https://rebellion.global/</a> organize strikes and marches around the world to force politicians to act</li></ul><p>Thank you in advance.--Gleb, Irina and Sky</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is an email I have sent to my friends at the end of December 2019.&lt;/p&gt;
&lt;p&gt;Hello friends,&lt;/p&gt;
&lt;p&gt;Season greetings from Irina, Sky and
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/tags/climate/"/>
    
  </entry>
  
  <entry>
    <title>Paint roof white</title>
    <link href="https://glebbahmutov.com/blog/paint-roof-white/"/>
    <id>https://glebbahmutov.com/blog/paint-roof-white/</id>
    <published>2019-12-28T05:00:00.000Z</published>
    <updated>2019-12-28T03:59:54.824Z</updated>
    
    <content type="html"><![CDATA[<p>My house is tall and narrow and lacks an attic. In the summer the bedroom gets pretty hot - because the black rubber coating of the flat roof got really really hot. I could not touch it on a sunny day without burning myself. So I have painted it white using <a href="https://www.homedepot.com/p/Henry-5-Gal-687-100-Acrylic-Enviro-White-Extreme-Elastomeric-Roof-Coating-HE687406/202091034" target="_blank" rel="noopener">Henry Acrylic Enviro-White Extreme Elastomeric Roof Coating</a>.</p><p><img src="/blog/images/roof/white-roof.jpg" alt="The completed roof"></p><p>I have used less than 5 gallons of paint, and have covered the roof with three coatings. The paint is extremely thick, almost like liquid rubber, yet it rolls easily using a regular roller. It is elastomeric - meaning it stretches without cracking as it heats.</p><p><img src="/blog/images/roof/henry-paint.jpeg" alt="Henry paint"></p><p>The difference was immense. On a hot day as I left a small unpainted patch, which I could not touch with my hand, the rest of the roof was absolutely cool to the touch - warm, but fine. We will see next summer how the hot days feel.</p><p>PS: I have heard the argument that black roofs soak the sun in the winter better. I don&#39;t put much stock into that argument - the house should be well isolated, and I am suffering from the heat a lot more than from cold temperatures.</p><p>PSS: I wish I could make a roof garden, but my roof is too small and hard to access, so I picked the white paint instead.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;My house is tall and narrow and lacks an attic. In the summer the bedroom gets pretty hot - because the black rubber coating of the flat 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/tags/climate/"/>
    
  </entry>
  
  <entry>
    <title>Keep passwords secret in E2E tests</title>
    <link href="https://glebbahmutov.com/blog/keep-passwords-secret-in-e2e-tests/"/>
    <id>https://glebbahmutov.com/blog/keep-passwords-secret-in-e2e-tests/</id>
    <published>2019-12-01T05:00:00.000Z</published>
    <updated>2019-12-02T14:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#visible-password">Visible password</a></li><li><a href="#do-not-hardcode-passwords">Do not hardcode passwords</a></li><li><a href="#validate-password">Validate password</a></li><li><a href="#avoid-ui-login">Avoid UI login</a></li><li><a href="#continuous-integration">Continuous integration</a></li><li><a href="#plugins">Plugins</a></li><li><a href="#conclusions">Conclusions</a></li></ul><!-- tocstop --><p><strong>Note:</strong> source code for this blog post is the repository <a href="https://github.com/bahmutov/keep-password-secret" target="_blank" rel="noopener">bahmutov/keep-password-secret</a>.</p><h2><span id="visible-password">Visible password</span></h2><p>Imagine we have a password-protected web application. For example I have cloned <a href="https://github.com/passport/express-4.x-local-example" target="_blank" rel="noopener">passport/express-4.x-local-example</a> - you need to enter login and password to see your personal profile. We can easily write an end-to-end test for this application using <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a> test runner.</p><figure class="highlight js"><figcaption><span>cypress/integration/login-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'logs in'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'/login'</span>)</span><br><span class="line">  cy.get(<span class="string">'[name=username]'</span>).type(<span class="string">'jack'</span>)</span><br><span class="line">  cy.get(<span class="string">'[name=password]'</span>).type(<span class="string">'secret'</span>)</span><br><span class="line">  cy.get(<span class="string">'[type=Submit]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'a'</span>, <span class="string">'profile'</span>).should(<span class="string">'be.visible'</span>).click()</span><br><span class="line">  cy.url().should(<span class="string">'match'</span>, /profile$/)</span><br><span class="line">  cy.contains(<span class="string">'Email: jack@example.com'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This test passes, as you can see from the test run video. It also shows the danger: the password is clearly shown in the video during &quot;TYPE&quot; command!</p><p><img src="/blog/images/secret/login-spec.gif" alt="Login spec showing the password during cy.type"></p><p>In this blog post I will show how to ways to mitigate the security risk of showing secret information like the password text during end-to-end tests. In this case, the password is local - and it is probably fine to show it in plain text. But in other situations, when testing staging or production environment, the password to the test account should NOT be visible.</p><h2><span id="do-not-hardcode-passwords">Do not hardcode passwords</span></h2><p>The first thing I would do is to remove the hard-coded password value from the test files. Right now we have the password in each spec file source code as a string <code>cy.type(&#39;secret&#39;)</code>, and instead I will pass it as an environment variable.</p><figure class="highlight js"><figcaption><span>cypress/integration/no-password-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'logs in using env variables'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> username = Cypress.env(<span class="string">'username'</span>)</span><br><span class="line">  <span class="keyword">const</span> password = Cypress.env(<span class="string">'password'</span>)</span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">'/login'</span>)</span><br><span class="line">  cy.get(<span class="string">'[name=username]'</span>).type(username)</span><br><span class="line">  cy.get(<span class="string">'[name=password]'</span>).type(password)</span><br><span class="line">  cy.get(<span class="string">'[type=Submit]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'a'</span>, <span class="string">'profile'</span>).should(<span class="string">'be.visible'</span>).click()</span><br><span class="line">  cy.url().should(<span class="string">'match'</span>, /profile$/)</span><br><span class="line">  cy.contains(<span class="string">'Email: jack@example.com'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I believe in most cases, the <code>username</code> can be public, while <code>password</code> should be secret. Thus it is ok to store the <code>username</code> in the <code>env</code> object of <code>cypress.json</code> file. And for completeness and clarity, I store an empty value for the <code>password</code> key - this tells anyone reading the tests to expect to pass the password to make the tests work.</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:3000"</span>,</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"jack"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">""</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Great - if we run Cypress now, the test will fail, because <a href="https://on.cypress.io/type" target="_blank" rel="noopener">cy.type</a> refuses to type an empty string.</p><p><img src="/blog/images/secret/no-typing-empty-strings.png" alt="cy.type will not type an empty password string"></p><p>Cypress allows several ways to pass the environment variables, in this case, the secure way is to use an environment variable <code>CYPRESS_password=...</code> when running Cypress. Cypress will stick all unknown environment variables that start with prefix <code>CYPRESS_</code> into the <code>env</code> object automatically.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> CYPRESS_password=secret npx cypress open|run</span></span><br></pre></td></tr></table></figure><p>When running tests locally I <em>strongly</em> recommend using my <a href="https://github.com/bahmutov/as-a" target="_blank" rel="noopener">as-a</a> utility to load groups of environment variables conveniently and cross-platform. In file <code>~/.as-a/.as-a.ini</code> I will add one more INI section and will place the secret password variable there.</p><figure class="highlight ini"><figcaption><span>~/.as-a/.as-a.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[kps]</span></span><br><span class="line"><span class="comment">; group of environment variables for keep-password-secret app</span></span><br><span class="line"><span class="attr">CYPRESS_password</span>=secret</span><br></pre></td></tr></table></figure><p>When running Cypress from my terminal I use</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">as-a kps npx cypress open</span><br></pre></td></tr></table></figure><p>The password variable (and any other values in the block <code>kps</code>) will be injected just for the duration of the above command.</p><p>On Continuous Integration server, just set a secure environment variable <code>CYPRESS_password</code> to value <code>secret</code>. Most CIs mask such values automatically in the logs.</p><h2><span id="validate-password">Validate password</span></h2><p>If the user forgets to open Cypress with <code>CYPRESS_password=...</code>, or if the variable is not set on CI we get a cryptic error &quot;TYPE cannot type an empty string&quot;. It would be much nicer to give a meaningful error if the password string is empty, right. Here is an updated test that first verifies the username and password values before using them.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'logs in using env variables'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> username = Cypress.env(<span class="string">'username'</span>)</span><br><span class="line">  <span class="keyword">const</span> password = Cypress.env(<span class="string">'password'</span>)</span><br><span class="line"></span><br><span class="line">  expect(username, <span class="string">'username was set'</span>).to.be.a(<span class="string">'string'</span>).and.not.be.empty</span><br><span class="line">  expect(password, <span class="string">'password was set'</span>).to.be.a(<span class="string">'string'</span>).and.not.be.empty</span><br><span class="line"></span><br><span class="line">  cy.visit(<span class="string">'/login'</span>)</span><br><span class="line">  cy.get(<span class="string">'[name=username]'</span>).type(username)</span><br><span class="line">  cy.get(<span class="string">'[name=password]'</span>).type(password)</span><br><span class="line">  cy.get(<span class="string">'[type=Submit]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'a'</span>, <span class="string">'profile'</span>).should(<span class="string">'be.visible'</span>).click()</span><br><span class="line">  cy.url().should(<span class="string">'match'</span>, /profile$/)</span><br><span class="line">  cy.contains(<span class="string">'Email: jack@example.com'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>It is working - if the developer is running Cypress test without <code>CYPRESS_password=...</code> they will get a nice error.</p><p><img src="/blog/images/secret/empty-password.png" alt="Explicit empty password error"></p><p>But this is dangerous too - notice that the username assertion <code>expect(username, &#39;username was set&#39;).to.be.a(&#39;string&#39;).and.not.be.empty</code> <em>prints the value</em> in the Command Log. If the password <em>is set</em> it will be visible in the video and any screenshot.</p><p><img src="/blog/images/secret/shown-password.png" alt="Actual password is shown when assertion passes"></p><p>To avoid assertion values reflected in the Command Log, we must throw an error ourselves like this.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> username = Cypress.env(<span class="string">'username'</span>)</span><br><span class="line"><span class="keyword">const</span> password = Cypress.env(<span class="string">'password'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// it is ok for the username to be visible in the Command Log</span></span><br><span class="line">expect(username, <span class="string">'username was set'</span>).to.be.a(<span class="string">'string'</span>).and.not.be.empty</span><br><span class="line"><span class="comment">// but the password value should not be shown</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> password !== <span class="string">'string'</span> || !password) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing password value, set using CYPRESS_password=...'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, we can avoid <code>cy.type(password)</code> showing the value it is typing by using <code>cy.type(password, {log: false})</code> option.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'[name=password]'</span>).type(password, &#123;<span class="attr">log</span>: <span class="literal">false</span>&#125;)</span><br></pre></td></tr></table></figure><p>Now the Command Log will not reveal the secret password value in the video or screenshot</p><p><img src="/blog/images/secret/hide.png" alt="Password is no longer shown"></p><p>Finally, sometimes I see assertions chained at the end of <code>cy.type</code> to confirm right away the value of the input element like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'[name=username]'</span>)</span><br><span class="line">  .type(username)</span><br><span class="line">  .should(<span class="string">'have.value'</span>, username)</span><br><span class="line">cy.get(<span class="string">'[name=password]'</span>)</span><br><span class="line">  .type(password, &#123;<span class="attr">log</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">  .should(<span class="string">'have.value'</span>, password)</span><br></pre></td></tr></table></figure><p>The assertion <code>.should(&#39;have.value&#39;, ...)</code> also prints the value in the Command Log as shown below, revealing the password, even if just part of it in this case.</p><p><img src="/blog/images/secret/partial-should.png" alt="Implicit assertion revealing a part of the asserted value"></p><p>To avoid this, again we need to throw our own error by using <a href="https://on.cypress.io/should#Function" target="_blank" rel="noopener"><code>should(callback)</code></a> assertion form.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'[name=password]'</span>)</span><br><span class="line">  .type(password, &#123; <span class="attr">log</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  .should(<span class="function"><span class="params">el$</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (el$.val() !== password) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Different value of typed password'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The custom errors are not shown in the Command Log.</p><p><img src="/blog/images/secret/should-cb.png" alt="Should with callback function with custom error does not reveal value"></p><h2><span id="avoid-ui-login">Avoid UI login</span></h2><p>It is fine to test the Login user interface - but every test after that should NOT use UI to log in. It is <a href="https://www.youtube.com/watch?v=5XQOK0v_YRE" target="_blank" rel="noopener">slow and unnecessary</a>. Instead, check how the web application performs the login by looking at the DevTools during UI login. In our case, the application is performing a POST request to <code>/login</code> with the username and password form.</p><p><img src="/blog/images/secret/login-form.png" alt="Inspecting login network call to find POST form submission"></p><p>Find the recipe that matches this method among <a href="https://github.com/cypress-io/cypress-example-recipes#logging-in-recipes" target="_blank" rel="noopener">Cypress Logging in recipes</a>. In this case it is <a href="https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/logging-in__html-web-forms" target="_blank" rel="noopener">HTML Web Form</a> recipe. Copying the recipe to get the following test that uses <a href="https://on.cypress.io/request" target="_blank" rel="noopener"><code>cy.request</code></a> to make the form submission post and automatically sets any returned cookies.</p><figure class="highlight js"><figcaption><span>cypress/integration/api-login-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'logs in using cy.request'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> username = Cypress.env(<span class="string">'username'</span>)</span><br><span class="line">  <span class="keyword">const</span> password = Cypress.env(<span class="string">'password'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// it is ok for the username to be visible in the Command Log</span></span><br><span class="line">  expect(username, <span class="string">'username was set'</span>).to.be.a(<span class="string">'string'</span>).and.not.be.empty</span><br><span class="line">  <span class="comment">// but the password value should not be shown</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> password !== <span class="string">'string'</span> || !password) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing password value, set using CYPRESS_password=...'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    url: <span class="string">'/login'</span>,</span><br><span class="line">    form: <span class="literal">true</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      username,</span><br><span class="line">      password</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.getCookie(<span class="string">'connect.sid'</span>).should(<span class="string">'exist'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// now visit the profile page</span></span><br><span class="line">  cy.visit(<span class="string">'/profile'</span>).contains(<span class="string">'Email: jack@example.com'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/secret/api-login.png" alt="Test that logs in using cy.request API call"></p><p>Beautiful, it is working, and we can make the login reusable by making it into a <a href="https://on.cypress.io/custom-commands" target="_blank" rel="noopener">Cypress custom command</a> or by creating a reusable function (which is simpler in my opinion). I will create and export <code>login</code> function from <code>cypress/support/index.js</code> file to be used in any test that wants to log in via API. Only tests that explicitly test the login page should not use this function - the rest can quickly login without going through the UI.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Logs the user by making API call to POST /login.</span></span><br><span class="line"><span class="comment"> * Make sure "cypress.json" + CYPRESS_ environment variables</span></span><br><span class="line"><span class="comment"> * have username and password values set.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> login = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = Cypress.env(<span class="string">'username'</span>)</span><br><span class="line">  <span class="keyword">const</span> password = Cypress.env(<span class="string">'password'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// it is ok for the username to be visible in the Command Log</span></span><br><span class="line">  expect(username, <span class="string">'username was set'</span>).to.be.a(<span class="string">'string'</span>).and.not.be.empty</span><br><span class="line">  <span class="comment">// but the password value should not be shown</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> password !== <span class="string">'string'</span> || !password) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing password value, set using CYPRESS_password=...'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    url: <span class="string">'/login'</span>,</span><br><span class="line">    form: <span class="literal">true</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      username,</span><br><span class="line">      password</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.getCookie(<span class="string">'connect.sid'</span>).should(<span class="string">'exist'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I really like small reusable function, partly because I can document them using JSDoc comments, as above. This gives me intelligent code completion in any place I import and use <code>login</code> function, for example from the spec file.</p><p><img src="/blog/images/secret/login-intellisense.jpeg" alt="Hovering over `login` shows JSDoc comments"></p><h2><span id="continuous-integration">Continuous integration</span></h2><p>To run <a href="https://on.cypress.io/ci" target="_blank" rel="noopener">Cypress test on CI</a> I will use CircleCI - it is simple to set up, especially by using <a href="https://github.com/cypress-io/circleci-orb" target="_blank" rel="noopener">Cypress CircleCI Orb</a>.</p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line"><span class="attr">  cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cypress/run:</span></span><br><span class="line"><span class="attr">          start:</span> <span class="string">'npm start'</span></span><br><span class="line"><span class="attr">          wait-on:</span> <span class="string">'http://localhost:3000'</span></span><br><span class="line">          <span class="comment"># save test run videos and screenshots on CircleCI</span></span><br><span class="line">          <span class="comment"># and they are publicly viewable, so make sure there</span></span><br><span class="line">          <span class="comment"># are no passwords in clear text!</span></span><br><span class="line"><span class="attr">          store_artifacts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>You can find the project at <a href="https://circleci.com/gh/bahmutov/keep-password-secret" target="_blank" rel="noopener">https://circleci.com/gh/bahmutov/keep-password-secret</a>. <a href="https://circleci.com/gh/bahmutov/keep-password-secret/2" target="_blank" rel="noopener">The first run fails</a> - because I have not set <code>CYPRESS_password</code> environment variable yet.</p><p><img src="/blog/images/secret/first-run.png" alt="Run fails because we have not set CYPRESS_password yet"></p><p>We can set the required <a href="https://circleci.com/docs/2.0/env-vars/" target="_blank" rel="noopener">environment variable on CircleCI</a>, but I really like the new <a href="https://circleci.com/docs/2.0/contexts/" target="_blank" rel="noopener">CircleCI security contexts</a> because they:</p><ul><li>allow explicitly listing the context that a job expects in the circle.yml file</li><li>inject or stop the job depending on the security permission of the context</li></ul><p>So I will create a new security context <code>keep-password-secret</code> and will add the variable password there</p><p><img src="/blog/images/secret/context.png" alt="Created security context with the password environment variable"></p><p><strong>Tip:</strong> longer passwords are better, because UI masking still reveals a half of the word!</p><p>Change the <code>cypress/run</code> job by requiring the new context we have created</p><figure class="highlight yml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"><span class="attr">orbs:</span></span><br><span class="line"><span class="attr">  cypress:</span> <span class="string">cypress-io/cypress@1</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cypress/run:</span></span><br><span class="line"><span class="attr">          context:</span> <span class="string">keep-password-secret</span></span><br><span class="line"><span class="attr">          start:</span> <span class="string">'npm start'</span></span><br><span class="line"><span class="attr">          wait-on:</span> <span class="string">'http://localhost:3000'</span></span><br><span class="line">          <span class="comment"># save test run videos and screenshots on CircleCI</span></span><br><span class="line">          <span class="comment"># and they are publicly viewable, so make sure there</span></span><br><span class="line">          <span class="comment"># are no passwords in clear text!</span></span><br><span class="line"><span class="attr">          store_artifacts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>And the <a href="https://circleci.com/gh/bahmutov/keep-password-secret/3" target="_blank" rel="noopener">tests pass</a>! Check out the test artifacts - you can see password in the video <code>login-spec.js.mp4</code> that shows the original, insecure spec file.</p><p><img src="/blog/images/secret/visible-password.png" alt="Password is visible in the public video stored on the CI"></p><p>But the password should not be visible in any other video - because we have modified the spec code to be less &quot;chatty&quot;.</p><h2><span id="plugins">Plugins</span></h2><p>Watch out for any <a href="https://on.cypress.io/plugins" target="_blank" rel="noopener">plugins</a> you use with Cypress Test Runner - they might be printing secrets too. For example, I will add <a href="https://github.com/bahmutov/cypress-failed-log" target="_blank" rel="noopener">cypress-failed-log</a> plugin that prints commands to the terminal.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress-failed-log</span><br></pre></td></tr></table></figure><p>The add to the support file the following<figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'cypress-failed-log'</span>)</span><br></pre></td></tr></table></figure></p><p>and to the plugins file<figure class="highlight js"><figcaption><span>cypport/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// `on` is used to hook into various events Cypress emits</span></span><br><span class="line">  <span class="comment">// `config` is the resolved Cypress config</span></span><br><span class="line">  on(<span class="string">'task'</span>, &#123;</span><br><span class="line">    failed: <span class="built_in">require</span>(<span class="string">'cypress-failed-log/src/failed'</span>)()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Let&#39;s try this module. Let&#39;s run it locally WITH <code>CYPRESS_password=secret</code> set. I will be using <code>npm test</code> script</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node ./server"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"start-test 3000 'cypress open'"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"start-test 3000 'cypress run'"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When running <code>as-a kps npm test</code> everything runs ok - nothing sensitive is printed to the terminal. But make a test fail - for example like this</p><figure class="highlight js"><figcaption><span>cypress/integration/no-password-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'logs in using env variables'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> username = Cypress.env(<span class="string">'username'</span>)</span><br><span class="line">  <span class="keyword">const</span> password = Cypress.env(<span class="string">'password'</span>)</span><br><span class="line"></span><br><span class="line">  ... the rest <span class="keyword">of</span> the test</span><br><span class="line">  <span class="comment">// and now an incorrect assertion</span></span><br><span class="line">  cy.contains(<span class="string">'Email: jack@example.com2'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s test this - to make sure no sensitive information is printed on failure.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ as<span class="_">-a</span> kps npx start-test 3000 \</span><br><span class="line">  <span class="string">'cypress run --spec cypress/integration/no-password-spec.js'</span></span><br></pre></td></tr></table></figure><p>The spec runs, fails - and the <code>cypress-failed-log</code> plugin prints the each command - but does not reveal anything sensitive.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  1) logs in using env variables</span><br><span class="line">assert username was set: expected jack to be a string</span><br><span class="line">assert username was set: expected jack not to be empty</span><br><span class="line">visit /login</span><br><span class="line">get [name=username]</span><br><span class="line">type jack</span><br><span class="line">assert expected &lt;input&gt; to have value jack</span><br><span class="line">get [name=password]</span><br><span class="line">get [type=Submit]</span><br><span class="line">click</span><br><span class="line">form sub --submitting form--</span><br><span class="line">page load --waiting for new page to load--</span><br><span class="line">new url http://localhost:3000/</span><br><span class="line">contains a, profile</span><br><span class="line">assert expected &lt;a&gt; to be visible</span><br><span class="line">click</span><br><span class="line">page load --waiting for new page to load--</span><br><span class="line">new url http://localhost:3000/profile</span><br><span class="line">url</span><br><span class="line">assert expected http://localhost:3000/profile to match /profile$/</span><br><span class="line">contains Email: jack@example.com2</span><br><span class="line"></span><br><span class="line">  0 passing (8s)</span><br><span class="line">  1 failing</span><br><span class="line"></span><br><span class="line">  1)  logs in using env variables:</span><br><span class="line">     CypressError: Timed out retrying: Expected to find content: &apos;Email: jack@example.com2&apos; but never did.</span><br></pre></td></tr></table></figure><p>Perfect. This plugin also saves a JSON file with the error - and the file does not reveal the password either.</p><figure class="highlight json"><figcaption><span>cypress/logs/failed-logs-in-using-env-variables.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"specName"</span>: <span class="string">"no-password-spec.js"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"logs in using env variables"</span>,</span><br><span class="line">  <span class="attr">"suiteName"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"testName"</span>: <span class="string">" logs in using env variables"</span>,</span><br><span class="line">  <span class="attr">"testError"</span>: <span class="string">"Timed out retrying: Expected to find content: 'Email: jack@example.com2' but never did."</span>,</span><br><span class="line">  <span class="attr">"testCommands"</span>: [</span><br><span class="line">    <span class="string">"assert username was set: expected **jack** to be a string"</span>,</span><br><span class="line">    <span class="string">"assert username was set: expected **jack** not to be empty"</span>,</span><br><span class="line">    <span class="string">"visit /login"</span>,</span><br><span class="line">    <span class="string">"get [name=username]"</span>,</span><br><span class="line">    <span class="string">"type jack"</span>,</span><br><span class="line">    <span class="string">"assert expected **&lt;input&gt;** to have value **jack**"</span>,</span><br><span class="line">    <span class="string">"get [name=password]"</span>,</span><br><span class="line">    <span class="string">"get [type=Submit]"</span>,</span><br><span class="line">    <span class="string">"click "</span>,</span><br><span class="line">    <span class="string">"form sub --submitting form--"</span>,</span><br><span class="line">    <span class="string">"page load --waiting for new page to load--"</span>,</span><br><span class="line">    <span class="string">"new url http://localhost:3000/"</span>,</span><br><span class="line">    <span class="string">"contains a, profile"</span>,</span><br><span class="line">    <span class="string">"assert expected **&lt;a&gt;** to be **visible**"</span>,</span><br><span class="line">    <span class="string">"click "</span>,</span><br><span class="line">    <span class="string">"page load --waiting for new page to load--"</span>,</span><br><span class="line">    <span class="string">"new url http://localhost:3000/profile"</span>,</span><br><span class="line">    <span class="string">"url "</span>,</span><br><span class="line">    <span class="string">"assert expected **http://localhost:3000/profile** to match /profile$/"</span>,</span><br><span class="line">    <span class="string">"contains Email: jack@example.com2"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"screenshot"</span>: <span class="string">"logs-in-using-env-variables-failed.png"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Great - this plugin seems safe to use.</p><h2><span id="conclusions">Conclusions</span></h2><p>Keeping sensitive information out of public logs, screenshots and videos is a very important and ongoing concern. Make sure that every commit even if it  <em>only changes the tests</em> goes through code review. If a password has been accidentally revealed, even during the pull request, revoke it and use a new one. For example, here is a quick way to get a random password using Node from the terminal</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -p <span class="string">"crypto.randomBytes(16).toString('hex')"</span></span><br><span class="line">d01ce7056fb2eab425161dcfa5bdb502</span><br></pre></td></tr></table></figure><p>Read more about Cypress and ways to use it in the linked resourced</p><ul><li><a href="../cypress-tips-and-tricks/">Cypress tips and tricks</a></li><li><a href="https://www.cypress.io/blog" target="_blank" rel="noopener">Cypress technical blog</a></li><li>My <a href="../cypress-talks/">recent Cypress talks</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#visible-password&quot;&gt;Visible password&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#do-not-hardcode-passwords&quot;&gt;Do not hardcode passwor
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="security" scheme="https://glebbahmutov.com/blog/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>How to set up Mocha with Sinon.js</title>
    <link href="https://glebbahmutov.com/blog/mocha-and-sinon/"/>
    <id>https://glebbahmutov.com/blog/mocha-and-sinon/</id>
    <published>2019-11-29T05:00:00.000Z</published>
    <updated>2020-02-18T16:17:39.093Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#basic-setup">Basic setup</a></li><li><a href="#sandbox">Sandbox</a></li><li><a href="#global-sandbox">Global sandbox</a></li><li><a href="#ci-setup">CI setup</a></li><li><a href="#assertions">Assertions</a></li><li><a href="#matches">Matches</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><p>Let&#39;s say we have a small Node program and want to confirm it logs &quot;Hello&quot; string to the console</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Hello'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123; app &#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">module</span>.parent) &#123;</span><br><span class="line">  app()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br><span class="line">&gt; node ./app</span><br><span class="line"></span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><p>We need a test runner to write a test and an ability to spy <code>console.log</code> method. We could write both the test runner and method spying ourselves, but there are already 2 great tools for this: <a href="https://mochajs.org/" target="_blank" rel="noopener">Mocha.js</a> and <a href="https://sinonjs.org/" target="_blank" rel="noopener">Sinon.js</a>. Let&#39;s use them.</p><p><strong>Note:</strong> you can find the source code for this blog post in <a href="https://github.com/bahmutov/mocha-sinon-example" target="_blank" rel="noopener">mocha-sinon-example</a> repository.</p><h2><span id="basic-setup">Basic setup</span></h2><p>First, install both NPM dependencies</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D mocha sinon</span><br><span class="line">info Direct dependencies</span><br><span class="line">├─ mocha@6.2.2</span><br><span class="line">└─ sinon@7.5.0</span><br></pre></td></tr></table></figure><p>Next, write a spec file <code>test/app-spec.js</code> that will import <code>app</code>, set up spying and then confirm the spy was called with expected argument</p><figure class="highlight js"><figcaption><span>test/app-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sinon = <span class="built_in">require</span>(<span class="string">'sinon'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">'../app'</span>)</span><br><span class="line">it(<span class="string">'logs Hello'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> log = sinon.spy(<span class="built_in">console</span>, <span class="string">'log'</span>)</span><br><span class="line">  app()</span><br><span class="line">  <span class="keyword">if</span> (!log.calledOnceWith(<span class="string">'Hello'</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Log was not called'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>To run unit tests, I like using NPM script command <code>npm test</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"mocha 'test/*-spec.js'"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node ./app"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test passes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm t</span><br><span class="line"></span><br><span class="line">&gt; mocha-sinon-example@1.0.0 test /Users/gleb/git/mocha-sinon-example</span><br><span class="line">&gt; mocha &apos;test/*-spec.js&apos;</span><br><span class="line"></span><br><span class="line">Hello</span><br><span class="line">  ✓ logs Hello</span><br><span class="line"></span><br><span class="line">  1 passing (5ms)</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> whenever there is new code pulled for the project, I like using shortcut <code>npm it</code> to run <code>npm install</code> + <code>npm test</code> together. Even better, I could use shortcut <code>npm cit</code> that runs <code>npm ci</code> + <code>npm test</code> together.</p><h2><span id="sandbox">Sandbox</span></h2><p>We have set up a <a href="https://sinonjs.org/releases/v7.5.0/spies/" target="_blank" rel="noopener">Sinon spy</a> on the global <code>console.log</code> - but we have not cleared it. This could lead to unexpected behavior in the unit tests that follow. For example if the next test runs by itself it works</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'logs Hello'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> log = sinon.spy(<span class="built_in">console</span>, <span class="string">'log'</span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line">it.only(<span class="string">'logs again'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> log = sinon.spy(<span class="built_in">console</span>, <span class="string">'log'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>But when the two tests run together the second attempt to spy causes an error.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1) logs again:</span><br><span class="line">     TypeError: Attempted to wrap log which is already wrapped</span><br></pre></td></tr></table></figure><p>We really don&#39;t want the two tests to be dependent on each other. Thus I strongly recommend using <a href="https://sinonjs.org/releases/v7.5.0/sandbox/" target="_blank" rel="noopener">Sinon sandboxes</a>. We could create the sandbox once and reset the sandbox before each test in a single call.</p><figure class="highlight js"><figcaption><span>test/app-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sinon = <span class="built_in">require</span>(<span class="string">'sinon'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">'../app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sandbox</span><br><span class="line">before(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  sandbox = sinon.createSandbox()</span><br><span class="line">&#125;)</span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  sandbox.restore()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'logs Hello'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> log = sandbox.spy(<span class="built_in">console</span>, <span class="string">'log'</span>)</span><br><span class="line">  app()</span><br><span class="line">  <span class="keyword">if</span> (!log.calledOnceWith(<span class="string">'Hello'</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Log was not called'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'logs again'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> log = sandbox.spy(<span class="built_in">console</span>, <span class="string">'log'</span>)</span><br><span class="line">  <span class="comment">// no problems</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="global-sandbox">Global sandbox</span></h2><p>Rather than each spec file creating a sandbox (and restoring it), we could move the <code>before</code> and <code>beforeEach</code> hooks into its own test helper file, creating <a href="https://mochajs.org/#root-level-hooks" target="_blank" rel="noopener">root-level hooks</a>.</p><figure class="highlight js"><figcaption><span>test/helper.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sinon = <span class="built_in">require</span>(<span class="string">'sinon'</span>)</span><br><span class="line">before(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  global.sandbox = sinon.createSandbox()</span><br><span class="line">&#125;)</span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  global.sandbox.restore()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>test/app-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app &#125; = <span class="built_in">require</span>(<span class="string">'../app'</span>)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'logs Hello'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> log = sandbox.spy(<span class="built_in">console</span>, <span class="string">'log'</span>)</span><br><span class="line">  app()</span><br><span class="line">  <span class="keyword">if</span> (!log.calledOnceWith(<span class="string">'Hello'</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Log was not called'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'logs again'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> log = sandbox.spy(<span class="built_in">console</span>, <span class="string">'log'</span>)</span><br><span class="line">  <span class="comment">// no problems</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I change the NPM test script to load the helper file</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"mocha test/helper 'test/*-spec.js'"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="ci-setup">CI setup</span></h2><p>Let&#39;s run these tests on CI - I will use GitHub Actions because <a href="../trying-github-actions/">they are awesome</a>. I have added <code>.github/workflows/test.yml</code> file.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">main</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  test:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">bahmutov/npm-install@v1</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">npm</span> <span class="string">t</span></span><br></pre></td></tr></table></figure><p>The code is checked out, <a href="https://github.com/bahmutov/npm-install" target="_blank" rel="noopener">bahmutov/npm-install</a> action runs <code>yarn</code> with caching of NPM dependencies, and then <code>npm t</code> runs unit tests.</p><p><img src="/blog/images/mocha-sinon/action.png" alt="GitHub Action output"></p><h2><span id="assertions">Assertions</span></h2><p>In the above example, we used a plain Error in case the spy was not called as expected.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'logs Hello'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> log = sandbox.spy(<span class="built_in">console</span>, <span class="string">'log'</span>)</span><br><span class="line">  app()</span><br><span class="line">  <span class="keyword">if</span> (!log.calledOnceWith(<span class="string">'Hello'</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Log was not called'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Sinon.js comes with <code>assert</code> methods that can help produce better error messages with more context. For example, if we expect the spy to have been called with &quot;Bye&quot; for some reason, the error message prints the actual calls</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'logs again'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> log = sandbox.spy(<span class="built_in">console</span>, <span class="string">'log'</span>)</span><br><span class="line">  app()</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'sinon'</span>).assert.calledWith(log, <span class="string">'Bye'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/mocha-sinon/sinon-assert.png" alt="Sinon.assert error message"></p><p>Even better is to bring in <a href="https://www.chaijs.com/" target="_blank" rel="noopener">Chai</a> assertions with <a href="https://github.com/domenic/sinon-chai" target="_blank" rel="noopener">Sinon.js Chai</a> plugin.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D chai sinon-chai</span><br><span class="line">info Direct dependencies</span><br><span class="line">├─ chai@4.2.0</span><br><span class="line">└─ sinon-chai@3.3.0</span><br></pre></td></tr></table></figure><p>Then add to the <code>test/helper.js</code> file the following</p><figure class="highlight js"><figcaption><span>test/helper.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>)</span><br><span class="line"><span class="keyword">const</span> sinonChai = <span class="built_in">require</span>(<span class="string">'sinon-chai'</span>)</span><br><span class="line">chai.use(sinonChai)</span><br><span class="line">global.expect = chai.expect</span><br><span class="line"><span class="comment">// global Sinon sandbox code ...</span></span><br></pre></td></tr></table></figure><p>Now we can use easy to read assertions inside the specs</p><figure class="highlight js"><figcaption><span>test/app-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'logs again'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> log = sandbox.spy(<span class="built_in">console</span>, <span class="string">'log'</span>)</span><br><span class="line">  app()</span><br><span class="line">  expect(log).to.have.been.calledOnceWith(<span class="string">'Hello'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="matches">Matches</span></h2><p>If you don&#39;t know the exact argument a stub or a spy should be called, you can use <code>sinon.match</code> utils. For example, if the code calls the method with <code>o.method(&#39;hello&#39;, name)</code> then you can assert it with</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sinon = <span class="built_in">require</span>(<span class="string">'sinon'</span>)</span><br><span class="line"><span class="keyword">const</span> greeting = sinon.spy(o, <span class="string">'method'</span>)</span><br><span class="line">expect(greeting).to.have.been.calledOnceWithExactly(<span class="string">'hello'</span>, sinon.match.string)</span><br></pre></td></tr></table></figure><h2><span id="see-also">See also</span></h2><ul><li><a href="../spying-on-methods">Spying on methods</a></li><li><a href="../picking-javascript-testing-framework">Picking JavaScript testing framework</a></li><li><a href="../lock-down-sinon-stub">Lock down Sinon stub</a></li><li><a href="../unit-testing-cli-programs">Unit testing CLI programs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#basic-setup&quot;&gt;Basic setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sandbox&quot;&gt;Sandbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#global-sandbox&quot;&gt;Glob
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="javascript" scheme="https://glebbahmutov.com/blog/tags/javascript/"/>
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Cypress Talks</title>
    <link href="https://glebbahmutov.com/blog/cypress-talks/"/>
    <id>https://glebbahmutov.com/blog/cypress-talks/</id>
    <published>2019-11-19T05:00:00.000Z</published>
    <updated>2019-11-19T03:36:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>Lately I had the privilege to speak at several conferences about Cypress.io and our testing philosophy. This blog post collects the videos and slides for easy access, and I plan to be adding new videos as I talk about Cypress at other events.</p><h2><span id="reactiveconf-2019">ReactiveConf 2019</span></h2><p><strong>Cypress.io - the State of the Art End-to-end Testing Tool</strong> Oct 2019</p><p>Presented at ReactiveConf 2019 in Prague, Czech Republic, <a href="https://www.youtube.com/watch?v=JL3QKQO80fs" target="_blank" rel="noopener">video</a>, <a href="https://slides.com/bahmutov/state-of-the-art/" target="_blank" rel="noopener">slides</a></p><center>  <iframe data-cy="talk" width="560" height="315" src="https://www.youtube.com/embed/JL3QKQO80fs" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h3><span id="main-sections">Main sections</span></h3><ul><li>Lint pyramid <a href="https://youtu.be/JL3QKQO80fs?t=226" target="_blank" rel="noopener">video at 3m46s</a>, <a href="https://slides.com/bahmutov/state-of-the-art/#/lint-pyramid" target="_blank" rel="noopener">slides</a> (Prettier, ESLint, <code>@ts-check</code>)</li><li>Tests and plugins <a href="https://youtu.be/JL3QKQO80fs?t=429" target="_blank" rel="noopener">video at 7m9s</a>, <a href="https://slides.com/bahmutov/state-of-the-art/#/only-tests" target="_blank" rel="noopener">slides</a> (unit, component, web application, visual testing, a11y testing, API testing)</li><li>Code coverage <a href="https://youtu.be/JL3QKQO80fs?t=699" target="_blank" rel="noopener">video at 11m39s</a>, <a href="https://slides.com/bahmutov/state-of-the-art/#/code-coverage" target="_blank" rel="noopener">slides</a></li><li>Splitting end-to-end test via App Actions and checkpoints <a href="https://youtu.be/JL3QKQO80fs?t=1205" target="_blank" rel="noopener">video at 20m5s</a>, <a href="https://slides.com/bahmutov/state-of-the-art/#/test-length" target="_blank" rel="noopener">slides</a>, read <a href="https://www.cypress.io/blog/2019/10/29/split-a-very-long-cypress-test-into-shorter-ones-using-app-actions/" target="_blank" rel="noopener">Split a very long Cypress test into shorter ones using App Actions</a> blog post</li></ul><h2><span id="allthingsopen">AllThingsOpen</span></h2><p><strong>Achievement Unlocked</strong> Oct 2019, <a href="https://youtu.be/2gP1-TNDzK4" target="_blank" rel="noopener">video</a>, <a href="https://cypress.slides.com/cypress-io/achievement-unlocked" target="_blank" rel="noopener">slides</a></p><center>  <iframe width="560" height="315" src="https://www.youtube.com/embed/2gP1-TNDzK4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><h3><span id="main-sections">Main sections</span></h3><ul><li>Tests and plugins <a href="https://youtu.be/2gP1-TNDzK4?t=367" target="_blank" rel="noopener">video at 6m5s</a>, <a href="https://cypress.slides.com/cypress-io/achievement-unlocked/#/only-tests" target="_blank" rel="noopener">slides</a>, check out <a href="https://on.cypress.io/plugins" target="_blank" rel="noopener">Cypress plugins</a></li><li>Cypress code coverage plugin <a href="https://youtu.be/2gP1-TNDzK4?t=764" target="_blank" rel="noopener">video at 12m44s</a>, <a href="https://cypress.slides.com/cypress-io/achievement-unlocked/#/code-coverage" target="_blank" rel="noopener">slides</a><ul><li>end-to-end, unit and full-stack code coverage, read <a href="https://on.cypress.io/code-coverage" target="_blank" rel="noopener">Cypress code coverage guide</a></li></ul></li><li>Cypress as a business <a href="https://youtu.be/2gP1-TNDzK4?t=1238" target="_blank" rel="noopener">video at 20m38s</a>, <a href="https://cypress.slides.com/cypress-io/achievement-unlocked/#/business" target="_blank" rel="noopener">slides</a><ul><li>How we make money as a company while giving the Test Runner away for free</li></ul></li><li>Current and future work <a href="https://youtu.be/2gP1-TNDzK4?t=1881" target="_blank" rel="noopener">videp at 31m21s</a>, <a href="https://cypress.slides.com/cypress-io/achievement-unlocked/#/roadmap" target="_blank" rel="noopener">slides</a><ul><li>Test analytics</li><li>Run tagging</li><li>Firefox support</li><li>Better errors</li><li>Test retries</li></ul></li></ul><h2><span id="revojs">Revo.js</span></h2><p>A great community conference in Timisoara, Romania. I recommend it 100%.</p><p><strong>Wait, before you write your next test...</strong> Oct 2019, <a href="https://youtu.be/T_jr0buAZ_Y" target="_blank" rel="noopener">video</a>, <a href="https://cypress.slides.com/cypress-io/next-test" target="_blank" rel="noopener">slides</a></p><center>  <iframe width="560" height="315" src="https://www.youtube.com/embed/T_jr0buAZ_Y" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>Slides at <a href="https://cypress.slides.com/cypress-io/next-test" target="_blank" rel="noopener">https://cypress.slides.com/cypress-io/next-test</a>, and the talk covers</p><ul><li>How I avoid writing tests by using linters</li><li>How code coverage is a great tool for directing test writing</li><li>How I make tests faster by using <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/" target="_blank" rel="noopener">app actions</a>, read blog post <a href="https://www.cypress.io/blog/2019/10/29/split-a-very-long-cypress-test-into-shorter-ones-using-app-actions/" target="_blank" rel="noopener">Split a very long Cypress test into shorter ones using App Actions</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Lately I had the privilege to speak at several conferences about Cypress.io and our testing philosophy. This blog post collects the video
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Trying GitHub Actions</title>
    <link href="https://glebbahmutov.com/blog/trying-github-actions/"/>
    <id>https://glebbahmutov.com/blog/trying-github-actions/</id>
    <published>2019-11-15T05:00:00.000Z</published>
    <updated>2020-02-18T21:17:09.736Z</updated>
    
    <content type="html"><![CDATA[<p>Recently <a href="https://help.github.com/en/actions" target="_blank" rel="noopener">GitHub Actions</a> went into general availability with very generous <a href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#usage-limits" target="_blank" rel="noopener">usage limits for public repositories</a>, and I have started playing with them. Here are a couple of experiments.</p><h2><span id="fixing-code-formatting">Fixing code formatting</span></h2><p>It is easy to forget to <a href="../configure-prettier-in-vscode/">format code</a> before pushing it to GitHub. I usually use <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> pre-commit hooks with <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a> but that requires configuration. It would be so much simpler if continuous integration server could run the formatting task and if there were any changed files, would commit and push them to the source repository, fixing any problems. Turns out, this is pretty (pun intended) simple as the example repo <a href="https://github.com/bahmutov/gh-action-with-prettier" target="_blank" rel="noopener">bahmutov/gh-action-with-prettier</a> shows. Here is the <a href="https://github.com/bahmutov/gh-action-with-prettier/blob/master/.github/workflows/ci.yml" target="_blank" rel="noopener">.github/workflows/ci.yml</a> file.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Prettier</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Prettier</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">~/.npm</span></span><br><span class="line"><span class="attr">          key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $<span class="template-variable">&#123;&#123; runner.os &#125;&#125;</span>-node-</span></span><br><span class="line"><span class="string"></span><span class="attr">      - run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">format</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">git</span> <span class="string">status</span></span><br><span class="line">      <span class="comment"># commit any changed files</span></span><br><span class="line">      <span class="comment"># https://github.com/mikeal/publish-to-github-action</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">mikeal/publish-to-github-action@master</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The above steps check out the remote source code, install NPM modules (with caching using <a href="https://github.com/actions/cache" target="_blank" rel="noopener">actions/cache</a> helper), then run Prettier via <code>npm run format</code> and finally use action <a href="https://github.com/mikeal/publish-to-github-action" target="_blank" rel="noopener">mikeal/publish-to-github-action</a> I have found at <a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener">GitHub Marketplace</a>. This action is super simple - it is a code I usually have written myself to commit local changes and push to remote, see <a href="https://github.com/mikeal/publish-to-github-action/blob/master/entrypoint.sh" target="_blank" rel="noopener">its entrypoint.sh</a>.</p><p>The integration of code repository (in this case GitHub) with CI (GitHub Actions) is very convenient from the security point of view. In this case, a secret <code>GITHUB_TOKEN</code> is automatically injected by the CI - allowing us to easily interact with the remote repository, no extra steps necessary.</p><p><img src="/blog/images/github-actions/code-formatted.png" alt="Code was formatted and pushed to master"></p><h2><span id="action-versioning">Action versioning</span></h2><p>Actions are fetched directly from GitHub repositories, not from NPM. Thus you can specify what action to use using a <a href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idstepsuses" target="_blank" rel="noopener">branch name, tag or commit</a>.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="attr">  - uses:</span> <span class="string">actions/setup-node@74bc508</span> <span class="comment"># Reference a specific commit</span></span><br><span class="line"><span class="attr">  - uses:</span> <span class="string">actions/setup-node@v1</span>      <span class="comment"># Reference the major version of a release</span></span><br><span class="line"><span class="attr">  - uses:</span> <span class="string">actions/setup-node@v1.2</span>    <span class="comment"># Reference a minor version of a release</span></span><br><span class="line"><span class="attr">  - uses:</span> <span class="string">actions/setup-node@master</span>  <span class="comment"># Reference a branch</span></span><br></pre></td></tr></table></figure><p>I recommend using either latest published branch like:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line"><span class="attr">- uses:</span> <span class="string">actions/setup-node@v1.2.1</span></span><br></pre></td></tr></table></figure><h3><span id="security">Security</span></h3><p>Using branch tags is dangerous though, read <a href="https://julienrenaux.fr/2019/12/20/github-actions-security-risk/" target="_blank" rel="noopener">this post</a> since you can execute unknown code when the tag changes. Thus if you want to sleep slightly better at night, please use the full commit sha of the actions you have reviewed.</p><h2><span id="npm-or-yarn-install">NPM or Yarn install</span></h2><p>GitHub has published <a href="https://github.com/actions/toolkit" target="_blank" rel="noopener">Actions Toolkit</a> for writing <a href="https://github.com/features/actions" target="_blank" rel="noopener">actions</a> using JavaScript or TypeScript. This is excellent - always bet on JavaScript! The only problem - some actions for a typical Node project require quite a bit of copy / paste code. For example, every Node project needs to cache <code>~/.npm</code> folder, thus it needs the following boilerplate action.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line"><span class="attr">  uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line"><span class="attr">  with:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">~/.npm</span></span><br><span class="line"><span class="attr">    key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles('**/package-lock.json')</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      $<span class="template-variable">&#123;&#123; runner.os &#125;&#125;</span>-node-</span></span><br><span class="line"><span class="string"></span><span class="attr">- run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br></pre></td></tr></table></figure><p>Ughh, wouldn&#39;t it be nice to have nice reusable &quot;Install NPM modules and cache them, please&quot; action? Unfortunately, <a href="https://github.com/actions/cache" target="_blank" rel="noopener">action/cache</a> itself is an action - and cannot be used from JavaScript ☹️. There is a little bit of discussion <a href="https://github.com/actions/cache/issues/55" target="_blank" rel="noopener">here</a> on the issue I have opened, but worry not - Open Source to the rescue. I have cloned <code>actions/cache</code> into <a href="https://github.com/cypress-io/github-actions-cache" target="_blank" rel="noopener">cypress-io/github-actions-cache</a> and have refactored the code in branch <code>reusable-functions</code> to allow using <code>restoreCache</code> and <code>saveCache</code> functions from other JavaScript code. Easy-peasy.</p><p>Let&#39;s write <code>npm-install</code> action - here is the main logic of the action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">restoreCachedNpm()</span><br><span class="line">.then(<span class="function"><span class="params">npmCacheHit</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'npm cache hit'</span>, npmCacheHit)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> install().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (npmCacheHit) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> saveCachedNpm()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">  core.setFailed(error.message)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If the previously cached <code>~/.npm</code> or <code>~/.cache/yarn</code> depending on the presence of <code>yarn.lock</code> folder was successfully restored, then we perform immutable install using <code>npm ci</code> or <code>yarn --frozen-lockfile</code> command and are done. If the cache hit was missed, then we need to save the NPM modues folder in action&#39;s cache.</p><p>Restoring and saving NPM cache folder functions use the forked <code>cache</code> module and rely on platform and lock file hash to know when a new cache is necessary.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hasha = <span class="built_in">require</span>(<span class="string">'hasha'</span>)</span><br><span class="line"><span class="comment">// we are using dependency</span></span><br><span class="line"><span class="comment">// "cache": "github:cypress-io/github-actions-cache#8bec6cc"</span></span><br><span class="line"><span class="keyword">const</span> &#123; restoreCache, saveCache &#125; = <span class="built_in">require</span>(<span class="string">'cache/lib/index'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useYarn = fs.existsSync(<span class="string">'yarn.lock'</span>)</span><br><span class="line"><span class="keyword">const</span> lockFilename = useYarn ? <span class="string">'yarn.lock'</span> : <span class="string">'package-lock.json'</span></span><br><span class="line"><span class="keyword">const</span> lockHash = hasha.fromFileSync(lockFilename)</span><br><span class="line"><span class="keyword">const</span> platformAndArch = <span class="string">`<span class="subst">$&#123;process.platform&#125;</span>-<span class="subst">$&#123;process.arch&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this is simplified code for clarity</span></span><br><span class="line"><span class="comment">// see action file index.js for full details</span></span><br><span class="line"><span class="keyword">const</span> NPM_CACHE = &#123;</span><br><span class="line">  inputPath: <span class="string">'~/.npm'</span>, <span class="comment">// or '~/.cache/yarn'</span></span><br><span class="line">  primaryKey: <span class="string">`npm-<span class="subst">$&#123;platformAndArch&#125;</span>-<span class="subst">$&#123;lockHash&#125;</span>`</span>,</span><br><span class="line">  restoreKeys: <span class="string">`npm-<span class="subst">$&#123;platformAndArch&#125;</span>-`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> restoreCachedNpm = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'trying to restore cached NPM modules'</span>)</span><br><span class="line">  <span class="keyword">return</span> restoreCache(</span><br><span class="line">    NPM_CACHE.inputPath,</span><br><span class="line">    NPM_CACHE.primaryKey,</span><br><span class="line">    NPM_CACHE.restoreKeys</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> saveCachedNpm = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'saving NPM modules'</span>)</span><br><span class="line">  <span class="keyword">return</span> saveCache(NPM_CACHE.inputPath, NPM_CACHE.primaryKey)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="building-action">Building action</span></h3><p>Because the action needs to be ready to go, you need to bundle the action using <a href>zeti/ncc</a> for example. Thus the action&#39;s <code>package.json</code> file includes the <code>build</code> script.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"ncc build -o dist index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@zeit/ncc"</span>: <span class="string">"0.20.5"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The generated <code>dist</code> folder is checked in - because GitHub actions are fetched straight from GitHub source, no from NPM registry. For publishing I use another GitHub action <a href="https://github.com/cycjimmy/semantic-release-action" target="_blank" rel="noopener">cycjimmy/semantic-release-action</a> that tags and pushes new releases on GitHub and also update <code>v&lt;major version&gt;</code> branch, like <code>v1</code> to always point at the latest release.</p><p>Finally, I have described action&#39;s main properties in <a href="https://github.com/bahmutov/npm-install/blob/master/action.yml" target="_blank" rel="noopener">action.yml</a> and published it on <a href="https://github.com/marketplace/actions/npm-or-yarn-install-with-caching" target="_blank" rel="noopener">GitHub Marketplace</a>.</p><p><img src="/blog/images/github-actions/npm-install.png" alt="The lonely NPM install action"></p><p>You can see this action in ... action at <a href="https://github.com/bahmutov/npm-install-action-example/actions" target="_blank" rel="noopener">bahmutov/npm-install-action-example/actions</a>. The CI file is simple</p><figure class="highlight yml"><figcaption><span>.github/workflows/main.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">main</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build-and-test:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">test</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">bahmutov/npm-install@v1</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">npm</span> <span class="string">t</span></span><br></pre></td></tr></table></figure><p>Name <code>bahmutov/npm-install@v1</code> refers to branch <code>v1</code> of the GitHub repository <a href="https://github.com/bahmutov/npm-install/tree/v1" target="_blank" rel="noopener">bahmutov/npm-install</a> where the latest semantic release is pushed. On the first build, the cache is empty, and <code>npm ci</code> has to fetch NPM modules from the registry. Then the folder <code>~/.npm</code> is cached.</p><p><img src="/blog/images/github-actions/first-install.png" alt="First install"></p><p>On the second build, the cache is hit, and <code>npm ci</code> is faster - because it uses only modules from the restored <code>~/.npm</code> folder, and then skips saving unchanged cache folder.</p><p><img src="/blog/images/github-actions/second-install.png" alt="Second install"></p><p>Nice, feel free to use this action from your projects, and <a href="https://github.com/bahmutov/npm-install/issues" target="_blank" rel="noopener">open new issue</a> if you find a problem. You can also build your own actions using the <a href="https://github.com/bahmutov/npm-install#npm" target="_blank" rel="noopener">exported NPM function</a>.</p><h2><span id="end-to-end-testing">End-to-end testing</span></h2><p>Finally, I have written <a href="https://github.com/cypress-io/github-action" target="_blank" rel="noopener">cypress-io/github-action</a> to make running Cypress tests on GitHub super simple. Here is how to run tests on a single Linux machine</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">End-to-end</span> <span class="string">tests</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  cypress-run:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Checkout</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="comment"># Install NPM dependencies, cache them correctly</span></span><br><span class="line">      <span class="comment"># and run all Cypress tests</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">cypress-io/github-action@v1</span></span><br></pre></td></tr></table></figure><p>Here is more complicated case: running tests in parallel in <a href="https://on.cypress.io/parallelization" target="_blank" rel="noopener">load balancing mode</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Parallel</span> <span class="string">Cypress</span> <span class="string">Tests</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    strategy:</span></span><br><span class="line"><span class="attr">      matrix:</span></span><br><span class="line">        <span class="comment"># run 3 copies of the current job in parallel</span></span><br><span class="line"><span class="attr">        containers:</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">,</span> <span class="number">3</span><span class="string">]</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Checkout</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># because of "record" and "parallel" parameters</span></span><br><span class="line">      <span class="comment"># these containers will load balance all found tests among themselves</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Cypress</span> <span class="string">run</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">cypress-io/github-action@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          record:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          parallel:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          group:</span> <span class="string">'Actions example'</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line">          <span class="comment"># pass the Dashboard record key as an environment variable</span></span><br><span class="line"><span class="attr">          CYPRESS_RECORD_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CYPRESS_RECORD_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Super simple and even works across Windows, Mac and Linux machines on CI, see <a href="https://github.com/cypress-io/github-action#examples" target="_blank" rel="noopener">Cypress GitHub Action examples</a>.</p><h2><span id="npm-publishing">NPM publishing</span></h2><p>If you are a fan of <a href="https://semver.org/" target="_blank" rel="noopener">semantic versioning</a> like I am, you are probably using <a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener">semantic-release</a> to publish NPM packages automatically from CI. This type of release becomes even simpler with GitHub actions thanks to <a href="https://github.com/cycjimmy/semantic-release-action" target="_blank" rel="noopener">cycjimmy/semantic-release-action</a>.</p><p>First, go to <a href="https://www.npmjs.com/settings/bahmutov/tokens" target="_blank" rel="noopener">https://www.npmjs.com/settings/<username>/tokens</username></a> and get a new &quot;Read and Write&quot; token. Save it to clipboard - it will never be displayed again!</p><p>Second, go to the project&#39;s Settings / Secrets and add a new secret with name <code>NPM_TOKEN</code> and paste the NPM auth token from the clipboard.</p><p>Add the following step to your workflow</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># after test step</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">Semantic</span> <span class="string">Release</span></span><br><span class="line"><span class="attr">  uses:</span> <span class="string">cycjimmy/semantic-release-action@v2</span></span><br><span class="line"><span class="attr">  id:</span> <span class="string">semantic</span></span><br><span class="line"><span class="attr">  with:</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">    extra_plugins:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      @semantic-release/git</span></span><br><span class="line"><span class="string">      @semantic-release/changelog</span></span><br><span class="line"><span class="string"></span><span class="attr">  env:</span></span><br><span class="line"><span class="attr">    GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">    NPM_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.NPM_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>The <code>GITHUB_TOKEN</code> secret is automatically created and injected by the GH Action App in your repository, you don&#39;t need to create it. Each time there is a Git commit on the <code>master</code> branch since the last release, the above action will publish new NPM version and will create a GitHub release. See example in action in repo <a href="https://github.com/bahmutov/cy-spok/actions" target="_blank" rel="noopener">bahmutov/cy-spok</a>, where you can see <code>github-actions</code> user publishing releases.</p><p><img src="/blog/images/github-actions/github-action-release.png" alt="Semantic release from GH Action"></p><h2><span id="badges">Badges</span></h2><p>You can add <a href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository" target="_blank" rel="noopener">GH Action badge</a> to your README file. I prefer using the syntax that includes workflow name and explicit branch:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/&lt;OWNER&gt;/&lt;REPOSITORY&gt;/workflows/&lt;WORKFLOW_NAME&gt;/badge.svg?branch=&lt;BRANCH&gt;</span><br><span class="line"># example</span><br><span class="line">![cy-spok status](https://github.com/bahmutov/cy-spok/workflows/main/badge.svg?branch=master)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/bahmutov/cy-spok/workflows/main/badge.svg?branch=master" alt="cy-spok status"></p><p>One thing I like doing is creating separate workflows for the same project and putting multiple badges in the same README. If there are example projects, we could put their badges there too. This creates a single CI status &quot;dashboard&quot; in the Markdown file, something <a href="../status-dashboard-from-markdown/">I have recommended a long time ago</a></p><p><img src="/blog/images/github-actions/badges-markdown.png" alt="Status badges Markdown table"></p><p><img src="/blog/images/github-actions/badges.png" alt="Status badges"></p><h2><span id="more-examples">More examples</span></h2><ul><li><a href="https://github.com/bahmutov/auto-pr-gh-action-example" target="_blank" rel="noopener">Open or merge pull requests automatically</a></li><li>A great tutorial about using and building actions in 30 (!) parts from <a href="https://edwardthomson.com/" target="_blank" rel="noopener">Edward Thomson</a> is <a href="https://edwardthomson.com/blog/github_actions_advent_calendar.html" target="_blank" rel="noopener">here</a></li><li>while working on a GitHub action, you can unit test it, but also apply the action to examples in subfolders that act like end-to-end examples. See <a href="https://github.com/bahmutov/npm-install#testing" target="_blank" rel="noopener">bahmutov/npm-install Testing section</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently &lt;a href=&quot;https://help.github.com/en/actions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub Actions&lt;/a&gt; went into general availability wi
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Run End-to-end Tests from Markdown Files</title>
    <link href="https://glebbahmutov.com/blog/cypress-fiddle/"/>
    <id>https://glebbahmutov.com/blog/cypress-fiddle/</id>
    <published>2019-10-22T04:00:00.000Z</published>
    <updated>2019-10-22T13:06:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://on.cypress.io" target="_blank" rel="noopener">Cypress documentation</a> has a lot of examples. Pretty much every command, like <a href="https://on.cypress.io/get#Examples" target="_blank" rel="noopener"><code>cy.get</code></a> or <a href="https://on.cypress.io/last#Examples" target="_blank" rel="noopener"><code>cy.last</code></a> has several realistic examples.</p><p><img src="/blog/images/fiddle/last-example.png" alt="`cy.last` example"></p><p>There is a huge problem with documentation examples - they might be wrong. Since they are copied from tests, or written by hand without running them, there is no guarantee that they are correct with respect to the latest Cypress version.</p><p>We could write a real end-to-end test for each example and keep it in sync, but this requires a lot of work to stay up-to-date. What if we instead executed the examples <em>directly from the documentation pages</em>? After all, each example has the HTML to mount and test code to run, so it contains all the parts of a real test as code blocks.</p><p>This is what <a href="https://github.com/cypress-io/cypress-fiddle" target="_blank" rel="noopener">@cypress/fiddle</a> does. It contains a test file preprocessor that understand the Markdown file format, finds all specially marked example blocks and creates a Cypress test out of them. For example, see <a href="https://github.com/bahmutov/vuepress-cypress-test-example" target="_blank" rel="noopener">bahmutov/vuepress-cypress-test-example</a>. In that repo, the README.md file contains the following block</p><p><img src="/blog/images/fiddle/fiddle.png" alt="Markdown section with a fiddle"></p><p>Notice the special HTML comments <code>&lt;!-- fiddle DOM test --&gt;</code> and <code>&lt;!-- fiddle-end --&gt;</code>. They are ignored by Markdown render engines. Thus we can safely use them to mark the beginning and the end of each test. Inside the test we can have HTML and JavaScript code blocks. The HTML block will be mounted during the test, and the JavaScript code will be executed as the body of a test. The name of the test is encoded in the starting comment, in this case it will be &quot;DOM test&quot;. The test runs and passes.</p><p><img src="/blog/images/fiddle/dom-test.png" alt="Dom test generated from README.md section"></p><p>From the Markdown file we can generate both the static site (like <a href="https://docs.cypress.io" target="_blank" rel="noopener">https://docs.cypress.io</a>) and run Cypress tests, find one such example in <a href="https://github.com/bahmutov/vuepress-cypress-test-example" target="_blank" rel="noopener">bahmutov/vuepress-cypress-test-example</a>.</p><p>So, the <code>cy.last</code> example in the documentation becomes a fiddle like this:</p><p><img src="/blog/images/fiddle/last-fiddle.png" alt="Last fiddle"></p><p>And it runs as a test in Cypress</p><p><img src="/blog/images/fiddle/last-test.png" alt="Last fiddle test passing"></p><p>Happy testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://on.cypress.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cypress documentation&lt;/a&gt; has a lot of examples. Pretty much every command
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Cambridge MA elections</title>
    <link href="https://glebbahmutov.com/blog/cambridge-elections/"/>
    <id>https://glebbahmutov.com/blog/cambridge-elections/</id>
    <published>2019-10-21T04:00:00.000Z</published>
    <updated>2019-10-23T18:33:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>I had a chance to attend candidate forum before local elections to Cambridge, Massachusetts. All candidates appeal to me, but the climate catastrophe is the number one issue that should be on everyone&#39;s mind right now. So in this light, here are the candidates that do put the Earth&#39;s climate as their number one priority.</p><ul><li><a href="https://www.voteburhan.com/" target="_blank" rel="noopener">Burhan Azeem</a> <a href="https://twitter.com/realBurhanAzeem" target="_blank" rel="noopener">@realBurhanAzeem</a> - see <strong>update 1</strong> below.</li><li><a href="https://votequinton.com/" target="_blank" rel="noopener">Quinton Zondervan</a> <a href="https://twitter.com/qzondervan" target="_blank" rel="noopener">@qzondervan</a> is my number one choice. I fully support his <a href="https://votequinton.com/climate-platform-2019/" target="_blank" rel="noopener">Equitable Climate Response</a>, it is what we urgently need today to survive.</li><li><a href="https://pattynolan.org/" target="_blank" rel="noopener">Patty Nolan</a> <a href="https://twitter.com/PattyNolan1" target="_blank" rel="noopener">@PattyNolan1</a> shares my sense of urgency in regards to climate, read her <a href="https://pattynolan.org/priorities/#climatecrisis" target="_blank" rel="noopener">climate crisis</a> essay. Absolutely wonderful candidate.</li><li><a href="https://www.johnpitkin.org/" target="_blank" rel="noopener">John Pitkin</a> is an environmentalist, who I feel deserves to be on the council, watch his <a href="https://environmentaljusticetv.wordpress.com/2019/10/20/your-political-alternatives-john-pitkin-candidate-for-cambridge-city-council-ev-n-328-cctv/" target="_blank" rel="noopener">Cambridge TV interview</a>.</li><li><a href="https://www.vote1ilan.net/" target="_blank" rel="noopener">Ilan Levy</a> <a href="https://twitter.com/vote1ilan" target="_blank" rel="noopener">@vote1ilan</a> has a great understanding of why climate takes the back seat to the development, and what we need to do to change the city&#39;s policies.</li></ul><p><img src="/blog/images/elections/sign.jpeg" alt="My sign in support of the candidates"></p><p>I loved many other candidates and their platforms: <a href="https://www.voteadriane.com/" target="_blank" rel="noopener">Adriane Musgrave</a> <a href="https://twitter.com/abmusgrave" target="_blank" rel="noopener">@abmusgrave</a>, <a href="https://www.marcmcgovern.com/" target="_blank" rel="noopener">Marc McGovern</a> <a href="https://twitter.com/MarcGov" target="_blank" rel="noopener">@MarcGov</a> (what a great name for an elected politician), and I will vote for them - but after I put the above 4 candidates as my numbers 1 through 4. City of Cambridge has <a href="https://en.wikipedia.org/wiki/Ranked_voting" target="_blank" rel="noopener">ranked voting</a> which is an excellent system.</p><p>Voting in local elections is something every can do - and the people you elect directly affect your town and your life. Please vote with the climate emergency as number one issue this election cycle. Cambridge is a unique rich city with major tech corporations located in it - it should lead in green renewable energy and carbon draw-down.</p><h2><span id="update-1">Update 1</span></h2><p>My original list included 4 people. After getting some feedback from the others, and having a <a href="https://twitter.com/realBurhanAzeem/status/1186746538615300101" target="_blank" rel="noopener">long conversation on Twitter</a> (follows this paragraph) with <a href="https://www.voteburhan.com/" target="_blank" rel="noopener">Burhan Azeem</a> <a href="https://twitter.com/realBurhanAzeem" target="_blank" rel="noopener">@realBurhanAzeem</a> I am so happy to add him to my list of people to support. His clear eyed answer to the question &quot;what is in your opinion a realistic and science-based likely scenario with regards to the climate?&quot; is refreshing to see. We are in <strong>planet becomes unlivable</strong> phase, and by the way - Cambridge being on the shore of Atlantic ocean will not fare very well.</p><p>After the conversation below, <a href="https://twitter.com/bahmutov/status/1186763761199259650" target="_blank" rel="noopener">we have agreed</a> that Cambridge can immediately:</p><p><img src="/blog/images/elections/cambridge.png" alt="What can Cambridge do to cut carbon emissions"></p><p>Tweets below are by Burhan Azeem, <a href="https://twitter.com/realBurhanAzeem/status/1186746538615300101" target="_blank" rel="noopener">original tweet</a></p><p><img src="/blog/images/elections/burhan-convo.jpg" alt="Thread of tweets by Burhan Azeem"></p><p>Related: <a href="../climate-emergency/">Climate Emergency</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I had a chance to attend candidate forum before local elections to Cambridge, Massachusetts. All candidates appeal to me, but the climate
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/tags/climate/"/>
    
  </entry>
  
  <entry>
    <title>Testing Angular application via App Actions</title>
    <link href="https://glebbahmutov.com/blog/testing-angular-application-via-app-actions/"/>
    <id>https://glebbahmutov.com/blog/testing-angular-application-via-app-actions/</id>
    <published>2019-09-14T04:00:00.000Z</published>
    <updated>2019-09-14T13:41:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>You can find the entire source code for this example at <a href="https://github.com/bahmutov/angular-heroes-app-actions" target="_blank" rel="noopener">bahmutov/angular-heroes-app-actions</a>.</p><h2><span id="introduction">Introduction</span></h2><p>In my previous blog posts I have shown how end-to-end tests do not always have to go through the user interface to interact with the application <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/" target="_blank" rel="noopener">1</a>, <a href="../realworld-app-action/">2</a>, <a href="https://www.cypress.io/blog/2019/02/28/shrink-the-untestable-code-with-app-actions-and-effects/" target="_blank" rel="noopener">3</a>. Those examples used Vue, React and Overmind.js front-end libraries. In this blog post I will show how to access application state directly from the test code for Angular 8 application. We will access the state both to make assertions against it during test, and to dispatch actions against it. This allows us to be both quick and build our tests on top of the component&#39;s API, not on top of the page DOM.</p><!-- toc --><ul><li><a href="#regular-test">Regular test</a></li><li><a href="#exposing-heroes-component">Exposing Heroes component</a></li><li><a href="#asserting-application-state">Asserting application state</a></li><li><a href="#changing-data-inside-the-component">Changing data inside the component</a></li><li><a href="#triggering-application-update">Triggering application update</a></li><li><a href="#tests-using-app-actions">Tests using app actions</a><ul><li><a href="#avoid-setup-using-ui">Avoid setup using UI</a></li><li><a href="#prefer-controlling-app-directly">Prefer controlling app directly</a></li><li><a href="#avoiding-race-conditions">Avoiding race conditions</a></li></ul></li><li><a href="#fixing-typescript">Fixing TypeScript</a></li><li><a href="#conclusions">Conclusions</a><ul><li><a href="#see-more">See more</a></li></ul></li></ul><!-- tocstop --><h2><span id="regular-test">Regular test</span></h2><p>But first, let me give an example of a &quot;normal&quot; end-to-end test. We will write these tests first to cover individual features of the app, simulating the behavior of a normal human user. Let&#39;s take a user story like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- user goes to /heroes view</span><br><span class="line">- user sees list of heroes</span><br><span class="line">- &quot;Dr Nice&quot; is at the top of the list</span><br><span class="line">- user does not like &quot;Dr Nice&quot; and deletes him from the list</span><br><span class="line">- &quot;Dr Nice&quot; is gone</span><br><span class="line">- when the user reloads the page, &quot;Dr Nice&quot; appears again</span><br></pre></td></tr></table></figure><p>Here is the corresponding Cypress test, reading almost as naturally as the English sentences above.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'Returns deleted hero after reload'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  cy.get(<span class="string">'ul.heroes li'</span>).should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">    .first().should(<span class="string">'include.text'</span>, <span class="string">'Dr Nice'</span>)</span><br><span class="line">    .find(<span class="string">'.delete'</span>).click()</span><br><span class="line">  cy.get(<span class="string">'ul.heroes li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">9</span>).and(<span class="string">'not.include.text'</span>, <span class="string">'Dr Nice'</span>)</span><br><span class="line">  cy.reload()</span><br><span class="line">  <span class="comment">// Dr Nice is back</span></span><br><span class="line">  cy.get(<span class="string">'ul.heroes li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">    .first().should(<span class="string">'include.text'</span>, <span class="string">'Dr Nice'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/angular-app-actions/delete-and-reload.gif" alt="Deleting a hero and reloading the page test"></p><p>This test uses the application through the user interface and confirms the &quot;delete&quot; behavior. We now that the UI element <code>&lt;button class=&quot;delete&quot;&gt;</code> is really working. Let&#39;s never press it again.</p><p>When writing other tests, we can bypass clicking on &quot;Delete&quot; button, instead we can call the underlying component&#39;s &quot;delete&quot; method. This will allow us to build up better application&#39;s internal API, which are public methods in each component, rather than try to come up with a page object that encapsulates <code>cy.find(&#39;.delete&#39;).click()</code> commands.</p><p>But first we will need to somehow expose a reference to a component we want to control, so our test can even get to the component.</p><h2><span id="exposing-heroes-component">Exposing Heroes component</span></h2><p>To reach inside the application from our test, we need to pass a reference to a component or service from the app to the spec. The easiest way to do this is by attaching the reference to the <code>window</code> object. Let&#39;s pass reference to the Heroes component.</p><figure class="highlight ts"><figcaption><span>heroes.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-heroes'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./heroes.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./heroes.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroesComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  heroes: Hero[];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> heroService: HeroService</span>) &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">      <span class="comment">// @ts-ignore</span></span><br><span class="line">      <span class="built_in">window</span>.HeroesComponent = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the rest of the component</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If our application is running inside Cypress tests, we will set <code>window.HeroesComponent</code>. Notice <code>// @ts-ignore</code> directives - I need to use them because normally <code>window</code> object has neither <code>Cypress</code>, nor <code>HeroesComponent</code> property. The beauty of TypeScript. We will fix this later.</p><p>From our tests, we can reach into the application&#39;s <code>window</code> and use the property <code>HeroesComponent</code> <em>when it gets set</em>. We will do this via assertions taking advantage of <a href="https://on.cypress.io/retry-ability" target="_blank" rel="noopener">retry-ability</a>. Imagine the <code>window</code> starting without <code>HeroesComponent</code> and we want to wait until the property gets set. We need to use <code>should</code> assertion - it will get retried and retried until our application starts and <code>window.HeroesComponent = this</code> is executed.</p><figure class="highlight js"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'sets reference to HeroesComponent'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  cy.window()</span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'HeroesComponent'</span>) <span class="comment">// yields window.HeroesComponent</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The assertion &quot;have.property&quot; automatically yields that property to the next command in the chain. Thus we can check and assert the number of heroes initially.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'starts with 10 heroes'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  cy.window()</span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'HeroesComponent'</span>) <span class="comment">// yields window.HeroesComponent</span></span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'heroes'</span>) <span class="comment">// yields window.HeroesComponent.heroes array</span></span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If you click on any <code>SHOULD</code> command in the Command Log on the left, the yielded object will be printed to the DevTools console. You can see what the application state was at each step, which makes it simple to understand the test and application behavior.</p><p><img src="/blog/images/angular-app-actions/heroes-component.png" alt="The HeroesComponent"></p><p>It is a good idea to factor out the access to the application&#39;s component into a utility function for reuse.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getHeroesComponent = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'HeroesComponent'</span>) <span class="comment">// yields window.HeroesComponent</span></span><br><span class="line"></span><br><span class="line">it(<span class="string">'starts with 10 heroes'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  getHeroesComponent()</span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'heroes'</span>) <span class="comment">// yields window.HeroesComponent.heroes array</span></span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Or if you prefer to a custom command</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(<span class="string">'getHeroesComponent'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// yields window.HeroesComponent</span></span><br><span class="line">  <span class="keyword">return</span> cy.window().should(<span class="string">'have.property'</span>, <span class="string">'HeroesComponent'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'starts with 10 heroes (custom command)'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  cy.getHeroesComponent()</span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'heroes'</span>) <span class="comment">// yields window.HeroesComponent.heroes array</span></span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I am not a big fan of custom commands, because at least in TypeScript specs you need to either add <code>// @ts-ignore</code> or have a separate TS files that extends <code>cy</code> with new commands, see <a href="https://on.cypress.io/typescript" target="_blank" rel="noopener">Cypress TypeScript page</a>.</p><h2><span id="asserting-application-state">Asserting application state</span></h2><p>Let&#39;s use the reference to the component to check its state. We will take the same test as before and will add a few more assertions to confirm the first hero in the list before and after &quot;delete&quot;, and after page reload.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'Returns deleted hero after reload - with assertions against data'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  <span class="comment">// confirm the data in the component</span></span><br><span class="line">  getHeroes().should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    .its(<span class="string">'0'</span>)</span><br><span class="line">    .should(<span class="string">'deep.equal'</span>, &#123;</span><br><span class="line">      id: <span class="number">11</span>,</span><br><span class="line">      name: <span class="string">'Dr Nice'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// confirm the UI</span></span><br><span class="line">  cy.get(<span class="string">'ul.heroes li'</span>).should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">    .first().should(<span class="string">'include.text'</span>, <span class="string">'Dr Nice'</span>)</span><br><span class="line">    .find(<span class="string">'.delete'</span>).click()</span><br><span class="line">  cy.get(<span class="string">'ul.heroes li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">9</span>).and(<span class="string">'not.include.text'</span>, <span class="string">'Dr Nice'</span>)</span><br><span class="line">  <span class="comment">// confirm the data in the component</span></span><br><span class="line">  getHeroes()</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    .its(<span class="string">'0'</span>).should(<span class="string">'deep.equal'</span>, &#123;</span><br><span class="line">      id: <span class="number">12</span>,</span><br><span class="line">      name: <span class="string">'Narco'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  cy.reload()</span><br><span class="line">  <span class="comment">// Dr Nice is back</span></span><br><span class="line">  cy.get(<span class="string">'ul.heroes li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">    .first().should(<span class="string">'include.text'</span>, <span class="string">'Dr Nice'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Having assertions against the internal application data ties your tests to the implementation, so judge if it is necessary yourself. If the application&#39;s implementation has reached maturity, and won&#39;t change much in the future, it is probably ok, as it allows you to lock down the internal data details.</p><h2><span id="changing-data-inside-the-component">Changing data inside the component</span></h2><p>We know how to access data inside a component, now let&#39;s change it. Let&#39;s set the number of heroes to zero for example.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'sets zero heroes'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  cy.getHeroesComponent()</span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'heroes'</span>) <span class="comment">// yields window.HeroesComponent.heroes array</span></span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">10</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">heroes</span> =&gt;</span> &#123;</span><br><span class="line">      heroes.length = <span class="number">0</span></span><br><span class="line">      cy.log(<span class="string">'cleared heroes'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, the test claims that is has cleared the list of heroes, but the app still shows all of them.</p><p><img src="/blog/images/angular-app-actions/after-clear.png" alt="Application still shows all heroes"></p><h2><span id="triggering-application-update">Triggering application update</span></h2><p>So far we have changed the data inside the application, yet the user interface does not refresh - the application has no idea that it needs to re-render. Let&#39;s force the update. To do this, we need to get a reference to <a href="https://angular.io/api/core/ApplicationRef" target="_blank" rel="noopener">ApplicationRef</a> instance, so we can call <a href="https://angular.io/api/core/ApplicationRef#tick" target="_blank" rel="noopener"><code>appRef.tick()</code></a> method.</p><p>In order to do this, we will change how the application bootstraps in <code>app.module.ts</code>. Usually we just list component to be bootstrapped like this:</p><figure class="highlight ts"><figcaption><span>app.module.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  bootstrap: [ AppComponent ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>But we will implement the bootstrap interface <a href="https://angular.io/api/core/DoBootstrap" target="_blank" rel="noopener">DoBootstrap</a> ourselves - because the callback gets the <code>ApplicationRef</code> argument we want to access later. Here is the small change.</p><figure class="highlight ts"><figcaption><span>app.module.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule, DoBootstrap, ApplicationRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="comment">// instead of elements to bootstrap</span></span><br><span class="line">  <span class="comment">// just put app component in the entry components list</span></span><br><span class="line">  entryComponents: [AppComponent]</span><br><span class="line">  <span class="comment">// and remove the "bootstrap" property</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule <span class="keyword">implements</span> DoBootstrap &#123;</span><br><span class="line">  ngDoBootstrap(appRef: ApplicationRef) &#123;</span><br><span class="line">    <span class="comment">// bootstrap AppComponent ourselves</span></span><br><span class="line">    appRef.bootstrap(AppComponent)</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">      <span class="comment">// and save the application reference!</span></span><br><span class="line">      <span class="comment">// @ts-ignore</span></span><br><span class="line">      <span class="built_in">window</span>.appRef = appRef</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can force the application re-render from the DevTools console.</p><p><img src="/blog/images/angular-app-actions/app-ref-tick.gif" alt="Using application reference tick to re-render DOM"></p><p>If we can control our application from DevTools console, we can control it from Cypress - it is just JavaScript.</p><h2><span id="tests-using-app-actions">Tests using app actions</span></h2><h3><span id="avoid-setup-using-ui">Avoid setup using UI</span></h3><p>What happens when there are no heroes and the user does a search? Let&#39;s test it. Our test needs to delete all heroes from the app and then search. Hmm, deleting heroes is complicated because we don&#39;t know how many heroes the application loads. Of course Cypress has a way to click multiple buttons like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'deletes all heroes through UI'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  <span class="comment">// confirm the heroes have loaded and select "delete" buttons</span></span><br><span class="line">  cy.get(<span class="string">'ul.heroes li button.delete'</span>)</span><br><span class="line">    .should(<span class="string">'have.length.gt'</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// and delete all heroes</span></span><br><span class="line">    .click(&#123; <span class="attr">multiple</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This works, because our application shows ALL items on the same page. Cypress just licks each delete button one by one.</p><p><img src="/blog/images/angular-app-actions/multiple-click.gif" alt="Deleting Heroes by clicking"></p><p>But I advise against this type of test, because in general a test that performs a variable number of steps is prone to be flaky and hard to understand and debug in the future. We call such tests <a href="https://on.cypress.io/conditional-testing" target="_blank" rel="noopener">non-deterministic</a> and advise against them. The test should always follow the same scenario - it should prepare the data beforehand to always follow the same path.</p><p>Imagine our application changes, and starts with zero heroes. The test will FAIL because it cannot click zero delete buttons! Imagine the test starts with 100 heroes. The test will take a long time just to delete a hundred items by clicking a hundred buttons. What if the application paginates the list? Deleting of heroes through the user interface suddenly becomes a hard problem by itself, and any test that needs to have zero heroes becomes flaky and complicated.</p><h3><span id="prefer-controlling-app-directly">Prefer controlling app directly</span></h3><p>There is a better way.</p><p>Let&#39;s avoid the unknown number of clicks problem. We can clear the list by reaching inside the application and just setting the length of list of heroes to zero.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getHeroesComponent = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  cy.window()</span><br><span class="line">    .should(<span class="string">'have.property'</span>, <span class="string">'HeroesComponent'</span>) <span class="comment">// yields window.HeroesComponent</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * yields window.HeroesComponent.heroes array</span></span><br><span class="line"><span class="comment"> * @example</span></span><br><span class="line"><span class="comment"> *  // starts with 10 heroes</span></span><br><span class="line"><span class="comment"> *  cy.visit('/heroes').should('have.length', 10)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getHeroes = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  getHeroesComponent().should(<span class="string">'have.property'</span>, <span class="string">'heroes'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sets the length of heroes array to 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> clearHeroes = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  getHeroes()</span><br><span class="line">    .then(<span class="function"><span class="params">heroes</span> =&gt;</span> &#123;</span><br><span class="line">      cy.log(<span class="string">`clearing <span class="subst">$&#123;heroes.length&#125;</span> heroes`</span>)</span><br><span class="line">      <span class="comment">// @ts-ignore</span></span><br><span class="line">      heroes.length = <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'deletes all heroes through app action'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  <span class="comment">// confirm the heroes have loaded - because the array has items</span></span><br><span class="line">  getHeroes().should(<span class="string">'have.length.gt'</span>, <span class="number">0</span>)</span><br><span class="line">  clearHeroes()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Great, we are settings <code>heroes.length</code> to zero, we need to re-render the application, right. So let&#39;s add <code>appRef.tick()</code> call. We will add utility function to access <code>window.appRef</code> and then to call <code>tick</code> method.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getAppRef = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  cy.window().should(<span class="string">'have.property'</span>, <span class="string">'appRef'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calls `appRef.tick()` to force UI refresh</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> tick = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  getAppRef()</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    .invoke(<span class="string">'tick'</span>)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'deletes all heroes through app action'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  <span class="comment">// confirm the heroes have loaded - because the array has items</span></span><br><span class="line">  getHeroes().should(<span class="string">'have.length.gt'</span>, <span class="number">0</span>)</span><br><span class="line">  clearHeroes()</span><br><span class="line">  tick()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes.</p><p><img src="/blog/images/angular-app-actions/clear-heroes.gif" alt="Deleting Heroes by app action"></p><p>There is nothing non-deterministic about this test. It will just work, assuming the initial list has more than zero items. It is also faster that going through the DOM, although in this case the difference is small in absolute terms - 1 second vs 2 seconds.</p><h3><span id="avoiding-race-conditions">Avoiding race conditions</span></h3><p>Let&#39;s extend the test. After clearing the list of heroes using app action, let&#39;s add a new hero, again using an app action and then confirm the new hero shows up in the UI. We are using the same helper functions plus a new one - <code>addHero</code></p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds a new hero.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> addHero = <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span></span><br><span class="line">  cy.window()</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    .its(<span class="string">'HeroesComponent'</span>)</span><br><span class="line">    .invoke(<span class="string">'add'</span>, name)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'shows new hero'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  clearHeroes()</span><br><span class="line">  tick()</span><br><span class="line"></span><br><span class="line">  addHero(<span class="string">'Gleb'</span>) <span class="comment">// the world needs a new hero</span></span><br><span class="line">  tick()</span><br><span class="line">  cy.contains(<span class="string">'.heroes li'</span>, <span class="string">'Gleb'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Ohhh, the test fails, guess I am no hero.</p><p><img src="/blog/images/angular-app-actions/cannot-find-new-hero.png" alt="The new hero does not appear"></p><p>Hmm, there is something weird going on. The list has been cleared, and the UI has refreshed after that. But where is the new hero? Even more suspicious is an observation that if while the <code>cy.contains</code> command is spinning trying to find the new text, I click &quot;Clear&quot; button, the new record suddenly appears, and the test passes.</p><p><img src="/blog/images/angular-app-actions/click-clear.gif" alt="Clicking clear suddenly brings the new record to UI"></p><p>Seems like our <code>tick()</code> action did NOT refresh the user interface after adding a new item, yet it did work when clearing the list of heroes. What is the difference between the two actions? Let&#39;s look at the code.</p><p>When we are clearing heroes, we are just setting <code>heroes.length = 0</code>. This is a synchronous action, thus when the test executes <code>tick()</code> the list has zero items. But the <code>addHero</code> app action calls the following code in the component:</p><figure class="highlight ts"><figcaption><span>heroes.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">  name = name.trim();</span><br><span class="line">  <span class="keyword">if</span> (!name) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">  <span class="keyword">this</span>.heroService.addHero(&#123; name &#125; <span class="keyword">as</span> Hero)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">hero</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.heroes.push(hero);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hmm, there is an Observable there - this is an asynchronous method, and if we call <code>tick()</code> from the test ... which runs in the same event loop as the application code, we refresh the UI <em>before</em> the asynchronous <code>subscribe</code> callback even runs! We have a race condition between the test calling <code>tick()</code> and calling application code.</p><p>We can try solving this problem in several ways, depending on how much we can modify our application code or slow down our tests.</p><ol><li>Add delays to app actions that involve asynchronous application methods. For example <code>addName</code> test function can just delay the next test command.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addHero = <span class="function">(<span class="params">name: string</span>) =&gt;</span></span><br><span class="line">  cy.window()</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    .its(<span class="string">'HeroesComponent'</span>)</span><br><span class="line">    .invoke(<span class="string">'add'</span>, name)</span><br><span class="line">    .wait(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>Ughh, waiting an entire second? Might be too slow for the interactive mode when Cypress is running locally, yet not enough for running tests on CI, leading to flaky tests.</p><ol start="2"><li>Wait until the heroes list increases its length by 1, which means the application code has finished running <code>this.heroes.push(hero)</code>. Here is how to save the initial length of array, then call app action, then use <code>should(cb)</code> to retry until the array gets an extra item.</li></ol><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds a new hero. Waits for number of heroes to increase by 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> addHero = <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// first, save the number of items in the list</span></span><br><span class="line">  <span class="comment">// save under alias "n", available in the test context "this.n"</span></span><br><span class="line">  getHeroes().its(<span class="string">'length'</span>).as(<span class="string">'n'</span>)</span><br><span class="line">  cy.window()</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    .its(<span class="string">'HeroesComponent'</span>)</span><br><span class="line">    .invoke(<span class="string">'add'</span>, name)</span><br><span class="line">  <span class="comment">// now retry reading "heroes" array until its length has increased by 1</span></span><br><span class="line">  getHeroes().should(<span class="function"><span class="keyword">function</span> (<span class="params">heroes</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// use "function () &#123;...&#125;" callback to make sure</span></span><br><span class="line">    <span class="comment">// "this" points at the test context</span></span><br><span class="line">    <span class="comment">// and we can access previously saved alias "n"</span></span><br><span class="line">    expect(heroes).to.have.length(<span class="keyword">this</span>.n + <span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'shows new hero'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  clearHeroes()</span><br><span class="line">  tick()</span><br><span class="line"></span><br><span class="line">  addHero(<span class="string">'Gleb'</span>) <span class="comment">// the world needs a new hero</span></span><br><span class="line">  tick()</span><br><span class="line">  cy.contains(<span class="string">'.heroes li'</span>, <span class="string">'Gleb'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test works, and it is as fast it can be.</p><p><img src="/blog/images/angular-app-actions/retry-length-plus-1.png" alt="Waiting until array increases its length by one"></p><ol start="3"><li>Refactor application code to signal when its data has finished updating. Simply, let&#39;s return a promise from component&#39;s method <code>addName</code>. Then the Cypress test can wait for this promise to resolve.</li></ol><figure class="highlight ts"><figcaption><span>heroes.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">add(name: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  name = name.trim();</span><br><span class="line">  <span class="keyword">if</span> (!name) &#123; <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(); &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.heroService.addHero(&#123; name &#125; <span class="keyword">as</span> Hero)</span><br><span class="line">    .subscribe(<span class="function"><span class="params">hero</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.heroes.push(hero);</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cypress automatically waits for promise returned from <code>cy.invoke(...)</code> to resolve, thus our test becomes really simple.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds a new hero. If the application method "add(name)" returns a promise,</span></span><br><span class="line"><span class="comment"> * the Cypress test command chain automatically waits for the promise to resolve.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> addHero = <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span></span><br><span class="line">  cy.window()</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    .its(<span class="string">'HeroesComponent'</span>)</span><br><span class="line">    .invoke(<span class="string">'add'</span>, name)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'shows new hero'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/heroes'</span>)</span><br><span class="line">  clearHeroes()</span><br><span class="line">  tick()</span><br><span class="line"></span><br><span class="line">  addHero(<span class="string">'Gleb'</span>) <span class="comment">// the world needs a new hero</span></span><br><span class="line">  tick()</span><br><span class="line">  cy.contains(<span class="string">'.heroes li'</span>, <span class="string">'Gleb'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/angular-app-actions/resolve.gif" alt="Cypress test waits for application&#39;s promise to resolve"></p><h2><span id="fixing-typescript">Fixing TypeScript</span></h2><p>Let&#39;s tell TypeScript that <code>window</code> object can have our new properties set. Create a new file <code>src/index.d.ts</code> and describe new properties that the application can add to the <code>window</code> object.</p><figure class="highlight ts"><figcaption><span>src/index.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HeroesComponent &#125; <span class="keyword">from</span> <span class="string">'./app/heroes/heroes.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ApplicationRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">declare</span> global &#123;</span><br><span class="line">  <span class="keyword">interface</span> Window &#123;</span><br><span class="line">    Cypress?: unknown</span><br><span class="line">    appRef?: ApplicationRef</span><br><span class="line">    HeroesComponent?: HeroesComponent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The file <code>src/index.d.ts</code> will be automatically loaded by TypeScript compiler while process <code>.ts</code> files in <code>src</code> folder, so the <code>window</code> object will be updated. Great, now we can remove all <code>// @ts-ignore</code> from the source code to be simply:</p><figure class="highlight ts"><figcaption><span>src/heroes.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> heroService: HeroService</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">    <span class="built_in">window</span>.HeroesComponent = <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now let&#39;s tell our spec files that these new properties are available on the <code>window</code>. Include the <code>src/index.d.ts</code> from the <code>cypress/tsconfig.json</code> file:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"../tsconfig.json"</span>,</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"*/*.ts"</span>,</span><br><span class="line">    <span class="string">"../node_modules/cypress"</span>,</span><br><span class="line">    <span class="string">"../src/index.d.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now when we write a test, the window will have optional application properties, like this:</p><p><img src="/blog/images/angular-app-actions/window-prop.png" alt="IntelliSense shows the new HeroComponent property exists"></p><p>Let&#39;s cast the property returned by the <code>getHeroes()</code> utility function so that our specs &quot;know&quot; what kind of object they are asserting.</p><figure class="highlight ts"><figcaption><span>spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ApplicationRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Hero &#125; <span class="keyword">from</span> <span class="string">"app/hero"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * yields window.HeroesComponent.heroes array</span></span><br><span class="line"><span class="comment"> * @example</span></span><br><span class="line"><span class="comment"> *  // starts with 10 heroes</span></span><br><span class="line"><span class="comment"> *  cy.visit('/heroes').should('have.length', 10)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getHeroes = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  getHeroesComponent().should(<span class="string">'have.property'</span>, <span class="string">'heroes'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">list</span> =&gt;</span> &lt;Hero[]&gt;&lt;unknown&gt;list) <span class="comment">// make the type work</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getAppRef = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  cy.window().should(<span class="string">'have.property'</span>, <span class="string">'appRef'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">x</span> =&gt;</span> &lt;ApplicationRef&gt;&lt;unknown&gt;x) <span class="comment">// make the type work</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calls `appRef.tick()` to force UI refresh</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> tick = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  getAppRef()</span><br><span class="line">    .invoke(<span class="string">'tick'</span>)</span><br></pre></td></tr></table></figure><p>Now we can remove all <code>// @ts-ignore</code> from the spec file. When we have types, even hovering over <code>getAppRef().invoke</code> method correctly shows only the methods available on the <code>ApplicationRef</code> type.</p><p><img src="/blog/images/angular-app-actions/appref.gif" alt="TypeScript provides intelligent code completion for `cy.invoke` over ApplicationRef"></p><p>Finally, let&#39;s add a custom command we have added <code>cy.getHeroesComponent()</code> to TypeScript. As shown in <a href="https://on.cypress.io/typescript" target="_blank" rel="noopener">Cypress TypeScript documentation</a>, to add new commands to the global <code>cy</code> object type we need to create <code>cypress/support/index.d.ts</code></p><figure class="highlight ts"><figcaption><span>cypress/support/index.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> Cypress &#123;</span><br><span class="line">  <span class="keyword">interface</span> Chainable &#123;</span><br><span class="line">    getHeroesComponent(): Chainable&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For some reason I could not import <code>HeroesComponent</code> and return <code>Chainable&lt;HeroesComponent&gt;</code> - TypeScript compiler would complain about generic interface. The beauty of TypeScript.</p><h2><span id="conclusions">Conclusions</span></h2><p>In this blog post I have shown how to expose an Angular component instance and access it from Cypress tests. Using the instance reference we can check the internal application&#39;s state, and also trigger data changes, bypassing user interface. I have also shown how to trigger user interface updates by getting a reference to the application during bootstrap. We have seen several solutions to race conditions between the app and the test runner. Finally I have shown how to fix TypeScript errors when we extend global <code>window</code> and <code>cy</code> objects with custom properties.</p><h3><span id="see-more">See more</span></h3><ul><li>Find the source code from this blog post at <a href="https://github.com/bahmutov/angular-heroes-app-actions" target="_blank" rel="noopener">bahmutov/angular-heroes-app-actions</a></li><li>Read <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/" target="_blank" rel="noopener">Stop using page objects and start using app actions</a></li><li>See more <a href="https://github.com/cypress-io/cypress-example-recipes" target="_blank" rel="noopener">Cypress recipes</a> and read my <a href="../tags/cypress/">blog posts about Cypress</a> and the official <a href="https://www.cypress.io/blog/" target="_blank" rel="noopener">Cypress blog</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;You can find the entire source code for this example at &lt;a href=&quot;https://github.com/bahmutov/angular-heroes-app-actions&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Visual diffing flow for your pretty CLI applications</title>
    <link href="https://glebbahmutov.com/blog/visual-diffing-for-CLI-apps/"/>
    <id>https://glebbahmutov.com/blog/visual-diffing-for-CLI-apps/</id>
    <published>2019-09-11T04:00:00.000Z</published>
    <updated>2019-09-11T03:17:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> you can find the example source code in repo <a href="https://github.com/bahmutov/percy-for-cli-example" target="_blank" rel="noopener">bahmutov/percy-for-cli-example</a>.</p><p>I have been a big fan of <a href="https://on.cypress.io/visual-testing" target="_blank" rel="noopener">visual testing</a> for web applications. Since reliable rendering of web pages and comparing images is complicated, I am a big fan of just using an existing 3rd party service like <a href="https://percy.io" target="_blank" rel="noopener">Percy.io</a> and <a href="https://applitools.com" target="_blank" rel="noopener">Applitools</a>. These services are fast, reliable, and just work.</p><p>I especially like the pull request review workflow. If a visual service detects a difference between the &quot;gold&quot; images it stores and the newly generated ones, it sets a failed commit check, and I know there are visual regressions. Anyone from the team can review the visual changes, comment, understand them. If the changes are really expected, the new images can be approved and become the new &quot;gold&quot; images to be compared against.</p><p>So that is all good and fun for web applications, but recently we have been refactoring CLI output from the <a href="http://github.com/cypress-io/cypress" target="_blank" rel="noopener">Cypress Test Runner</a> - and it is complicated. Our current output renders tables with multiple columns, uses terminal colors, text padding and alignment, hmm. We are using text snapshots, but they strip colors, and are relatively hard to judge or discuss as a team.</p><p>I want the same workflow for unit tests or CLI applications that output complex information to the terminal. That&#39;s why I have created this experiment:</p><ol><li>Capture CLI output from an app, for example from a test runner</li><li>Convert ANSI control characters that set foreground and background colors to matching HTML styles. There are many small NPM utilities that do this.</li><li>Send the generated HTML to Percy.io API<ul><li>Percy thinks this came from a real DOM snapshot</li><li>it renders the terminal HTML in a real browser</li><li>generates an image and compares it to the &quot;gold&quot;</li></ul></li></ol><p>Easy peasy.</p><p>Here is the &quot;standard&quot; Mocha run in the terminal.</p><p><img src="/blog/images/percy-cli/mocha-run.png" alt="Mocha test run"></p><p>Here is how we can spawn Mocha from a parent process, yet force colors</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// force child process to output ANSI colors</span></span><br><span class="line"><span class="comment">// if possible using FORCE_COLOR</span></span><br><span class="line"><span class="comment">// commonly used via https://github.com/chalk/supports-color</span></span><br><span class="line"><span class="comment">// const child = spawn('node', ['./colors'], &#123;</span></span><br><span class="line"><span class="keyword">const</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn</span><br><span class="line"><span class="keyword">const</span> child = spawn(</span><br><span class="line">  <span class="string">'node'</span>,</span><br><span class="line">  [<span class="string">'./node_modules/.bin/mocha'</span>, <span class="string">'./spec.js'</span>, <span class="string">'--reporter'</span>, <span class="string">'spec'</span>],</span><br><span class="line">  &#123;</span><br><span class="line">    env: &#123; ...process.env, <span class="attr">FORCE_COLOR</span>: <span class="string">'2'</span> &#125;,</span><br><span class="line">    cwd: process.cwd(),</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Here is how we convert ANSI characters to HTML using <a href="https://github.com/rburns/ansi-to-html" target="_blank" rel="noopener">ansi-to-html</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// assuming the browser page is white</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  newline: <span class="literal">true</span>,</span><br><span class="line">  bg: <span class="string">'#fff'</span>,</span><br><span class="line">  fg: <span class="string">'#111'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> convert = <span class="keyword">new</span> (<span class="built_in">require</span>(<span class="string">'ansi-to-html'</span>))(options)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> html = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlStream = <span class="function"><span class="keyword">function</span> <span class="title">htmlStream</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> stream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">    html += convert.toHtml(chunk)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">child.stdout.setEncoding(<span class="string">'utf8'</span>)</span><br><span class="line">child.on(<span class="string">'error'</span>, <span class="built_in">console</span>.error)</span><br><span class="line">child.stdout.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// send result to Percy</span></span><br><span class="line">&#125;)</span><br><span class="line">htmlStream(child.stdout)</span><br></pre></td></tr></table></figure><p>The final HTML can be wrapped in <code>&lt;html&gt;</code> with <code>utf8</code> meta flag and will look something like this</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    example<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#0A0"</span>&gt;</span> ✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#555"</span>&gt;</span> works A<span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#A00"</span>&gt;</span> (1002ms)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#0A0"</span>&gt;</span> ✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#555"</span>&gt;</span> works B<span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#A00"</span>&gt;</span> (1005ms)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#0A0"</span>&gt;</span> ✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#555"</span>&gt;</span> works C<span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#A00"</span>&gt;</span> (1002ms)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#0AA"</span>&gt;</span> - skips D<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">"color:#5F5"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#0A0"</span>&gt;</span> 3 passing<span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#555"</span>&gt;</span> (3s)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#0AA"</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#0AA"</span>&gt;</span> 1 pending<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>We can send this HTML to Percy API by running a local Percy agent, which runs by default on port 5338 and posting the generated HTML there. Here is how to run Percy and demo project.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"demo"</span>: <span class="string">"node ./index"</span>,</span><br><span class="line">    <span class="attr">"demo-percy"</span>: <span class="string">"npx percy exec -- npm run demo"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"ansi-to-html"</span>: <span class="string">"0.6.11"</span>,</span><br><span class="line">    <span class="attr">"axios"</span>: <span class="string">"0.19.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@percy/script"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sending is just a POST request</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// post HTML to the Percy agent</span></span><br><span class="line"><span class="comment">// follow "cy.request" code in</span></span><br><span class="line"><span class="comment">// https://github.com/percy/percy-cypress/blob/master/lib/index.ts</span></span><br><span class="line"><span class="comment">// and https://github.com/percy/percy-agent</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">'http://localhost:5338/percy/snapshot'</span></span><br><span class="line">axios</span><br><span class="line">  .post(url, &#123;</span><br><span class="line">    name: <span class="string">'my example name'</span>,</span><br><span class="line">    url: <span class="string">'http://localhost/example'</span>,</span><br><span class="line">    enableJavaScript: <span class="literal">false</span>,</span><br><span class="line">    domSnapshot: html,</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e)</span><br><span class="line">    <span class="keyword">throw</span> e</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Percy API requires a private project token, I will inject it during run-time using <a href="https://github.com/bahmutov/as-a" target="_blank" rel="noopener">as-a</a> utility.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> as<span class="_">-a</span> percy-for-cli-example npm run demo-percy</span></span><br></pre></td></tr></table></figure><p>The scripts runs and sends its terminal to visual diffing service as HTML string.</p><p><img src="/blog/images/percy-cli/demo-run.gif" alt="Demo run"></p><p>You can find Percy dashboard for this project at <a href="https://percy.io/bahmutov/percy-for-cli-example" target="_blank" rel="noopener">percy.io/bahmutov/percy-for-cli-example</a>. All images uploaded from <code>master</code> branch are auto-approved, while images uploaded from other branches are compared to the &quot;gold&quot; images. For example the last build has 1 image with detected visual difference.</p><p><img src="/blog/images/percy-cli/list-of-snapshots.png" alt="Percy project dashboard"></p><p>Someone from the team will have to go to the build and review the visual changes and either approve or reject them. In this case the difference is just in millisecond numbers - our snapshot needs to be sanitized before sending to Percy to avoid flagging trivial changes like this.</p><p><img src="/blog/images/percy-cli/percy-changes.gif" alt="Percy shows visual difference in the terminal output"></p><ul><li>Source <a href="https://github.com/bahmutov/percy-for-cli-example" target="_blank" rel="noopener">bahmutov/percy-for-cli-example</a></li><li>Percy project <a href="https://percy.io/bahmutov/percy-for-cli-example" target="_blank" rel="noopener">percy.io/bahmutov/percy-for-cli-example</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can find the example source code in repo &lt;a href=&quot;https://github.com/bahmutov/percy-for-cli-example&quot; target=&quot;_
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>How to configure Prettier and VSCode</title>
    <link href="https://glebbahmutov.com/blog/configure-prettier-in-vscode/"/>
    <id>https://glebbahmutov.com/blog/configure-prettier-in-vscode/</id>
    <published>2019-09-09T04:00:00.000Z</published>
    <updated>2020-02-08T17:22:11.244Z</updated>
    
    <content type="html"><![CDATA[<p>You can configure JavaScript code auto-formatting with Prettier to work per-project. This allows you to get a consistent formatting without thinking or arguing about it. This blog post shows how to configure Prettier to work from command line, from VSCode and from Git hooks.</p><p>You can find the sample project with different Prettier settings configured per-subfolder at <a href="https://github.com/bahmutov/prettier-config-example" target="_blank" rel="noopener">bahmutov/prettier-config-example</a>.</p><!-- toc --><ul><li><a href="#why-prettier">Why Prettier?</a></li><li><a href="#setup">Setup</a></li><li><a href="#settings">Settings</a></li><li><a href="#vscode-setup">VSCode setup</a></li><li><a href="#format-files-from-cli">Format files from CLI</a></li><li><a href="#format-staged-files-on-commit">Format staged files on commit</a></li><li><a href="#catch-mis-formatted-files-on-ci">Catch mis-formatted files on CI</a><ul><li><a href="#using-stop-build">Using stop-build</a></li><li><a href="#using-prettier">Using Prettier</a></li></ul></li><li><a href="#common-problems">Common problems</a><ul><li><a href="#nothing-happens-on-save">Nothing happens on save</a></li><li><a href="#code-formatting-is-wrong">Code formatting is wrong</a></li></ul></li><li><a href="#tips">Tips</a><ul><li><a href="#ignoring-files">Ignoring files</a></li><li><a href="#saving-without-formatting">Saving without formatting</a></li><li><a href="#temporarily-disable-formatting">Temporarily disable formatting</a></li><li><a href="#only-format-configured-projects">Only format configured projects</a></li><li><a href="#ignore-parts-of-files">Ignore parts of files</a></li></ul></li><li><a href="#use-eslint-with-prettier">Use Eslint with Prettier</a><ul><li><a href="#disable-style-rules-in-eslint">Disable style rules in ESLint</a></li><li><a href="#integrate-eslint-in-vscode">Integrate ESLint in VSCode</a></li><li><a href="#run-prettier-from-eslint">Run Prettier from ESLint</a></li><li><a href="#vscode-eslint-prettier-setup">VSCode + ESLint + Prettier setup</a></li><li><a href="#vscode-eslint-prettier-typescript-setup">VSCode + ESLint + Prettier + TypeScript setup</a></li><li><a href="#use-prettier-eslint-cypress">Use Prettier + ESLint + Cypress</a></li><li><a href="#format-other-languages-with-prettier">Format other languages with Prettier</a></li><li><a href="#format-json-files-with-prettier">Format JSON files with Prettier</a></li><li><a href="#use-custom-settings-overrides">Use custom settings overrides</a></li></ul></li><li><a href="#chrome-extension">Chrome extension</a></li><li><a href="#run-prettier-inside-github-action">Run Prettier inside GitHub Action</a></li></ul><!-- tocstop --><h2><span id="why-prettier">Why Prettier?</span></h2><p><a href="https://prettier.io/" target="_blank" rel="noopener">Prettier</a> reformats your JavaScript code consistently and (arguably) in way that is easy to read and understand. It takes whatever copy/pasted code snippets you put into your file and makes it look the same as the rest of the code. By using Prettier your team skips ALL disagreements about spacing, variable declarations, semi-colons, trailing commas, etc. The code just magically gets to the format you pick.</p><p>You can use Prettier from command line, or from your code editor whenever you paste or save a file. I prefer to use two solutions described in this blog post:</p><ul><li>format the file from VSCode every time I save it</li><li>format the changed files on Git commit before committing them</li></ul><p>Let me show you how to do both.</p><h2><span id="setup">Setup</span></h2><p>When setting up Prettier it is important to configure it per-project. Not every project uses the same code style, thus it is important to respect the style of whatever project you are currently working in. The demo repo <a href="https://github.com/bahmutov/prettier-config-example" target="_blank" rel="noopener">bahmutov/prettier-config-example</a> has two subfolders, each with its distinct code style, enforced by Prettier. In reality, each of your repos will have its style; I am using subfolders in order to keep the example simple.</p><p>I assume you are using NPM and have <code>package.json</code> file inside the repository. Install Prettier</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev --save-exact prettier</span><br></pre></td></tr></table></figure><p>At the root of the project create the Prettier configuration file. In my example I have two subfolders, and there is a configuration file in each subfolder:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prettier-config-example/</span><br><span class="line">  projectA/</span><br><span class="line">    .prettierrc.json</span><br><span class="line">  projectB/</span><br><span class="line">    .prettierrc.json</span><br></pre></td></tr></table></figure><p>I like using JSON configuration format so my code editor helps me. In fact, VSCode understands the Prettier configuration file format via the built-in <a href="../json-schema-for-the-win/">json schema</a>. So when I edit <code>projectA/.prettierrc.json</code> file, I get intelligent tooltips.</p><p><img src="/blog/images/prettier/prettier-intellisense.gif" alt="Picking trailing comma setting"></p><h2><span id="settings">Settings</span></h2><p>Prettier tries to enforce the same code style without 100s of options, thus there are just a few settings you can change. Here are settings I am using in the first project to make it look &quot;traditional&quot; ES5</p><figure class="highlight json"><figcaption><span>projectA/.prettierrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"trailingComma"</span>:<span class="string">"none"</span>,</span><br><span class="line">  <span class="attr">"tabWidth"</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">"semi"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"singleQuote"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The second project uses more modern style without semi-colons and with trailing commas.</p><figure class="highlight json"><figcaption><span>projectB/.prettierrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"trailingComma"</span>: <span class="string">"all"</span>,</span><br><span class="line">  <span class="attr">"tabWidth"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"semi"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"singleQuote"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="vscode-setup">VSCode setup</span></h2><p>To use the Prettier we have just installed from VSCode we need to install the <a href="https://github.com/prettier/prettier-vscode" target="_blank" rel="noopener">Prettier VSCode extension</a>:</p><ol><li>Launch VS Code Quick Open (Ctrl+P)</li><li>Run the following command</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install esbenp.prettier-vscode</span><br></pre></td></tr></table></figure><p>Because you might have global settings related to code formatting, I prefer having in each repository a file with local workspace VSCode settings. I commit this file <code>.vscode/settings.json</code> to source control to make sure everyone uses the same extension to format the code.</p><figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now every time we save a JavaScript file, it will be formatted using Prettier automatically. Here is me formatting <code>projectA/index.js</code> file by saving it.</p><p><img src="/blog/images/prettier/projectA.gif" alt="Prettier formats projectA/index.js"></p><p>Notice the double quotes, semi-colons, etc - Prettier has applied the settings from <code>projectA/.prettierrc.json</code>. It also split long object across multiple lines to make it easier to read.</p><p>The same JavaScript code in <code>projectB/index.js</code> gets formatted by Prettier using different local settings and ends up looking different.</p><p><img src="/blog/images/prettier/projectB.gif" alt="Prettier formats projectB/index.js"></p><p>Single quotes, no semi-colons, trailing commas.</p><p><strong>Tip:</strong> I love formatting code on &quot;Save&quot;, but I hate formatting code on &quot;Paste&quot; - because it always adds extra line breaks. So I highly recommend the following VSCode settings</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnPaste"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="format-files-from-cli">Format files from CLI</span></h2><p>Formatting every file as you save it is nice, but we can also format ALL source files at once using Prettier CLI. In the <code>package.json</code> add a script to format files matching the mask and to write them back to disk.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"prettier-config-example"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"format"</span>: <span class="string">"prettier --write 'projectA/*.js' 'projectB/*.js'"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"prettier"</span>: <span class="string">"1.18.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run this NPM script and the files will be formatted to follow the Prettier style.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm run format</span><br><span class="line"></span><br><span class="line">&gt; prettier-config-example@1.0.0 format /Users/gleb/git/prettier-config-example</span><br><span class="line">&gt; prettier --write &apos;projectA/*.js&apos; &apos;projectB/*.js&apos;</span><br><span class="line"></span><br><span class="line">projectA/index.js 30ms</span><br><span class="line">projectB/index.js 10ms</span><br></pre></td></tr></table></figure><p>If you want to format files with several extensions, list them using curly braces and commas. If you need to find all files in all subfolders, use <code>**</code> syntax. For example, to format all <code>.ts</code> and <code>.tsx</code> files in the <code>src</code> folder use:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prettier --write 'src/**/*.&#123;ts,tsx&#125;'</span><br></pre></td></tr></table></figure><h2><span id="format-staged-files-on-commit">Format staged files on commit</span></h2><p>Whenever we work with files locally, we might accidentally commit them without proper styling. That&#39;s where Git hooks and formatting staged files comes in handy. To consistently format all files before committing and then commit changes, I recommend using <a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> + <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a> combination of tools.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D husky lint-staged</span></span><br><span class="line">+ husky@3.0.5</span><br><span class="line">+ lint-staged@9.2.5</span><br></pre></td></tr></table></figure><p>Now configure pre-commit hook to run Prettier against staged JavaScript files. In the <code>package.json</code> set the following</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"husky"</span>: <span class="string">"3.0.5"</span>,</span><br><span class="line">    <span class="attr">"lint-staged"</span>: <span class="string">"9.2.5"</span>,</span><br><span class="line">    <span class="attr">"prettier"</span>: <span class="string">"1.18.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"husky"</span>: &#123;</span><br><span class="line">    <span class="attr">"hooks"</span>: &#123;</span><br><span class="line">      <span class="attr">"pre-commit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"lint-staged"</span>: &#123;</span><br><span class="line">    <span class="attr">"*.js"</span>: [<span class="string">"prettier --write"</span>, <span class="string">"git add"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>See <a href="https://github.com/okonet/lint-staged#reformatting-the-code" target="_blank" rel="noopener">lint-staged code formatting documentation</a>.</p><p>If you try to commit changed JavaScript files, they will automatically be formatted and re-staged, ensuring only pretty JavaScript code is committed. In the Git commit shortcut output below, the &quot;Running tasks...&quot; messages comes from the <code>lint-staged</code> tool.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ g done &quot;add husky and lint-staged&quot;</span><br><span class="line">husky &gt; pre-commit (node v12.4.0)</span><br><span class="line">  ↓ Stashing changes... [skipped]</span><br><span class="line">    → No partially staged files found...</span><br><span class="line">  ✔ Running tasks...</span><br><span class="line">[master 583b92a] add husky and lint-staged</span><br><span class="line"> 2 files changed, 1513 insertions(+)</span><br></pre></td></tr></table></figure><p>Of course, you can skip the Git pre-commit hook by committing with <code>-n</code> flag.</p><h2><span id="catch-mis-formatted-files-on-ci">Catch mis-formatted files on CI</span></h2><h3><span id="using-stop-build">Using stop-build</span></h3><p>You can really enforce the formatting before pushing code to the central repository by running Prettier on CI and then detecting any changed files. Just run <a href="https://github.com/bahmutov/stop-build" target="_blank" rel="noopener">stop-build</a> after running Prettier.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">format</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npx</span> <span class="string">run</span> <span class="string">stop-build</span></span><br></pre></td></tr></table></figure><p>If any of the source files were reformatted by Prettier, the <code>stop-only</code> will detect changed source files using Git information and will exit with an error. It will list the changed files, something like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">⚠️ there are 2 changed files</span><br><span class="line">M projectA/index.js</span><br><span class="line">M projectB/index.js</span><br></pre></td></tr></table></figure><h3><span id="using-prettier">Using Prettier</span></h3><p>Prettier has built-in command <a href="https://prettier.io/docs/en/cli.html#check" target="_blank" rel="noopener"><code>--check</code></a> that validates code files against formatting. Using it from a script in <code>package.json</code> file:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"check"</span>: <span class="string">"prettier --check 'projectA/*.js' 'projectB/*.js'"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then on CI we can call the script right after <code>npm install</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npx</span> <span class="string">run</span> <span class="string">check</span></span><br></pre></td></tr></table></figure><p>Let&#39;s say one of the files has not been formatted.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm run check</span><br><span class="line"></span><br><span class="line">&gt; prettier-config-example@1.0.0 check /git/prettier-config-example</span><br><span class="line">&gt; prettier --check &apos;projectA/*.js&apos; &apos;projectB/*.js&apos;</span><br><span class="line"></span><br><span class="line">Checking formatting...</span><br><span class="line">projectB/index.js</span><br><span class="line">Code style issues found in the above file(s). Forgot to run Prettier?</span><br></pre></td></tr></table></figure><h2><span id="common-problems">Common problems</span></h2><h3><span id="nothing-happens-on-save">Nothing happens on save</span></h3><p>You are saving a file in VSCode ... and the code does not change. This could be due to three issues:</p><ol><li>Make sure local workspace settings have auto-format on save enabled. Open <code>.vscode/settings.json</code> file and confirm:<ul><li>VSCode Prettier extension is configured as the default formatter.</li><li>Formatting on save is enabled</li></ul></li></ol><figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Prettier extension might be disabled by VSCode. Make sure the word &quot;Prettier&quot; appears on the Status Bar and has check mark symbol next to it. To check:<ul><li>Right click on the Status Bar. Make sure the &quot;Prettier&quot; extension appears there is displayed.</li></ul></li></ol><p><img src="/blog/images/prettier/show-extension.png" alt="Show Prettier extension status"></p><ol start="3"><li>Make sure there is a checkmark next to the &quot;Prettier&quot; in the Status Bar. Sometimes after enabling the extension, it is loaded, but not enabled.</li></ol><p><img src="/blog/images/prettier/prettier-not-enabled.png" alt="Prettier extension is disabled for some reason"></p><p>One thing I have noticed that sometimes saving a file enables Prettier if the <code>.vscode/settings.json</code> have the extension enabled for this workspace. For example in this animation I am saving the file with double quotes around a string, and magically the Prettier extension gets the check mark and does its job. Don&#39;t ask.</p><p><img src="/blog/images/prettier/save-enables-prettier.gif" alt="Saving file enables Prettier and formats the code"></p><p>If you click on the &quot;Prettier&quot; extension word in the status bar, it should open the Prettier output tab. It shows what Prettier extension executes, and often shows the problem. For example, the screenshot below shows that Prettier did not run because the project does not have Prettier configuration file like <code>.prettierrc</code>.</p><p><img src="/blog/images/prettier/prettier-tab.png" alt="Prettier extension tab"></p><p>If everything else fails, quit VSCode and start it again.</p><h3><span id="code-formatting-is-wrong">Code formatting is wrong</span></h3><p>Here is a little animation that shows a file being saved with Prettier setting &quot;trailingComma: true&quot;, yet the comma gets deleted somehow.</p><p><img src="/blog/images/prettier/comma-deleted.gif" alt="Saving file removes trailing comma"></p><p>Check if there are OTHER code formatting extensions installed and disable them for this workspace. For some reason, VSCode can use globally installed extension overwriting local setting. Don&#39;t ask. In my case, I had &quot;Prettier-Standard&quot; extension enabled globally. After disabling the &quot;Prettier-Standard&quot; for the current workspace, Prettier extension started working as expected.</p><p><img src="/blog/images/prettier/disable.png" alt="Disabling Prettier-Standard extension"></p><p>Why can&#39;t VSCode save the list of disabled extensions in <code>.vscode/settings.json</code>?</p><h2><span id="tips">Tips</span></h2><h3><span id="ignoring-files">Ignoring files</span></h3><p>Sometimes you have files that should not be formatted: auto-generated source files, saved snapshots, etc. You can list file masks to ignore in file <code>.prettierignore</code>. For example, to ignore all JavaScript files in <code>snapshots</code> folders use</p><figure class="highlight plain"><figcaption><span>.prettierignore</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># do not run Prettier against JavaScript files</span><br><span class="line"># in &quot;snapshots/&quot; folders</span><br><span class="line">**/snapshots/*.js</span><br></pre></td></tr></table></figure><h3><span id="saving-without-formatting">Saving without formatting</span></h3><p>If you ever work in someone else&#39;s project, please respect their formatting. In order to avoid reformatting the entire file when you save it from VSCode, save it without formatting. Run &quot;Command + Shift + P&quot; to open the Command Palette and type &quot;save without&quot; until you see &quot;File: Save without Formatting&quot; command - use that.</p><p><img src="/blog/images/prettier/save-without-formatting.png" alt="Save without formatting"></p><h3><span id="temporarily-disable-formatting">Temporarily disable formatting</span></h3><p>There is also an extension that temporarily disables format on save feature called <a href="https://marketplace.visualstudio.com/items?itemName=tombonnike.vscode-status-bar-format-toggle" target="_blank" rel="noopener">Formatting Toggle</a>. Install it in your VSCode and whenever you want to temporarily disable Prettier on save, click on the &quot;Formatting&quot; toggle in the status bar.</p><p><img src="/blog/images/prettier/format-toggle.png" alt="Save without formatting"></p><h3><span id="only-format-configured-projects">Only format configured projects</span></h3><p>In the VSCode global settings, set this option to only allow running Prettier in the folders with Prettier config file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Prettier: Require Config</span><br><span class="line">✅ Require a prettier configuration file to format</span><br></pre></td></tr></table></figure><p><img src="/blog/images/prettier/require-prettier-config.png" alt="User global setting to require configuration file"></p><p>I definitely recommend setting this global option to avoid accidentally changing how the code looks in the projects that do not want to use your or any Prettier settings.</p><h3><span id="ignore-parts-of-files">Ignore parts of files</span></h3><p>I love using <a href="https://prettier.io/docs/en/ignore.html" target="_blank" rel="noopener">range ignore</a> to disable formatting parts of file. For example, to stop Prettier from reformatting Markdown tables use:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- prettier-ignore-start --&gt;</span><br><span class="line">name | job</span><br><span class="line">--- | ---</span><br><span class="line">Joe | student</span><br><span class="line">Mary | therapist</span><br><span class="line">&lt;!-- prettier-ignore-end --&gt;</span><br></pre></td></tr></table></figure><p>In code, you can tell Prettier to ignore the next AST node by adding <code>// prettier-ignore</code> comment. For example, in the next test we want to show the array input as a Tic-Tac-Toe board</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'returns O for second row of O'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// preserve our Tic-Tac-Toe board formatting</span></span><br><span class="line">  <span class="comment">// prettier-ignore</span></span><br><span class="line">  <span class="keyword">const</span> squares = [</span><br><span class="line">    <span class="string">'X'</span>, <span class="string">'X'</span>, <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'O'</span>, <span class="string">'O'</span>, <span class="string">'O'</span>,</span><br><span class="line">    <span class="literal">null</span>, <span class="literal">null</span>, <span class="string">'X'</span></span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">const</span> winner = calculateWinner(squares)</span><br><span class="line">  expect(winner).to.equal(<span class="string">'O'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="use-eslint-with-prettier">Use Eslint with Prettier</span></h2><p>Prettier reformats JavaScript code to follow certain style, it does not check the meaning of the code. For example, Prettier happily reformats the following wrong code.</p><p><img src="/blog/images/prettier/const.gif" alt="Prettier makes this wrong code look pretty"></p><p>Static linters, like <a href="https://eslint.org/" target="_blank" rel="noopener">ESLint</a> can catch the assignment to a constant variable, so we need both:</p><ul><li>Prettier will reformat the code to be consistent in style</li><li>ESLint will analyze the meaning of code and catch potential problems</li></ul><h3><span id="disable-style-rules-in-eslint">Disable style rules in ESLint</span></h3><p>ESLint runs a long list of rules against the code, and some of these rules are stylistic, and can conflict with Prettier&#39;s style. Thus we need to configure ESLint to skip those rules. This configuration is in module <a href="https://prettier.io/docs/en/integrating-with-linters.html#eslint" target="_blank" rel="noopener">eslint-config-prettier</a>. Install it</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D eslint eslint-config-prettier</span></span><br></pre></td></tr></table></figure><p>and can be added to your project <code>.eslintrc.json</code> file. ESLint will not run without a valid configuration file.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"es6"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"eslint:recommended"</span>, <span class="string">"prettier"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now when you run ESLint against this file</p><figure class="highlight js"><figcaption><span>projectC/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'Joe'</span>; name = <span class="string">'Mary'</span></span><br></pre></td></tr></table></figure><p>Then ESLint will catch the <code>const</code> assignment error; it will also catch that the variable <code>name</code> is never used after assignment.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx eslint projectC/index.js</span></span><br><span class="line"></span><br><span class="line">/prettier-config-example/projectC/index.js</span><br><span class="line">  1:7   error  'name' is assigned a value but never used  no-unused-vars</span><br><span class="line">  1:21  error  'name' is constant                         no-const-assign</span><br><span class="line"></span><br><span class="line">✖ 2 problems (2 errors, 0 warnings)</span><br></pre></td></tr></table></figure><h3><span id="integrate-eslint-in-vscode">Integrate ESLint in VSCode</span></h3><p>Since we are using VSCode, it makes sense to install <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">ESLint VSCode extension</a> called <code>dbaeumer.vscode-eslint</code></p><p>Open Command Pallette with Command + P</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install dbaeumer.vscode-eslint</span><br></pre></td></tr></table></figure><p>Enable this extension in VSCode workspace settings</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;editor.defaultFormatter&quot;: &quot;dbaeumer.vscode-eslint&quot;,</span><br><span class="line">  &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">  &quot;eslint.enable&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript files should now show ESLint errors right inside VSCode editor.</p><p><img src="/blog/images/prettier/eslint-errors.png" alt="ESLint errors"></p><p>You can see these errors for yourself by opening <code>projectC/index.js</code> in VSCode from the <a href="https://github.com/bahmutov/prettier-config-example" target="_blank" rel="noopener">example repo</a>.</p><h3><span id="run-prettier-from-eslint">Run Prettier from ESLint</span></h3><p>Since ESLint can detect and fix many of the errors it detects automatically, let&#39;s tell ESLint to run Prettier too. Here is the <a href="https://prettier.io/docs/en/integrating-with-linters.html#recommended-configuration" target="_blank" rel="noopener">recommended setup</a></p><p>Install ESLint Prettier config and plugin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D eslint-config-prettier eslint-plugin-prettier</span></span><br></pre></td></tr></table></figure><p>Point ESLint at the recommended settings which include Prettier styles</p><figure class="highlight json"><figcaption><span>projectD/.eslintrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"node"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"es6"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"eslint:recommended"</span>, <span class="string">"plugin:prettier/recommended"</span>],</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"no-console"</span>: <span class="string">"off"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice in the screenshot below how ESLint warnings in VSCode editor include style errors from Prettier.</p><p><img src="/blog/images/prettier/eslint-prettier.png" alt="ESLint shows Prettier errors"></p><p>If we run ESLint with <code>--fix</code> flag, it will use Prettier to auto format code, solving both stylistic and semantic problems.</p><p><img src="/blog/images/prettier/eslint-fix.gif" alt="ESLint with Prettier fixes the code formatting"></p><p>If you decide to use ESLint with Prettier rules and have configured <code>husky</code> to run <code>lint-staged</code>, point it at <code>eslint --fix</code> instead of <code>prettier --write</code>.</p><h3><span id="vscode-eslint-prettier-setup">VSCode + ESLint + Prettier setup</span></h3><p>Let&#39;s configure VSCode to use ESLint to auto-fix found issues, including Prettier. The workspace settings use <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener"><code>dbaeumer.vscode-eslint</code></a>.</p><p><strong>plugin v1 version (old)</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"dbaeumer.vscode-eslint"</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.enable"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.alwaysShowStatus"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.autoFixOnSave"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>plugin v2 version (current)</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"dbaeumer.vscode-eslint"</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.enable"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.alwaysShowStatus"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"editor.codeActionsOnSave"</span>: &#123;</span><br><span class="line">    <span class="attr">"source.fixAll.eslint"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The animation shows how saving the file fixes both style and lint problems.</p><p><img src="/blog/images/prettier/use-eslint-to-format.gif" alt="Using ESLint to auto-format and auto-fix issues on save"></p><h3><span id="vscode-eslint-prettier-typescript-setup">VSCode + ESLint + Prettier + TypeScript setup</span></h3><p>ESLint can lint TypeScript files through <a href="https://github.com/typescript-eslint/typescript-eslint" target="_blank" rel="noopener">typescript-eslint</a>, and <a href="https://github.com/prettier/prettier/issues/13" target="_blank" rel="noopener">Prettier can format TypeScript code</a>. Let&#39;s set it up.</p><p>First, if you have previous installed <a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint" target="_blank" rel="noopener">TSLint extension <code>vscode-tslint</code></a> for VSCode, uninstall it - let ESLint do everything.</p><p>Second, install a new parser and plugin modules</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D @typescript-eslint/parser @typescript-eslint/eslint-plugin</span></span><br><span class="line">+ @typescript-eslint/parser@2.2.0</span><br><span class="line">+ @typescript-eslint/eslint-plugin@2.2.0</span><br><span class="line">updated 2 packages and audited 576 packages in 2.42s</span><br><span class="line">found 0 vulnerabilities</span><br></pre></td></tr></table></figure><p>Then set the VSCode workspace settings to lint TypeScript files</p><figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"dbaeumer.vscode-eslint"</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.enable"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.alwaysShowStatus"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.validate"</span>: [</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"typescript"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Set the ESLint options. Parsing files will be done using <a href="https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser" target="_blank" rel="noopener">@typescript-eslint/parser</a>, and we need <a href="https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin" target="_blank" rel="noopener">@typescript-eslint</a> plugin.</p><figure class="highlight json"><figcaption><span>.eslintrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"parser"</span>: <span class="string">"@typescript-eslint/parser"</span>,</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"@typescript-eslint"</span>],</span><br><span class="line">  <span class="attr">"extends"</span>: [</span><br><span class="line">    <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:@typescript-eslint/eslint-recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:@typescript-eslint/recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:prettier/recommended"</span>,</span><br><span class="line">    <span class="string">"prettier/@typescript-eslint"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"no-var"</span>: <span class="string">"error"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And now you should see ESLint + Prettier errors and warnings in VSCode</p><p><img src="/blog/images/prettier/ts-eslint.png" alt="ESLint error - no vars allowed"></p><p><img src="/blog/images/prettier/ts-prettier.png" alt="Style error - no semi-colons allowed"></p><p><strong>Note:</strong> there is a bug in VSCode + ESLint extension where Prettier is not found. If you open Prettier console you can see the error, there is an <a href="https://github.com/microsoft/vscode-eslint/issues/696" target="_blank" rel="noopener">open issue</a></p><p><img src="/blog/images/prettier/prettier-error.png" alt="Prettier cannot fix the style automatically"></p><p>So we see the lint and style errors, yet cannot reformat the code automatically on save. To work around this issue, use NPM script command.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"fix-ts"</span>: <span class="string">"eslint --fix 'project-with-typescript/*.ts'"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run this command and it should reformat the TS files and fix most ESLint issues.</p><p><img src="/blog/images/prettier/fix-ts.gif" alt="Fixing TypeScript files"></p><h3><span id="use-prettier-eslint-cypress">Use Prettier + ESLint + Cypress</span></h3><p>One final touch. If you write <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a> end-to-end tests, there is an official <a href="https://github.com/cypress-io/eslint-plugin-cypress" target="_blank" rel="noopener">cypress-io/eslint-plugin-cypress</a> plugin that can catch some common test mistakes. You can find an example &quot;test&quot; in <code>project-with-Cypress/index.js</code> file.</p><p>First, install the plugin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D eslint-plugin-cypress</span></span><br></pre></td></tr></table></figure><p>Then extend ESLint settings</p><figure class="highlight json"><figcaption><span>project-with-Cypress/.eslintrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"cypress/globals"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"extends"</span>: [</span><br><span class="line">    <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:prettier/recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:cypress/recommended"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"cypress"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s say your test tries to get back an element using <a href="https://on.cypress.io/get" target="_blank" rel="noopener"><code>cy.get</code></a> command.</p><figure class="highlight js"><figcaption><span>project-with-Cypress/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typical Cypress test</span></span><br><span class="line">it(<span class="string">'loads todos'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// this is wrong - Cypress commands are asynchronous</span></span><br><span class="line">  <span class="comment">// you cannot get element back from cy.get</span></span><br><span class="line">  <span class="comment">// see https://on.cypress.io/get</span></span><br><span class="line">  <span class="keyword">const</span> myApp = cy.get(<span class="string">'#my-app'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This WON&#39;T work - <code>cy.get</code> does not return an element, like a Promise, the found element will be passed down the command chain. Notice how ESLint shows an error if you try to assign the value of the <code>cy.get</code> command.</p><p><img src="/blog/images/prettier/cypress-error.png" alt="ESLint shows Cypress error"></p><h3><span id="format-other-languages-with-prettier">Format other languages with Prettier</span></h3><p>Prettier can format many languages: JavaScript, JSON, Markdown, HTML, CSS, etc. Here is formatting CSS for example.</p><p><img src="/blog/images/prettier/format-css.gif" alt="Format CSS file using Prettier"></p><h3><span id="format-json-files-with-prettier">Format JSON files with Prettier</span></h3><p>You can configure Prettier and its VSCode extension to format your JSON files. Since there is already a default JSON formatter built into VSCode, you need to tell VSCode to specifically use <code>esbenp.prettier-vscode</code> to format JSON files. Here is a sample project settings file.</p><figure class="highlight json"><figcaption><span>.vscode/settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span>,</span><br><span class="line">  <span class="attr">"[json]"</span>: &#123;</span><br><span class="line">    <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"json.format.enable"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/blog/images/prettier/format-json.gif" alt="Format JSON files using Prettier"></p><h3><span id="use-custom-settings-overrides">Use custom settings overrides</span></h3><p>Here is a nice feature - you can set custom Prettier settings for some files. For example, we can use 2 spaces to indent by default, but 4 spaces to indent code blocks inside Markdown files, and 6 spaces to indent JSON files. Just because.</p><figure class="highlight json"><figcaption><span>.prettierrc.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"trailingComma"</span>: <span class="string">"all"</span>,</span><br><span class="line">  <span class="attr">"tabWidth"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"semi"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"overrides"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"files"</span>: <span class="string">"*.md"</span>,</span><br><span class="line">      <span class="attr">"options"</span>: &#123;</span><br><span class="line">        <span class="attr">"tabWidth"</span>: <span class="number">4</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"files"</span>: <span class="string">"*.json"</span>,</span><br><span class="line">      <span class="attr">"options"</span>: &#123;</span><br><span class="line">        <span class="attr">"tabWidth"</span>: <span class="number">6</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s save a JSON file.</p><p><img src="/blog/images/prettier/format-json-6.gif" alt="Format JSON files using Prettier with overridden settings"></p><p>And here is saving a Markdown with a code block - which gets automatically formatted using Prettier with 4 spaces per tab.</p><p><img src="/blog/images/prettier/format-md.gif" alt="Format code blocks inside Markdown files"></p><h2><span id="chrome-extension">Chrome extension</span></h2><p>There is now Chrome <a href="https://github.com/prettier/prettier-chrome-extension" target="_blank" rel="noopener">Prettier extension</a> that can format code blocks in text areas. Seems for now it is limited to StackOverflow and GitHub.</p><h2><span id="run-prettier-inside-github-action">Run Prettier inside GitHub Action</span></h2><p>GitHub Actions are now generally available - and they can do lots of interesting things, including running Prettier on every push and if there are any changes, committing the code and pushing it to the repo. In essence, they are doing the hard work for you! Read <a href="../trying-github-actions/">Trying GitHub Actions</a> blog post for full details, here is the relevant <a href="https://github.com/bahmutov/gh-action-with-prettier/blob/master/.github/workflows/ci.yml" target="_blank" rel="noopener">CI YML file</a> from <a href="https://github.com/bahmutov/gh-action-with-prettier" target="_blank" rel="noopener">bahmutov/gh-action-with-prettier</a> repo.</p><figure class="highlight yml"><figcaption><span>.github/workflows/ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Prettier</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Prettier</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">bahmutov/npm-install@v1</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">format</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">git</span> <span class="string">status</span></span><br><span class="line">      <span class="comment"># commit any changed files</span></span><br><span class="line">      <span class="comment"># https://github.com/mikeal/publish-to-github-action</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">mikeal/publish-to-github-action@master</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line">          <span class="comment"># github token is automatically injected by GH Action</span></span><br><span class="line"><span class="attr">          GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Beautiful, and on every push, if there are any format changes, the code gets updated and pushed, which you can see from the list of commits.</p><p><img src="/blog/images/prettier/prettier-in-gh-action.png" alt="Prettier inside GitHub Action fixing code"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;You can configure JavaScript code auto-formatting with Prettier to work per-project. This allows you to get a consistent formatting witho
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="javascript" scheme="https://glebbahmutov.com/blog/tags/javascript/"/>
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Cypress using child window</title>
    <link href="https://glebbahmutov.com/blog/cypress-using-child-window/"/>
    <id>https://glebbahmutov.com/blog/cypress-using-child-window/</id>
    <published>2019-09-03T04:00:00.000Z</published>
    <updated>2019-09-04T02:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Normally, Cypress test runner loads your site inside an iframe. This allows the &quot;top&quot; parent window, controlled by Cypress a direct access to your site. Nice, but many sites work hard to avoid being iframed. Cypress already strips <code>X-frame</code> protection headers, and &quot;fixes&quot; most common <a href="https://github.com/cypress-io/cypress/issues/886" target="_blank" rel="noopener">frame-busting JavaScript code</a> like <code>if (top !== self)</code>.</p><p>Imagine the website using the following frame-busting code, and it somehow slipping Cypress JS regex</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (top !== self) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'top !== self !!! frame busted!'</span>)</span></span><br><span class="line"><span class="javascript">    location = <span class="string">'http://www.cypress.io'</span></span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'all is good, top === self'</span>)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The image below shows the frame-busting in action - the site has reference to <code>self</code> window that is different from the <code>top</code> window. Also, the menu shows the different JavaScript contexts - one per window object, which is often a source of confusion.</p><p><img src="/blog/images/child-window/frame-busted.png" alt="Different contexts and frame busting"></p><p>Nothing is foolproof, especially my brain, and having a child iframe for the application under test creates its own confusion. So many times I have opened DevTools, inspecting <code>window</code> or some global object, and wondering - where is the property I have just set? &quot;Ohh, yeah, it was in the APP context, how could I forget!&quot;</p><p>What can we do instead of iframing the application under test website? Cypress needs direct access to the <code>window</code> that is going to load the site. Child iframe window is one possibility, another one is a window opened with <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/open" target="_blank" rel="noopener">window.open</a> call. As long as the <code>document.domain</code> values match between the Cypress window and the loaded site, the two windows will be able to communicate. Cypress proxy takes care of setting the <code>document.domain=&#39;localhost&#39;</code> for you, you can see that script injected into the <code>HEAD</code> element if you inspect the child iframes.</p><p><img src="/blog/images/child-window/document-domain.png" alt="Document domain set to localhost"></p><p>So, let&#39;s replace <a href="https://on.cypress.io/visit" target="_blank" rel="noopener"><code>cy.visit</code></a> with <code>window.open</code>. Here is some code I have lifted from the example repo <a href="https://github.com/bahmutov/cypress-open-child-window" target="_blank" rel="noopener">bahmutov/cypress-open-child-window</a>.</p><p><strong>Note:</strong> I am using Cypress v3.4.1 and Chrome v76 to run this code.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(<span class="string">'openWindow'</span>, (url, features) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> w = Cypress.config(<span class="string">'viewportWidth'</span>)</span><br><span class="line">  <span class="keyword">const</span> h = Cypress.config(<span class="string">'viewportHeight'</span>)</span><br><span class="line">  <span class="keyword">if</span> (!features) &#123;</span><br><span class="line">    features = <span class="string">`width=<span class="subst">$&#123;w&#125;</span>, height=<span class="subst">$&#123;h&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'openWindow %s "%s"'</span>, url, features)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.top.aut) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'window exists already'</span>)</span><br><span class="line">      <span class="built_in">window</span>.top.aut.close()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// https://developer.mozilla.org/en-US/docs/Web/API/Window/open</span></span><br><span class="line">    <span class="built_in">window</span>.top.aut = <span class="built_in">window</span>.top.open(url, <span class="string">'aut'</span>, features)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// letting page enough time to load and set "document.domain = localhost"</span></span><br><span class="line">    <span class="comment">// so we can access it</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      cy.state(<span class="string">'document'</span>, <span class="built_in">window</span>.top.aut.document)</span><br><span class="line">      cy.state(<span class="string">'window'</span>, <span class="built_in">window</span>.top.aut)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Note that after we get window reference, we wait 500ms to let the document to load. After that we hope the <code>document.domain</code> is set to <code>localhost</code>, allowing our Cypress Test Runner to access it without a security exception.</p><p>I am cheating here a little bit. I am using the undocumented <code>cy.state</code> function that internally stores <code>document</code> and <code>window</code> references. But this is a privilege of working on Cypress every day 😁</p><p>With the child window accessible, the test runs pretty much normally. For example, here is a test that clicks on the button and checks that the counter is displayed correctly.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'counts clicks'</span>, () =&gt; &#123;</span><br><span class="line">  cy.openWindow(<span class="string">'/'</span>)</span><br><span class="line">  cy.contains(<span class="string">'Page body'</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'button'</span>)</span><br><span class="line">    .click()</span><br><span class="line">    .click()</span><br><span class="line">  cy.get(<span class="string">'#clicked'</span>).should(<span class="string">'have.text'</span>, <span class="string">'2'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"modifyObstructiveCode"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:5001"</span>,</span><br><span class="line">  <span class="attr">"viewportWidth"</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">"viewportHeight"</span>: <span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The Chrome windows and Cypress main window are shown below</p><p><img src="/blog/images/child-window/testing.png" alt="Tests with separate child window"></p><p>We can open DevTools in the child window and see that <code>top</code> reference is the same as <code>self</code> reference.</p><p><img src="/blog/images/child-window/top-is-self.png" alt="Top is self in the child window"></p><p>The child window has only the elements from the loaded application under test</p><p><img src="/blog/images/child-window/child-window-elements.png" alt="Elements in the child window"></p><p>There is only a single context in the child window, this makes working with JavaScript a little bit simpler.</p><p><img src="/blog/images/child-window/child-window-single-context.png" alt="Single context"></p><p>Since Cypress takes DOM snapshots for its time-traveling debugger, it still works - and the snapshots are shown <em>inside the iframe</em>.</p><p><img src="/blog/images/child-window/child-window.gif" alt="Child window time traveling debugger"></p><p><strong>Note:</strong> there are probably differences in the way child window is controlled by Cypress. At least if you want to detect from the application code if the site is running inside Cypress, instead of checking <code>window.Cypress</code> you need to test <code>window.opener &amp;&amp; window.opener.Cypress</code>.</p><p>Try it out, and open <a href="https://github.com/bahmutov/cypress-open-child-window/issues" target="_blank" rel="noopener">any issues</a> please.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Normally, Cypress test runner loads your site inside an iframe. This allows the &amp;quot;top&amp;quot; parent window, controlled by Cypress a di
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Patching Cypress CLI NPM module</title>
    <link href="https://glebbahmutov.com/blog/patching-cypress-cli-npm-module/"/>
    <id>https://glebbahmutov.com/blog/patching-cypress-cli-npm-module/</id>
    <published>2019-09-02T04:00:00.000Z</published>
    <updated>2019-09-02T14:26:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> this blog post is an expanded version of the official documentation section <a href="https://on.cypress.io/debugging#Patch-Cypress" target="_blank" rel="noopener">&quot;Patch Cypress&quot;</a> available at <a href="https://on.cypress.io/debugging" target="_blank" rel="noopener">https://on.cypress.io/debugging</a>.</p><p>If you discover a bug in an NPM module, you can open an issue and wait for a fix. Yet, sometimes the problem is quite small and waiting for a patch release seems like eternity. In this blog post I will show how to write a patch for Cypress NPM module yourself and apply it after installing the official NPM module. This allows you to avoid waiting for (sometimes delayed) official release.</p><p>Cypress CLI npm module is a small module installed first when you run the <code>npm i cypress</code> command. This module parses the input arguments, starts an XVFB session if necessary and runs the Cypress Electron-based binary application. Sometimes the CLI module itself has a bug, which breaks your CI execution. For example, <a href="https://github.com/cypress-io/cypress/issues/2181" target="_blank" rel="noopener">issue 2181 &quot;dest.end error crash during run exit on GitLab CI / Windows&quot;</a> crashes the CLI when the child process exits on some versions of Windows. This error was apparently introduced in v3.0.0 frustrating many users. On Windows, to get the terminal colors to work, we needed to pipe input and output streams from the CLI process to the spawned Electron process. Thus the released CLI code has the following code fragment:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">needsEverythingPipedDirectly</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isPlatform(<span class="string">'win32'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStdio</span>(<span class="params">needsXvfb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (needsEverythingPipedDirectly()) &#123;</span><br><span class="line">    <span class="comment">// hmm, maybe it should be "inherit"?!!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'pipe'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// a little bit more logic for Linux / Mac</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'inherit'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Imagine you are a user trying to run Cypress tests on Windows CI machine and hitting the error. All tests pass successfully and then ...</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_stream_readable.js:511</span><br><span class="line">    dest.end();</span><br><span class="line">         ^</span><br><span class="line">TypeError: dest.end is not a function</span><br><span class="line">    at Socket.onend (_stream_readable.js:511:10)</span><br><span class="line">    at Socket.g (events.js:292:16)</span><br><span class="line">    at emitNone (events.js:91:20)</span><br><span class="line">    at Socket.emit (events.js:185:7)</span><br><span class="line">    at endReadableNT (_stream_readable.js:974:12)</span><br><span class="line">    at _combinedTickCallback (internal/process/next_tick.js:80:11)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:104:9)</span><br></pre></td></tr></table></figure><p>You suspect that switching from <code>pipe</code> to <code>inherit</code> would fix YOUR problem, but the Cypress team still has not implemented this fix; because each version of Cypress should work on a variety of platforms. What can you do meanwhile?You can patch Cypress CLI module in your own project, implementing a temporary fix! Here is how to do this.</p><ol><li><p>Install the <a href="https://github.com/ds300/patch-package" target="_blank" rel="noopener">patch-package</a> with</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D patch-package</span><br></pre></td></tr></table></figure></li><li><p>Add the patching step to your CI after <code>npm ci</code> step</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line"><span class="comment"># after installing NPM dependencies, patch any that need custom code</span></span><br><span class="line"><span class="attr">- run:</span> <span class="string">npx</span> <span class="string">patch-package</span></span><br></pre></td></tr></table></figure></li></ol><p>Alternatively, you can apply the patch during the npm post-install phase. In your <code>package.json</code> add the following:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"postinstall"</span>: <span class="string">"patch-package"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Now, let&#39;s edit the line causing the problem <em>in your local node_modules folder</em>.</p><ol start="3"><li><p>Open and edit the <code>node_modules/cypress/lib/exec/spawn.js</code> file</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (needsEverythingPipedDirectly()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'inherit'</span>; <span class="comment">// changed from 'pipe'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Run the <code>npx patch-package cypress</code> command.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npx patch-package cypress</span><br><span class="line">patch-package 6.1.2</span><br><span class="line">• Creating temporary folder</span><br><span class="line">• Installing cypress@3.4.1 with npm</span><br><span class="line">• Diffing your files with clean files</span><br><span class="line">✔ Created file patches/cypress+3.4.1.patch</span><br></pre></td></tr></table></figure></li></ol><p>The above command has created a new file <code>patches/cypress+3.4.1.patch</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat patches/cypress+3.4.1.patch</span><br><span class="line">diff --git a/node_modules/cypress/lib/exec/spawn.js b/node_modules/cypress/lib/exec/spawn.js</span><br><span class="line">index ed13727..19c1fae 100644</span><br><span class="line">--- a/node_modules/cypress/lib/exec/spawn.js</span><br><span class="line">+++ b/node_modules/cypress/lib/exec/spawn.js</span><br><span class="line">@@ -42,7 +42,7 @@ function needsEverythingPipedDirectly() &#123;</span><br><span class="line"> function getStdio(needsXvfb) &#123;</span><br><span class="line">   if (needsEverythingPipedDirectly()) &#123;</span><br><span class="line">-    return &apos;pipe&apos;;</span><br><span class="line">+    return &apos;inherit&apos;;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><ol start="5"><li>Commit the new <code>patches</code> folder to Git and push to GitHub</li><li>CI machine installs Cypress and other npm modules, then applies the patch and runs the tests. Everything is good now.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this blog post is an expanded version of the official documentation section &lt;a href=&quot;https://on.cypress.io/debuggi
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Fix low contrast with Cypress</title>
    <link href="https://glebbahmutov.com/blog/fix-low-contrast-with-cypress/"/>
    <id>https://glebbahmutov.com/blog/fix-low-contrast-with-cypress/</id>
    <published>2019-09-01T04:00:00.000Z</published>
    <updated>2019-09-01T14:06:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Take the TodoMVC example application that uses the common <a href="https://github.com/tastejs/todomvc-app-css" target="_blank" rel="noopener">tastejs/todomvc-app-css</a> styles. For example, the <a href="https://github.com/cypress-io/cypress-example-todomvc" target="_blank" rel="noopener">cypress-io/cypress-example-todomvc</a> repo uses them:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>React • TodoMVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/todomvc-common/base.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/todomvc-app-css/index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>... and it looks awful on your average projector, the contrast on the page is very low. Most projects display washed out white page where it is super hard to read the individual todo items and labels.</p><p><img src="/blog/images/contrast/todomvc.png" alt="Default Todo page has low contrast"></p><p>Let&#39;s fix this.</p><h2><span id="audit">Audit</span></h2><p>First, we need to understand the problem. Open Chrome DevTools and run &quot;Accessibility&quot; audit.</p><p><img src="/blog/images/contrast/audit.png" alt="Select a11y audit in Chrome DevTools"></p><p>We get only 54 out of 100 - and the contrast is the first problem shown.</p><p><img src="/blog/images/contrast/problems.png" alt="A11y audit result"></p><p>Of course, I am not the first one who had problems showing TodoMVC in front of the live audience and apologizing for the washed out text. Low contrast issue <a href="https://github.com/tastejs/todomvc-app-css/issues/30" target="_blank" rel="noopener">#30</a> was opened in March of 2018.</p><h2><span id="write-failing-test">Write failing test</span></h2><p>Before we start hacking CSS code, let&#39;s apply test-driven development approach and write a failing contrast test. I will use <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a> with <a href="https://github.com/avanslaars/cypress-axe" target="_blank" rel="noopener">cypress-axe</a> plugin to run the text contrast check.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D cypress-axe axe-core</span><br></pre></td></tr></table></figure><p>I have added <code>cypress-axe</code> to the list of loaded commands</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'cypress-axe'</span>)</span><br></pre></td></tr></table></figure><p>and wrote a test that <a href="https://github.com/avanslaars/cypress-axe/issues/9" target="_blank" rel="noopener">only runs a single set of color tests</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'has good contrast'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  cy.injectAxe()</span><br><span class="line">  cy.checkA11y(&#123;</span><br><span class="line">    runOnly: [<span class="string">'cat.color'</span>],</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test fails.</p><p><img src="/blog/images/contrast/failed.png" alt="Failed color a11y test"></p><p>Open DevTools in Cypress and click on the error &quot;A11Y ERROR&quot; command - it will print an actual object with every failed element to the console.</p><p><img src="/blog/images/contrast/errors.png" alt="Contrast errors"></p><p>Super. We have a failing contrast test to run on every commit to prevent a11y errors from creeping back into the application.</p><h2><span id="fixes">Fixes</span></h2><p>I have copied the <code>node_modules/todomvc-app-css/index.css</code> to <code>css/index.css</code> and included it from the <code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now I can start fixing the problems one by one. DevTools gives me a nice little warning for each element with insufficient contrast via element color picker widget. For example the <code>H1</code> element with &quot;Todos&quot; title is barely visible.</p><p><img src="/blog/images/contrast/h1-contrast.png" alt="Insufficient contrast on H1 title element"></p><p>We can pick one of the suggested colors in the palette - which immediately fixes the contrast problem.</p><p><img src="/blog/images/contrast/h1-fixed.png" alt="Fixed the H1 title element contrast"></p><p>Copy the new color to <code>css/index.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todoapp</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#b83f45</span>;</span><br></pre></td></tr></table></figure><p>Similarly I have changed the <code>footer.info</code> style to have more contrast</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.info</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4d4d4d</span>;</span><br></pre></td></tr></table></figure><p>And our empty page passes. The key word is &quot;empty&quot;. If we extend our test or write a new test with several todo items, the filters &quot;All|Completed|...&quot; fail the contrast test - which is something the default Lighthouse audit does not reveal (since it runs on the fresh page).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'has good contrast when empty'</span>, () =&gt; &#123;</span><br><span class="line">  cy.injectAxe()</span><br><span class="line">  cy.checkA11y(&#123;</span><br><span class="line">    runOnly: [<span class="string">'cat.color'</span>],</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'has good contrast'</span>, () =&gt; &#123;</span><br><span class="line">  cy.injectAxe()</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>)</span><br><span class="line">    .type(<span class="string">'learn testing&#123;enter&#125;'</span>)</span><br><span class="line">    .type(<span class="string">'be cool&#123;enter&#125;'</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">  cy.checkA11y(&#123;</span><br><span class="line">    runOnly: [<span class="string">'cat.color'</span>],</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/contrast/filters.png" alt="Contrast problems in the list filters"></p><p>We can fix this problem by just removing the gray footer font color - it now looks much better with default body color. I also increased the footer font size - it is hard to read it with the current size.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="comment">/* color: #777; */</span></span><br><span class="line">  <span class="attribute">font-size</span>: large;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I also made the list element font bolder - I think it is easier to read this way</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And finally I have made the input placeholder text darker - increasing its contrast</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.todoapp</span> <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#111111</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todoapp</span> <span class="selector-tag">input</span><span class="selector-pseudo">::-moz-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#111111</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.todoapp</span> <span class="selector-tag">input</span><span class="selector-pseudo">::input-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#111111</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The page looks much better after the color changes, and it passes our tests</p><p><img src="/blog/images/contrast/colors.png" alt="Fixed contrast problems"></p><h2><span id="links">Links</span></h2><ul><li>You can view my code changes in PR <a href="https://github.com/cypress-io/cypress-example-todomvc/pull/124" target="_blank" rel="noopener">cypress-io/cypress-example-todomvc/pull/124</a></li><li>I have opened PR <a href="https://github.com/tastejs/todomvc-app-css/pull/34" target="_blank" rel="noopener">tastejs/todomvc-app-css/pull/34</a> to fix the official <code>todomvc-app-css</code> styles</li><li><a href="https://github.com/avanslaars/cypress-axe" target="_blank" rel="noopener">cypress-axe</a> plugin and Cypress <a href="https://github.com/cypress-io/cypress-example-recipes#blogs" target="_blank" rel="noopener">a11y recipe</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Take the TodoMVC example application that uses the common &lt;a href=&quot;https://github.com/tastejs/todomvc-app-css&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="a11y" scheme="https://glebbahmutov.com/blog/tags/a11y/"/>
    
  </entry>
  
  <entry>
    <title>Filtering Mocha tests</title>
    <link href="https://glebbahmutov.com/blog/filter-mocha-tests/"/>
    <id>https://glebbahmutov.com/blog/filter-mocha-tests/</id>
    <published>2019-08-31T04:00:00.000Z</published>
    <updated>2019-09-01T01:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine you have <a href="https://mochajs.org" target="_blank" rel="noopener">Mocha</a> unit tests, like these ones</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'test a'</span>, () =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'test b'</span>, () =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'test c'</span>, () =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><p>You can run these tests by installing Mocha</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i mocha</span></span><br><span class="line">+ mocha@6.2.0</span><br><span class="line">updated 1 package and audited 226 packages in 5.338s</span><br><span class="line">found 0 vulnerabilities</span><br></pre></td></tr></table></figure><p>and then running the command</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx mocha ./spec.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ✓ test a</span><br><span class="line">  ✓ test b</span><br><span class="line">  ✓ test c</span><br><span class="line"></span><br><span class="line">  3 passing (4ms)</span><br></pre></td></tr></table></figure><p>Beautiful, but what if we want to change the list of collected tests before running them? What if we want to filter tests and maybe run only some of them? We could use <a href="https://mochajs.org/#-grep-regexp-g-regexp" target="_blank" rel="noopener"><code>--grep</code></a> command option, for example we could run just the &quot;test b&quot;.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx mocha --grep <span class="string">"test b"</span> ./spec.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ✓ test b</span><br><span class="line"></span><br><span class="line">  1 passing (4ms)</span><br></pre></td></tr></table></figure><p>I want more. I want to run previously failed tests first. Or run the slowest tests first, or randomize the test order to find the dependencies among tests. Previously I have written tools for this, like <a href="https://github.com/bahmutov/rocha" target="_blank" rel="noopener">rocha</a> and <a href="https://github.com/bahmutov/rocha" target="_blank" rel="noopener">locha</a> but those tools have a limitation - they wrap around Mocha, rather than modifying its behavior. They do not reuse Mocha&#39;s CLI module, which means as Mocha gets more features, those other tools fall behind.</p><p>I would like to plug right into Mocha&#39;s internals and add a new hook that runs after Mocha has collected the tests, but before they start running. Here is how to do this - all using the most powerful and underused feature of Node.js - its <a href="../hacking-node-require/"><code>--require</code> option</a>. Mocha actually looks for <code>--require</code> <a href="https://mochajs.org/#-require-module-r-module" target="_blank" rel="noopener">CLI option</a> and loads those modules for us. So how can we take advantage of loading our code to change Mocha&#39;s behavior?</p><p>First, find in Mocha&#39;s code the place where collected tests are being executed. That&#39;s easy - it is the code inside the file <code>lib/runner.js</code> that has (surprise, surprise) prototype method <code>run</code></p><figure class="highlight js"><figcaption><span>lib/runner.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Run the root suite and invoke `fn(failures)`</span></span><br><span class="line"><span class="comment"> * on completion.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @public</span></span><br><span class="line"><span class="comment"> * @memberof Runner</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; fn</span></span><br><span class="line"><span class="comment"> * @return &#123;Runner&#125; Runner instance.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Runner.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> rootSuite = <span class="keyword">this</span>.suite;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>Great, and this is an asynchronous function too, so we can modify the list of tests in whatever way we want. We can load files, make HTTP calls - even ask the user which tests to run. All we need is to overwrite this method, prefixing it with our code. Start a new local file, let&#39;s call it <code>reorder.js</code>. Here is how to reverse the order of tests in the root suite.</p><figure class="highlight js"><figcaption><span>reorder.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Runner = <span class="built_in">require</span>(<span class="string">'mocha/lib/runner'</span>)</span><br><span class="line"><span class="keyword">const</span> originalRun = Runner.prototype.run</span><br><span class="line">Runner.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.suite.tests.reverse()</span><br><span class="line">  originalRun.call(<span class="keyword">this</span>, done)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s run Mocha and require this script - it will reverse the order of tests</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx mocha --require ./reorder ./spec.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ✓ test c</span><br><span class="line">  ✓ test b</span><br><span class="line">  ✓ test a</span><br><span class="line"></span><br><span class="line">  3 passing (4ms)</span><br></pre></td></tr></table></figure><p>Because we have the callback function, we can make our logic asynchronous. Here is reversing the test order after 1 second delay</p><figure class="highlight js"><figcaption><span>reorder-async.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Runner = <span class="built_in">require</span>(<span class="string">'mocha/lib/runner'</span>)</span><br><span class="line"><span class="keyword">const</span> originalRun = Runner.prototype.run</span><br><span class="line">Runner.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.suite.tests.reverse()</span><br><span class="line">    originalRun.call(<span class="keyword">this</span>, done)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Runs the same way, except for 1 second pause before running the tests.</p><p>We can even ask the user what test to run. Here is a CLI script that asks the user using the <a href="https://github.com/enquirer/enquirer" target="_blank" rel="noopener">enquirer</a> library.</p><figure class="highlight js"><figcaption><span>select.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Select &#125; = <span class="built_in">require</span>(<span class="string">'enquirer'</span>)</span><br><span class="line"><span class="keyword">const</span> Runner = <span class="built_in">require</span>(<span class="string">'mocha/lib/runner'</span>)</span><br><span class="line"><span class="keyword">const</span> originalRun = Runner.prototype.run</span><br><span class="line">Runner.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> prompt = <span class="keyword">new</span> Select(&#123;</span><br><span class="line">    name: <span class="string">'run test'</span>,</span><br><span class="line">    message: <span class="string">'Which test should I run'</span>,</span><br><span class="line">    choices: <span class="keyword">this</span>.suite.tests.map(<span class="function"><span class="params">t</span> =&gt;</span> t.title)</span><br><span class="line">  &#125;)</span><br><span class="line">  prompt.run().then(<span class="function"><span class="params">answer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.suite.tests = <span class="keyword">this</span>.suite.tests.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.title === answer)</span><br><span class="line">    originalRun.call(<span class="keyword">this</span>, done)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And here is the hook in action</p><p><img src="/blog/images/select-test.gif" alt="Select test to run"></p><p>Just remember - in the real world situation, you need to look through each suite of tests to modify them, and probably consider the interplay between filtering tests and exclusive / skipped tests. For example, if there is an exclusive test with <code>it.only</code>, you probably do not want to run all the tests, right?!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine you have &lt;a href=&quot;https://mochajs.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mocha&lt;/a&gt; unit tests, like these ones&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>Detect page reload from Cypress test</title>
    <link href="https://glebbahmutov.com/blog/detect-page-reload/"/>
    <id>https://glebbahmutov.com/blog/detect-page-reload/</id>
    <published>2019-08-29T04:00:00.000Z</published>
    <updated>2019-08-29T14:20:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Cypress Test Runner has built-in <a href="https://on.cypress.io/retry-ability" target="_blank" rel="noopener">retry-ability</a> that is so sweet. Instead of hard-coding waits into your tests, all you need is figure out how to query something and how to follow with an assertion. The test will keep querying until the assertion passes.</p><p>Do you need to detect when a new property gets added to an object? Wrap the object and assert that the new property is preset.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// an object without a property</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;&#125;</span><br><span class="line"><span class="comment">// property "id" gets added after a delay</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  o.id = <span class="string">'abc123'</span></span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"><span class="comment">// detects when property "id" get added to the object "o"</span></span><br><span class="line">cy.wrap(o).should(<span class="string">'have.property'</span>, <span class="string">'id'</span>)</span><br></pre></td></tr></table></figure><p>Notice how the test continues after 500ms - when the property gets added and assertion <code>should(&#39;have.property&#39;, &#39;id&#39;)</code> finally passes.</p><p><img src="/blog/images/detect-page-reload/have-property.gif" alt="Should have property test passes"></p><p>What if you want to detect when the property has a specific value and is not just present on an object? Sure, just add the value you expect to see to the assertion.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// an object with an id</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  id: <span class="string">'initial'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// set "o.id" after delay</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  o.id = <span class="string">'abc123'</span></span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"><span class="comment">// detects property "o.id" has specific value</span></span><br><span class="line">cy.wrap(o).should(<span class="string">'have.property'</span>, <span class="string">'id'</span>, <span class="string">'abc123'</span>)</span><br></pre></td></tr></table></figure><p>Notice in the video below how the wrapped object shows &quot;{id: initial}&quot; in the assertion and then switches to &quot;{id: abc123}&quot; - because the object is &quot;live&quot; - Cypress re-evaluates the assertion over and over until it passes or times out.</p><p><img src="/blog/images/detect-page-reload/have-property-value.gif" alt="Should have property with give value test"></p><p>What about adding and deleting a property on the <code>window</code> object? Let&#39;s do this! Let&#39;s add a property and delete property.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// asynchronously add and delete a property</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.customProp = <span class="string">'here'</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">delete</span> <span class="built_in">window</span>.customProp</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">cy.window().should(<span class="string">'have.property'</span>, <span class="string">'customProp'</span>)</span><br><span class="line">cy.window().should(<span class="string">'not.have.property'</span>, <span class="string">'customProp'</span>)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/detect-page-reload/add-delete.gif" alt="Property added and deleted"></p><p>Notice in the above example that we have to use 2 <code>cy.window()</code> commands, with a single assertion each. You cannot attach both assertions to a single <code>cy.window()</code>. To understand why, notice what the Command Log shows. So here is the test with single command and 2 assertions:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.window()</span><br><span class="line">  .should(<span class="string">'have.property'</span>, <span class="string">'customProp'</span>)</span><br><span class="line">  .should(<span class="string">'not.have.property'</span>, <span class="string">'customProp'</span>)</span><br></pre></td></tr></table></figure><p>The test finishes suspiciously quickly - in just 1 second, while the asynchronous code executes in 2 seconds. So we know something is wrong, and look at the assertions; it gives you a clue.</p><p><img src="/blog/images/detect-page-reload/two-assertions.png" alt="Command log shows the problem"></p><p>The second assertion tries to assert that a string &quot;here&quot; does not have property &quot;customProp&quot;. Of course it does not, so it immediately passes, and the test completes.</p><p>Assertion <code>should(&#39;have.property&#39;)</code> is one of those few assertions that <em>change the subject</em>. In essence, it asserts that <code>window</code> has property <code>customProp</code> and then yields <code>window.customProp</code> to the next assertion, fooling you into false confidence.</p><p>The solution is to grab the <code>window</code> again and run the second assertion on it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.window().should(<span class="string">'have.property'</span>, <span class="string">'customProp'</span>)</span><br><span class="line">cy.window().should(<span class="string">'not.have.property'</span>, <span class="string">'customProp'</span>)</span><br></pre></td></tr></table></figure><p>So how does this relate to <a href="https://github.com/cypress-io/cypress/issues/1805" target="_blank" rel="noopener">detecting when the page reloads</a>? If there is no other external effect after reloading the page: no url change, no DOM change, etc, then you should property assertions. Here is an example page that reloads in response to a click</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>Click to reload<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>).addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'clicked'</span>)</span></span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'reloading page after delay'</span>)</span></span><br><span class="line"><span class="undefined">        location.reload()</span></span><br><span class="line"><span class="undefined">      &#125;, 2000)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Here is my test - and this detects when the page reloads just fine.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'reloads'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>)</span><br><span class="line">  <span class="comment">// mark our window object to "know" when it gets reloaded</span></span><br><span class="line">  cy.window().then(<span class="function"><span class="params">w</span> =&gt;</span> w.beforeReload = <span class="literal">true</span>)</span><br><span class="line">  <span class="comment">// initially the new property is there</span></span><br><span class="line">  cy.window().should(<span class="string">'have.prop'</span>, <span class="string">'beforeReload'</span>, <span class="literal">true</span>)</span><br><span class="line">  cy.get(<span class="string">'#button'</span>).click()</span><br><span class="line">  <span class="comment">// after reload the property should be gone</span></span><br><span class="line">  cy.window().should(<span class="string">'not.have.prop'</span>, <span class="string">'beforeReload'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/detect-page-reload/reload.gif" alt="Using custom property to detect page reload"></p><h2><span id="see-also">See also</span></h2><ul><li>Cypress <a href="https://on.cypress.io/retry-ability" target="_blank" rel="noopener">retry-ability guide</a></li><li>Cypress <a href="https://on.cypress.io/assertions" target="_blank" rel="noopener">assertions page</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Cypress Test Runner has built-in &lt;a href=&quot;https://on.cypress.io/retry-ability&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;retry-ability&lt;/a&gt; that is s
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Climate Emergency</title>
    <link href="https://glebbahmutov.com/blog/climate-emergency/"/>
    <id>https://glebbahmutov.com/blog/climate-emergency/</id>
    <published>2019-08-17T04:00:00.000Z</published>
    <updated>2020-02-16T19:08:14.753Z</updated>
    
    <content type="html"><![CDATA[<iframe src="//slides.com/bahmutov/global-extinction/embed" width="576" height="420" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe><h2><span id="information">Information</span></h2><ul><li>read <a href="https://lizkeogh.com/2019/07/02/off-the-charts/" target="_blank" rel="noopener">https://lizkeogh.com/2019/07/02/off-the-charts/</a></li><li>sign up for <a href="https://www.nytimes.com/newsletters/climate-change" target="_blank" rel="noopener">https://www.nytimes.com/newsletters/climate-change</a></li><li>why US bears responsibility for huge part of greenhouse emissions <a href="https://www.vox.com/energy-and-environment/2019/4/24/18512804/climate-change-united-states-china-emissions" target="_blank" rel="noopener">https://www.vox.com/energy-and-environment/2019/4/24/18512804/climate-change-united-states-china-emissions</a></li><li>excellent overview of problems and solutions at <a href="http://www.ecological-emergency.org/" target="_blank" rel="noopener">http://www.ecological-emergency.org/</a></li><li>global emissions chart animation showing 0.6% increase in 2019 <a href="https://twitter.com/Peters_Glen/status/1202151771432468480" target="_blank" rel="noopener">https://twitter.com/Peters_Glen/status/1202151771432468480</a></li><li><a href="https://www.nationalgeographic.com/science/2019/12/arctic/" target="_blank" rel="noopener">Warming in Arctic will soon be felt globally</a></li><li><a href="https://www.nationalgeographic.com/science/2019/11/earth-tipping-point/" target="_blank" rel="noopener">Earth tipping points</a></li></ul><h3><span id="email-newsletters">Email newsletters</span></h3><p>With latest (grim) news, and sometimes positive updates</p><ul><li><a href="https://heated.world/subscribe" target="_blank" rel="noopener">Heated</a></li><li><a href="https://www.nytimes.com/newsletters/climate-change" target="_blank" rel="noopener">NYTimes Climate Fwd:</a></li><li><a href="https://cleantechnica.com/" target="_blank" rel="noopener">Clean Technica</a></li><li><a href="https://climate-xchange.org/newsletter/" target="_blank" rel="noopener">Climate Xchange</a></li></ul><h3><span id="follow">Follow</span></h3><ul><li><a href="https://twitter.com/billmckibben" target="_blank" rel="noopener">@billmckibben</a></li><li><a href="https://twitter.com/350" target="_blank" rel="noopener">@350</a></li><li><a href="https://twitter.com/citizensclimate" target="_blank" rel="noopener">@citizensclimate</a></li><li><a href="https://twitter.com/urgenceclimatiq" target="_blank" rel="noopener">@urgenceclimatiq</a></li></ul><h2><span id="hope">Hope</span></h2><ul><li><a href="https://www.drawdown.org/" target="_blank" rel="noopener">Project Drawdown</a> is the world’s leading resource for climate solutions.</li><li><a href="https://www.macleans.ca/news/canada/yes-climate-change-can-be-beaten-by-2050-heres-how/" target="_blank" rel="noopener">https://www.macleans.ca/news/canada/yes-climate-change-can-be-beaten-by-2050-heres-how/</a></li></ul><h2><span id="personal">Personal</span></h2><p>Here is what I personally have done. This is something you should do too, and tell <strong>ALL</strong> your friends, relatives, coworkers and neighbors.</p><ul><li><a href="https://phys.org/news/2017-07-effective-individual-tackle-climate-discussed.html" target="_blank" rel="noopener">Most effective ways to tackle climate</a><ol><li>have fewer children</li><li>live car-free</li><li>skip flights, use trains</li><li>do not eat meat</li></ol></li><li><a href="https://www.goclimateneutral.org/" target="_blank" rel="noopener">Go Climate Neutral</a> - signed up for 2 people, $18 per month to offset family</li><li>switched to solar electricity for my home via <a href="https://clearwaycommunitysolar.com" target="_blank" rel="noopener">Clearway Community Solar</a></li><li><a href="../paint-roof-white/">painted my roof white</a></li></ul><h2><span id="pledge">Pledge</span></h2><p>If you are working on green projects or climate emergency and need help with end-to-end test - let me know, I will help.</p><h2><span id="organizations">Organizations</span></h2><ul><li><a href="https://citizensclimatelobby.org" target="_blank" rel="noopener">Citizens’ Climate Lobby</a> tries to put price on carbon in US, which is extremely important step to let green technologies compete in a fair way. Economists <a href="https://www.econstatement.org" target="_blank" rel="noopener">agree</a>.</li><li><a href="https://rebellion.earth/" target="_blank" rel="noopener">Extinction Rebellion</a> and <a href="https://globalclimatestrike.net" target="_blank" rel="noopener">Global climate strike</a></li><li><a href="https://350.org/" target="_blank" rel="noopener">350.org</a> acts locally and nationally. Check out what we do in Massachusetts at <a href="http://maclimateactions.com/" target="_blank" rel="noopener">maclimateactions.com/</a> <a href="https://github.com/350-mass-cambridge-somerville/350-actions-client" target="_blank" rel="noopener">source code</a>.</li></ul><h2><span id="companies">Companies</span></h2><ul><li><a href="https://stripe.com/au/blog/negative-emissions-commitment" target="_blank" rel="noopener">Stripe negative emissions commitment</a></li></ul><h2><span id="links">Links</span></h2><ul><li><a href="https://endcoal.org/tracker/" target="_blank" rel="noopener">Global Coal Plant Tracker</a> and <a href="https://www.electricitymap.org/" target="_blank" rel="noopener">Electricity map</a></li><li><a href="https://www.climatestewards.org/" target="_blank" rel="noopener">Climate Stewards</a> provides carbon offsets - has nice travel calculator <a href="https://www.climatestewards.org/offset/" target="_blank" rel="noopener">https://www.climatestewards.org/offset/</a></li><li>really interesting <a href="https://www.reddit.com/r/IAmA/comments/e5pqwg/im_katharine_hayhoe_a_climate_scientist_ama_about/" target="_blank" rel="noopener">Q&amp;A with climate scientist Katharine Hayhoe</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;//slides.com/bahmutov/global-extinction/embed&quot; width=&quot;576&quot; height=&quot;420&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; webkitallowfullscreen mo
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="climate" scheme="https://glebbahmutov.com/blog/tags/climate/"/>
    
  </entry>
  
  <entry>
    <title>Ariel Rider M-class</title>
    <link href="https://glebbahmutov.com/blog/ariel-rider-ebike/"/>
    <id>https://glebbahmutov.com/blog/ariel-rider-ebike/</id>
    <published>2019-08-12T04:00:00.000Z</published>
    <updated>2019-08-13T01:19:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I have decided to cut down on small trips by car. I am already using public transportation to go to work, but little trips to get some coffee or a beer run required a car.</p><p>I love riding bicycles, yet riding one in the summer is a sweaty affair. Luckily, I had a chance to try riding an e-bike - and it is a completely different experience. Even on a hot day, the bike does most of the work, effortlessly carrying you along the road. After trying several different models, I have decided to purchase a small e-bike, preferably a foldable one. This review <a href="https://ebikereviewer.com/index.php/2019/01/05/top-electric-folding-bikes-and-small-electric-bikes-of-2019/" target="_blank" rel="noopener">&quot;Top Electric Folding Bikes and Small Electric Bikes of 2019&quot;</a> brought <a href="https://arielrider.com/products/m-class-urban-electric-commuter-bike-mid-drive" target="_blank" rel="noopener">Arial Rider M-Class</a> to my attention. It is only sold online by a company in California, thus I have not seen this bike in the stores. It has many advantages over other small e-bikes:</p><ul><li>(relatively) low price at $1650. Other small bikes are usually a lot more expensive</li><li>powerful motor and large battery. I easily cruise at 20-23 miles per hour</li><li>disk brakes and high quality parts</li></ul><p>I have ordered the bike, trusting the online reviews. Assembly took about 1.5 hours, but if I had to do it again, it would be probably 20 minutes tops.</p><p><img src="/blog/images/bike/ariel-rider.jpg" alt="Ariel Rider M-class"></p><p>The Arial Rider is an excellent bicycle, with super comfortable sitting position. I am 6 foot 3 inches (193cm) and I feel super fine on it, no back pain. The small wheels are wide and stable, and the bike is very maneuverable. Overall I am extremely happy with this purchase - I feel like I am on vacation riding around town. Especially in Cambridge traffic it gets me to my destination in less than half the time it takes to drive a car. For example from my home to my co-working space it takes exactly 10 minutes by bike, while a car ride would usually take 20 minutes (plus parking hunt).</p><p>The only downside - it is a small bike, but not a foldable one. But you have to compromise sometimes.</p><p><strong>More info:</strong> watch <a href="https://www.youtube.com/watch?v=WbZZo0QNdVQ" target="_blank" rel="noopener">this video review of the bike</a></p><p><strong>PS:</strong> the Ariel Co is run by two brothers, and they have answered all my questions by email very quickly and professionally, 100% satisfied customer.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently I have decided to cut down on small trips by car. I am already using public transportation to go to work, but little trips to ge
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
  </entry>
  
  <entry>
    <title>How to write end-to-end test using app and api actions</title>
    <link href="https://glebbahmutov.com/blog/realworld-app-action/"/>
    <id>https://glebbahmutov.com/blog/realworld-app-action/</id>
    <published>2019-08-02T02:00:00.000Z</published>
    <updated>2019-08-02T13:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Note:</strong> the source code for this blog post is in repo <a href="https://github.com/cypress-io/cypress-example-realworld" target="_blank" rel="noopener">cypress-io/cypress-example-realworld</a> in the pull request <a href="https://github.com/cypress-io/cypress-example-realworld/pull/55/files" target="_blank" rel="noopener">#55</a>.</p><!-- toc --><ul><li><a href="#first-test">First test</a></li><li><a href="#second-test">Second test</a></li><li><a href="#page-object">Page object</a></li><li><a href="#app-action">App action</a></li><li><a href="#api-action">Api action</a></li></ul><!-- tocstop --><p>End-to-end browser tests do not have to go every time through the DOM interface to exercise the web application. In fact, doing so would make the end-to-end tests terribly slow and inefficient. In this post I will show a concrete example that bypasses the HTML interface for all the but the first test, yet keeps covering the same amount of code (measured by collecting <a href="https://on.cypress.io/code-coverage" target="_blank" rel="noopener">end-to-end code coverage</a>), and runs much much faster.</p><h2><span id="first-test">First test</span></h2><p>Our target application is a clone of the <a href="https://github.com/gothinkster/realworld" target="_blank" rel="noopener">Conduit blog web application</a>, and we want to confirm that we can write a new article. Using <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress Test Runner</a> we can write our first &quot;writes a post&quot; test.</p><figure class="highlight js"><figcaption><span>new-post-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'New post'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.task(<span class="string">'cleanDatabase'</span>)</span><br><span class="line">    cy.registerUserIfNeeded()</span><br><span class="line">    cy.login()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'writes a post'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// I have added "data-cy" attributes</span></span><br><span class="line">    <span class="comment">// following Cypress best practices</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/best-practices#Selecting-Elements</span></span><br><span class="line">    cy.get(<span class="string">'[data-cy=new-post]'</span>).click()</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'[data-cy=title]'</span>).type(<span class="string">'my title'</span>)</span><br><span class="line">    cy.get(<span class="string">'[data-cy=about]'</span>).type(<span class="string">'about X'</span>)</span><br><span class="line">    cy.get(<span class="string">'[data-cy=article]'</span>).type(<span class="string">'this post is **important**.'</span>)</span><br><span class="line">    cy.get(<span class="string">'[data-cy=tags]'</span>).type(<span class="string">'test&#123;enter&#125;'</span>)</span><br><span class="line">    cy.get(<span class="string">'[data-cy=publish]'</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// changed url means the post was successfully created</span></span><br><span class="line">    cy.location(<span class="string">'pathname'</span>).should(<span class="string">'equal'</span>, <span class="string">'/article/my-title'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes</p><p><img src="/blog/images/realworld/new-post.gif" alt="Passing Cypress test that writes a post"></p><p>The above test is already pretty solid:</p><ul><li>the initial state is set using <code>beforeEach</code> callback, ensuring the test starts every time from a clean slate</li><li>the test uses <code>data-cy</code> attributes to find elements following <a href="https://on.cypress.io/best-practices#Selecting-Elements" target="_blank" rel="noopener">Best Practices</a></li></ul><p>Because we can measure <a href="https://cypress.slides.com/cypress-io/complete-code-coverage-with-cypress/" target="_blank" rel="noopener">code coverage from Cypress tests</a>, just by running this single test we get 54.2% of all front-end code statements covered.</p><p><img src="/blog/images/realworld/coverage.png" alt="New post test covers a lot of front-end code"></p><h2><span id="second-test">Second test</span></h2><p>Great, writing a new post works. Let&#39;s see if we can comment on a post. Hmm, to add a comment we need a blog post. We can copy the above test and just add a few additional Cypress commands to add a comment.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'writes a post and comments on it'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'[data-cy=new-post]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'[data-cy=title]'</span>).type(<span class="string">'my title'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=about]'</span>).type(<span class="string">'about X'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=article]'</span>).type(<span class="string">'this post is **important**.'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=tags]'</span>).type(<span class="string">'test&#123;enter&#125;'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=publish]'</span>).click()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// changed url means the post was successfully created</span></span><br><span class="line">  cy.location(<span class="string">'pathname'</span>).should(<span class="string">'equal'</span>, <span class="string">'/article/my-title'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// comment on the post</span></span><br><span class="line">  cy.get(<span class="string">'[data-cy=comment-text]'</span>).type(<span class="string">'great post 👍'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=post-comment]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'[data-cy=comment]'</span>, <span class="string">'great post 👍'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs creating a new blog post and then commenting on it.</p><p><img src="/blog/images/realworld/add-comment.gif" alt="Writing a post and commenting on it"></p><p>After this test finishes, the total code coverage increases by 3%</p><p><img src="/blog/images/realworld/add-comment.png" alt="Code coverage after the above test"></p><p>We can see the new lines covered in the &quot;Article&quot; reducer, the &quot;ADD_COMMENT&quot; action has been covered by the new commands.</p><p><img src="/blog/images/realworld/article-reducer-with-add-comment.png" alt="Additional line covered by the test"></p><p>Nice.</p><h2><span id="page-object">Page object</span></h2><p>Yet, there is a problem. The second test &quot;writes a post and comments on it&quot; is exactly 70% line for line matching the first test &quot;writes a post&quot;. We are creating the post by clicking and typing on the page - repeating <em>exactly the same page actions</em> as the first test. What have we learned from about 2 seconds it takes to type the new post (just like a real user would type character by character), that we don&#39;t know already from the first test?</p><p>Nothing.</p><p>So to remove the duplicate lines, people write Page Objects, a wrapper around the HTML and the elements of the a particular page. We avoid the code duplication by having our tests call into the Page Object wrapper. In our case, the test would be</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'writes a post (via page object) and comments on it'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// page object encapsulating code for writing a post</span></span><br><span class="line">  <span class="comment">// by executing page commands = DOM actions</span></span><br><span class="line">  <span class="keyword">const</span> editor = &#123;</span><br><span class="line">    writeArticle () &#123;</span><br><span class="line">      cy.get(<span class="string">'[data-cy=new-post]'</span>).click()</span><br><span class="line"></span><br><span class="line">      cy.get(<span class="string">'[data-cy=title]'</span>).type(<span class="string">'my title'</span>)</span><br><span class="line">      cy.get(<span class="string">'[data-cy=about]'</span>).type(<span class="string">'about X'</span>)</span><br><span class="line">      cy.get(<span class="string">'[data-cy=article]'</span>).type(<span class="string">'this post is **important**.'</span>)</span><br><span class="line">      cy.get(<span class="string">'[data-cy=tags]'</span>).type(<span class="string">'test&#123;enter&#125;'</span>)</span><br><span class="line">      cy.get(<span class="string">'[data-cy=publish]'</span>).click()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// changed url means the post was successfully created</span></span><br><span class="line">      cy.location(<span class="string">'pathname'</span>).should(<span class="string">'equal'</span>, <span class="string">'/article/my-title'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use "Editor" page wrapper to write a new post</span></span><br><span class="line">  editor.writeArticle()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// comment on the post</span></span><br><span class="line">  cy.get(<span class="string">'[data-cy=comment-text]'</span>).type(<span class="string">'great post 👍'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=post-comment]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'[data-cy=comment]'</span>, <span class="string">'great post 👍'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The above test works, and removes code duplication. Every time you need an article to test commenting on it, or to test how an article can be deleted, or how a user can like it - every test can just call <code>editor.writeArticle()</code> and be done.</p><h2><span id="app-action">App action</span></h2><p>Let&#39;s see why the Page Object is less than ideal.</p><ul><li>The commands going through the DOM are slow. We will see how to avoid it later.</li><li>Opening the editor and typing into the input boxes again and again from <em>every</em> test does not help us test better, because it is just redundant commands that do the same thing over and over.</li><li>The Page Object is an extra layer of code that does not benefit the users and is built on top of the HTML, and can be only tested at runtime without any static tools help</li></ul><p>Once we have &quot;writes a post&quot; test that goes through the DOM to confirm that a user can write a new article, there is no point doing it again. Instead we can directly create an article by accessing the underlying application code and calling its methods - I call this approach &quot;app actions&quot;, and argue in the blog post <a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/" target="_blank" rel="noopener">Stop using Page Objects and Start using App Actions</a> that this approach saves you time and removes an unnecessary level of code sitting on top of the HTML. And this is not about code duplication - yes, you could factor out writing the post into a single reusable function (this would be a Page method). The point is that we want to avoid going through the DOM completely to perform an action that we have already tested!</p><p>In practice, this means we need to access the underlying web application to create the post somehow. This is how we do it.</p><p>First, study the application code to see how the UI components trigger actions. In our case the <code>Editor.js</code> component submits an article via an &quot;agent&quot; object reference.</p><figure class="highlight js"><figcaption><span>src/components/Editor.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> agent <span class="keyword">from</span> <span class="string">'../agent'</span></span><br><span class="line"><span class="comment">// Editor component</span></span><br><span class="line"><span class="keyword">this</span>.submitForm = <span class="function"><span class="params">ev</span> =&gt;</span> &#123;</span><br><span class="line">  ev.preventDefault()</span><br><span class="line">  <span class="keyword">const</span> article = &#123;</span><br><span class="line">    title: <span class="keyword">this</span>.props.title,</span><br><span class="line">    description: <span class="keyword">this</span>.props.description,</span><br><span class="line">    body: <span class="keyword">this</span>.props.body,</span><br><span class="line">    tagList: <span class="keyword">this</span>.props.tagList</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> promise = agent.Articles.create(article)</span><br><span class="line">  <span class="keyword">this</span>.props.onSubmit(promise)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ok, so if we could call <code>agent.Articles.create</code> method directly from our Cypress test, we could create an article almost instantly. Let&#39;s pass this <code>agent</code> reference from the application to the test via <code>window</code> object.</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> agent <span class="keyword">from</span> <span class="string">'./agent'</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">  <span class="built_in">window</span>.agent = agent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The test can grab the <code>window</code> object, then its <code>agent</code> property and call the application action.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'writes a post (via app action) and comments on it'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> article = &#123;</span><br><span class="line">    title: <span class="string">'my title'</span>,</span><br><span class="line">    description: <span class="string">'about X'</span>,</span><br><span class="line">    body: <span class="string">'this post is **important**.'</span>,</span><br><span class="line">    tagList: [<span class="string">'test'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  cy.window().its(<span class="string">'agent.Articles'</span>)</span><br><span class="line">    .invoke(<span class="string">'create'</span>, article) <span class="comment">// resolves with new article object</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I can also see by inspecting the code that the Editor executes the following code after the agent submits the article</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> ARTICLE_SUBMITTED:</span><br><span class="line">  <span class="keyword">const</span> redirectUrl = <span class="string">`/article/<span class="subst">$&#123;action.payload.article.slug&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...state, <span class="attr">redirectTo</span>: redirectUrl &#125;;</span><br></pre></td></tr></table></figure><p>Ok, we can do the same thing - we can use the result returned by the agent to get the new article&#39;s slug and redirect to the article url. Thus the full test should redirect to the article url like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.window().its(<span class="string">'agent.Articles'</span>)</span><br><span class="line">  .invoke(<span class="string">'create'</span>, article) <span class="comment">// resolves with new article object</span></span><br><span class="line">  .its(<span class="string">'article.slug'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">slug</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">`/article/<span class="subst">$&#123;slug&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// comment on the post</span></span><br><span class="line">cy.get(<span class="string">'[data-cy=comment-text]'</span>).type(<span class="string">'great post 👍'</span>)</span><br><span class="line">cy.get(<span class="string">'[data-cy=post-comment]'</span>).click()</span><br><span class="line"></span><br><span class="line">cy.contains(<span class="string">'[data-cy=comment]'</span>, <span class="string">'great post 👍'</span>).should(<span class="string">'be.visible'</span>)</span><br></pre></td></tr></table></figure><p>The test runs and passes - creating the new post instantly.</p><p><img src="/blog/images/realworld/app-action.png" alt="Creates new post by calling app code"></p><p>If we run both tests &quot;writes a post&quot; and &quot;writes a post (via app action) and comments on it&quot; togher - we get exactly the same code coverage percentage 57.3% - because we literally covered the same statements as before - we just did not cover some of the twice.</p><h2><span id="api-action">Api action</span></h2><p>When we bypass the DOM to set our state (we need an article) before testing a feature (like adding a new comment), we do not even have to use the application code. By studying the Network tab and the application code we can see the HTTP POST request that happens when a new article is sent to the server.</p><p><img src="/blog/images/realworld/post-article.png" alt="POST article XHR call"></p><p>Super, we can execute the same call ourselves. Here is the custom command (for reusability) and the test</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(<span class="string">'postArticle'</span>, fields =&gt; &#123;</span><br><span class="line">  checkArticle(fields)</span><br><span class="line">  <span class="keyword">const</span> jwt = localStorage.getItem(<span class="string">'jwt'</span>)</span><br><span class="line">  expect(jwt, <span class="string">'jwt token'</span>).to.be.a(<span class="string">'string'</span>)</span><br><span class="line"></span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;apiUrl&#125;</span>/api/articles`</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">      article: fields</span><br><span class="line">    &#125;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      authorization: <span class="string">`Token <span class="subst">$&#123;jwt&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'writes a post (via API) and comments on it'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> article = &#123;</span><br><span class="line">    title: <span class="string">'my title'</span>,</span><br><span class="line">    description: <span class="string">'about X'</span>,</span><br><span class="line">    body: <span class="string">'this post is **important**.'</span>,</span><br><span class="line">    tagList: [<span class="string">'test'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  cy.postArticle(article)</span><br><span class="line">    .its(<span class="string">'body.article.slug'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">slug</span> =&gt;</span> &#123;</span><br><span class="line">      cy.visit(<span class="string">`/article/<span class="subst">$&#123;slug&#125;</span>`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// comment on the post</span></span><br><span class="line">  cy.get(<span class="string">'[data-cy=comment-text]'</span>).type(<span class="string">'great post 👍'</span>)</span><br><span class="line">  cy.get(<span class="string">'[data-cy=post-comment]'</span>).click()</span><br><span class="line"></span><br><span class="line">  cy.contains(<span class="string">'[data-cy=comment]'</span>, <span class="string">'great post 👍'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Super, the test passes, and we have a reusable custom command <code>cy.postArticle</code> we can use any time we need an article to comment on, or to like, or to delete - thus all our end-to-end tests can run fast, yet because we have already tested creating a new article, the code coverage stays complete.</p><p>For me, the rule of thumb is:</p><ul><li>when testing feature A, use the DOM just like a real user would.</li><li>when testing feature B, that needs something feature A does, bypass the DOM when achieving part A. Instead call the application code directly, just like the UI component that implements feature A would. This saves a lot of time, making your tests fly, yet does not diminish the test code coverage.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the source code for this blog post is in repo &lt;a href=&quot;https://github.com/cypress-io/cypress-example-realworld&quot; ta
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Black box API testing with server logs</title>
    <link href="https://glebbahmutov.com/blog/api-testing-with-sever-logs/"/>
    <id>https://glebbahmutov.com/blog/api-testing-with-sever-logs/</id>
    <published>2019-07-19T04:00:00.000Z</published>
    <updated>2019-07-19T14:03:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>In my previous blog post <a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/" target="_blank" rel="noopener">&quot;Add GUI to your E2E API tests&quot;</a> I have used <a href="https://on.cypress.io/request" target="_blank" rel="noopener"><code>cy.request</code></a> command to execute HTTP requests against a backend performing a black box API testing. In this blog post I will show a new custom command <code>cy.api</code> that can take such API testing to the next level. In addition to the new user interface for your API requests, if you capture all server logs using <a href="https://github.com/bahmutov/all-logs" target="_blank" rel="noopener">@bahmutov/all-logs</a>, then the API tests will capture those messages too, allowing you deep insight into what is happening on each API request.</p><!-- toc --><ul><li><a href="#the-api-testing-problem">The API testing problem</a></li><li><a href="#example-adding-numbers">Example - adding numbers</a></li><li><a href="#cy-api-plugin">cy-api plugin</a></li><li><a href="#multiple-tests">Multiple tests</a></li><li><a href="#multiple-api-calls-in-the-same-test">Multiple API calls in the same test</a></li><li><a href="#logs">Logs</a></li><li><a href="#using-logs-in-test">Using logs in test</a></li><li><a href="#concat-messages">Concat messages</a></li><li><a href="#conclusions">Conclusions</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="the-api-testing-problem">The API testing problem</span></h2><p>I have written A LOT of API tests, mostly against REST backends. For our <a href="https://www.cypress.io/dashboard" target="_blank" rel="noopener">Cypress Dashboard</a> REST API we have more than 1000 API tests ... so writing and debugging failing tests is a big part of my job. A typical test:</p><ul><li>sets the state using database model queries</li><li>then uses <a href="https://www.npmjs.com/package/supertest" target="_blank" rel="noopener">supertest</a> to call an HTTP endpoint</li><li>and checks the response</li></ul><p>Here is a typical simple <code>supertest</code> test case</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server code</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.get(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.status(<span class="number">200</span>).json(&#123; <span class="attr">name</span>: <span class="string">'john'</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// test code</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'supertest'</span>)</span><br><span class="line"><span class="comment">// notice that the test uses "app" reference</span></span><br><span class="line">request(app)</span><br><span class="line">  .get(<span class="string">'/user'</span>)</span><br><span class="line">  .expect(<span class="string">'Content-Type'</span>, /json/)</span><br><span class="line">  .expect(<span class="string">'Content-Length'</span>, <span class="string">'15'</span>)</span><br><span class="line">  .expect(<span class="number">200</span>)</span><br><span class="line">  .end(<span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The test runs against the server instance, but might as well test against an URL - to keep a better separation between the test context and the server.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test server running at localhost:5555</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'supertest'</span>)(<span class="string">'http://localhost:5555'</span>)</span><br><span class="line">it(<span class="string">'responds with json'</span>, () =&gt;</span><br><span class="line">  request</span><br><span class="line">    .post(<span class="string">'/users'</span>)</span><br><span class="line">    .send(&#123;<span class="attr">name</span>: <span class="string">'john'</span>&#125;)</span><br><span class="line">    .set(<span class="string">'Accept'</span>, <span class="string">'application/json'</span>)</span><br><span class="line">    .expect(<span class="string">'Content-Type'</span>, /json/)</span><br><span class="line">    .expect(<span class="number">200</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>I call this type of testing &quot;black box&quot; testing because we treat the API as an unknown entity that only communicates through HTTP requests and responses. When doing realistic tests, we need to make several calls: setting data, updating it, checking it. For example, testing if the user can create a new article using API might take several requests:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'creates an article for a user'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> userId = <span class="keyword">await</span> request(<span class="string">'/users'</span>).post(...) <span class="comment">// create user</span></span><br><span class="line">  <span class="keyword">const</span> article = <span class="keyword">await</span> request(<span class="string">'/artices'</span>).post(&#123;</span><br><span class="line">    userId,</span><br><span class="line">    ... <span class="comment">// rest of the article fields</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// fetch all articles for the user to make sure</span></span><br><span class="line">  <span class="comment">// the new article has been correctly added</span></span><br><span class="line">  <span class="keyword">const</span> userArticles = <span class="keyword">await</span> request(<span class="string">'/articles?user='</span> + userId)</span><br><span class="line">  <span class="comment">// assert userArticles includes the new article</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>There is a lot of logic that the backend goes through in order to process those test requests. There is just a slight problem - if a test fails, it is hard to debug why. I have to re-start the server with verbose logs (sometimes enabled for a specific namespace to limit the sudden avalanche of messages) and re-run just this particular test, then scroll through a LOT of terminal output to understand the failure.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DEBUG=server:* npm run test</span><br><span class="line">... thousands of log lines ...</span><br></pre></td></tr></table></figure><p>This is slow and annoying. There must be a better way.</p><h2><span id="example-adding-numbers">Example - adding numbers</span></h2><p>My first example comes from the <a href="https://github.com/bahmutov/server-logs-example" target="_blank" rel="noopener">bahmutov/server-logs-example</a> repo. The server there responds to &quot;GET /&quot; requests with the sum of passed numbers. For example we can ask the server to add 2 and 3 together (I am using <a href="https://httpie.org/" target="_blank" rel="noopener">httpie</a> instead of <code>curl</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ http &apos;:7000/?a=2&amp;b=3&apos;</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Date: Tue, 16 Jul 2019 01:37:13 GMT</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>Let&#39;s write an end-to-end test for this server. I will use <a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">Cypress</a> Test Runner so I can have a GUI during testing. Here is the first test <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/integration/simple.js" target="_blank" rel="noopener">cypress/integration/simple.js</a> that uses <a href="https://on.cypress.io/request" target="_blank" rel="noopener"><code>cy.request</code></a> and verifies the <code>body</code> of the response object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://on.cypress.io/intelligent-code-completion</span></span><br><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'adds 2 + 3'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.request(&#123;</span><br><span class="line">    url: <span class="string">'/'</span>,</span><br><span class="line">    qs: &#123;</span><br><span class="line">      a: <span class="number">2</span>,</span><br><span class="line">      b: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">'body'</span>)</span><br><span class="line">  .should(<span class="string">'equal'</span>, <span class="string">'5'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes - I can see the green assertion in the Command Log.</p><p><img src="/blog/images/cy-api/simple.png" alt="Simple API test passing"></p><p>Hmm, but what did we send to the server? The Command Log does not show it - if I want to see the query parameters, I need to open the browser Developer Tools and click on the <code>REQUEST</code> command - then the request object is dumped to the console and I can understand what happens during the test a little bit better.</p><p><img src="/blog/images/cy-api/request-object.png" alt="Request object in DevTools Console"></p><p>Ok, this is not exactly convenient:</p><ul><li>I need to keep the DevTools open</li><li>I need to click on each command to inspect it</li><li>During the headless <code>cypress run</code> the DevTools is not shown in the video, thus I won&#39;t be able to understand my tests by watching the video</li></ul><p>Meanwhile notice how the application frame stays completely blank - because we are not loading a website using <a href="https://on.cypress.io/visit" target="_blank" rel="noopener"><code>cy.visit</code></a> during our API test; we are only executing HTTP requests.</p><h2><span id="cy-api-plugin">cy-api plugin</span></h2><p>Let me introduce the <code>cy.api</code> command that comes from <a href="https://github.com/bahmutov/cy-api" target="_blank" rel="noopener">@bahmutov/cy-api</a> plugin for Cypress Test Runner. Install it as a dev dependency using your favorite NPM client:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @bahmutov/cy-api</span><br></pre></td></tr></table></figure><p>And load it from <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/support/index.js" target="_blank" rel="noopener">cypress/support/index.js</a> file</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@bahmutov/cy-api/support'</span></span><br></pre></td></tr></table></figure><p>Now in my Cypress test I can use a new command <code>cy-api</code> that takes exactly the same argument object as <code>cy.request</code>; here is <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/integration/cy-api-example.js" target="_blank" rel="noopener">cypress/integration/cy-api-example.js</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loads Cypress types + definition for custom "cy.api" command</span></span><br><span class="line"><span class="comment">/// &lt;reference types="@bahmutov/cy-api" /&gt;</span></span><br><span class="line">it(<span class="string">'adds 2 + 3 (cy.api)'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.api(&#123;</span><br><span class="line">    url: <span class="string">'/'</span>,</span><br><span class="line">    qs: &#123;</span><br><span class="line">      a: <span class="number">2</span>,</span><br><span class="line">      b: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .its(<span class="string">'body'</span>)</span><br><span class="line">  .should(<span class="string">'equal'</span>, <span class="string">'5'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When the <code>cy.api</code> command runs, it automatically renders the request and server response to the <em>empty application frame</em>.</p><p><img src="/blog/images/cy-api/cy-api-example.png" alt="The cy-api command shows the relevant information"></p><p>No longer you need to click on the request in the Command Log and have DevTools ready - the relevant information is right there on the screen at all times.</p><h2><span id="multiple-tests">Multiple tests</span></h2><p>You can also use multiple <code>cy.api</code> commands in the same test, giving each one a name. All requests and responses will be displayed in the frame, and the frame will automatically scroll to show the last command.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'adds and subtracts'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/'</span>,</span><br><span class="line">      qs: &#123;</span><br><span class="line">        a: <span class="number">2</span>,</span><br><span class="line">        b: <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'2 + 3'</span></span><br><span class="line">  )</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .should(<span class="string">'equal'</span>, <span class="string">'5'</span>)</span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/'</span>,</span><br><span class="line">      qs: &#123;</span><br><span class="line">        a: <span class="number">2</span>,</span><br><span class="line">        b: <span class="number">-6</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'2 - 6'</span></span><br><span class="line">  )</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .should(<span class="string">'equal'</span>, <span class="string">'-4'</span>)</span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/'</span>,</span><br><span class="line">      qs: &#123;</span><br><span class="line">        a: <span class="number">-10</span>,</span><br><span class="line">        b: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'-10 + 0'</span></span><br><span class="line">  )</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .should(<span class="string">'equal'</span>, <span class="string">'-10'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/cy-api/multiple.png" alt="Multiple API requests"></p><p>Because the writing to the DOM happens in stages, hover over Command Log shows each part as it is added to the frame; time traveling debugger for your API requests!</p><p><img src="/blog/images/cy-api/hover-cy-api.gif" alt="Time travel over API requests"></p><h2><span id="multiple-api-calls-in-the-same-test">Multiple API calls in the same test</span></h2><p>From the test we can use results of the previous API call - either using <code>.then</code> closures (pyramid of doom, anyone?) or by storing results in the <a href="https://on.cypress.io/variables-and-aliases" target="_blank" rel="noopener">shared test context</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'adds 2 + 3 + 10'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// we can pass query parameters through url too</span></span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/?a=2&amp;b=3'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'first sum'</span></span><br><span class="line">  )</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .as(<span class="string">'first sum'</span>) <span class="comment">// save result in shared test context</span></span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      cy.api(</span><br><span class="line">        &#123;</span><br><span class="line">          url: <span class="string">'/'</span>,</span><br><span class="line">          qs: &#123;</span><br><span class="line">            <span class="comment">// because we use "function () &#123;...&#125;"</span></span><br><span class="line">            <span class="comment">// callback form, "this" refers to the</span></span><br><span class="line">            <span class="comment">// shared test context where we saved</span></span><br><span class="line">            <span class="comment">// the first sum using ".as('first sum')" command</span></span><br><span class="line">            <span class="comment">// https://on.cypress.io/as</span></span><br><span class="line">            a: <span class="keyword">this</span>[<span class="string">'first sum'</span>],</span><br><span class="line">            b: <span class="number">10</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'second sum'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/cy-api/two-calls.png" alt="Passing result of the first API call to the second API call"></p><h2><span id="logs">Logs</span></h2><p>Great, this makes the tests useful - yet there is nothing yet to simplify the debugging experience when a test fails. Let&#39;s look at that. If a test suddenly fails, it means something went wrong on the server. Our application server <a href="https://github.com/bahmutov/server-logs-example/blob/master/server/index.js" target="_blank" rel="noopener">server/index.js</a> logs the following messages while processing the requests:</p><figure class="highlight js"><figcaption><span>server/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// we will use console.log, util.debuglog and debug modules to log stuff</span></span><br><span class="line"><span class="keyword">const</span> verbose = <span class="built_in">require</span>(<span class="string">'util'</span>).debuglog(<span class="string">'verbose'</span>)</span><br><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'compute'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; pathname, query &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let's just log the basic request parameters</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'%s %s pathname %s'</span>, req.method, req.url, pathname)</span><br><span class="line">    <span class="comment">// and log the parsed query object in verbose mode</span></span><br><span class="line">    <span class="comment">// visible when NODE_DEBUG=verbose is set</span></span><br><span class="line">    verbose(<span class="string">'query is %o'</span>, query)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> a = <span class="built_in">parseFloat</span>(query.a)</span><br><span class="line">    <span class="keyword">const</span> b = <span class="built_in">parseFloat</span>(query.b)</span><br><span class="line">    <span class="keyword">const</span> sum = a + b</span><br><span class="line">    <span class="comment">// "debug" log only shows the computation if DEBUG=compute is set</span></span><br><span class="line">    debug(<span class="string">'%d + %d = %d'</span>, a, b, sum)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return result to the caller</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>By default, we are only logging the basic information; here I will be calling the server with <code>http &#39;:7000/?a=2&amp;b=3&#39;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node ./server</span><br><span class="line">listening on port 7000</span><br><span class="line">GET /?a=2&amp;b=3 pathname /</span><br></pre></td></tr></table></figure><p>If I want more information, for example to check how the query was parsed, I can enable the built-in <a href="https://nodejs.org/api/util.html#util_util_debuglog_section" target="_blank" rel="noopener">util.debuglog</a> logs.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_DEBUG=verbose node ./server</span><br><span class="line">listening on port 7000</span><br><span class="line">GET /?a=2&amp;b=3 pathname /</span><br><span class="line">VERBOSE 35756: query is &#123; a: &apos;2&apos;, b: &apos;3&apos; &#125;</span><br></pre></td></tr></table></figure><p><strong>Warning:</strong> the exact log messages from the <code>util.debuglog</code> module strongly depend on the Node version.</p><p>We can now see our query object (and process id 35756). Or we can see other debug messages by turning on the <a href="https://github.com/visionmedia/debug" target="_blank" rel="noopener">debug</a> module</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=compute node ./server</span><br><span class="line">listening on port 7000</span><br><span class="line">GET /?a=2&amp;b=3 pathname /</span><br><span class="line">  compute 2 + 3 = 5 +0ms</span><br></pre></td></tr></table></figure><p>Beautiful - what does this have to do with our API testing and <code>cy-api</code>? Well, using another module <a href="https://github.com/bahmutov/all-logs" target="_blank" rel="noopener">@bahmutov/all-logs</a> you can silently capture ALL logs from your server (even without turning them on) and then <code>cy.api</code> command will grab them during each request. Here is how to turn it on in your server.</p><ol><li>Instead of starting the server with <code>node ./server</code>, start it with <code>node -r @bahmutov/all-logs ./server</code>. This sets up the log interception.</li><li>Add HTTP middleware to your server that <code>cy.api</code> can call to retrieve and reset collected messages. For example, our server is a plain <code>http</code> server and we can do the following:</li></ol><figure class="highlight js"><figcaption><span>server/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logs = <span class="built_in">require</span>(<span class="string">'@bahmutov/all-logs/middleware/http'</span>)</span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (logs(req, res) === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// the HTTP request was for the server logs</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; pathname, query &#125; = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// the rest of the code</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>That is it. Let&#39;s look at our previous test with the <code>@bahmutov/all-logs</code> included. Wow, our Test Runner suddenly shows a lot more information!</p><p><img src="/blog/images/cy-api/two-calls-with-logs.png" alt="API tests with server logs"></p><p>The <code>cy.api</code> command fetches the intercepted logs from the server and shows them between the <code>Request</code> and <code>Response</code> sections. There are a lot of low level messages from Node itself, and in the future we plan to allow easy filtering by the log type (<code>console</code>, <code>util</code>, <code>debug</code>) and the namespace (in this case the namespaces were <code>HTTP</code>, <code>log</code> and <code>compute</code>). That is what those (currently non-functioning) checkboxes are for.</p><h2><span id="using-logs-in-test">Using logs in test</span></h2><p>The <code>cy.api</code> command yields the same object as <a href="https://on.cypress.io/request" target="_blank" rel="noopener">cy.request</a> does, plus the <code>messages</code> list with all server-side logs. Here is the same test as above, but with printing the <code>body</code> and <code>messages</code> properties from the yielded object:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// there was first cy.api</span></span><br><span class="line"><span class="comment">// and this is the second one</span></span><br><span class="line">cy.api(</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'/'</span>,</span><br><span class="line">    qs: &#123;</span><br><span class="line">      a: <span class="keyword">this</span>[<span class="string">'first sum'</span>],</span><br><span class="line">      b: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'second sum'</span></span><br><span class="line">).then(<span class="function">(<span class="params">&#123; body, messages &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'answer'</span>, body)</span><br><span class="line">  <span class="built_in">console</span>.table(messages)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/cy-api/print-logs.png" alt="Printed result and logs"></p><p>We can assert the result is what we are expecting, and that <code>debug compute</code> message records the correct parsed numbers. The <code>.then()</code> callback is below. I love writing BDD assertions that are readable!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function">(<span class="params">&#123; body, messages &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'answer'</span>, body)</span><br><span class="line">  <span class="built_in">console</span>.table(messages)</span><br><span class="line">  expect(body, <span class="string">'result'</span>).to.equal(<span class="string">'15'</span>) <span class="comment">// our api returns strings</span></span><br><span class="line">  <span class="comment">// use the Lodash "find" method to search by properties</span></span><br><span class="line">  <span class="keyword">const</span> computeLogMessage = Cypress._.find(messages, &#123;</span><br><span class="line">    type: <span class="string">'debug'</span>,</span><br><span class="line">    namespace: <span class="string">'compute'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  expect(computeLogMessage)</span><br><span class="line">    .to.be.an(<span class="string">'object'</span>)</span><br><span class="line">    .and.have.property(<span class="string">'message'</span>, <span class="string">'5 + 10 = 15'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/cy-api/log-check.png" alt="Asserting the result and the log message"></p><p>You might ask yourself - isn&#39;t this testing the implementation details? It is up to you to write tests that reach deeper into the server logic in order to test it from the from front-end. If you decide this approach ties the E2E tests too tightly to the implementation - don&#39;t check the logs from the tests, just have them in case the response value <code>15</code> is different from the expected one. But I would advise to set a policy on server-side logs that allows using the messages in tests. For example, you might have a <code>debug</code> namespace just for E2E tests that one CAN test against.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debugE2E = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'compute'</span>)</span><br><span class="line"><span class="comment">// messages via `debugE2E` are going to be asserted from the API E2E tests</span></span><br></pre></td></tr></table></figure><p>If you decide to allow some messages to be used from tests, we can easily verify the major &quot;checkpoints&quot; along the way using snapshots. For example, I will add the <a href="https://github.com/meinaart/cypress-plugin-snapshots" target="_blank" rel="noopener">meinaart/cypress-plugin-snapshots</a> plugin by following the instructions in that repo&#39;s README file. Now we can write a test and do snapshots with just API response and filtered backend messages. The full source code is in <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/integration/with-snapshots.js" target="_blank" rel="noopener">cypress/integration/with-snapshots.js</a> and below:</p><figure class="highlight js"><figcaption><span>cypress/integration/with-snapshots.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pickImportantMessages = <span class="function">(<span class="params">&#123; body, messages &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// only look at logs from DEBUG=compute namespace</span></span><br><span class="line">  <span class="keyword">const</span> computations = Cypress._.filter(messages, &#123;</span><br><span class="line">    type: <span class="string">'debug'</span>,</span><br><span class="line">    namespace: <span class="string">'compute'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    result: body,</span><br><span class="line">    backendMessages: Cypress._.map(computations, <span class="string">'message'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'performs expected computations'</span>, () =&gt; &#123;</span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/?a=2&amp;b=3'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'2 + 3'</span></span><br><span class="line">  )</span><br><span class="line">    .then(pickImportantMessages)</span><br><span class="line">    .toMatchSnapshot()</span><br><span class="line"></span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/?a=-1&amp;b=30'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'-1 + 30'</span></span><br><span class="line">  )</span><br><span class="line">    .then(pickImportantMessages)</span><br><span class="line">    .toMatchSnapshot()</span><br><span class="line"></span><br><span class="line">  cy.api(</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">'/?a=+1&amp;b=+2'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'+1 + 2'</span></span><br><span class="line">  )</span><br><span class="line">    .then(pickImportantMessages)</span><br><span class="line">    .toMatchSnapshot()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The snapshots are saved on the first run, and I can inspect the saved values by clicking on the &quot;Snapshot&quot; command.</p><p><img src="/blog/images/cy-api/snapshots.png" alt="Individual snapshot value"></p><p>Imagine something has changed. For example, I have changed the input parameters for the second <code>cy.api</code> call. Instead of <code>-1 + 30</code> the test passes <code>30 - 1</code> now. Let&#39;s see how the snapshot shows the difference.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.api(</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'/?a=30&amp;b=-1'</span> <span class="comment">// instead of -1 + 30</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'30 - 1'</span></span><br><span class="line">)</span><br><span class="line">  .then(pickImportantMessages)</span><br><span class="line">  .toMatchSnapshot()</span><br></pre></td></tr></table></figure><p>Immediately the snapshot value is different from the value saved in the file <a href="https://github.com/bahmutov/server-logs-example/blob/master/cypress/integration/__snapshots__/with-snapshots.js.snap" target="_blank" rel="noopener">cypress/integration/<strong>snapshots</strong>/with-snapshots.js.snap</a>. The test fails.</p><p><img src="/blog/images/cy-api/snapshot-error.png" alt="Snapshot error causes the test to fail"></p><p>Clicking on the &quot;Compare snapshot&quot; button brings up the difference viewer.</p><p><img src="/blog/images/cy-api/snapshot-diff.png" alt="Snapshot difference view"></p><p>The beautiful thing - if the new value is expected, you can simply click &quot;Update snapshot&quot; button and the new &quot;snap&quot; will be saved.</p><h2><span id="concat-messages">Concat messages</span></h2><p>The above test can be rewritten in shorter form, because all calls are independent of each other; we still need to execute them one by one to guarantee the same order.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'computes all given examples'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> list = []</span><br><span class="line">  <span class="keyword">const</span> addToList = list.push.bind(list)</span><br><span class="line">  ;[</span><br><span class="line">    <span class="comment">// all examples to compute</span></span><br><span class="line">    <span class="string">'/?a=2&amp;b=3'</span>,</span><br><span class="line">    <span class="string">'/?a=30&amp;b=-1'</span>,</span><br><span class="line">    <span class="string">'/?a=+1&amp;b=+2'</span></span><br><span class="line">  ].forEach(<span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">    cy.api(&#123; url &#125;)</span><br><span class="line">      .then(pickImportantMessages)</span><br><span class="line">      .then(addToList)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.wrap(list).toMatchSnapshot()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice how we compare the entire list at once at the very end.</p><p><img src="/blog/images/cy-api/single-list.png" alt="Single snapshot of all test messages and results"></p><p>The beauty of this combined snapshot is: if we change the backend logic - for example by taking an absolute value of the arguments before adding them - the snapshot shows precisely where the good log and the current one started diverging!</p><figure class="highlight js"><figcaption><span>server/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// added Math.abs on purpose to break the tests</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">Math</span>.abs(<span class="built_in">parseFloat</span>(query.a))</span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">Math</span>.abs(<span class="built_in">parseFloat</span>(query.b))</span><br><span class="line"><span class="keyword">const</span> sum = a + b</span><br><span class="line">debug(<span class="string">'%d + %d = %d'</span>, a, b, sum)</span><br></pre></td></tr></table></figure><p>The test fails - the snapshot does not match, and the difference in the message and in the result is obvious.</p><p><img src="/blog/images/cy-api/debug-error.png" alt="Debugging the test failure using logs"></p><p>But even better is finding the log message for that <code>cy.api</code> call, shown with green arrow - and immediately seeing the previous log message. The query argument <code>b</code> is <code>-1</code>, yet the parsed value is <code>1</code> - that points the finger at the argument conversion step. Perfect - the debugging cycle is short, just like I wanted.</p><h2><span id="conclusions">Conclusions</span></h2><p>Testing the web application means testing the code at different levels: you still need unit tests and end-to-end web application tests. But the middle of the stack - the HTTP API deserves to be tested as well, since it is the foundation for the web application. The plugin <a href="https://github.com/bahmutov/cy-api" target="_blank" rel="noopener">@bahmutov/cy-api</a> should help with API testing, and I hope the approach of capturing the detailed server-side logs helps when debugging a failing test.</p><p>Give <code>cy.api</code> a spin and open a <a href="https://github.com/bahmutov/cy-api/issues" target="_blank" rel="noopener">GitHub issue</a> if something does not work, or if you have an idea to make this type of testing better.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://github.com/bahmutov/cy-api" target="_blank" rel="noopener">@bahmutov/cy-api</a> plugin provides <code>cy.api</code> command</li><li><a href="https://github.com/bahmutov/all-logs" target="_blank" rel="noopener">@bahmutov/all-logs</a> captures all server-side logs</li><li><a href="https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/" target="_blank" rel="noopener">&quot;Add GUI to your E2E API tests&quot;</a></li><li><a href="https://www.cypress.io/blog/2018/01/16/end-to-end-snapshot-testing/" target="_blank" rel="noopener">&quot;End-to-End Snapshot Testing&quot;</a> describes snapshot testing for web application testing</li><li><a href="../picking-snapshot-library/">&quot;Picking snapshot library&quot;</a></li><li><a href="https://github.com/meinaart/cypress-plugin-snapshots" target="_blank" rel="noopener">meinaart/cypress-plugin-snapshots</a> is the snapshot plugin I love using in Cypress</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In my previous blog post &lt;a href=&quot;https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Capture all the logs</title>
    <link href="https://glebbahmutov.com/blog/capture-all-the-logs/"/>
    <id>https://glebbahmutov.com/blog/capture-all-the-logs/</id>
    <published>2019-07-05T04:00:00.000Z</published>
    <updated>2019-07-17T12:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this blog post I will show how to intercept messages logged by a Node process using a pre-loaded module. You can find the source code for these examples in <a href="https://github.com/bahmutov/capture-logs-example" target="_blank" rel="noopener">bahmutov/capture-logs-example</a> repository.</p><h2><span id="capture-console-logs">Capture console logs</span></h2><p>Imagine you want to collect all strings logged from a Node program. You could proxy all <code>console.log</code> calls and store them until needed. Take an example Node program like this one in <a href="https://github.com/bahmutov/capture-logs-example/blob/master/index.js" target="_blank" rel="noopener">index.js</a>:</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'this is %s log message ✅'</span>, <span class="string">'console'</span>)</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'this is console %s ⚠️'</span>, <span class="string">'warn'</span>)</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'this is console error 🔥'</span>)</span><br></pre></td></tr></table></figure><p>When we run this program, all logs are written to their respective output streams. Note that values are substituted into placeholders like <code>%s -&gt; &quot;console&quot;</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">this is console log message ✅</span><br><span class="line">this is console warn ⚠️</span><br><span class="line">this is console error 🔥</span><br></pre></td></tr></table></figure><p>Note that <code>console.log</code> writes its messages to <code>STDOUT</code>, while <code>console.warn</code> and <code>console.error</code> write to <code>STDERR</code>. You can verify this by hiding <code>STDERR</code> stream via redirect.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># hide STDERR stream</span><br><span class="line">$ node . 2&gt; /dev/null</span><br><span class="line">this is console log message ✅</span><br><span class="line"># hide STDOUT stream</span><br><span class="line">$ node . 1&gt; /dev/null</span><br><span class="line">this is console warn ⚠️</span><br><span class="line">this is console error 🔥</span><br></pre></td></tr></table></figure><p>Great, now let&#39;s collect the messages by pre-loading a module that is going to proxy <code>console.*</code> methods. Here is the <a href="https://github.com/bahmutov/capture-logs-example/blob/master/log.js" target="_blank" rel="noopener">log.js</a> file:</p><figure class="highlight js"><figcaption><span>log.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ignore "console.table" and "console.dir" for now</span></span><br><span class="line"><span class="keyword">const</span> methodNames = [<span class="string">'log'</span>, <span class="string">'warn'</span>, <span class="string">'error'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// put all messages interleaved into single list</span></span><br><span class="line"><span class="comment">// so we can see how they all appeared</span></span><br><span class="line"><span class="comment">// each message should have "type" and "message"</span></span><br><span class="line"><span class="keyword">const</span> messages = []</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * put the original log methods into a global object</span></span><br><span class="line"><span class="comment"> * so we can do two things:</span></span><br><span class="line"><span class="comment"> *  1: restore the methods when needed</span></span><br><span class="line"><span class="comment"> *  2: print messages without going through proxied methods</span></span><br><span class="line"><span class="comment"> *      like "cnsl.log('my message')"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">global.cnsl = &#123;&#125;</span><br><span class="line"></span><br><span class="line">methodNames.forEach(<span class="function"><span class="params">methodName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> originalMethod = (global.cnsl[methodName] = <span class="built_in">console</span>[methodName])</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>[methodName] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// save the original message (formatted into a single string)</span></span><br><span class="line">    <span class="comment">// use "util.format" to perform string formatting if needed</span></span><br><span class="line">    <span class="keyword">const</span> params = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> message = params.length</span><br><span class="line">      ? util.format(<span class="built_in">arguments</span>[<span class="number">0</span>], ...params)</span><br><span class="line">      : <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">    messages.push(&#123;</span><br><span class="line">      type: methodName, <span class="comment">// "log", "warn", "error"</span></span><br><span class="line">      message</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call the original method like "console.log"</span></span><br><span class="line">    originalMethod.apply(<span class="built_in">console</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A method to restore the original console methods</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> restore = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(global.cnsl).forEach(<span class="function"><span class="params">methodName</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>[methodName] = global.cnsl[methodName]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">'beforeExit'</span>, () =&gt; &#123;</span><br><span class="line">  restore()</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'*** printing saved messages ***'</span>)</span><br><span class="line">  messages.forEach(<span class="function"><span class="params">m</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'%s: %s'</span>, m.type, m.message)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Each method like <code>console.log</code> is replaced with our function that keeps a copy of the formatted string and calls the original <code>log</code> method. We can now run our original program, but require the <code>./log.js</code> first; all logged strings will be collected and printed again at the end.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ node -r ./log .</span><br><span class="line"></span><br><span class="line">this is console log message ✅</span><br><span class="line">this is console warn ⚠️</span><br><span class="line">this is console error 🔥</span><br><span class="line">*** printing saved messages ***</span><br><span class="line">log: this is console log message ✅</span><br><span class="line">warn: this is console warn ⚠️</span><br><span class="line">error: this is console error 🔥</span><br></pre></td></tr></table></figure><h2><span id="capture-debug-logs">Capture <code>debug</code> logs</span></h2><p>I <a href="../good-logging/">love using</a> <a href="https://github.com/visionmedia/debug" target="_blank" rel="noopener"><code>debug</code></a> module to control my verbose logs. Just import the module and control if its messages are showing up in the terminal using an environment variable <code>DEBUG=some:name:space</code>. Here is a copy of the program but with additional logging statement. See <a href="https://github.com/bahmutov/capture-logs-example/blob/master/index-debug.js" target="_blank" rel="noopener">index-debug.js</a> file:</p><figure class="highlight js"><figcaption><span>index-debug.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'verbose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this is %s log message ✅'</span>, <span class="string">'console'</span>)</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'this is console %s ⚠️'</span>, <span class="string">'warn'</span>)</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'this is console error 🔥'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// only visible when you call "DEBUG=verbose node ./index-debug"</span></span><br><span class="line">debug(<span class="string">'this is verbose debug = %d'</span>, <span class="number">42</span>)</span><br></pre></td></tr></table></figure><p>If we run the program &quot;normally&quot; the <code>debug</code> calls are ignored. We need to enable &quot;verbose&quot; namespace to actually see them.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ node ./index-debug.js</span><br><span class="line">this is console log message ✅</span><br><span class="line">this is console warn ⚠️</span><br><span class="line">this is console error 🔥</span><br><span class="line"></span><br><span class="line">$ DEBUG=verbose node ./index-debug.js</span><br><span class="line">this is console log message ✅</span><br><span class="line">this is console warn ⚠️</span><br><span class="line">this is console error 🔥</span><br><span class="line">  verbose this is verbose debug = 42 +0ms</span><br></pre></td></tr></table></figure><p>Perfect - can we capture the log calls to the <code>debug</code> instances? Well, <code>debug</code> module writes directly into <code>process.stderr</code> stream bypassing <code>console.*</code> methods, thus our proxy is not going to work. Luckily, the <code>debug</code> module exposes its internals so we can easily proxy <em>its</em> methods. Bonus: we can log even the disabled <code>debug</code> namespaces!</p><p>Look at the implementation of <a href="https://github.com/bahmutov/capture-logs-example/blob/master/log-debug.js" target="_blank" rel="noopener">log-debug.js</a>. When a new debug log instance is created using <code>require(&#39;debug&#39;)(... namespace name ...)</code>, it is added to the list of debug instances. That list is an <code>Array</code> instance, and a new instance is pushed to the array using &quot;standard&quot; <code>debug.instances.push()</code>. Well, we can overwrite this method, just like we can overwrite pretty much everything in JavaScript. When we do this, we get access to <em>every</em> <code>debug</code> instance instantiated by the process. That&#39;s where we can insert out logic to capture debug log messages - even if the namespace is disabled!</p><figure class="highlight js"><figcaption><span>log-debug.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logDebugCalls</span> (<span class="params">messages</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// assume there is "debug" module, otherwise</span></span><br><span class="line">  <span class="comment">// do nothing (put try / catch around require)</span></span><br><span class="line">  <span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// All enabled debug instances by default use "debug.log" method</span></span><br><span class="line">  <span class="comment">// to actually write to process.stderr stream. Assume user code</span></span><br><span class="line">  <span class="comment">// does not change this, just save the message</span></span><br><span class="line">  <span class="keyword">const</span> debugLog = debug.log</span><br><span class="line">  debug.log = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    messages.push(&#123;</span><br><span class="line">      type: <span class="string">'debug'</span>,</span><br><span class="line">      message: util.format(...args)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// and call the original method to print it</span></span><br><span class="line">    debugLog.apply(debug, args)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// new instances are added using "debug.instances.push()"</span></span><br><span class="line">  <span class="comment">// so we can proxy this method</span></span><br><span class="line">  debug.instances.push = <span class="function"><span class="params">debugInstance</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.push.call(debug.instances, debugInstance)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (debugInstance.enabled) &#123;</span><br><span class="line">      <span class="comment">// ignore custom debugInstance.log method - we could</span></span><br><span class="line">      <span class="comment">// intercept that as well by using "setter" property</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if the debug instance is disabled, the common "debug.log"</span></span><br><span class="line">    <span class="comment">// method is NOT going to be called. We DO want to record the message though</span></span><br><span class="line">    <span class="comment">// to enable test debugging</span></span><br><span class="line">    debugInstance.enabled = <span class="literal">true</span></span><br><span class="line">    debugInstance.log = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">      messages.push(&#123;</span><br><span class="line">        type: <span class="string">'debug'</span>,</span><br><span class="line">        message: util.format(...args)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = logDebugCalls</span><br></pre></td></tr></table></figure><p>The above file <code>log-debug.js</code> exports the <code>logDebugCalls</code> and we can call it from our <code>log.js</code> file passing the <code>messages</code> list. Thus the debug messages get inserted into the same list as the intercepted <code>console.log</code> messages, giving us the right order.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in log.js</span></span><br><span class="line"><span class="comment">// intercept "debug" module logging calls</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./log-debug'</span>)(messages)</span><br></pre></td></tr></table></figure><p>And there is the logging in action - first let&#39;s run with <code>DEBUG=verbose</code> enabled. The <code>debug</code> call shows up in the terminal AND is captured. Then we will run the process without <code>DEBUG</code> environment variable. The <code>debug</code> call is NOT in the normal terminal output, because the namespace is not enabled, yet it is still captured.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ DEBUG=verbose node -r ./log ./index-debug.js</span><br><span class="line">this is console log message ✅</span><br><span class="line">this is console warn ⚠️</span><br><span class="line">this is console error 🔥</span><br><span class="line">  verbose this is verbose debug = 42 +0ms</span><br><span class="line">*** printing saved messages ***</span><br><span class="line">log: this is console log message ✅</span><br><span class="line">warn: this is console warn ⚠️</span><br><span class="line">error: this is console error 🔥</span><br><span class="line">debug:   verbose this is verbose debug = 42 +0ms</span><br><span class="line"></span><br><span class="line">$ node -r ./log ./index-debug.js</span><br><span class="line">this is console log message ✅</span><br><span class="line">this is console warn ⚠️</span><br><span class="line">this is console error 🔥</span><br><span class="line">*** printing saved messages ***</span><br><span class="line">log: this is console log message ✅</span><br><span class="line">warn: this is console warn ⚠️</span><br><span class="line">error: this is console error 🔥</span><br><span class="line">debug:   verbose this is verbose debug = 42 +0ms</span><br></pre></td></tr></table></figure><p>Beautiful - we have all the logs we might need, yet the &quot;normal&quot; terminal output only shows top level messages. We are now free to do anything with the verbose logs. For example we could show all the logs ONLY if something goes wrong, avoiding double test runs like <a href="https://github.com/bahmutov/locha" target="_blank" rel="noopener">locha</a> does.</p><h2><span id="see-also">See also</span></h2><ul><li>I have released the log interception in <a href="https://github.com/bahmutov/all-logs" target="_blank" rel="noopener"><code>@bahmutov/all-logs</code></a> NPM module. It can collect all<ul><li><code>console.{log, warn, error}</code> messages</li><li>all messages via <code>debug</code> module</li><li>all messages via <code>util.debuglog</code> (see the update below)</li></ul></li><li><a href="../good-logging/">Good logging</a></li><li><a href="../oo-vs-fp-log-example/">OO vs FP console log example</a></li><li><a href="https://github.com/visionmedia/debug" target="_blank" rel="noopener"><code>debug</code></a> module</li><li>Source code for this blog post is in the <a href="https://github.com/bahmutov/capture-logs-example" target="_blank" rel="noopener">bahmutov/capture-logs-example</a> repository.</li></ul><h2><span id="update-1-utildebuglog">Update 1 - <code>util.debuglog</code></span></h2><p>In Node, there is built-in <code>NODE_DEBUG=&lt;namespace&gt;</code> mechanism for verbose logs, see <a href="https://nodejs.org/api/util.html#util_util_debuglog_section" target="_blank" rel="noopener"><code>util.debuglog</code></a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">const</span> debuglog = util.debuglog(<span class="string">'foo'</span>);</span><br><span class="line">debuglog(<span class="string">'hello from foo [%d]'</span>, <span class="number">123</span>);</span><br></pre></td></tr></table></figure><p>If you run the above piece of code with <code>NODE_DEBUG=foo</code> it will show the namespace (uppercased) and process id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOO 3245: hello from foo [123]</span><br></pre></td></tr></table></figure><p>One can intercept these log messages by overwriting <code>util.debuglog</code> method.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this blog post I will show how to intercept messages logged by a Node process using a pre-loaded module. You can find the source code 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Run Cypress included from Docker container</title>
    <link href="https://glebbahmutov.com/blog/run-cypress-included-from-docker-container/"/>
    <id>https://glebbahmutov.com/blog/run-cypress-included-from-docker-container/</id>
    <published>2019-06-20T04:00:00.000Z</published>
    <updated>2019-06-20T21:24:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>In the blog post <a href="https://www.cypress.io/blog/2019/05/02/run-cypress-with-a-single-docker-command/" target="_blank" rel="noopener">&quot;Run Cypress with a single Docker command&quot;</a> I gave several examples running Cypress Docker image <a href="https://github.com/cypress-io/cypress-docker-images/tree/master/included" target="_blank" rel="noopener">cypress/included</a> using <a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">docker-compose</a> command. I also showed how to run Cypress inside a Docker container, yet see it on the host machine. But I did not give an example of how to run Cypress inside a Docker container and test a web application running on the host machine.</p><p>In this short blog post I will show how to do this. I am running Docker v18.09.2 on Mac.</p><p>So imagine I have a local web application running on <code>localhost:3333</code>. For example it could be a <a href="https://github.com/indexzero/http-server" target="_blank" rel="noopener">http-server</a> serving a local <code>public</code> folder:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http-server -p 3333 public</span><br></pre></td></tr></table></figure><p>I can load <code>http://localhost:3333</code> in any browser and see the page.</p><p>My <code>cypress.json</code> file points at this URL</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:3333"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Typically I would <a href="https://on.cypress.io/installing-cypress" target="_blank" rel="noopener">install Cypress locally</a>, but maybe I don&#39;t want to install any tools. I can still run <code>cypress/included</code> Docker image, but any application running inside the container does NOT have access to the <code>localhost</code> of the host machine. Instead Docker provides a special hostname <code>host.docker.internal</code> for container processes to access the web apps running on the host machine, see <a href="https://stackoverflow.com/questions/24319662/from-inside-of-a-docker-container-how-do-i-connect-to-the-localhost-of-the-mach" target="_blank" rel="noopener">this Stackoverflow question</a>. When I start Cypress run, I need to set the base url config parameter, which I will do using an environment variable <code>CYPRESS_baseUrl</code>. Here is the full command with explanation below</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">  -v $PWD:/e2e \</span><br><span class="line">  -w /e2e \</span><br><span class="line">  -e CYPRESS_baseUrl=http://host.docker.internal:3333 \</span><br><span class="line">  cypress/included:3.3.1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Explanation of the &quot;docker run&quot; command line arguments:</span><br><span class="line"></span><br><span class="line"> -it                      = interactive terminal</span><br><span class="line"> -v $PWD:/e2e             = map current folder to /e2e inside the container</span><br><span class="line"> -w /e2e                  = set working directy to /e2e</span><br><span class="line"> -e CYPRESS_baseUrl=...   = pass environment variable CYPRESS_baseUrl</span><br><span class="line"> cypress/included:3.3.1   = name of the Docker image with tag</span><br></pre></td></tr></table></figure><p>The tests run and finish</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Starting)</span><br><span class="line"></span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ Cypress:    3.3.1                                                                              │</span><br><span class="line">  │ Browser:    Electron 61 (headless)                                                             │</span><br><span class="line">  │ Specs:      1 found (spec.js)                                                                  │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br><span class="line">  Running: spec.js...                                                                      (1 of 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ✓ loads page (291ms)</span><br><span class="line"></span><br><span class="line">  1 passing (320ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  (Results)</span><br><span class="line"></span><br><span class="line">  ┌─────────────────────────┐</span><br><span class="line">  │ Tests:        1         │</span><br><span class="line">  │ Passing:      1         │</span><br><span class="line">  │ Failing:      0         │</span><br><span class="line">  │ Pending:      0         │</span><br><span class="line">  │ Skipped:      0         │</span><br><span class="line">  │ Screenshots:  0         │</span><br><span class="line">  │ Video:        true      │</span><br><span class="line">  │ Duration:     0 seconds │</span><br><span class="line">  │ Spec Ran:     spec.js   │</span><br><span class="line">  └─────────────────────────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  (Video)</span><br><span class="line"></span><br><span class="line">  - Started processing:   Compressing to 32 CRF</span><br><span class="line">  - Finished processing:  /e2e/cypress/videos/spec.js.mp4 (0 seconds)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Finished)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Spec                                                Tests  Passing  Failing  Pending  Skipped</span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ ✔ spec.js                                   318ms        1        1        -        -        - │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">    All specs passed!                           318ms        1        1        -        -        -</span><br></pre></td></tr></table></figure><h2><span id="bonus">Bonus</span></h2><p>You can use <code>cypress/included</code> on CI server, see <a href="https://github.com/bahmutov/cypress-included-example" target="_blank" rel="noopener">bahmutov/cypress-included-example</a> for example.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In the blog post &lt;a href=&quot;https://www.cypress.io/blog/2019/05/02/run-cypress-with-a-single-docker-command/&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="docker" scheme="https://glebbahmutov.com/blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>End-to-end Testing for Server-Side Rendered Pages</title>
    <link href="https://glebbahmutov.com/blog/ssr-e2e/"/>
    <id>https://glebbahmutov.com/blog/ssr-e2e/</id>
    <published>2019-05-21T04:00:00.000Z</published>
    <updated>2019-05-21T04:20:31.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#ssr-application">SSR application</a></li><li><a href="#check-html">Check HTML</a></li><li><a href="#removing-application-bundle">Removing application bundle</a></li><li><a href="#disable-component-method">Disable component method</a></li><li><a href="#confirming-createreactclass-call">Confirming <code>createReactClass</code> call</a></li><li><a href="#hydrated-page">Hydrated page</a></li><li><a href="#conclusions">Conclusions</a></li></ul><!-- tocstop --><p><strong>Note:</strong> the source code for this blog post is in <a href="https://github.com/bahmutov/react-server-example" target="_blank" rel="noopener">bahmutov/react-server-example</a> repository which is a fork of the excellent <a href="https://github.com/mhart/react-server-example" target="_blank" rel="noopener">mhart/react-server-example</a>.</p><h2><span id="ssr-application">SSR application</span></h2><p>If you install dependencies and run this web application, it starts listening on port 3000. For each received request the server returns a rendered markup for a simple list generated using a React component. It also returns props that allow the application to <a href="../hydrate-your-apps/">hydrate client-side</a> and continue from there.</p><p>Here is the returned HTML (I am using my favorite <a href="https://httpie.org/" target="_blank" rel="noopener">httpie</a> instead of <code>curl</code> to fetch the page). Notice both the list items and the <code>window.APP_PROPS</code> in the returned page:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ http localhost:3000</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 676</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Date: Tue, 14 May 2019 01:32:41 GMT</span><br><span class="line"></span><br><span class="line">&lt;body&gt;&lt;div id=&quot;content&quot;&gt;&lt;div data-reactroot=&quot;&quot;&gt;&lt;button disabled=&quot;&quot;&gt;</span><br><span class="line">Add Item&lt;/button&gt;&lt;ul&gt;&lt;li&gt;Item 0&lt;/li&gt;&lt;li&gt;Item 1&lt;/li&gt;&lt;li&gt;Item 2&lt;/li&gt;</span><br><span class="line">&lt;li&gt;Item 3&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;var APP_PROPS = &#123;&quot;items&quot;:[&quot;Item 0&quot;,</span><br><span class="line">&quot;Item 1&quot;,&quot;Item 2&quot;,&quot;Item 3&quot;]&#125;;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react@16.7.0/umd/react.production.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react-dom@16.7.0/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react-dom-factories@1.0.2/index.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/create-react-class@15.6.3/create-react-class.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>How do we test the server-side rendered page using an end-to-end test runner like Cypress.io? The application hydrates, thus if we simply load the page using <code>cy.visit(&#39;http://localhost:3000&#39;)</code> we might be testing the client-side SPA, not the server-rendered one! Here is one possible solution.</p><p>Instead of <a href="https://on.cypress.io" target="_blank" rel="noopener"><code>cy.visit</code></a> we can request the page using <a href="https://on.cypress.io" target="_blank" rel="noopener"><code>cy.request</code></a> just like a regular HTTP resource - forcing the server to render it. The following test shows how to request the page and pick its <code>body</code> property:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders 5 items on the server'</span>, () =&gt; &#123;</span><br><span class="line">  cy.request(<span class="string">'/'</span>).its(<span class="string">'body'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The DevTools console shows the returned HTML page</p><p><img src="/blog/images/ssr-e2e/request-ssr-page.png" alt="Page HTML is returned by the server"></p><h2><span id="check-html">Check HTML</span></h2><p>If we have static HTML we can find the rendered list items. Without bringing any extra libraries like <a href="https://cheerio.js.org/" target="_blank" rel="noopener">cheerio</a> we can use jQuery already bundled with Cypress:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders 5 items on the server'</span>, () =&gt; &#123;</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> $li = Cypress.$(html).find(<span class="string">'li'</span>)</span><br><span class="line">      expect($li)</span><br><span class="line">        .to.have.property(<span class="string">'length'</span>)</span><br><span class="line">        .equal(<span class="number">4</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ssr-e2e/4-li-items.png" alt="Confirm there are 4 items"></p><p>Nice, server is really rendering the expected items - but we don&#39;t see them! Hmm, we can throw the HTML into the application&#39;s iframe (the one that is empty right now)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders 5 items on the server'</span>, () =&gt; &#123;</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> $li = Cypress.$(html).find(<span class="string">'li'</span>)</span><br><span class="line">      expect($li)</span><br><span class="line">        .to.have.property(<span class="string">'length'</span>)</span><br><span class="line">        .equal(<span class="number">4</span>)</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The only problem with this approach - the JavaScript starts running immediately, which we can see by adding a few console log statements to the component life cycle methods.</p><p><img src="/blog/images/ssr-e2e/log.png" alt="Component is running"></p><h2><span id="removing-application-bundle">Removing application bundle</span></h2><p>After we receive the server-side rendered page, but before we stick it into the browser, we can simply remove the application bundle (or even all script tags). Then we can use &quot;normal&quot; Cypress query methods to confirm the expected number of elements - and see them ourselves.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'skips client-side bundle'</span>, () =&gt; &#123;</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// remove the application code bundle</span></span><br><span class="line">      html = html.replace(<span class="string">'&lt;script src="/bundle.js"&gt;&lt;/script&gt;'</span>, <span class="string">''</span>)</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// now we can use "normal" Cypress api to confirm</span></span><br><span class="line">  <span class="comment">// number of list element</span></span><br><span class="line">  cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The page shows the expected elements (highlighted) and the console does not show any messages from the component itself. The button stays disabled, which is another sign that our component has never been activated.</p><p><img src="/blog/images/ssr-e2e/without-bundle.png" alt="Skipped component bundle"></p><h2><span id="disable-component-method">Disable component method</span></h2><p>Instead of removing the application bundle completely, we can just disable some React component lifecycle methods, for example <code>componentDidMount</code>. Here is how we can do it - by being ready when <code>window.createReactClass</code> is called.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'disables component methods from createReactClass'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> createReactClass</span><br><span class="line">  cy.window().then(<span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(win, <span class="string">'createReactClass'</span>, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">definition</span> =&gt;</span> &#123;</span><br><span class="line">          definition.componentDidMount = <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">null</span></span><br><span class="line">          <span class="keyword">return</span> createReactClass(definition)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (fn) &#123;</span><br><span class="line">        createReactClass = fn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line">  cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">  <span class="comment">// since we disabled componentDidMount the button should</span></span><br><span class="line">  <span class="comment">// never become enabled</span></span><br><span class="line">  cy.get(<span class="string">'button'</span>).should(<span class="string">'be.disabled'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ssr-e2e/no-component.png" alt="No more componentDidMount"></p><h2><span id="confirming-createreactclass-call">Confirming <code>createReactClass</code> call</span></h2><p>In the above test we have confirmed that the <code>componentDidMount</code> was called - but only indirectly, by observing the button that has remained disabled. Let&#39;s actually confirm that our dummy no-op function was called once by the React starting up. We can create a <a href="https://on.cypress.io/stub" target="_blank" rel="noopener"><code>cy.stub</code></a> that will be called by the component.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'how to know if componentDidMount was called'</span>, () =&gt; &#123;</span><br><span class="line">  cy.window().then(<span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> createReactClass</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(win, <span class="string">'createReactClass'</span>, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">definition</span> =&gt;</span> &#123;</span><br><span class="line">          definition.componentDidMount = cy.stub().as(<span class="string">'componentDidMount'</span>)</span><br><span class="line">          <span class="keyword">return</span> createReactClass(definition)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (fn) &#123;</span><br><span class="line">        createReactClass = fn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// and then ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, we have a tiny bit of problem with the rest of the test. How do we get to the <code>@componentDidMount</code> alias? We cannot simply assert that it has been called once - because the alias has not been created yet when we try to <code>cy.get</code> it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cy.request(<span class="string">'/'</span>)</span><br><span class="line">  .its(<span class="string">'body'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">    cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// hmm, this throws, because alias "componentDidMount"</span></span><br><span class="line"><span class="comment">// has NOT been registered yet</span></span><br><span class="line">cy.get(<span class="string">'@componentDidMount'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ssr-e2e/cy-get-timing-problem.png" alt="Stub was called, but the test claims it was unavailable"></p><p>Notice that in the test above <code>cy.get(&#39;@componentDidMount&#39;)</code> has failed to find the alias, yet it was later called by the app. That is why the &quot;Spies / Stubs&quot; table shows 1 call. Hmm, how do we wait until an alias has been created before calling <code>cy.get</code> on it? We could just add a 1 second wait - that should be enough, right?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cy.request(<span class="string">'/'</span>)</span><br><span class="line">  .its(<span class="string">'body'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">    cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">  &#125;)</span><br><span class="line">cy.wait(<span class="number">1000</span>)</span><br><span class="line">cy.get(<span class="string">'@componentDidMount'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/ssr-e2e/wait-1-second.png" alt="Wait 1 second - the alias should be there after the delay"></p><p>Of course, this is NOT the way Cypress works - you should not hardcode waits, instead you should just declare a condition to wait for. The test runner then will only wait until the moment the condition becomes satisfied, and not a millisecond longer. To achieve this we can take advantage of <a href="https://on.cypress.io/should#Function" target="_blank" rel="noopener"><code>cy.should(fn)</code></a> that automatically retries the callback function until it passes without throwing an error (or times out).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">it.only(<span class="string">'how to know if componentDidMount was called'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> componentDidMountSet</span><br><span class="line">  cy.window().then(<span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> createReactClass</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(win, <span class="string">'createReactClass'</span>, &#123;</span><br><span class="line">      <span class="keyword">get</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">definition</span> =&gt;</span> &#123;</span><br><span class="line">          definition.componentDidMount = cy.stub().as(<span class="string">'componentDidMount'</span>)</span><br><span class="line">          componentDidMountSet = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">return</span> createReactClass(definition)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span> (fn) &#123;</span><br><span class="line">        createReactClass = fn</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(html)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait until custom assertion passes</span></span><br><span class="line">  cy.wrap(<span class="literal">null</span>).should(<span class="function"><span class="params">()</span> =&gt;</span> expect(componentDidMountSet).to.be.true)</span><br><span class="line">  <span class="comment">// now the alias should exist</span></span><br><span class="line">  cy.get(<span class="string">'@componentDidMount'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This line is the key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.wrap(<span class="literal">null</span>).should(<span class="function"><span class="params">()</span> =&gt;</span> expect(componentDidMountSet).to.be.true)</span><br></pre></td></tr></table></figure><p>It <a href="https://on.cypress.io/retry-ability" target="_blank" rel="noopener">retries</a> until the <code>expect(...).to.be.true</code> passes successfully.</p><p><img src="/blog/images/ssr-e2e/retry.png" alt="Auto-retry until variable is set"></p><p>Notice that auto-retrying is much faster (130ms) than hard-coding 1 second wait, yet works reliably.</p><p>One other way to write a command to wait until a specific condition becomes true (without throwing) is to use <a href="https://github.com/NoriSte/cypress-wait-until" target="_blank" rel="noopener">cypress-wait-until</a> plugin. Using this plugin we can write the same &quot;wait until variable gets its value&quot; like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> componentDidMountSet</span><br><span class="line">...</span><br><span class="line">cy.waitUntil(<span class="function"><span class="params">()</span> =&gt;</span> cy.wrap(componentDidMountSet))</span><br><span class="line">cy.get(<span class="string">'@componentDidMount'</span>).should(<span class="string">'have.been.calledOnce'</span>)</span><br></pre></td></tr></table></figure><h2><span id="hydrated-page">Hydrated page</span></h2><p>Once the web application starts client-side, the markup should not jump or move - the newly rendered DOM should match the static HTML exactly, except the button becomes enabled in our example. Let&#39;s confirm it with the following test:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders same application after hydration'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// technical detail - removes any stubs from previous tests</span></span><br><span class="line">  <span class="comment">// since our application iframe does not get reset</span></span><br><span class="line">  <span class="comment">// (there is no "cy.visit" call to reset it)</span></span><br><span class="line">  <span class="keyword">const</span> win = cy.state(<span class="string">'window'</span>)</span><br><span class="line">  <span class="keyword">delete</span> win.createReactClass</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> pageHtml</span><br><span class="line">  cy.request(<span class="string">'/'</span>)</span><br><span class="line">    .its(<span class="string">'body'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      pageHtml = html</span><br><span class="line">      <span class="comment">// remove bundle script to only have static HTML</span></span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(</span><br><span class="line">        html.replace(<span class="string">'&lt;script src="/bundle.js"&gt;&lt;/script&gt;'</span>, <span class="string">''</span>)</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">4</span>)</span><br><span class="line">  cy.get(<span class="string">'button'</span>).should(<span class="string">'be.disabled'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> staticHTML</span><br><span class="line">  cy.get(<span class="string">'#content'</span>)</span><br><span class="line">    .invoke(<span class="string">'html'</span>)</span><br><span class="line">    <span class="comment">// static HTML before hydration has the "disabled" button attribute</span></span><br><span class="line">    <span class="comment">// we should remove it before comparing to hydrated HTML</span></span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> (staticHTML = html.replace(<span class="string">' disabled=""'</span>, <span class="string">''</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// now mount the full page and let it hydrate</span></span><br><span class="line">    .then(resetDocument)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      cy.state(<span class="string">'document'</span>).write(pageHtml)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// now the page should be live client-side</span></span><br><span class="line">  cy.get(<span class="string">'button'</span>).should(<span class="string">'be.enabled'</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'#content'</span>)</span><br><span class="line">    .invoke(<span class="string">'html'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      expect(html).to.equal(staticHTML)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test runs and confirms that the hydrated page matches the static HTML exactly.</p><p><img src="/blog/images/ssr-e2e/hydrate-test.png" alt="Static vs hydrated HTML test"></p><h2><span id="conclusions">Conclusions</span></h2><p>Using <a href="https://on.cypress.io" target="_blank" rel="noopener">cy.request</a> we can request the server-side rendered page and mount it into the Test Runner&#39;s application iframe for further testing. We can disable client-side functionality to make sure we only see the static HTML before hydration. We can also spy on the client-side application to confirm that it starts correctly, and I have shown how to wait for a variable to get its value before the test continues. Finally, I have shown how to confirm that the static HTML sent by the server is hydrated correctly by the client side application from the <code>APP_PROPS</code> data.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ssr-application&quot;&gt;SSR application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#check-html&quot;&gt;Check HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#removi
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="react" scheme="https://glebbahmutov.com/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Combined End-to-end and Unit Test Coverage</title>
    <link href="https://glebbahmutov.com/blog/combined-end-to-end-and-unit-test-coverage/"/>
    <id>https://glebbahmutov.com/blog/combined-end-to-end-and-unit-test-coverage/</id>
    <published>2019-05-19T04:00:00.000Z</published>
    <updated>2019-06-13T13:37:18.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#e2e-code-coverage-overview">E2E code coverage overview</a></li><li><a href="#the-missing-4">The missing 4%</a></li><li><a href="#combined-coverage">Combined coverage</a></li><li><a href="#see-also">See also</a></li></ul><!-- tocstop --><h2><span id="e2e-code-coverage-overview">E2E code coverage overview</span></h2><p>In my previous blog post <a href="../stub-navigator-api/">&quot;Stub navigator API in end-to-end tests&quot;</a> I have introduced an application that uses navigator browser API to show the battery charge percentage. While exploring the ways to test this application using <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> we have discovered an edge case that caused that web application to crash when running in any browser but Chrome. The edge case is shown below - the application crashes if the <code>battery</code> variable remains undefined by the time <code>window.load</code> tries to attach an event listener.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> battery</span><br><span class="line"><span class="keyword">if</span> (navigator.battery) &#123;</span><br><span class="line">  readBattery(navigator.battery)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.getBattery) &#123;</span><br><span class="line">  navigator.getBattery().then(readBattery)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// edge case!</span></span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'.not-support'</span>).removeAttribute(<span class="string">'hidden'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// WHAT HAPPENS WHEN "battery" IS undefined?</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// show updated status when the battery changes</span></span><br><span class="line">  battery.addEventListener(<span class="string">'chargingchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While Cypress allows writing end-to-end tests with ease, it <em>does not tell us what tests to write</em>. It is up to the person who is developing the web application to know what use cases to cover with end-to-end tests. But code coverage could be a good metric that highlights the untested logical edge cases. In the blog post <a href="../code-coverage-for-e2e-tests/">&quot;Code Coverage for End-to-end Tests&quot;</a> I have shown how to instrument application JavaScript code as a build step. The collected code coverage saved after the end-to-end tests passed makes the missed line really visible.</p><p><img src="/blog/images/battery-coverage/missed-line.png" alt="Missed line"></p><p>Once we add a test to hit this line, we discover the problem in the application code, add a missed guard and make application robust.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// add a guard condition to prevent crashing</span></span><br><span class="line">  <span class="keyword">if</span> (battery) &#123;</span><br><span class="line">    battery.addEventListener(<span class="string">'chargingchange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In another blog post <a href="../code-coverage-by-parcel/">&quot;Code Coverage by Parcel Bundler&quot;</a> I have set up on-the-fly code coverage using the excellent <a href="https://parceljs.org/" target="_blank" rel="noopener">Parcel Bundler</a>. Instead of generating and saving an intermediate instrumented application source, we can instrument the application while serving it. The details will vary depending on the source bundler used, but most bundlers can use <a href="https://www.npmjs.com/package/babel-plugin-istanbul" target="_blank" rel="noopener">babel-plugin-istanbul</a> to instrument ES6 on the fly. In our case, the application&#39;s code will be instrumented because I have added a tiny <code>.babelrc</code> file:</p><figure class="highlight plain"><figcaption><span>.babelrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [&quot;istanbul&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To save the code coverage results correctly, my end-to-end tests are using <a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> plugin - and the tests reach <a href="https://coveralls.io/github/bahmutov/demo-battery-api?branch=bundle" target="_blank" rel="noopener">96% code coverage</a>.</p><h2><span id="the-missing-4">The missing 4%</span></h2><p>Hmm, great, but we are still 4% short of the perfect 100%. If we look at each source file, we can see that missing lines and logical branches are from this utility function <code>toTime</code> that converts number of seconds to <code>hours:minutes</code> string label.</p><p><img src="/blog/images/combined-cc/to-time-coverage.png" alt="toTime function not covered by e2e tests"></p><p>We have missed logical branches when the number of hours has double digits, and we have missed a branch of code when the number of minutes has a single digit. The function <code>toTime</code> is called from another function <code>batteryStats</code> with <code>battery.chargingTime</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">batteryStats</span> (<span class="params">battery</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> percentage = <span class="built_in">parseFloat</span>((battery.level * <span class="number">100</span>).toFixed(<span class="number">2</span>)) + <span class="string">'%'</span></span><br><span class="line">  <span class="keyword">const</span> charging = battery.charging</span><br><span class="line">  <span class="keyword">let</span> fully</span><br><span class="line">  <span class="keyword">let</span> remaining</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (charging &amp;&amp; battery.chargingTime === <span class="literal">Infinity</span>) &#123;</span><br><span class="line">    fully = <span class="string">'Calculating...'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (battery.chargingTime !== <span class="literal">Infinity</span>) &#123;</span><br><span class="line">    fully = toTime(battery.chargingTime)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fully = <span class="string">'---'</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could add end-to-end tests passing <code>battery</code> object that has just the right number in <code>battery.chargingTime</code> property to hit both missed hours and minutes cases. Hmm, but that is so weird - trying to essentially unit test an internal function via end-to-end tests! Instead, let&#39;s cover <code>toTime</code> function with unit tests. Luckily, Cypress can <a href="https://github.com/cypress-io/cypress-example-recipes#unit-testing" target="_blank" rel="noopener">execute unit tests</a> for us.</p><p>I have written <a href="https://github.com/bahmutov/demo-battery-api/blob/cover-unit-tests-3/cypress/integration/utils-spec.js" target="_blank" rel="noopener">cypress/integration/utils-spec.js</a> that imports the function <code>toTime</code> directly and hits all logical branches and statements.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toTime &#125; <span class="keyword">from</span> <span class="string">'../../src/utils'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'toTime'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// hit all if - else branches in the "toTime" function</span></span><br><span class="line"></span><br><span class="line">  it(<span class="string">'handles single digit units'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> hhmm = toTime(<span class="number">0</span>)</span><br><span class="line">    expect(hhmm).to.equal(<span class="string">'00:00'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'handles double digit units'</span>, () =&gt; &#123;</span><br><span class="line">    expect(toTime(<span class="number">36001</span>)).to.equal(<span class="string">'10:00'</span>)</span><br><span class="line">    expect(toTime(<span class="number">601</span>)).to.equal(<span class="string">'00:10'</span>)</span><br><span class="line">    <span class="comment">// there are no seconds in the returned string</span></span><br><span class="line">    <span class="comment">// but we can still cover the logical branches</span></span><br><span class="line">    expect(toTime(<span class="number">20</span>)).to.equal(<span class="string">'00:00'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="combined-coverage">Combined coverage</span></h2><p>Just like that the coverage in this function is complete, but hmm, the new coverage is NOT reflected in the generated code coverage reports - it is as if the unit tests did not contribute anything to the coverage numbers. This is to be expected - because we only collected coverage from <em>the application code loaded by the page during <code>cy.visit</code> command.</em> We never instrumented the <em>unit test</em> code, the code loaded from the spec file.</p><p>Our <code>.babelrc</code> only told our application bundler to instrument the source code, Cypress Test Runner has no idea that it should instrument the spec code - instead Cypress uses its own bundler to process and load code.</p><p>Luckily, we can easily use <strong>the same <code>babel-plugin-istanbul</code> instrumentation</strong> to bundle our spec files (which includes code loaded directly from the spec files) and save the code coverage. Just tell Cypress to use &quot;.babelrc&quot; during bundling. We need to add the following to the <a href="https://github.com/bahmutov/demo-battery-api/blob/cover-unit-tests-3/cypress/plugins/index.js" target="_blank" rel="noopener">cypress/plugins/index.js</a> file.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> browserify = <span class="built_in">require</span>(<span class="string">'@cypress/browserify-preprocessor'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// tell Cypress to use .babelrc when bundling spec code</span></span><br><span class="line">  <span class="keyword">const</span> options = browserify.defaultOptions</span><br><span class="line">  options.browserifyOptions.transform[<span class="number">1</span>][<span class="number">1</span>].babelrc = <span class="literal">true</span></span><br><span class="line">  on(<span class="string">'file:preprocessor'</span>, browserify(options))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Of course, we also need to install <a href="https://github.com/cypress-io/cypress-browserify-preprocessor#readme" target="_blank" rel="noopener">@cypress/browserify-preprocessor</a> npm package for this to work</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev @cypress/browserify-preprocessor</span></span><br></pre></td></tr></table></figure><p>We don&#39;t have to change anything else - <a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> v1.1.0 already knows how to correctly merge code coverage from the application and from unit tests - and saves the combined code coverage report. The spec files themselves are NOT in the report, only the application source files are. The above unit tests cover the <code>toTime</code> function pretty well:</p><p><img src="/blog/images/combined-cc/unit-coverage.png" alt="toTime covered by unit tests"></p><p>What about the rest of the code? Everything gets covered - the DOM updates and battery API code get covered by end-to-end tests, while individual little functions are covered by the unit tests. When <code>cypress-istanbul</code> combines the coverage, it saves the report showing full 100% code coverage.</p><p><img src="/blog/images/combined-cc/full-coverage.png" alt="Full coverage"></p><p>You can also see this coverage report at <a href="https://coveralls.io/github/bahmutov/demo-battery-api?branch=cover-unit-tests-3" target="_blank" rel="noopener">coveralls.io/github/bahmutov/demo-battery-api?branch=cover-unit-tests-3</a>, the coverage information is set by the CI build job. You can find the source code at <a href="https://github.com/bahmutov/demo-battery-api/tree/cover-unit-tests-3" target="_blank" rel="noopener">bahmutov/demo-battery-api</a> repo in branch &quot;cover-unit-tests-3&quot;.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://github.com/bahmutov/code-coverage-webpack-dev-server" target="_blank" rel="noopener">Code coverage using webpack-dev-server example</a></li><li><a href="https://on.cypress.io/code-coverage" target="_blank" rel="noopener">Cypress.io code coverage guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#e2e-code-coverage-overview&quot;&gt;E2E code coverage overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-missing-4&quot;&gt;The missing 4%&lt;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Code Coverage by Parcel Bundler</title>
    <link href="https://glebbahmutov.com/blog/code-coverage-by-parcel/"/>
    <id>https://glebbahmutov.com/blog/code-coverage-by-parcel/</id>
    <published>2019-05-16T04:00:00.000Z</published>
    <updated>2019-06-13T13:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#instrument-code-using-parcel">Instrument code using Parcel</a></li><li><a href="#saving-coverage-information">Saving coverage information</a></li><li><a href="#sending-report-to-coverallsio">Sending report to coveralls.io</a></li><li><a href="#more-information">More information</a></li></ul><!-- tocstop --><p>In my previous blog post <a href="../code-coverage-for-e2e-tests/">&quot;Code Coverage for End-to-end Tests&quot;</a> I have instrumented application source code and collected code coverage during end-to-end tests. This helped guide the end-to-end tests to cover edge cases and discover a logical error in the <a href="../stub-navigator-api/">browser battery api demo</a>. In this post I will show how you can instrument the application source code on the fly without using a separate build step. I will also show how to use a new NPM module <a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> to collect and save code coverage information no matter how the code was instrumented. Finally, I will show how to send the collected coverage information to 3rd party dashboard such as <a href="https://coveralls.io" target="_blank" rel="noopener">coveralls.io</a>.</p><p>You can find the source code in the branch &quot;bundle&quot; of the repo <a href="https://github.com/bahmutov/demo-battery-api/tree/bundle" target="_blank" rel="noopener">bahmutov/demo-battery-api</a> and you can see the code coverage reports at <a href="https://coveralls.io/github/bahmutov/demo-battery-api" target="_blank" rel="noopener">coveralls.io/github/bahmutov/demo-battery-api</a>.</p><p><img src="/blog/images/bundle/builds.png" alt="coveralls.io showing code coverage numbers from several builds"></p><h2><span id="instrument-code-using-parcel">Instrument code using Parcel</span></h2><p>The demo application has <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/index.html" target="_blank" rel="noopener">index.html</a> with the entry script tag <code>&lt;script src=&quot;src/index.js&quot; async&gt;&lt;/script&gt;</code>. That script <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/src/index.js" target="_blank" rel="noopener">src/index.js</a> includes 2 other utility scripts:</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; batteryStats &#125; <span class="keyword">from</span> <span class="string">'./utils'</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderStats &#125; <span class="keyword">from</span> <span class="string">'./dom-utils'</span></span><br></pre></td></tr></table></figure><p>I will serve the <code>index.html</code> using <a href="https://parceljs.org" target="_blank" rel="noopener">Parcel bundler</a>.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"parcel serve index.html"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, I have claimed in the past that <a href="../parcel/">&quot;Parcel is awesome sauce&quot;</a>, and the next example just proves it one more time. If we want to instrument the application JavaScript code, we can use <a href="https://www.npmjs.com/package/babel-plugin-istanbul" target="_blank" rel="noopener">babel-plugin-istanbul</a> - Parcel will load and apply Babel plugins if you have <code>.babelrc</code> file!</p><figure class="highlight plain"><figcaption><span>.babelrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [&quot;istanbul&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We probably do not want to instrument the application code in every situation, only during testing. So more realistic configuration would be <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/.babelrc" target="_blank" rel="noopener">.babelrc</a> with the &quot;istanbul&quot; plugin loaded only if we run the command with test environment like <code>NODE_ENV=test parcel serve index.html</code>:</p><figure class="highlight plain"><figcaption><span>.babelrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;env&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &#123;</span><br><span class="line">      &quot;plugins&quot;: [ &quot;istanbul&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Warning:</strong> the above conditional plugin loading is currently broken in Parcel v1.12.3, there is an open PR <a href="https://github.com/parcel-bundler/parcel/pull/2840" target="_blank" rel="noopener">#2840</a> with a fix.</p><p>When we start the application and open &quot;localhost:1234&quot; we can see that <code>index.js</code> and the 2 files it has imported are bundled into a single resource - and the source has been instrumented to keep track how many times each statement, function and logical branch was executed.</p><p><img src="/blog/images/bundle/instrumented-code.png" alt="Instrumented code"></p><p>Parcel generates the source maps by default, and we can find the original, uninstrumented code in &quot;src&quot; folder</p><p><img src="/blog/images/bundle/source-maps.png" alt="Source maps give us the original source code"></p><p>Super, zero effort on our part and we get coverage counters in the browser when the code runs - but how do we save that coverage object back to disk after the tests? And how do we generate reports?</p><h2><span id="saving-coverage-information">Saving coverage information</span></h2><p>Just like before we need to merge code coverage after each test to pain the complete picture. I have factored out the code into Cypress plugin called <a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> since it should be able to save code coverage as long as it is compatible with <a href="https://istanbul.js.org" target="_blank" rel="noopener">istanbuljs</a> tool. Just install this plugin and its peer dependencies:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D cypress-istanbul nyc istanbul-lib-coverage</span><br></pre></td></tr></table></figure><p>To load the plugin (it uses tasks) add to your <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/cypress/plugins/index.js" target="_blank" rel="noopener">cypress/plugins/index.js</a> file the following</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">'task'</span>, <span class="built_in">require</span>(<span class="string">'cypress-istanbul/task'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and to your <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/cypress/support/index.js" target="_blank" rel="noopener">cypress/support/index.js</a> the following line:</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'cypress-istanbul/support'</span></span><br></pre></td></tr></table></figure><p>And that is it! Open Cypress, select a single spec, for example <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/cypress/integration/battery.js" target="_blank" rel="noopener">cypress/integration/battery.js</a> which runs 2 end-to-end tests. You should see &quot;After all&quot; task that executes <code>nyc report --reporter=html</code> command to generate a friendly static report.</p><p><img src="/blog/images/bundle/html-report.png" alt="HTML code coverage report"></p><p>We can open the detailed view of <code>index.js</code> to see how the first code path <code>readBattery(navigator.battery)</code> was executed twice - because two tests both his this branch path.</p><p><img src="/blog/images/bundle/indexjs-report.png" alt="Code coverage for index.js after running two battery tests"></p><h2><span id="sending-report-to-coverallsio">Sending report to coveralls.io</span></h2><p>We can use the code coverage report locally to direct testing efforts. We can also store the generated report as a test artifact on CI. For example you can find it on each <a href="https://circleci.com/gh/bahmutov/demo-battery-api/tree/bundle" target="_blank" rel="noopener">Circle build</a> - it looks exactly the same as our local report folder.</p><p><img src="/blog/images/bundle/ci-report.png" alt="Code coverage report as CI test artifact"></p><p>But we probably want to analyze long term trends in code coverage, maybe review missed edge cases as a team during code review, etc. We need code coverage as a service - and <a href="https://coveralls.io" target="_blank" rel="noopener">coveralls.io</a> is a good one. Let&#39;s send the code coverage we have collected there. I have linked the demo GitHub repository to the new project <a href="https://coveralls.io/github/bahmutov/demo-battery-api" target="_blank" rel="noopener">https://coveralls.io/github/bahmutov/demo-battery-api</a> and added two environment variables to CircleCI: <code>COVERALLS_SERVICE_NAME=circleci, COVERALLS_REPO_TOKEN=...</code>. After that I have installed NPM module <a href="https://github.com/nickmerwin/node-coveralls#readme" target="_blank" rel="noopener">coveralls</a> - it will send LCOV data to <code>coveralls.io</code> after the test run. All we need is to generate the LCOV report and pipe it to this &quot;coveralls&quot; npm module. In the project&#39;s <a href="https://github.com/bahmutov/demo-battery-api/blob/bundle/circle.yml" target="_blank" rel="noopener">circle.yml</a> file the last steps are:</p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post-steps:</span></span><br><span class="line">  <span class="comment"># store the created coverage report folder</span></span><br><span class="line">  <span class="comment"># you can click on it in the CircleCI UI</span></span><br><span class="line">  <span class="comment"># to see live static HTML site</span></span><br><span class="line"><span class="attr">  - store_artifacts:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">coverage</span></span><br><span class="line">  <span class="comment"># and send coverage data to coveralls.io</span></span><br><span class="line">  <span class="comment"># see https://coveralls.io/github/bahmutov/demo-battery-api</span></span><br><span class="line"><span class="attr">  - run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">coveralls</span></span><br></pre></td></tr></table></figure><p>The <code>coveralls</code> script uses <code>nyc</code> again</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"coveralls"</span>: <span class="string">"nyc report --reporter=text-lcov | coveralls"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Each CI build sends the coverage information - and since <code>cypress run</code> executes and combines ALL spec files, we are hitting 95% code coverage!</p><p><img src="/blog/images/bundle/coveralls-info.png" alt="Coveralls summary"></p><p>We can open individual scripts (Coveralls pulls the sources from GitHub) and see the last missed lines</p><p><img src="/blog/images/bundle/coveralls-index.png" alt="Coveralls index.js coverage"></p><p>Beautiful.</p><h2><span id="more-information">More information</span></h2><ul><li>Source at <a href="https://github.com/bahmutov/demo-battery-api/tree/bundle" target="_blank" rel="noopener">https://github.com/bahmutov/demo-battery-api/tree/bundle</a> (branch &quot;bundle&quot;)</li><li><a href="https://github.com/cypress-io/cypress-istanbul" target="_blank" rel="noopener">cypress-istanbul</a> plugin</li><li><a href="https://coveralls.io/github/bahmutov/demo-battery-api" target="_blank" rel="noopener">https://coveralls.io/github/bahmutov/demo-battery-api</a> dashboard</li><li><a href="../code-coverage-for-e2e-tests/">&quot;Code Coverage for End-to-end Tests&quot;</a> blog post</li><li><a href="../stub-navigator-api/">&quot;Stub navigator API in end-to-end tests&quot;</a> blog post</li><li><a href="https://github.com/bahmutov/code-coverage-webpack-dev-server" target="_blank" rel="noopener">Code coverage using webpack-dev-server example</a></li><li><a href="https://on.cypress.io/code-coverage" target="_blank" rel="noopener">Cypress.io code coverage guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#instrument-code-using-parcel&quot;&gt;Instrument code using Parcel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#saving-coverage-informatio
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Using TypeScript aliases in Cypress tests</title>
    <link href="https://glebbahmutov.com/blog/using-ts-aliases-in-cypress-tests/"/>
    <id>https://glebbahmutov.com/blog/using-ts-aliases-in-cypress-tests/</id>
    <published>2019-05-09T04:00:00.000Z</published>
    <updated>2019-05-10T13:53:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this post I will show how you can write end-to-end tests in TypeScript and how to import from test code your application source files using path aliases like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;greeting&#125; <span class="keyword">from</span> <span class="string">'@app/greeting'</span></span><br></pre></td></tr></table></figure><p>instead of brittle relative paths like this</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;greeting&#125; <span class="keyword">from</span> <span class="string">'../../app/src/greeting'</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> the source code for this blog post is at <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests" target="_blank" rel="noopener">bahmutov/using-ts-aliases-in-cypress-tests</a></p><h2><span id="application">Application</span></h2><p>For this demo I will use a minimal example: just an HTML page <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/index.html" target="_blank" rel="noopener">index.html</a> with some TypeScript code</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"src/app.ts"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The code <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/src/app.ts" target="_blank" rel="noopener">src/app.ts</a> places the greeting imported from <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/src/utils.ts" target="_blank" rel="noopener">src/utils.ts</a> into the DOM</p><figure class="highlight ts"><figcaption><span>src/utils.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> greeting = <span class="string">'Hello World'</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>src/app.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; greeting &#125; <span class="keyword">from</span> <span class="string">"./utils"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerText = greeting</span><br></pre></td></tr></table></figure><p>To serve the app I will use <a href="https://parceljs.org" target="_blank" rel="noopener">Parce bundler</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D parcel-bundler</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"parcel serve index.html"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When I run <code>npm start</code> the page is working as expected at <code>localhost:1234</code></p><p><img src="/blog/images/path-aliases/app.png" alt="Application in action"></p><h2><span id="cypress-tests-in-typescript">Cypress Tests in TypeScript</span></h2><p>We can add <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress end-to-end tests</a> to this project with</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D cypress</span><br><span class="line">+ cypress@3.2.0</span><br></pre></td></tr></table></figure><p>To quickly scaffold everything, I prefer to use my little utility <a href="https://github.com/bahmutov/cly" target="_blank" rel="noopener">@bahmutov/cly</a> which stands for &quot;quickly&quot;. Or maybe it stands for &quot;Cypress CLI&quot;? Who knows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npx @bahmutov/cly init</span><br><span class="line">npx: installed 72 in 6.398s</span><br><span class="line">scaffolding new Cypress project</span><br><span class="line">✅ scaffolded &quot;cypress&quot; folder with a single example spec</span><br><span class="line">you can configure additional options in cypress.json file</span><br><span class="line">see https://on.cypress.io/configuration</span><br></pre></td></tr></table></figure><p>We have <code>cypress.json</code> and <code>cypress</code> folder, let&#39;s change the contents of <code>cypress/integration/spec.js</code> to test our page.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'shows greeting'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:1234'</span>)</span><br><span class="line">  cy.contains(<span class="string">'#app'</span>, <span class="string">'Hello World'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Start the app in one terminal with <code>npm start</code> and open Cypress from another terminal with <code>npx cypress open</code> - the test should be green.</p><p><img src="/blog/images/path-aliases/first-test.png" alt="First test is passing"></p><p>But if we write our application in TypeScript, let&#39;s also write our tests in TypeScript. The simplest way to configure test bundling is by installing <a href="https://github.com/bahmutov/add-typescript-to-cypress" target="_blank" rel="noopener">@bahmutov/add-typescript-to-cypress</a> package. We also need to install TypeScript module itself, and we need Webpack</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @bahmutov/add-typescript-to-cypress typescript webpack</span><br><span class="line">+ typescript@3.4.5</span><br><span class="line">+ @bahmutov/add-typescript-to-cypress@2.0.3</span><br><span class="line">+ webpack@4.31.0</span><br></pre></td></tr></table></figure><p>Super, it even has created a default <code>tsconfig.json</code> file for us</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"node_modules/cypress"</span>,</span><br><span class="line">    <span class="string">"cypress/*/*.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can rename our test file from <code>spec.js</code> to <code>spec.ts</code> - and it should run the same. Since the <code>tsconfig.json</code> file is only necessary for our Cypress tests I will move it into the <code>cypress</code> folder. Do not forget to update the paths in <code>tsconfig.json</code> after moving.</p><h2><span id="sharing-code">Sharing code</span></h2><p>Our application shows the greeting text - and I don&#39;t want to hardcode the string to find in my test code. Instead I think it is ok to load the greeting from the application code. It is simple to do using a relative path.</p><figure class="highlight typescript"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;greeting&#125; <span class="keyword">from</span> <span class="string">'../../src/utils'</span></span><br><span class="line">it(<span class="string">'shows greeting'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:1234'</span>)</span><br><span class="line">  cy.contains(<span class="string">'#app'</span>, greeting).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Nice, but I really dislike the long relative paths that use <code>../..</code> to get out of the Cypress integration folder. Luckily TypeScript and Webpack both have ways to define aliases to use shortcuts. We need TypeScript <a href="https://dev.to/lars124/path-aliases-with-typescript-in-nodejs-4353" target="_blank" rel="noopener">path aliases</a> to make sure our TypeScript tooling (like VSCode IntelliSense) understands the spec files, while <a href="https://webpack.js.org/configuration/resolve/#resolvealias" target="_blank" rel="noopener">Webpack aliases</a> are needed to find the code during bundling.</p><p>Our goal is to refer to all source files by <code>@src/...</code> from our spec files rather than <code>../../src/...</code>.</p><p>In the <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/cypress/tsconfig.json" target="_blank" rel="noopener">cypress/tsconfig.json</a> add <code>baseUrl</code> and <code>paths</code> properties.</p><figure class="highlight json"><figcaption><span>cypress/tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"../node_modules/cypress"</span>,</span><br><span class="line">    <span class="string">"*/*.ts"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">".."</span>,</span><br><span class="line">    <span class="attr">"paths"</span>: &#123;</span><br><span class="line">      <span class="attr">"@src/*"</span>: [<span class="string">"src/*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nice, now we can import <code>greeting</code> from the test file like this</p><figure class="highlight typescript"><figcaption><span>cypress/integration/spec.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;greeting&#125; <span class="keyword">from</span> <span class="string">'@src/utils'</span></span><br></pre></td></tr></table></figure><p>VSCode can resolve the alias correctly, as shown by this popup</p><p><img src="/blog/images/path-aliases/path-alias.png" alt="Path alias is working in TypeScript"></p><p>But if we try to run Cypress test right now, we will get a nasty error</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./cypress/integration/spec.ts</span><br><span class="line">Module not found: Error: Can&apos;t resolve &apos;@src/utils&apos; in &apos;/Users/gleb/git/using-ts-aliases-in-cypress-tests/cypress/integration&apos;</span><br><span class="line">resolve &apos;@src/utils&apos; in &apos;/Users/gleb/git/using-ts-aliases-in-cypress-tests/cypress/integration&apos;</span><br><span class="line">  Parsed request is a module</span><br><span class="line">  ... goes on for 50 lines</span><br></pre></td></tr></table></figure><p>This is due to the fact that Webpack bundler does not know about the path aliases in <code>tsconfig.json</code>. The simplest way is to tell Webpack how to <a href="https://webpack.js.org/configuration/resolve/#resolvealias" target="_blank" rel="noopener">alias modules</a> by prefix. In file <a href="https://github.com/bahmutov/using-ts-aliases-in-cypress-tests/blob/master/cypress/plugins/cy-ts-preprocessor.js" target="_blank" rel="noopener">cypress/plugins/cy-ts-preprocessor.js</a> add the following <code>alias</code> object to the existing <code>resolve</code> block:</p><figure class="highlight js"><figcaption><span>cypress/plugins/cy-ts-preprocessor.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackOptions = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.ts'</span>, <span class="string">'.js'</span>],</span><br><span class="line">    <span class="comment">// add the alias object</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@src'</span>: path.resolve(__dirname, <span class="string">'../../src'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That is it, our tests can share code with application without fragile folder hops.</p><h2><span id="see-also">See also</span></h2><ul><li><a href="https://www.cypress.io/blog/2018/11/14/testing-redux-store/" target="_blank" rel="noopener">Testing Redux Store</a></li><li><a href="../use-typescript-with-cypress/">Use TypeScript With Cypress</a></li><li><a href="https://github.com/bahmutov/add-typescript-to-cypress" target="_blank" rel="noopener">bahmutov/add-typescript-to-cypress</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this post I will show how you can write end-to-end tests in TypeScript and how to import from test code your application source files 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="typescript" scheme="https://glebbahmutov.com/blog/tags/typescript/"/>
    
  </entry>
  
</feed>
