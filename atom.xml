<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Better world by better software</title>
  
  <subtitle>Gleb Bahmutov PhD</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://glebbahmutov.com/blog/"/>
  <updated>2018-10-02T13:31:55.000Z</updated>
  <id>https://glebbahmutov.com/blog/</id>
  
  <author>
    <name>Gleb Bahmutov</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mocking GraphQL with Lunar in Cypress End-to-End Tests</title>
    <link href="https://glebbahmutov.com/blog/mock-graphql-with-lunar-in-cypress-tests/"/>
    <id>https://glebbahmutov.com/blog/mock-graphql-with-lunar-in-cypress-tests/</id>
    <published>2018-10-01T04:00:00.000Z</published>
    <updated>2018-10-02T13:31:55.000Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#server-setup">Server setup</a></li><li><a href="#end-to-end-tests">End-to-end Tests</a></li><li><a href="#show-graphql-requests">Show GraphQL requests</a></li><li><a href="#wait-on-graphql-call">Wait on GraphQL call</a></li><li><a href="#show-graphql-response">Show GraphQL response</a></li><li><a href="#using-decoded-blob-values">Using decoded Blob values</a></li><li><a href="#limits">Limits</a></li><li><a href="#final-thoughts">Final thoughts</a></li></ul><!-- tocstop --><p><a href="http://www.reactboston.com/" target="_blank" rel="noopener">ReactBoston</a> was in town this weekend. While I have not attended, I saw lots of tweets about it. One of the tweets from <a href="https://twitter.com/swyx" target="_blank" rel="noopener">@swyx</a> caught my eye:</p><p><img src="/blog/images/lunar/tweet.png" alt="https://twitter.com/swyx/status/1046482557997584386"></p><p>I have recently spoke at Boston <a href="https://www.meetup.com/boston_JS/events/253882536/" target="_blank" rel="noopener">JS meetup hosted by ezCater</a> but I don&#39;t think I had pleasure speaking to <a href="https://twitter.com/mama_bau" target="_blank" rel="noopener">Hillary Bauer @mama_bau</a> or <a href="https://twitter.com/markjfaga" target="_blank" rel="noopener">Mark Faga @markjfaga</a>. But if you check out their presentation at <a href="https://github.com/mjfaga/react-boston-2018-lunar-launch" target="_blank" rel="noopener">https://github.com/mjfaga/react-boston-2018-lunar-launch</a> - it includes the complete example project and slides. They show how to solve a hard problem - mock a GraphQL backend from end-to-end tests. For the test runner they have picked <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a> of course - the open source test runner I work on!</p><p>So I was intrigued, especially because we don&#39;t have a good recommended way of stubbing GraphQL requests - it is coming as part of <a href="https://github.com/cypress-io/cypress/issues/687" target="_blank" rel="noopener">network stubbing rewrite</a>. So I took a look at the example project, and I loved what I saw. For this blog I forked the repo to <a href="https://github.com/bahmutov/react-boston-2018-lunar-launch" target="_blank" rel="noopener">https://github.com/bahmutov/react-boston-2018-lunar-launch</a> because I want to show some other tricks you can play to make e2e tests even better.</p><h2><span id="server-setup">Server setup</span></h2><p>By default you should start GraphQL API (runs on port 3001) and the front end site (runs on port 3000). First, you see list of users.</p><p><img src="/blog/images/lunar/users.png" alt="List of users"></p><p>Clicking on any username shows the list of favorite foods. For the first user the list shows</p><p><img src="/blog/images/lunar/first-user.png" alt="First user"></p><p>Note that this data is generated by the <a href="https://github.com/Marak/Faker.js#readme" target="_blank" rel="noopener">Faker</a> module in <a href="https://github.com/bahmutov/react-boston-2018-lunar-launch/blob/master/mocks/mocks.js" target="_blank" rel="noopener">mocks/mocks.js</a></p><figure class="highlight js"><figcaption><span>mocks/mocks.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable import/no-commonjs */</span></span><br><span class="line"><span class="keyword">const</span> &#123;MockList&#125; = <span class="built_in">require</span>(<span class="string">'apollo-server'</span>);</span><br><span class="line"><span class="keyword">const</span> faker = <span class="built_in">require</span>(<span class="string">'faker'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mocks = &#123;</span><br><span class="line">  FoodItem: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    name: faker.helpers.randomize([</span><br><span class="line">      <span class="string">'Chocolate Ice Cream'</span>,</span><br><span class="line">      <span class="string">'Peppers'</span>,</span><br><span class="line">      <span class="string">'Hummus'</span>,</span><br><span class="line">      <span class="string">'Sushi'</span>,</span><br><span class="line">      <span class="string">'Eggs Benedict'</span>,</span><br><span class="line">      <span class="string">'Pad Se Ew'</span>,</span><br><span class="line">    ]),</span><br><span class="line">  &#125;),</span><br><span class="line">  User: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    name: faker.name.findName(),</span><br><span class="line">    favoriteFoods: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> MockList(<span class="number">5</span>),</span><br><span class="line">  &#125;),</span><br><span class="line">  Query: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    users: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> MockList(<span class="number">3</span>),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mocks;</span><br></pre></td></tr></table></figure><p>Every time the GraphQL server starts, a new list of users is generated, and the order of foods is scrambled, which plays havoc with end-to-end tests.</p><h2><span id="end-to-end-tests">End-to-end Tests</span></h2><p>The tests were written using <a href="https://on.cypress.io" target="_blank" rel="noopener">Cypress.io</a> - which runs a real browser (Electron or Chrome) and shows the test steps on the left. You can find the tests in spec file <a href="https://github.com/bahmutov/react-boston-2018-lunar-launch/blob/master/cypress/integration/AddFavoriteFoodToUser.spec.js" target="_blank" rel="noopener">cypress/integration/AddFavoriteFoodToUser.spec.js</a> file. To execute tests have the application and API running and open Cypress with <code>npx cypress open</code> command. Then click on the spec filename <code>AddFavoriteFoodToUser.spec.js</code> and enjoy the fast running tests.</p><p><img src="/blog/images/lunar/lunar-example.gif" alt="Running tests"></p><p>These are true end-to-end tests - they load the app in the browser, click on DOM elements, type into input elements and assert the application shows the expected value after it fetches the data from the server. But the tests always pass, even if the data the server generates changes. How does it do it?</p><p>Let us take a look at the very first test - because it is the most interesting one. Here it is:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders the correct number of food items for the user'</span>, () =&gt; &#123;</span><br><span class="line">  cy.mock(&#123;</span><br><span class="line">    Query: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      user: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">        favoriteFoods: [</span><br><span class="line">          &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Spaghetti'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'WEEKLY'</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Coconut Water'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'DAILY'</span>&#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Navigate to page</span></span><br><span class="line">  cy.visit(<span class="string">'http://localhost:3000/user/1'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Validate page content</span></span><br><span class="line">  cy.get(<span class="string">'h2'</span>).contains(<span class="string">'favorite foods:'</span>);</span><br><span class="line">  cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>);</span><br><span class="line">  cy.contains(<span class="string">'li'</span>, <span class="string">'I like to eat Spaghetti on a weekly basis'</span>);</span><br><span class="line">  cy.contains(<span class="string">'li'</span>, <span class="string">'I like to eat Coconut Water on a daily basis'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>When the test starts, the test sends a GraphQL <em>mock</em> to the server using custom <code>cy.mock</code> command. Here is what this command looks like (from <a href="https://github.com/bahmutov/react-boston-2018-lunar-launch/blob/8701255ac066883ad1deb2a188465f51b596a1c7/cypress/support/commands.js" target="_blank" rel="noopener">cypress/support/commands.js</a> file)</p><figure class="highlight js"><figcaption><span>cypress/support/commands.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> host = <span class="string">'http://localhost:3001'</span>;</span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">'store'</span>, method =&gt; &#123;</span><br><span class="line">  cy.request(<span class="string">'POST'</span>, <span class="string">`<span class="subst">$&#123;host&#125;</span>/store/<span class="subst">$&#123;method&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Cypress.Commands.add(<span class="string">'mock'</span>, mocks =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> serializedMocks = <span class="built_in">Object</span>.keys(mocks).reduce(</span><br><span class="line">    (packet, key) =&gt; <span class="built_in">Object</span>.assign(packet, &#123;[key]: mocks[key].toString()&#125;),</span><br><span class="line">    &#123;&#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  cy.request(<span class="string">'POST'</span>, <span class="string">`<span class="subst">$&#123;host&#125;</span>/store/mock`</span>, serializedMocks);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The application GraphQL server loads <a href="https://github.com/ezcater/lunar-express#readme" target="_blank" rel="noopener">lunar-express</a> middleware, which exposes <code>/store/&lt;method&gt;</code> and <code>/store/mock</code> endpoints. Before each test our tests invoke <code>cy.store(&#39;reset&#39;)</code> command from <a href="https://github.com/bahmutov/react-boston-2018-lunar-launch/blob/8701255ac066883ad1deb2a188465f51b596a1c7/cypress/support/index.js" target="_blank" rel="noopener">cypress/support/index.js</a> file</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./commands'</span>;</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> cy.store(<span class="string">'reset'</span>));</span><br></pre></td></tr></table></figure><p>and before we visit the page we send mock GraphQL definitions with <code>cy.mock</code> to the server adding them to the resolvers.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inside a test</span></span><br><span class="line">cy.mock(&#123;</span><br><span class="line">  Query: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    user: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      favoriteFoods: [</span><br><span class="line">        &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Spaghetti'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'WEEKLY'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Coconut Water'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'DAILY'</span>&#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>When the app asks for data, it receives this mock data, the same 2 foods every time, no matter what the user id is. This is why the test can visit page <code>/users/1</code> and expect the DOM to always contain &quot;Spaghetti&quot; and &quot;Coconut Water&quot;, assuming the application logic uses the GraphQL response correctly.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// after cy.mock</span></span><br><span class="line"><span class="comment">// Navigate to page</span></span><br><span class="line">cy.visit(<span class="string">'http://localhost:3000/user/1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Validate page content</span></span><br><span class="line">cy.get(<span class="string">'h2'</span>).contains(<span class="string">'favorite foods:'</span>);</span><br><span class="line">cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>);</span><br><span class="line">cy.contains(<span class="string">'li'</span>, <span class="string">'I like to eat Spaghetti on a weekly basis'</span>);</span><br><span class="line">cy.contains(<span class="string">'li'</span>, <span class="string">'I like to eat Coconut Water on a daily basis'</span>);</span><br></pre></td></tr></table></figure><p>Great! Let us improve this test a little bit. And these improvements are not because the above code is bad - not at all. The mocking and tests are 100% solid, I love them. The improvements are further refinements that will make the tests a little bit tighter, but not fundamentally different.</p><h2><span id="show-graphql-requests">Show GraphQL requests</span></h2><p>When we look at the command report on the left side of Cypress, we can see that there were two requests to the server using <code>cy.request</code> and there was an XHR call to <code>/sockjs-node</code>. Cool, but where is the GraphQL request our application under test made? To see what happens, open DevTools and rerun the tests.</p><p><img src="/blog/images/lunar/xhr-calls.png" alt="XHR calls"></p><p>Notice that the call we <em>do see</em> to <code>/sockjs-node</code> is of type <code>xhr</code>, while the GraphQL call is of type <code>json</code>. Well, the <a href="https://github.com/cypress-io/cypress/issues/687" target="_blank" rel="noopener"><code>json</code> calls are invisible to Cypress</a> for now, just like any non-<code>xhr</code> call. So we need a way around it. The simplest way is to <em>remove <code>window.fetch</code></em> from our browser and force GraphQL client to fall back to XHR. There is an entire <a href="https://github.com/cypress-io/cypress-example-recipes#stubbing-windowfetch" target="_blank" rel="noopener">Cypress recipe</a> showing different ways of doing this. In our case we can react to <a href="https://on.cypress.io/catalog-of-events" target="_blank" rel="noopener"><code>window:before:load</code></a> event in <code>cypress/support/index.js</code> file.</p><figure class="highlight js"><figcaption><span>cypress/support/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./commands'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cypress does not stub "fetch" yet, only XHR</span></span><br><span class="line"><span class="comment">// here we delete window.fetch on every page load</span></span><br><span class="line"><span class="comment">// GraphQL client is thus forced to polyfill with XHR</span></span><br><span class="line">Cypress.on(<span class="string">'window:before:load'</span>, win =&gt; &#123;</span><br><span class="line">  <span class="keyword">delete</span> win.fetch</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> cy.store(<span class="string">'reset'</span>));</span><br></pre></td></tr></table></figure><p>Now &quot;magically&quot; the <code>POST /graphql</code> calls appear in the command log.</p><p><img src="/blog/images/lunar/graphql-xhr.png" alt="GraphQL XHR call"></p><h2><span id="wait-on-graphql-call">Wait on GraphQL call</span></h2><p>Now that our tests can &quot;see&quot; the GraphQL call from the application, we can make the test more precise. We can make our test wait for that call to happen, before we start checking the DOM. We will start observing XHR calls using <a href="https://on.cypress.io/server" target="_blank" rel="noopener"><code>cy.server</code></a> and will setup spy on route <code>POST /graphql</code> using <a href="https://on.cypress.io/route" target="_blank" rel="noopener"><code>cy.route</code></a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'renders the correct number of food items for the user'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// cy.mock here</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// spy on GraphQL call</span></span><br><span class="line">  cy.server()</span><br><span class="line">  cy.route(<span class="string">'POST'</span>, <span class="string">'/graphql'</span>).as(<span class="string">'graphql'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Navigate to page</span></span><br><span class="line">  cy.visit(<span class="string">'http://localhost:3000/user/1'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait for GraphQL call to happen</span></span><br><span class="line">  cy.wait(<span class="string">'@graphql'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Validate page content</span></span><br><span class="line">  cy.get(<span class="string">'h2'</span>).contains(<span class="string">'favorite foods:'</span>);</span><br><span class="line">  <span class="comment">// the rest ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The command log has a new section on the top with all XHR spies and shows when the matching request happens</p><p><img src="/blog/images/lunar/wait.png" alt="Wait on GraphQL XHR call"></p><h2><span id="show-graphql-response">Show GraphQL response</span></h2><p>We can see the <code>WAIT @graphql</code> command in the log, but when we click on that command (while DevTools is open) we don&#39;t really get to inspect the response. It is just a <code>Blob</code> object</p><p><img src="/blog/images/lunar/blob.png" alt="Response is a Blob"></p><p>I would like to print the decoded returned value in the DevTools when I click on <code>WAIT @graphql</code> command. To do this, we can add a custom command like this</p><figure class="highlight js"><figcaption><span>cypress/support/commands.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(<span class="string">'blob'</span>, alias =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> cy.wait(alias, &#123;<span class="attr">log</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> Cypress._.get(r, <span class="string">'response.body'</span>))</span><br><span class="line">    .then(Cypress.Blob.blobToBase64String)</span><br><span class="line">    .then(<span class="function"><span class="params">x</span> =&gt;</span> atob(x))</span><br><span class="line">    .then(<span class="built_in">JSON</span>.parse)</span><br><span class="line">    .then(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">      Cypress.log(&#123;</span><br><span class="line">        name: <span class="string">'wait blob'</span>,</span><br><span class="line">        displayName: <span class="string">`Wait <span class="subst">$&#123;alias&#125;</span>`</span>,</span><br><span class="line">        consoleProps: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> x</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> x</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Note: I am using <code>.then(r =&gt; Cypress._.get(r, &#39;response.body&#39;))</code> and not <code>.its(&#39;response.body&#39;)</code> because <code>.then</code> calls do NOT show up in the command log, while <code>.its</code> calls always do. Since I want to only show <code>Cypress.log</code> output, I am using the longer callback function to avoid extra printing.</p><p>Now when we see <code>Wait @graphql</code> in the command log, we can click on it and see the response object</p><p><img src="/blog/images/lunar/see-blob.png" alt="Decoded Blob"></p><h2><span id="using-decoded-blob-values">Using decoded Blob values</span></h2><p>Now that we have decoded response from the Blob, we can actually confirm that the Lunar mock server is sending the expected values. For example, we could extract the names and frequencies of foods from the Blob and check them.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wait for GraphQL call to happen and check food items</span></span><br><span class="line">cy.blob(<span class="string">'@graphql'</span>).its(<span class="string">'data.user.favoriteFoods'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">list</span> =&gt;</span> Cypress._.map(list, x =&gt;</span><br><span class="line">    (&#123;<span class="attr">name</span>: x.foodItem.name, <span class="attr">eatingFrequency</span>: x.eatingFrequency&#125;)))</span><br><span class="line">  <span class="comment">// should be same values as in GraphQL mock</span></span><br><span class="line">  .should(<span class="string">'deep.equal'</span>, [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'Spaghetti'</span>, <span class="attr">eatingFrequency</span>: <span class="string">'WEEKLY'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'Coconut Water'</span>, <span class="attr">eatingFrequency</span>: <span class="string">'DAILY'</span>&#125;</span><br><span class="line">  ])</span><br></pre></td></tr></table></figure><p>It is just massaging the data using <a href="https://lodash.com/docs/" target="_blank" rel="noopener">Lodash</a> helpers bundled in <a href="https://on.cypress.io/_" target="_blank" rel="noopener">Cypress._</a>.</p><p>Or we can just grab the user name and use it to validate the heading text</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wait for GraphQL call to happen and grab user the name</span></span><br><span class="line">cy.blob(<span class="string">'@graphql'</span>).its(<span class="string">'data.user.name'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Validate page content</span></span><br><span class="line">    cy.contains(<span class="string">'h2'</span>, <span class="string">`<span class="subst">$&#123;name&#125;</span>'s favorite foods:`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">cy.get(<span class="string">'li'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>);</span><br><span class="line">cy.contains(<span class="string">'li'</span>, <span class="string">'I like to eat Spaghetti on a weekly basis'</span>);</span><br><span class="line">cy.contains(<span class="string">'li'</span>, <span class="string">'I like to eat Coconut Water on a daily basis'</span>);</span><br></pre></td></tr></table></figure><p>Note that we get the <code>name</code> value in the callback, and then use it to validate <code>h2</code> element, but we don&#39;t need to put all other commands like <code>cy.get</code> or <code>cy.contains</code> into the <code>.then</code> callback. Cypress commands are queued automatically into the same queue. <code>cy.get(&#39;li&#39;)</code> will only run after <code>cy.then(...)</code> completes, which completes only when <code>cy.contains(&#39;h2&#39;, ...)</code> passes.</p><p><img src="/blog/images/lunar/use-name.png" alt="Use returned name to verify DOM"></p><h2><span id="limits">Limits</span></h2><p>The custom command <code>cy.mock</code> serializes the given mock object and sends it to the backend. Thus it can pass value like <code>name</code> for example if it is hard-coded property.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cy.mock(&#123;</span><br><span class="line">  Query: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    user: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      name: <span class="string">'Joe Smith'</span>,</span><br><span class="line">      favoriteFoods: [</span><br><span class="line">        &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Spaghetti'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'WEEKLY'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Coconut Water'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'DAILY'</span>&#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>but not if it is a variable outside the function&#39;s immediate closure</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'Joe Smith'</span></span><br><span class="line">cy.mock(&#123;</span><br><span class="line">  Query: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    user: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">      name,</span><br><span class="line">      favoriteFoods: [</span><br><span class="line">        &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Spaghetti'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'WEEKLY'</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">foodItem</span>: &#123;<span class="attr">name</span>: <span class="string">'Coconut Water'</span>&#125;, <span class="attr">eatingFrequency</span>: <span class="string">'DAILY'</span>&#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/blog/images/lunar/error.png" alt="Cannot use variables from outside the closure"></p><p>So you are limited to getting the data from the decoded GraphQL response or duplicate data between the mock and the rest of the test.</p><h2><span id="final-thoughts">Final thoughts</span></h2><p>Absolutely hands down I recommend <a href="https://github.com/ezcater/lunar-core#readme" target="_blank" rel="noopener">lunar-core</a> for mocking GraphQL endpoints for end-to-end tests. You can find all above code from this post in <a href="https://github.com/bahmutov/react-boston-2018-lunar-launch" target="_blank" rel="noopener">https://github.com/bahmutov/react-boston-2018-lunar-launch</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#server-setup&quot;&gt;Server setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#end-to-end-tests&quot;&gt;End-to-end Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="graphql" scheme="https://glebbahmutov.com/blog/tags/graphql/"/>
    
  </entry>
  
  <entry>
    <title>Good logging</title>
    <link href="https://glebbahmutov.com/blog/good-logging/"/>
    <id>https://glebbahmutov.com/blog/good-logging/</id>
    <published>2018-09-27T04:00:00.000Z</published>
    <updated>2018-10-01T13:35:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Logging is hard. Here is my advice:</p><h3><span id="use-debug-module">Use <code>debug</code> module.</span></h3><p>Module <a href="https://github.com/visionmedia/debug#readme" target="_blank" rel="noopener"><code>debug</code></a> is <em>extremely</em> useful because it allows to dynamically turn on messages from various modules. All my NPM modules use it with convention <code>DEBUG=&#39;module name&#39;</code> to turn on messages for a particular module.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> x = <span class="number">42</span></span><br><span class="line">debug(<span class="string">'x ='</span>, x)</span><br></pre></td></tr></table></figure><p>By default the above program prints nothing. But if we turn on <code>debug</code> logging for module <code>foo</code> we see one log line</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo node .</span></span><br><span class="line">  foo x = 42 +0ms</span><br></pre></td></tr></table></figure><p>By default, if the terminal supports it, <code>debug</code> uses terminal colors to highlight log messages coming from different files, making visual scanning the logs a breeze.</p><h3><span id="format-statements">Format statements</span></h3><p>Instead of letting <code>debug</code> or <code>console.log</code> pick the &quot;best&quot; representation of the arguments, explicitly set the format for each. For example:</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> x = <span class="number">42.123</span></span><br><span class="line"><span class="comment">// prints "x" as an integer</span></span><br><span class="line">debug(<span class="string">'x = %i'</span>, x)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo node .</span></span><br><span class="line">  foo x = 42 +0ms</span><br></pre></td></tr></table></figure><p>Main format placeholders to remember (see <a href="https://nodejs.org/api/util.html#util_util_format_format_args" target="_blank" rel="noopener">Node documentation</a>):</p><ul><li><code>%s</code> - String.</li><li><code>%d</code> - Number (integer or floating point value).</li><li><code>%i</code> - Integer.</li><li><code>%f</code> - Floating point value.</li><li><code>%j</code> - JSON. Replaced with the string &#39;[Circular]&#39; if the argument contains circular references.</li><li><code>%o</code> - Object. A string representation of an object with generic JavaScript object formatting.</li></ul><p>If in doubt - use <code>%j</code> to print value serialized as JSON.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">foo</span>: &#123;<span class="attr">bar</span>: <span class="string">'baz'</span>&#125;&#125;</span><br><span class="line">debug(<span class="string">'x = %j'</span>, x)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo node .</span></span><br><span class="line">  foo x = &#123;"foo":&#123;"bar":"baz"&#125;&#125; +0ms</span><br></pre></td></tr></table></figure><p>Another format I like is <code>%o</code> that outputs argument as a JavaScript object, which to me is easier to quickly scan.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">foo</span>: &#123;<span class="attr">bar</span>: <span class="string">'baz'</span>&#125;&#125;</span><br><span class="line">debug(<span class="string">'x = %o'</span>, x)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo node .</span></span><br><span class="line">  foo x = &#123; foo: &#123; bar: 'baz' &#125; &#125; +0ms</span><br></pre></td></tr></table></figure><h3><span id="control-the-nesting-depth">Control the nesting depth</span></h3><p>If an object has properties nested deeper than default threshold, <code>%o</code> serialization can cut it off</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">foo</span>: &#123;<span class="attr">bar</span>: &#123;<span class="attr">q</span>: &#123;<span class="attr">x</span>: &#123;<span class="attr">y</span>: <span class="string">'baz'</span>&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">debug(<span class="string">'x = %o'</span>, x)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo node .</span></span><br><span class="line">  foo x = &#123; foo: &#123; bar: &#123; q: [Object] &#125; &#125; &#125; +0ms</span><br></pre></td></tr></table></figure><p>Luckily, <code>debug</code> module can read environment variable <code>DEBUG_DEPTH</code> to control the depth threshold</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo DEBUG_DEPTH=10 node .</span></span><br><span class="line">  foo x = &#123; foo: &#123; bar: &#123; q: &#123; x: &#123; y: 'baz' &#125; &#125; &#125; &#125; &#125; +0ms</span><br></pre></td></tr></table></figure><h3><span id="do-not-use-consolelog">Do not use <code>console.log</code></span></h3><p>So <code>console.log</code> has a problem with <code>%o</code> - it does not override depth threshold using an environment variable, and also it does NOT print the entire message on a single line. I will make the property names artificially long to show the problem</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">thisIsPropertyFoo</span>: &#123;<span class="attr">thisIsPropertyBar</span>: &#123;<span class="attr">thisIsPropertyQ</span>: &#123;<span class="attr">thisIsPropertyX</span>: &#123;<span class="attr">y</span>: <span class="string">'baz'</span>&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">debug(<span class="string">'x = %o'</span>, x)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'x = %o'</span>, x)</span><br></pre></td></tr></table></figure><p>Compare the first message from <code>debug</code> to the second message from <code>console.log</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo DEBUG_DEPTH=10 node .</span></span><br><span class="line">  foo x = &#123; thisIsPropertyFoo: &#123; thisIsPropertyBar: &#123; thisIsPropertyQ: &#123; thisIsPropertyX: &#123; y: 'baz' &#125; &#125; &#125; &#125; &#125; +0ms</span><br><span class="line">x = &#123; thisIsPropertyFoo:</span><br><span class="line">   &#123; thisIsPropertyBar: &#123; thisIsPropertyQ: &#123; thisIsPropertyX: &#123; y: 'baz' &#125; &#125; &#125; &#125; &#125;</span><br></pre></td></tr></table></figure><p>Notice how <code>console.log</code> has split the output into 2 lines. This is bad for external logging tools - because they will treat separate lines as separate messages, breaking context and search.</p><h3><span id="replace-consolelog-with-debug">Replace <code>console.log</code> with <code>debug</code></span></h3><p>There are two differences between <code>console.log</code> and <code>debug</code>. First, <code>debug</code> by default writes to STDERR stream, while <code>console.log</code> writes to STDOUT stream. This usually is not very crucial.</p><p>Second, <code>console.log</code> messages are ON by default, while <code>debug</code> messages are only enabled via an environment variable (or programmatically). Thus we need a way to <em>always</em> print some messages using <code>debug</code> API. Luckily this is easy to do.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> alwaysLog = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'*'</span>)</span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">foo</span>: &#123;<span class="attr">bar</span>: <span class="string">'baz'</span>&#125;&#125;</span><br><span class="line">debug(<span class="string">'x = %o'</span>, x)</span><br><span class="line">alwaysLog(<span class="string">'value x = %o'</span>, x)</span><br></pre></td></tr></table></figure><p>Running with <code>DEBUG=foo</code> environment variable prints everything</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo node .</span></span><br><span class="line">  foo x = &#123; foo: &#123; bar: 'baz' &#125; &#125; +0ms</span><br><span class="line">  * value x = &#123; foo: &#123; bar: 'baz' &#125; &#125; +0ms</span><br></pre></td></tr></table></figure><p>Running without <code>DEBUG</code> environment variable prints the second message only</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node .</span></span><br><span class="line">  * value x = &#123; foo: &#123; bar: 'baz' &#125; &#125; +0ms</span><br></pre></td></tr></table></figure><h3><span id="log-details-under-namespace">Log details under namespace</span></h3><p>In addition to module messages, you can log details useful to debugging using namespaces. For example</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> debugX = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo:x'</span>)</span><br><span class="line"><span class="keyword">const</span> x = &#123;<span class="attr">foo</span>: &#123;<span class="attr">bar</span>: <span class="string">'baz'</span>&#125;&#125;</span><br><span class="line">debugX(<span class="string">'value x = %o'</span>, x)</span><br><span class="line">debug(<span class="string">'have x'</span>)</span><br></pre></td></tr></table></figure><p>By default we log high level debug messages only</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo node .</span></span><br><span class="line">  foo have x +0ms</span><br></pre></td></tr></table></figure><p>But if there is some problem, we can debug it printing the value <code>x</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo:x node .</span></span><br><span class="line">  foo:x value x = &#123; foo: &#123; bar: 'baz' &#125; &#125; +0ms</span><br></pre></td></tr></table></figure><p>Finally, we can print all messages with <code>foo</code> prefix using a wildcard</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> DEBUG=foo* node .</span></span><br><span class="line">  foo:x value x = &#123; foo: &#123; bar: 'baz' &#125; &#125; +0ms</span><br><span class="line">  foo have x +0ms</span><br></pre></td></tr></table></figure><h3><span id="expose-debug-function-as-a-module-method">Expose debug function as a module method</span></h3><p>To simplify debugging, if a file exports an object, you can attach the <code>debug</code> function to that object. This will significantly simplify unit testing. Make sure to call <code>debug</code> via <em>method reference</em> and not directly.</p><figure class="highlight js"><figcaption><span>foo.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'foo'</span>)</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sum = a + b</span><br><span class="line">  <span class="comment">// call `debug` via method reference!</span></span><br><span class="line">  api.debug(<span class="string">'sum %d'</span>, sum)</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> api = &#123;</span><br><span class="line">  add,</span><br><span class="line">  debug</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = api</span><br></pre></td></tr></table></figure><p>Now you can easily spy / stub <code>api.debug</code> from your unit tests using <a href="https://sinonjs.org/" target="_blank" rel="noopener">sinon.js</a> for example.</p><figure class="highlight js"><figcaption><span>test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> api = <span class="built_in">require</span>(<span class="string">'./foo'</span>)</span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  sinon.stub(api, <span class="string">'debug'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  api.debug.restore()</span><br><span class="line">&#125;)</span><br><span class="line">it(<span class="string">'computes sum'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = api.add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">  expect(result).to.equal(<span class="number">5</span>)</span><br><span class="line">  expect(api.debug).to.have.been.calledOnceWithExactly(<span class="string">'sum %d'</span>, <span class="number">5</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3><span id="log-promise-from-promise-chains">Log promise from promise chains</span></h3><p>To better log intermediate values in promise chains, I usually use <a href="https://ramdajs.com/docs/#tap" target="_blank" rel="noopener"><code>R.tap</code></a> with an extra function to ensure logging the entire object in a single line.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'api'</span>)</span><br><span class="line"><span class="keyword">const</span> debugOneLine = <span class="function">(<span class="params">x</span>) =&gt;</span> debug(<span class="string">'%o'</span>, x)</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">// returns a promise</span></span><br><span class="line">  .then(R.tap(debugOneLine)) <span class="comment">// log resolved value and pass it along</span></span><br><span class="line">  .then(...) <span class="comment">// use resolved value</span></span><br></pre></td></tr></table></figure><p>If you use <a href="http://bluebirdjs.com" target="_blank" rel="noopener">Bluebird</a> promise library, it already has <a href="http://bluebirdjs.com/docs/api/tap.html" target="_blank" rel="noopener"><code>.tap</code></a> and <a href="http://bluebirdjs.com/docs/api/tapCatch.html" target="_blank" rel="noopener"><code>.tapCatch</code></a> methods on its promises</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'bluebird'</span>)</span><br><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'api'</span>)</span><br><span class="line"><span class="keyword">const</span> debugOneLine = <span class="function">(<span class="params">x</span>) =&gt;</span> debug(<span class="string">'%o'</span>, x)</span><br><span class="line">foo() <span class="comment">// returns a Bluebird promise instance</span></span><br><span class="line">  .tap(debugOneLine) <span class="comment">// logs the resolved value</span></span><br><span class="line">  .tapCatch(debugOneLine) <span class="comment">// logs the error</span></span><br><span class="line">  <span class="comment">// continue with the promise as usual</span></span><br></pre></td></tr></table></figure><h3><span id="log-values-from-tests">Log values from tests</span></h3><p>To simplify debugging failed tests I use namespace <code>test</code> inside unit and end-to-end tests.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'test'</span>)</span><br><span class="line">it(<span class="string">'works'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = foo()</span><br><span class="line">  debug(result)</span><br><span class="line">  assert(...)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Whenever the test fails, I can run it with <code>DEBUG=test npm t</code> to see the <code>result</code> variable. I do not care much for single line output because these logs are only used for debugging tests and not for production.</p><h2><span id="related">Related</span></h2><p>I will also consider switching from human-readable to JSON-by-default format using super fast <a href="https://getpino.io/" target="_blank" rel="noopener">pino</a> logger, especially because it has <code>debug</code> compatible module <a href="https://github.com/pinojs/pino-debug" target="_blank" rel="noopener">pino-debug</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Logging is hard. Here is my advice:&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;use-debug-module&quot;&gt;Use &lt;code&gt;debug&lt;/code&gt; module.&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;Module &lt;a href=&quot;http
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Solving JS equality game with Cypress test runner</title>
    <link href="https://glebbahmutov.com/blog/js-equality-game/"/>
    <id>https://glebbahmutov.com/blog/js-equality-game/</id>
    <published>2018-09-18T04:00:00.000Z</published>
    <updated>2018-09-18T03:54:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today a game has appeared that shows how tricky JavaScript <code>==</code> operator can be. You can check out the game yourself at <a href="https://slikts.github.io/js-equality-game/" target="_blank" rel="noopener">https://slikts.github.io/js-equality-game/</a>. You have to fill the field by clicking every cell where the row and column labels are equal when using <code>==</code> operator. For example <code>true == 1</code> in JavaScript, so you should click that cell. Whenever you click on a cell, the symmetric cell is also checked, because <code>true == 1</code> implies <code>1 == true</code> (at least JavaScript got this part right).</p><p><img src="/blog/images/js-equality-game/js-equality-game.png" alt="JS equality game"></p><p>I got to admit, JavaScript equality as Minesweeper has been my jok for a long time, for example in this <a href="https://slides.com/bahmutov/fun-javascript-workshop" target="_blank" rel="noopener">&quot;Functional JavaScript&quot; workshop</a> from 2016 I start with these two slides</p><p><img src="/blog/images/js-equality-game/equality-slides.png" alt="Minesweeper and equality"></p><p>I don&#39;t even think that equality is that bad - the inequality <code>&lt;</code> operator table looks scarier!</p><p><img src="/blog/images/js-equality-game/less-than-table.png" alt="JavaScript &lt; operator"></p><p>Anyway, how do we solve the <code>js-equality</code> game? We have to click a lot of cells, set the flags, then click on &quot;Show Results&quot; and hope we got all the true statements selected. Doing this by hand does seem tiresome. If only we could automate this ...</p><p>Enter <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress</a> - the end-to-end testing tool I am working on with bunch of <a href="https://www.cypress.io/about/" target="_blank" rel="noopener">awesome people</a>. Let&#39;s use Cypress to drive the game. I will use Cypress because it is super powerful whenever something needs to be tested in a browser, and also because we can see it in action. Just <code>npm i -D cypress</code> and we are ready to rumble.</p><p>You can find the complete project in <a href="https://github.com/bahmutov/js-equality-game" target="_blank" rel="noopener">https://github.com/bahmutov/js-equality-game</a> repo.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:bahmutov/js-equality-game.git</span><br><span class="line">cd js-equality-game</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>Once we open Cypress for the first time using <code>npx cypress open</code>, it scaffolds the folder <code>cypress</code>. We can start a test file <code>cypress/integration/spec.js</code> and the first thing we should do - is just visit the game&#39;s page.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'js-equality'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'https://slikts.github.io/js-equality-game'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Open Cypress with <code>npx cypress open</code> ... and see a cross-origin request error.</p><p><img src="/blog/images/js-equality-game/cross-origin-error.png" alt="Cross-origin request"></p><p>No biggie, this is just a font request to <code>fonts.gstatic.com</code>, we can solve this error by disabling <a href="https://on.cypress.io/configuration#Browser" target="_blank" rel="noopener"><code>chromeWebSecurity</code></a> setting in <code>cypress.json</code></p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"viewportWidth"</span>: <span class="number">1400</span>,</span><br><span class="line">  <span class="attr">"viewportHeight"</span>: <span class="number">1200</span>,</span><br><span class="line">  <span class="attr">"chromeWebSecurity"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Great, no more errors. Let us start coding. First we need to grab values to compare. We can grab these values from the header cells of the table. Just use <code>cy.get(&#39;thead th&#39;)</code> and iterate over the elements, pushing values into a list.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line">it(<span class="string">'js-equality'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'https://slikts.github.io/js-equality-game'</span>)</span><br><span class="line">  <span class="comment">// get all values to compare</span></span><br><span class="line">  <span class="keyword">let</span> values = []</span><br><span class="line">  cy.get(<span class="string">'thead th'</span>)</span><br><span class="line">    .each(<span class="function">(<span class="params">el$</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!el$.text()) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// only '&#123;&#125;' gives back undefined, but should be an empty object &#123;&#125;</span></span><br><span class="line">      values.push(<span class="built_in">eval</span>(el$.text()))</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'%d value(s) to compare'</span>, values.length)</span><br><span class="line">      <span class="built_in">console</span>.log(values)</span><br><span class="line">      assert(values.length &gt; <span class="number">0</span>, <span class="string">'expected some values to compare'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Here is where this solution falls short: one of the labels has an empty object <code>{}</code> which evaluates to <code>undefined</code> in the expression <code>eval(&#39;{}&#39;)</code>, hmm. You can see the evaluated values in the DevTools console; all values are correct except for this one.</p><p><img src="/blog/images/js-equality-game/values.png" alt="Evaluated thead cells"></p><p>We could &quot;fix&quot; this using an <code>if / else</code> condition, but I left this shortcoming in. This will actually test how the game handles missed values, we expect NOT to get 100% right.</p><p>Whenever Cypress grabs DOM elements, it saves DOM snapshots with real elements. Thus we can click on any command in the Cypress command log and see <em>real</em> elements printed in the DevTools console. Hover or click on them and the browser highlights the actual element in the application.</p><p><img src="/blog/images/js-equality-game/header-cell.png" alt="Hovering over DOM snapshot element"></p><p>Great, we got (almost) all values to compare, now let&#39;s actually play. We need to iterate over all cells in the game grid, and for each compute <code>row label value == column label value</code>. If the expression is true, we should click that cell. Here is how I wrote it:</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get values</span></span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">'tbody td'</span>).each(<span class="function">(<span class="params">cell$, k</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> row = <span class="built_in">Math</span>.floor(k / values.length)</span><br><span class="line">    <span class="keyword">const</span> col = k % values.length</span><br><span class="line">    <span class="keyword">if</span> (col &lt;= row) &#123;</span><br><span class="line">      <span class="comment">// only interested in filling the upper right triangle of the field</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> x = values[row]</span><br><span class="line">    <span class="keyword">const</span> y = values[col]</span><br><span class="line">    <span class="built_in">console</span>.log(x, <span class="string">'=='</span>, y, <span class="string">'?'</span>, x == y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">      <span class="comment">// click on the cell</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The command <code>cy.get(&#39;tbody td&#39;)</code> returns all cells in the table, and we can iterate over them using <a href="https://on.cypress.io/each" target="_blank" rel="noopener"><code>.each</code></a> command. From the index <code>k</code> that goes from 0 to 440 we can get the row and column coordinates of the cell, and grab the values to compare</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> row = <span class="built_in">Math</span>.floor(k / values.length)</span><br><span class="line"><span class="keyword">const</span> col = k % values.length</span><br><span class="line"><span class="keyword">if</span> (col &lt;= row) &#123;</span><br><span class="line">  <span class="comment">// only interested in filling the upper right triangle of the field</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = values[row]</span><br><span class="line"><span class="keyword">const</span> y = values[col]</span><br><span class="line"><span class="built_in">console</span>.log(x, <span class="string">'=='</span>, y, <span class="string">'?'</span>, x == y)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/js-equality-game/iterate-over-grid.png" alt="Iterating over the cells"></p><p>If value <code>x</code> is equal to value <code>y</code> after casting we should click on that cell. Since we get a real element, we can just wrap it with Cypress and call <a href="https://on.cypress.io/click" target="_blank" rel="noopener"><code>click</code></a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x, <span class="string">'=='</span>, y, <span class="string">'?'</span>, x == y)</span><br><span class="line"><span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">  <span class="comment">// click on the cell</span></span><br><span class="line">  cy.wrap(cell$).click()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Great, but here is where we should be cautious and remember that our test runner has NO idea what the web application is doing under the hood. If we click cells <em>really really</em> quickly without checking that the app has registered clicks, we can get a flaky test, where some clicks are <em>not registered</em>. So every time we click, we should make sure the app has processed our action. The simplest observable UI change on each click is the &quot;flag&quot; counter.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clicks = <span class="number">0</span></span><br><span class="line">cy.get(<span class="string">'tbody td'</span>).each(<span class="function">(<span class="params">cell$, k</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> row = <span class="built_in">Math</span>.floor(k / values.length)</span><br><span class="line">  <span class="keyword">const</span> col = k % values.length</span><br><span class="line">  <span class="keyword">if</span> (col &lt;= row) &#123;</span><br><span class="line">    <span class="comment">// only interested in filling the upper right triangle of the field</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> x = values[row]</span><br><span class="line">  <span class="keyword">const</span> y = values[col]</span><br><span class="line">  <span class="built_in">console</span>.log(x, <span class="string">'=='</span>, y, <span class="string">'?'</span>, x == y)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">    <span class="comment">// click on the cell</span></span><br><span class="line">    cy.wrap(cell$).click()</span><br><span class="line">    <span class="comment">// and make sure the field has registered our click</span></span><br><span class="line">    clicks += <span class="number">1</span></span><br><span class="line">    cy.contains(<span class="string">'.Results-flags .Score'</span>, clicks)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Cypress clicks on every cell with <code>x == y</code> passing, and then waits long enough for the flag counter to change. All Cypress actions are enqueued automatically, thus <code>cy.contains(...)</code> waits until <code>cy.wrap(...).click()</code> finishes successfully.</p><p>Now it is time to finish and reveal our score.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// click on the grid cells</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.log(<span class="string">'time to find out the truth ...'</span>)</span><br><span class="line">  cy.contains(<span class="string">'Show Results'</span>).click()</span><br><span class="line">  <span class="comment">// because we cannot `eval(&#123;&#125;)` correctly, we miss 9% of the grade 🙃</span></span><br><span class="line">  cy.contains(<span class="string">'.Results-face'</span>, <span class="string">'91% correct'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We get the right answer! When we click on <code>cy.contains(&#39;Show Results&#39;).click()</code> command in the reporter on the left, it shows that there are &quot;before&quot; and &quot;after&quot; DOM snapshots. Cypress notices when a command modifies the DOM and stores two snapshots in these cases, allowing the user to inspect how the command changes the user interface.</p><p><img src="/blog/images/js-equality-game/show-results-before-click.png" alt="Before clicking &quot;Show Results&quot;"></p><p><img src="/blog/images/js-equality-game/show-results-after-click.png" alt="After clicking &quot;Show Results&quot;"></p><p>It is a good time to note that Cypress includes full video recording by default, so I can show the script in action using <code>npx cypress run</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">$ npx cypress run</span><br><span class="line"></span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Starting)</span><br><span class="line"></span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ Cypress:    3.1.0                                                                              │</span><br><span class="line">  │ Browser:    Electron 59 (headless)                                                             │</span><br><span class="line">  │ Specs:      1 found (spec.js)                                                                  │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br><span class="line">  Running: spec.js...                                                                      (1 of 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ✓ js-equality (4711ms)</span><br><span class="line"></span><br><span class="line">  1 passing (6s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  (Results)</span><br><span class="line"></span><br><span class="line">  ┌─────────────────────────┐</span><br><span class="line">  │ Tests:        1         │</span><br><span class="line">  │ Passing:      1         │</span><br><span class="line">  │ Failing:      0         │</span><br><span class="line">  │ Pending:      0         │</span><br><span class="line">  │ Skipped:      0         │</span><br><span class="line">  │ Screenshots:  0         │</span><br><span class="line">  │ Video:        true      │</span><br><span class="line">  │ Duration:     6 seconds │</span><br><span class="line">  │ Spec Ran:     spec.js   │</span><br><span class="line">  └─────────────────────────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  (Video)</span><br><span class="line"></span><br><span class="line">  - Started processing:   Compressing to 1 CRF</span><br><span class="line">  - Finished processing:  /private/tmp/test-mine/cypress/videos/spec.js.mp4 (0 seconds)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Finished)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Spec                                                Tests  Passing  Failing  Pending  Skipped</span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ ✔ spec.js                                   00:06        1        1        -        -        - │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">    All specs passed!                           00:06        1        1        -        -        -</span><br></pre></td></tr></table></figure><p>Here is the video file - it was a quick game 😄</p><p><img src="/blog/images/js-equality-game/js-equality.gif" alt="JS equality game - tested"></p><h2><span id="more-info">More info</span></h2><ul><li><a href="https://www.cypress.io" target="_blank" rel="noopener">www.cypress.io</a></li><li><a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">github.com/cypress-io/cypress</a></li><li><a href="https://www.cypress.io/blog/" target="_blank" rel="noopener">Cypress blog</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today a game has appeared that shows how tricky JavaScript &lt;code&gt;==&lt;/code&gt; operator can be. You can check out the game yourself at &lt;a hre
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Set flag to start tests</title>
    <link href="https://glebbahmutov.com/blog/set-flag-to-start-tests/"/>
    <id>https://glebbahmutov.com/blog/set-flag-to-start-tests/</id>
    <published>2018-09-07T04:00:00.000Z</published>
    <updated>2018-09-07T04:45:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine your web application (especially in development mode) is slow to start. Maybe it is loading a lot of code, or asking an under-powered server for data. But it does not start working right away. If your end-to-end test runner does not know about it, it might try to start running the tests too soon. Here is a typical TodoMVC app <a href="https://github.com/bahmutov/todomvc-with-delay" target="_blank" rel="noopener">bahmutov/todomvc-with-delay</a> that only starts running 2.5 seconds after the page loads.</p><figure class="highlight js"><figcaption><span>todomvc/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> startApp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do the app stuff</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// if you want to expose "app" globally only</span></span><br><span class="line">    <span class="comment">// during end-to-end tests you can guard it using "window.Cypress" flag</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">      <span class="built_in">window</span>.app = app</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'app has started'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// start application after an artificial delay</span></span><br><span class="line">  setTimeout(startApp, <span class="number">2500</span>)</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><p>And here is a typical Cypress test that enters two items and tried to verify that the list has two items.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addItem = <span class="function"><span class="params">text</span> =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>).type(<span class="string">`<span class="subst">$&#123;text&#125;</span>&#123;enter&#125;`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'waits for app to start'</span>, () =&gt; &#123;</span><br><span class="line">  addItem(<span class="string">'first item'</span>)</span><br><span class="line">  addItem(<span class="string">'second item'</span>)</span><br><span class="line">  cy.get(<span class="string">'li.todo'</span>).should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When we run this app, the test fails - the input field shows the jumbled text; the app is NOT ready to react to the user input!</p><p><img src="/blog/images/todomvc-with-delay/too-soon.gif" alt="Tests start too soon, before the app is ready"></p><h2><span id="property-is-added">Property is added</span></h2><p>We want our test runner to <em>wait</em> until the <code>window</code> object has property <code>app</code>. The Chai assertion just writes itself - and Chai is <a href="http://on.cypress.io/assertions" target="_blank" rel="noopener">bundled with Cypress</a>, and it should work with the object returned by <a href="https://on.cypress.io/widow" target="_blank" rel="noopener"><code>cy.window()</code></a> command.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  cy.window().should(<span class="string">'have.property'</span>, <span class="string">'app'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/todomvc-with-delay/app-property.gif" alt="Tests start when the `app` property is added to the object returned by `cy.window()`"></p><p>👉 <strong>important</strong> - every assertion in Cypress automatically retries previous command if possible, see <a href="https://on.cypress.io/should" target="_blank" rel="noopener"><code>should</code> documentation</a>. Thus a single line <code>cy.window().should(...)</code> executes command <code>cy.window()</code> multiple times, until the assertion immediately after it passes, or it times out.</p><h2><span id="property-changes-value">Property changes value</span></h2><p>If there is a flag on the <code>window</code> from the very beginning that changes its value when the app is ready to be tested, we can write assertion in other ways. For example we can use assertion <code>have.property &lt;name&gt; &lt;expected value&gt;</code> against <code>cy.window()</code>.</p><figure class="highlight js"><figcaption><span>todomvc/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> startApp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do the app stuff</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">      <span class="comment">// change appReady property</span></span><br><span class="line">      <span class="built_in">window</span>.appReady = <span class="literal">true</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'app has started'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the initial flag right away</span></span><br><span class="line">  <span class="built_in">window</span>.appReady = <span class="literal">false</span></span><br><span class="line">  <span class="comment">// start application after an artificial delay</span></span><br><span class="line">  setTimeout(startApp, <span class="number">2500</span>)</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  <span class="comment">//                    assertion      prop name  value</span></span><br><span class="line">  cy.window().should(<span class="string">'have.property'</span>, <span class="string">'appReady'</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Alternatively, we can take the <code>cy.window()</code> result, get specific property using <a href="https://on.cypress.io/its" target="_blank" rel="noopener"><code>its()</code></a> and then assert its value.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  cy.window().its(<span class="string">'appReady'</span>).should(<span class="string">'equal'</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Again, the last action <code>its</code> will be retried until the assertion passes or times out.</p><h2><span id="stale-references">Stale references</span></h2><p>The only place you can get into a weird situation is if the entire object changes, while your test keeps holding an old &quot;orphan&quot; reference, and retries getting its property and checking its value.</p><figure class="highlight js"><figcaption><span>todomvc/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> startApp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do the app stuff</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.Cypress) &#123;</span><br><span class="line">      <span class="comment">// ⚠️ overwrite window.config object</span></span><br><span class="line">      <span class="built_in">window</span>.config = &#123;</span><br><span class="line">        appReady: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'app has started'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.config = &#123;</span><br><span class="line">    appReady: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// start application after an artificial delay</span></span><br><span class="line">  setTimeout(startApp, <span class="number">2500</span>)</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><p>Notice how <code>window.config</code> is replaced with a new object when the application is ready. What happens if we already <em>have</em> a reference to <code>window.config</code> in our test?</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  cy.window().its(<span class="string">'config'</span>).its(<span class="string">'appReady'</span>).should(<span class="string">'equal'</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Assertion <code>.should(&#39;equal&#39;, true)</code> <strong>only</strong> retries its immediate previous command, in this case <code>its(&#39;appReady&#39;)</code>, which keeps using <code>window.config</code> object we got right away. When the application code replaces <code>window.config</code> with a new object, our test still keeps checking the stale &quot;orphan&quot; object, and the test times out.</p><p><img src="/blog/images/todomvc-with-delay/orphan-object.png" alt="Test times out because it keeps checking stale object"></p><p>Luckily for us, Cypress has enough tricks up its sleeve to solve this problem in a couple of ways. For example, we can use a different Chai assertion to avoid even using <code>its</code> commands and retrying <code>cy.window()</code> command!</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  cy.window().should(<span class="string">'have.deep.property'</span>, <span class="string">'config.appReady'</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Alternatively, we can rely on the fact that <code>cy.its</code> uses <code>Lodash.get</code> function under the hood, which allows getting (safely) deep properties</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  cy.window().its(<span class="string">'config.appReady'</span>).should(<span class="string">'equal'</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/todomvc-with-delay/deep-property.png" alt="Checking deep property"></p><p>Both ways work just fine. If you want to see more examples of asserting when properties are added / deleted / changed, check out <a href="https://github.com/cypress-io/cypress-example-recipes/commit/9d75842c18535d691f7c717186b5a855e004674e#diff-1f0349eb597d2c41384216c1ffb4c517" target="_blank" rel="noopener">this commit</a> with example tests.</p><h2><span id="conclusion">Conclusion</span></h2><p>Exposing some flag from the application to let your tests work better is good practice in my opinion. I have shown ways to set a flag in the application code, which tests can detect reliably. If you <em>do not</em> have control over the application code, you can still detect when the application starts reacting to DOM events, but that is a little bit <a href="https://www.cypress.io/blog/2018/02/05/when-can-the-test-start/" target="_blank" rel="noopener">more complicated</a>. Yet it can be done, because Cypress lets your test code inspect, observe and mock any application code, including browser APIs. But to make your life easier, use a flag for slowly starting apps!</p><p>Find all source code from this post in <a href="https://github.com/bahmutov/todomvc-with-delay" target="_blank" rel="noopener">bahmutov/todomvc-with-delay</a> and don&#39;t forget to give <a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">cypress-io/cypress</a> a GitHub ⭐️.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine your web application (especially in development mode) is slow to start. Maybe it is loading a lot of code, or asking an under-pow
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Run and group tests the way you want to</title>
    <link href="https://glebbahmutov.com/blog/run-and-group-tests/"/>
    <id>https://glebbahmutov.com/blog/run-and-group-tests/</id>
    <published>2018-09-03T04:00:00.000Z</published>
    <updated>2018-09-03T14:42:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post will show how to get a &quot;typical&quot; CI/CD pipeline set up that is fast yet powerful. The final pipeline will:</p><ul><li>runs all tests quickly on CI server using load balancing with <code>--parallel</code> option</li><li>deploys app to the production environment</li><li>runs just a few smoke tests against the production url</li><li>groups all tests and smoke tests under a single run in Cypress Dashboard for clarity</li></ul><h2><span id="the-app">The app</span></h2><p>Here is an example TodoMVC test project - <a href="https://github.com/bahmutov/todomvc" target="_blank" rel="noopener">bahmutov/todomvc</a> which is copied from <a href="https://github.com/cypress-io/cypress-example-todomvc" target="_blank" rel="noopener">cypress-io/todomvc</a>. A typical Cypress test that adds two items and verifies that there are two items in the list looks like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/integration/first.js</span></span><br><span class="line">it(<span class="string">'adds 2 todos'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  cy.get(<span class="string">'.new-todo'</span>)</span><br><span class="line">    .type(<span class="string">'learn testing&#123;enter&#125;'</span>)</span><br><span class="line">    .type(<span class="string">'be cool&#123;enter&#125;'</span>)</span><br><span class="line">  cy.get(<span class="string">'.todo-list li'</span>)</span><br><span class="line">    .should(<span class="string">'have.length'</span>, <span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When running Cypress in the interactive mode (<code>cypress open</code>) we can see each command and how the DOM looked during that moment.</p><p><img src="/blog/images/run-and-group/add-2-todos.png" alt="First test"></p><p>Writing tests with Cypress is easy - and a typical <a href="http://todomvc.com/" target="_blank" rel="noopener">TodoMVC app</a> needs them! Pretty soon I can write tests that exercise all aspects of a typical TodoMVC app - adding and editing items, routing, etc, putting 30 tests into <code>cypress/integration/app.js</code></p><p><img src="/blog/images/run-and-group/app.png" alt="All tests"></p><h2><span id="running-tests-locally">Running tests locally</span></h2><p>In order to run the tests we need to start the local server. There is NPM script that starts the server - we can call it from one terminal <code>npm start</code> and the server runs at <code>localhost:8888</code>. Cypress knows about this url because I put it in the <code>cypress.json</code> file:</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:8888"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Great, but I don&#39;t want to remember to start a server just to run the tests, and I always forget to shut it down after the tests finish. So I use a utility I wrote called <a href="https://github.com/bahmutov/start-server-and-test" target="_blank" rel="noopener">start-server-and-test</a>. It executes &quot;npm start&quot;, waits until port 8888 responds, then runs the &quot;npm test&quot; command - which runs the headless tests. Here are the scripts</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"http-server -p 8888 -c-1 --silent"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"cypress run"</span>,</span><br><span class="line">    <span class="attr">"test:ci"</span>: <span class="string">"start-test 8888"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Whenever I want to run all tests headlessly I can execute <code>npm run test:ci</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ npm run test:ci</span><br><span class="line"></span><br><span class="line">&gt; todomvc@1.0.0 test:ci /Users/gleb/git/todomvc</span><br><span class="line">&gt; start-test 8888</span><br><span class="line"></span><br><span class="line">starting server using command &quot;npm run start&quot;</span><br><span class="line">and when url &quot;http://localhost:8888&quot; is responding</span><br><span class="line">running tests using command &quot;test&quot;</span><br><span class="line"></span><br><span class="line">&gt; todomvc@1.0.0 start /Users/gleb/git/todomvc</span><br><span class="line">&gt; http-server -p 8888 -c-1 --silent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; todomvc@1.0.0 test /Users/gleb/git/todomvc</span><br><span class="line">&gt; cypress run</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==============================================================================</span><br><span class="line"></span><br><span class="line">  (Run Starting)</span><br><span class="line"></span><br><span class="line">  ┌──────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ Cypress:    3.1.0                                                        │</span><br><span class="line">  │ Browser:    Electron 59 (headless)                                       │</span><br><span class="line">  │ Specs:      2 found (app.js, first.js)                                   │</span><br><span class="line">  └──────────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  (Run Finished)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Spec                         Tests  Passing  Failing  Pending  Skipped</span><br><span class="line">  ┌──────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ ✔ app.js              00:31       28       28        -        -        - │</span><br><span class="line">  ├──────────────────────────────────────────────────────────────────────────┤</span><br><span class="line">  │ ✔ first.js            00:01        1        1        -        -        - │</span><br><span class="line">  └──────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">    All specs passed!</span><br></pre></td></tr></table></figure><p>That is how I run the tests locally</p><h2><span id="running-tests-on-ci">Running tests on CI</span></h2><p>Cypress works great on <a href="https://on.cypress.io/continuous-integration" target="_blank" rel="noopener">any CI</a>. I like <a href="https://circleci.com/" target="_blank" rel="noopener">CircleCI</a> for its simplicity and flexibility, so I set up Circle run for this open source projects and wrote <a href="https://github.com/bahmutov/todomvc/blob/master/circle.yml" target="_blank" rel="noopener">circle.yml</a> file. For now it is just a workflow with a single job that installs dependencies including Cypress binary, then runs the tests. We need to cache <code>~/.npm</code> and <code>~/.cache</code> folders for each build to start quickly. The <code>build</code> job passes all installed files to the <code>test-locally</code> job via <a href="https://circleci.com/blog/deep-diving-into-circleci-workspaces/" target="_blank" rel="noopener">CircleCI workspaces</a>.</p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line"><span class="attr">  working_directory:</span> <span class="string">~/app</span></span><br><span class="line"><span class="attr">  docker:</span></span><br><span class="line"><span class="attr">    - image:</span> <span class="string">cypress/base:10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">checkout</span></span><br><span class="line">      <span class="comment"># find compatible cache from previous build,</span></span><br><span class="line">      <span class="comment"># it should have same dependencies installed from package.json checksum</span></span><br><span class="line"><span class="attr">      - restore_cache:</span></span><br><span class="line"><span class="attr">          keys:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">cache-&#123;&#123;</span> <span class="string">.Branch</span> <span class="string">&#125;&#125;-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">"package.json"</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">      - run:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line"><span class="attr">          command:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">      <span class="comment"># run verify and then save cache.</span></span><br><span class="line">      <span class="comment"># this ensures that the Cypress verified status is cached too</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="attr">cy:verify</span></span><br><span class="line">      <span class="comment"># save new cache folder if needed</span></span><br><span class="line"><span class="attr">      - save_cache:</span></span><br><span class="line"><span class="attr">          key:</span> <span class="string">cache-&#123;&#123;</span> <span class="string">.Branch</span> <span class="string">&#125;&#125;-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">"package.json"</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          paths:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">~/.npm</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">~/.cache</span></span><br><span class="line">      <span class="comment"># all other test jobs will run AFTER this build job finishes</span></span><br><span class="line">      <span class="comment"># to avoid reinstalling dependencies, we persist the source folder "app"</span></span><br><span class="line">      <span class="comment"># and the Cypress binary to workspace, which is the fastest way</span></span><br><span class="line">      <span class="comment"># for Circle jobs to pass files</span></span><br><span class="line"><span class="attr">      - persist_to_workspace:</span></span><br><span class="line"><span class="attr">          root:</span> <span class="string">~/</span></span><br><span class="line"><span class="attr">          paths:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">app</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">.cache/Cypress</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  test-locally:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line">      <span class="comment"># restore application and Cypress binary before running the test command</span></span><br><span class="line"><span class="attr">      - attach_workspace:</span></span><br><span class="line"><span class="attr">          at:</span> <span class="string">~/</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="attr">test:ci</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  build_and_test:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">build</span></span><br><span class="line"><span class="attr">      - test-locally:</span></span><br><span class="line"><span class="attr">          requires:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">build</span></span><br></pre></td></tr></table></figure><p>Great, Circle runs the tests, and they pass ... and I don&#39;t see videos or error screenshots. I need to <a href="http://on.cypress.io/dashboard-service" target="_blank" rel="noopener">set up test recording on Cypress Dashboard</a>. Once I do this, and set <code>CYPRESS_RECORD_KEY</code> environment variable on Circle, I need to change my commands to execute <code>cypress run --record</code>. My full set of scripts becomes larger</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"http-server -p 8888 -c-1 --silent"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"cypress run"</span>,</span><br><span class="line">    <span class="attr">"test:ci"</span>: <span class="string">"start-test 8888"</span>,</span><br><span class="line">    <span class="attr">"test:ci:record"</span>: <span class="string">"start-test 8888 cy:record"</span>,</span><br><span class="line">    <span class="attr">"cy:run"</span>: <span class="string">"cypress run"</span>,</span><br><span class="line">    <span class="attr">"cy:record"</span>: <span class="string">"cypress run --record"</span>,</span><br><span class="line">    <span class="attr">"cy:open"</span>: <span class="string">"cypress open"</span>,</span><br><span class="line">    <span class="attr">"cy:verify"</span>: <span class="string">"cypress verify"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And the Circle script command becomes <code>npm run test:ci:record</code>. Great, I can see the video of the run and CLI output at <a href="https://dashboard.cypress.io/#/projects/r9294v/runs/1/specs" target="_blank" rel="noopener">https://dashboard.cypress.io/#/projects/r9294v/runs/1/specs</a>. Hmm, interesting, both tests ran on a single Circle machine.</p><p><img src="/blog/images/run-and-group/one-machine.png" alt="Two tests, one machine"></p><p>Can we run 2 tests on 2 machines in parallel?</p><h2><span id="parallelization">Parallelization</span></h2><p>Recently we have added <a href="https://on.cypress.io/parallelization" target="_blank" rel="noopener">test parallelization</a> to Cypress tests. To load balance all our specs across 2 machines, we need:</p><ul><li>tell Circle to give us 2 machines. Luckily we just need to set <code>parallelization: 2</code> in <code>circle.yml</code> file like this when we define a job:</li></ul><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">test-locally:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line">  <span class="comment"># run this job on 2 machines at once</span></span><br><span class="line"><span class="attr">  parallelism:</span> <span class="number">2</span> <span class="comment"># &lt;===== add this line!</span></span><br><span class="line"><span class="attr">  steps:</span></span><br><span class="line">    <span class="comment"># restore application and Cypress binary before running the test command</span></span><br><span class="line"><span class="attr">    - attach_workspace:</span></span><br><span class="line"><span class="attr">        at:</span> <span class="string">~/</span></span><br><span class="line"><span class="attr">    - run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="attr">test:ci:record</span></span><br></pre></td></tr></table></figure><ul><li>we also need to add flag <code>--parallel</code> to <code>cypress run --record</code> command, so the script command becomes <code>&quot;cy:record&quot;: &quot;cypress run --record --parallel&quot;</code>.</li></ul><p>You can see the test run at <a href="https://dashboard.cypress.io/#/projects/r9294v/runs/4/specs" target="_blank" rel="noopener">https://dashboard.cypress.io/#/projects/r9294v/runs/4/specs</a> and here is a totally expected thing - the total run is completely dominated by the <code>app.js</code> spec file!</p><p><img src="/blog/images/run-and-group/two-machines.png" alt="Two tests on two machines"></p><p>The <code>app.js</code> took 34 seconds, while <code>first.js</code> took 1 second. So if we want to load balance these specs, we better split the longer one into smaller spec files, preferably by feature. I split <code>app.js</code> into 6 spec files, each with a few tests. You can find the split in this <a href="https://github.com/bahmutov/todomvc/commit/2133d6684bd5edb8bc07a2a93d22fccb790bb21a" target="_blank" rel="noopener">commit</a>. Let&#39;s push the commit and run the CI again. The Cypress Dashboard shows a much better &quot;balance&quot; of specs!</p><p><img src="/blog/images/run-and-group/split.png" alt="Split specs load balanced"></p><p>Much better machine utilization. We don&#39;t win any time though, because of the overhead of handling each spec - the test runner needs to contact the Dashboard service, upload video file and other artifacts after each spec and ask for the next spec. When specs finish as quickly as my short example specs, in the order of below 5 seconds, the overhead matters a LOT. In more realistic situations, load balancing across 2, 3, 10 machines is absolutely crucial. And the command <code>cypress run --record --parallel</code> does not care how many machines will be joining - they all will be load balanced automatically.</p><h2><span id="deployment">Deployment</span></h2><p>For this static application I picked the simplest deployment - the TodoMVC app is sent to GitHub pages using <a href="https://github.com/tschaub/gh-pages" target="_blank" rel="noopener">gh-pages</a> with NPM script command <code>&quot;deploy&quot;: &quot;gh-pages -d dist&quot;</code>. You can find the deployed version at <a href="https://glebbahmutov.com/todomvc/">https://glebbahmutov.com/todomvc/</a>.</p><p>Ok, the deployment is simple to do from the local terminal. What about deploying from CircleCI? Well, when you use workflows, it might be tricky. Here is how to do this, and you can always consult <a href="https://github.com/bahmutov/todomvc/blob/master/circle.yml" target="_blank" rel="noopener">circle.yml</a>.</p><p>I will add another job to run after local tests pass.</p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">  steps:</span></span><br><span class="line"><span class="attr">    - attach_workspace:</span></span><br><span class="line"><span class="attr">        at:</span> <span class="string">~/</span></span><br><span class="line"><span class="attr">    - run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  build_and_test:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">build</span></span><br><span class="line">      <span class="comment"># runs a couple of machines in parallel</span></span><br><span class="line">      <span class="comment"># with load balanced all tests against a local server</span></span><br><span class="line"><span class="attr">      - test-locally:</span></span><br><span class="line"><span class="attr">          requires:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">build</span></span><br><span class="line">      <span class="comment"># pushes app to https://glebbahmutov.com/todomvc</span></span><br><span class="line"><span class="attr">      - deploy:</span></span><br><span class="line"><span class="attr">          requires:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">test-locally</span></span><br></pre></td></tr></table></figure><p>It is also a good idea to only deploy from <code>master</code> branch, which we can control using from the workflow</p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the rest of the file</span></span><br><span class="line"><span class="comment"># add "filters + branches" to "deploy" job</span></span><br><span class="line"><span class="attr">- deploy:</span></span><br><span class="line"><span class="attr">    filters:</span></span><br><span class="line"><span class="attr">      branches:</span></span><br><span class="line"><span class="attr">        only:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">  requires:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test-locally</span></span><br></pre></td></tr></table></figure><p>Great, all set ...</p><p>Except the deployment is NOT happening due to a weird problem 😖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm run deploy</span><br><span class="line"></span><br><span class="line">&gt; todomvc@1.0.0 deploy /root/app</span><br><span class="line">&gt; gh-pages -d dist</span><br><span class="line"></span><br><span class="line">The authenticity of host &apos;github.com (192.30.253.113)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? Step was canceled</span><br></pre></td></tr></table></figure><p>The Circle job is hanging, and has to be killed manually. You can tell SSH to trust <code>github.com</code> using a command <code>ssh-keyscan -H github.com &gt;&gt; ~/.ssh/known_hosts</code> <em>except</em> if you add this command to the <code>deploy</code> job it is NOT working.</p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">  steps:</span></span><br><span class="line">    <span class="comment"># restore application and Cypress binary before running the test command</span></span><br><span class="line"><span class="attr">    - attach_workspace:</span></span><br><span class="line"><span class="attr">        at:</span> <span class="string">~/</span></span><br><span class="line"><span class="attr">    - run:</span> <span class="string">ssh-keyscan</span> <span class="bullet">-H</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line"><span class="attr">    - run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keyscan -H github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">/bin/bash: /root/.ssh/known_hosts: No such file or directory</span><br></pre></td></tr></table></figure><p>Here is the trick - the SSH setup on Circle happens only if the job has <code>checkout</code> step. Thus we need to change the <em>first</em> job in the workflow, the one that checks out source code from GitHub. We also should store <code>~/.ssh</code> folder in the workspace passed from the first job to other jobs in the workflow.</p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">  steps:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">checkout</span></span><br><span class="line">    <span class="comment"># other NPM commands ...</span></span><br><span class="line"><span class="attr">    - run:</span> <span class="string">ssh-keyscan</span> <span class="bullet">-H</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line"><span class="attr">    - persist_to_workspace:</span></span><br><span class="line"><span class="attr">        root:</span> <span class="string">~/</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">app</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">.cache/Cypress</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">.ssh</span></span><br></pre></td></tr></table></figure><p>Great, the pipeline goes through and deploys the <code>dist</code> folder to the GitHub pages.</p><p><img src="/blog/images/run-and-group/deploy.png" alt="Deployment"></p><h2><span id="tesing-in-production">Tesing in production</span></h2><p>So now that our application is deploying to &quot;production&quot; environment, we should ... test it again. Because who knows - the production application might be misconfigured, missing files, assume a different base url, or something else. We want to make sure the deployment went smoothly. We don&#39;t have to run <em>all</em> end-to-end tests, but we can run just a few sanity tests.</p><p>So we want to do two things:</p><ul><li>run just a single spec file as a smoke test. We can do it using <code>cypress run --spec ...</code> option</li><li>run tests against production <code>baseUrl</code>, and not against <code>localhost:8888</code></li></ul><p>I have added a new script name</p><figure class="highlight"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts: &#123;</span></span><br><span class="line">    "test:smoke": "CYPRESS_baseUrl=https://glebbahmutov.com/todomvc cypress run --spec cypress/integration/first.js",</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And one last thing - we want to record this test on Cypress dashboard and even add it to the <em>same</em> run as our load balanced job did. Because really, this is part of the same CI workflow execution, so it makes sense to show them together as a single logical run. Except we do NOT want to mix it up with all the tests 2 machines executed in parallel. This is possible - just mark this test as a different group with <code>cypress run --group &lt;name&gt;</code> option.</p><figure class="highlight yaml"><figcaption><span>circle.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post-deploy-test:</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">  steps:</span></span><br><span class="line">    <span class="comment"># restore application and Cypress binary before running the test command</span></span><br><span class="line"><span class="attr">    - attach_workspace:</span></span><br><span class="line"><span class="attr">        at:</span> <span class="string">~/</span></span><br><span class="line"><span class="attr">    - run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="attr">test:smoke</span> <span class="bullet">--</span> <span class="bullet">--record</span> <span class="bullet">--group</span> <span class="string">"Smoke test"</span></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  build_and_test:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line">      <span class="comment"># build, and local tests jobs</span></span><br><span class="line"><span class="attr">      - deploy:</span></span><br><span class="line"><span class="attr">          requires:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">test-locally</span></span><br><span class="line"><span class="attr">      - post-deploy-test:</span></span><br><span class="line"><span class="attr">          requires:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p>The new pipeline finishes, and the Cypress Dashboard run shows two groups of tests - the smoke test with a single spec, and &quot;unnamed&quot; group with all specs (load balanced). You can see this run at <a href="https://dashboard.cypress.io/#/projects/r9294v/runs/18/specs" target="_blank" rel="noopener">https://dashboard.cypress.io/#/projects/r9294v/runs/18/specs</a></p><p><img src="/blog/images/run-and-group/recorded-groups.png" alt="All tests and smoke test groups"></p><p>Of course we could have given that group a name, because you can combine the two options, like <code>cypress run --parallel --group &quot;all tests&quot;</code>. Read more about options how to group and parallelize test runs in <a href="https://on.cypress.io/parallelization" target="_blank" rel="noopener">Cypress <code>parallelize</code> docs</a>. For now here is the overview of the final CI workflow.</p><p><img src="/blog/images/run-and-group/full-pipeline.png" alt="CI workflow"></p><h2><span id="wait-for-me">Wait for me</span></h2><p>Our pipeline runs a deploy job between running all tests and running smoke tests. Sometimes the deployment takes a long time. Which means that by the time the smoke tests start, Cypress Dashboard thinks the run has <em>already finished and no new groups should be added</em>.</p><p><img src="/blog/images/run-and-group/time-error-message.png" alt="Smoke tests cannot be added to the run"></p><p>Every time a group of tests finishes, the Cypress Dashboard starts a countdown, waiting for any new groups to join. Once the countdown gets to zero, the run completes, and no new groups are allowed to join; the run is <em>finished</em>.</p><p><img src="/blog/images/run-and-group/time-limit.png" alt="Time limit"></p><p>Here are the good news: you can configure the time limit on per project basis. Go the project&#39;s settings in the Dashboard and set a longer time limit.</p><p><img src="/blog/images/run-and-group/time-limit-setting.png" alt="Time limit field under project&#39;s settings"></p><p>By picking a longer time limit, you can get any pipelines passing, like <a href="../gatsby-netlify-circle-and-cypress/">Netlify + Cypress</a> or <a href="../immutable-deploys-with-data-and-testing/">Zeit + Cypress</a> and see all tests together.</p><h2><span id="conclusions">Conclusions</span></h2><ul><li>Running E2E tests should be quick and easy. Cypress test runner solved the <code>easy</code> part from its very beginning. Now, with the help of the dashboard service, the <code>quick</code> is really true too.</li><li>You can run different tests in groups, and load balance each group separately if needed. All groups are still added to the same logical &quot;run&quot; on the Cypress Dashboard</li></ul><p>Happy testing, and of course keep reading my <a href="../tags/cypress/">Cypress blog posts here</a> and at the <a href="https://www.cypress.io/blog/" target="_blank" rel="noopener">Cypress official blog</a>!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This blog post will show how to get a &amp;quot;typical&amp;quot; CI/CD pipeline set up that is fast yet powerful. The final pipeline will:&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Should I start with Cypress.io?</title>
    <link href="https://glebbahmutov.com/blog/should-i-start-with-cypress/"/>
    <id>https://glebbahmutov.com/blog/should-i-start-with-cypress/</id>
    <published>2018-08-30T04:00:00.000Z</published>
    <updated>2018-08-29T17:45:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently a friend of mine asked &quot;should my close person X, who is just starting in QA field learn how to test web applications using Cypress.io test runner or go with Selenium?&quot; Here is my answer, which you should take with a grain of salt - I work at Cypress!</p><p>Whenever you start in a new field, you have to quickly get up to speed so <em>you are productive in a real company</em>. A testing tool you pick thus needs to have an approachable learning curve, and be simple to start with, and be powerful to handle testing modern web apps.</p><h2><span id="installation">Installation 💾</span></h2><p>Here is where Cypress test runner shines: to install the Cypress test runner you need just a single command: <code>npm i -D cypress</code>.</p><p><img src="/blog/images/cy/1-installing.gif" alt="Installing Cypress"></p><p>I could have stopped right there. But seriously, we built Cypress using the most popular programming language - JavaScript, on top of cross-platform Electron application (same app that powers VSCode, Slack and Spotify) and we distribute the test runner via the largest code sharing repository in the world: NPM registry. Trying out Cypress should <em>be easy</em> on every platform. If it is not, open an issue on <a href="https://github.com/cypress-io/cypress/issues" target="_blank" rel="noopener">GitHub</a> and we will see if we can simplify it even more.</p><h2><span id="documentation">Documentation 📚</span></h2><p>We have invested a lot of our engineering time (at the order of 25% of the total development time) in our <a href="https://docs.cypress.io/" target="_blank" rel="noopener">https://docs.cypress.io/</a> site plus <a href="https://github.com/cypress-io/cypress-example-recipes" target="_blank" rel="noopener">https://github.com/cypress-io/cypress-example-recipes</a> plus <a href="https://www.cypress.io/blog/" target="_blank" rel="noopener">https://www.cypress.io/blog/</a> plus all the other example repositories. And we keep <a href="https://www.cypress.io/blog/2018/08/22/takeaways-from-write-the-docs-cincinnati/" target="_blank" rel="noopener">learning how to make the docs better</a>.</p><p>Our users can freely contribute to the documentation by submitting to <a href="https://github.com/cypress-io/cypress-documentation" target="_blank" rel="noopener">cypress-documentation</a>, and have improved them tremendously. As of today, there were <a href="https://github.com/cypress-io/cypress-documentation/graphs/contributors" target="_blank" rel="noopener">93 contributors</a> to the docs, and we cannot thank everyone enough.</p><p>If you are starting in testing, having complete guides like <a href="https://docs.cypress.io/guides/getting-started/writing-your-first-test.html" target="_blank" rel="noopener">How to write your first test</a>, or how to <a href="https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests.html" target="_blank" rel="noopener">organize your code and test</a>, or how <a href="https://docs.cypress.io/guides/guides/continuous-integration.html" target="_blank" rel="noopener">to run your tests on CI</a> is a MUST. You will learn the basics of test writing, and will gradually improve as you go along.</p><p>We have docs for <a href="https://docs.cypress.io/api/introduction/api.html" target="_blank" rel="noopener">every command</a>, <a href="https://docs.cypress.io/examples/examples/tutorials.html" target="_blank" rel="noopener">video tutorials</a> for people who want to watch and learn, and even open source <a href="https://docs.cypress.io/examples/examples/workshop.html" target="_blank" rel="noopener">workshop material</a>. Pick what suites your learning style and take the first step; you will progress very quickly.</p><p><img src="/blog/images/cy/docs-tweet.png" alt="Cypress and its docs"></p><h2><span id="productivity">Productivity 📈</span></h2><p>Your first job as a QA might ask you to ensure that the web app functions as intended. As in:</p><ul><li>user visits the site</li><li>user clicks on the input field</li><li>user enters text and presses Enter key</li><li>app does something in response</li></ul><p>Notice how the test is <em>functional</em> - the test exercises primarily how the web application behaves. So Cypress is 100% focused on writing such tests. The above test will probably look like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'works'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// visit local url, or remote url</span></span><br><span class="line">  cy.visit(<span class="string">'http://localhost:3000'</span>)</span><br><span class="line">  <span class="comment">// type into specific box</span></span><br><span class="line">  cy.get(<span class="string">'.input-box'</span>)</span><br><span class="line">    .click()</span><br><span class="line">    .type(<span class="string">'my text&#123;enter&#125;'</span>)</span><br><span class="line">  <span class="comment">// assert the app shows the result</span></span><br><span class="line">  cy.get(<span class="string">'.result'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The Cypress test looks <em>soooo much</em> like the user story, it should NOT be difficult to learn how to write them, even if you are just starting with JavaScript. As you write the code, you can keep the test runner open, and it will rerun the test when you change and save the test file.</p><p><img src="/blog/images/cy/2-writing.gif" alt="Writing test"></p><p>And Cypress ships with TypeScript definitions, that show up as <a href="https://on.cypress.io/intelligent-code-completion" target="_blank" rel="noopener">IntelliSense help</a> in most text editors. It is simple to write and change Cypress tests; and it is not just the API design or documentation - it is the test runner itself!</p><h2><span id="debugging">Debugging 💻</span></h2><p>The test runner shows every command as the test runs, and you can go back and see how the application looked during each step. The time-travelling debugger that keeps the DOM snapshots is huge help for anyone writing or debugging a failing Cypress end-to-end test.</p><p><img src="/blog/images/cy/4-debugging.gif" alt="Debugging Cypress test"></p><p>This goes back to the Productivity section below - you will be more productive by using Cypress. Not only your tests will be quick to run, but writing new tests and debugging failed ones will be fast.</p><h2><span id="popularity-️">Popularity ⭐️</span></h2><p>According to GitHub star counts (and these are the best predictors, right?) Cypress is in the same leagues as other E2E testing tools, after being open sourced for 10 months. Yup, it is growing fast.</p><table><thead><tr><th>Name</th><th>Repo</th><th>Stars</th></tr></thead><tbody><tr><td>Selenum</td><td><a href="https://github.com/SeleniumHQ/selenium" target="_blank" rel="noopener">SeleniumHQ/selenium</a></td><td>11k</td></tr><tr><td>Karma</td><td><a href="https://github.com/karma-runner/karma" target="_blank" rel="noopener">karma-runner/karma</a></td><td>10k</td></tr><tr><td>Nightwatch</td><td><a href="https://github.com/nightwatchjs/nightwatch" target="_blank" rel="noopener">nightwatchjs/nightwatch</a></td><td>8k</td></tr><tr><td>Protractor</td><td><a href="https://github.com/angular/protractor" target="_blank" rel="noopener">angular/protractor</a></td><td>7.7k</td></tr><tr><td>Cypress</td><td><a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">cypress-io/cypress</a></td><td>7.3k</td></tr></tbody></table><p>It is more that just the test runner itself growing quickly in popularity as more people discover it. The SaaS services we have built on top of the test runner are optional, yet we have 20% <em>month over month</em> growth in number of organization and projects recording test results and test artifacts on <a href="http://on.cypress.io/dashboard-service" target="_blank" rel="noopener">Cypress Dashboard</a>. So we must be doing something right! Learning how to write Cypress tests and use our Dashboard to <a href="http://on.cypress.io/parallelization" target="_blank" rel="noopener">parallelize test runs</a> for example, might be what your next job is looking for.</p><h2><span id="bonus">Bonus 🎁</span></h2><p>Cypress is framework-agnostic. You only work via a well-documented commands against the standard browser APIs like DOM, local storage, cookies, location, history, requests, etc. So learning how to test with Cypress a React application for example, translates into learning how to test <em>any application</em>.</p><p>You will also learn how modern browsers work. The tests run in a regular browser (Chrome), you can open DevTools, interact with the application, run custom code, see how each step changes the DOM, sets cookies, communicates with the server backend, etc. You will not be siloed into QA role away from the development roles, and as time progresses should be able to meaningfully contribute to designing code for greater testability and maintainability. With time, you might find yourself writing more code than tests, if that&#39;s something you find enjoyable.</p><h2><span id="other-opinions">Other opinions 🎤</span></h2><p>Of course, there are people who disagree with me. After all, Selenium has been around for a while, and it is an official RFC standard. It will be a popular tool for a long time, no doubt. Its cross-browser and multiple language bindings are certainly very attractive. Read the following <code>Cypress vs Selenium</code> blog posts and see if their arguments convince you.</p><ul><li><a href="https://www.future-processing.pl/blog/cypress-io-the-reason-why-were-not-stuck-with-selenium/" target="_blank" rel="noopener">Cypress.io – the reason why we’re not stuck with Selenium</a></li><li><a href="https://automationrhapsody.com/cypress-vs-selenium-end-era/" target="_blank" rel="noopener">Cypress vs. Selenium, is this the end of an era?</a></li><li><a href="https://medium.com/@shivambharadwaj/https-medium-com-shivambharadwaj-why-you-should-switch-to-cypress-for-modern-web-testing-5d3739a19e6" target="_blank" rel="noopener">Why you should switch to Cypress for modern web testing?</a></li><li><a href="https://medium.com/@wataruoguchi/running-e2e-tests-with-selenium-and-cypress-1de69b95d936" target="_blank" rel="noopener">Running E2E tests with Selenium <em>AND</em> Cypress</a></li><li><a href="https://medium.com/tech-quizlet/cypress-the-future-of-end-to-end-testing-for-web-applications-8ee108c5b255" target="_blank" rel="noopener">Cypress: The future of end-to-end testing for web applications</a></li><li>and <a href="http://on.cypress.io/blogs-media" target="_blank" rel="noopener">many more</a></li></ul><p>There were a couple of threads on Reddit discussion Cypress</p><ul><li><a href="https://www.reddit.com/r/javascript/comments/97hktn/how_many_of_you_use_cypress/" target="_blank" rel="noopener">How many of you use Cypress ?</a></li><li><a href="https://www.reddit.com/r/webdev/comments/8rhnv3/i_want_to_learn_automate_ui_testing/" target="_blank" rel="noopener">I want to learn automate UI testing</a></li></ul><h2><span id="cypress-limits-️">Cypress limits ⚠️</span></h2><p>You should also be aware of Cypress limitations. As of this writing, there is no <a href="https://github.com/cypress-io/cypress/issues/310" target="_blank" rel="noopener">cross-browser support</a>, limited <a href="https://github.com/cypress-io/cypress/issues/685" target="_blank" rel="noopener">iframe support</a>, etc, etc. But we are actively working to remove these restrictions, so stay tuned, our <a href="https://on.cypress.io/roadmap" target="_blank" rel="noopener">Roadmap is here</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently a friend of mine asked &amp;quot;should my close person X, who is just starting in QA field learn how to test web applications using
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Mocking process.env</title>
    <link href="https://glebbahmutov.com/blog/mocking-process-env/"/>
    <id>https://glebbahmutov.com/blog/mocking-process-env/</id>
    <published>2018-08-27T04:00:00.000Z</published>
    <updated>2018-08-27T02:25:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Often, the behavior of the program is controlled by the environment variables at its startup. In Node, all these variables are stored in <code>process.env</code> object, where is value is <a href="https://stackoverflow.com/questions/10265208/node-js-process-env-assigning-process-env-property-to-undefined-results-in-stri/10265271#10265271" target="_blank" rel="noopener">cast as string</a> ⚠️ (this makes <code>process.env</code> different from &quot;regular&quot; JavaScript objects, because we have to take it into account).</p><p>If you want to see the <code>process.env</code> just execute <code>node -e &#39;console.log(process.env)&#39;</code> from the terminal. Notice how all values are strings?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  XPC_SERVICE_NAME: &apos;0&apos;,</span><br><span class="line">  HOME: &apos;/Users/gleb&apos;,</span><br><span class="line">  SHLVL: &apos;1&apos;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I love <a href="https://sinonjs.org/" target="_blank" rel="noopener">sinon.js</a>, so my first approach was to use it to mock <code>process.env</code>. Sinon allows me to quickly stub existing <code>process.env</code> properties during unit testing. For example, the following works:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>)</span><br><span class="line"><span class="keyword">const</span> sinon = <span class="built_in">require</span>(<span class="string">'sinon'</span>)</span><br><span class="line"><span class="keyword">let</span> sandbox = sinon.createSandbox()</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  sandbox.stub(process.env, <span class="string">'USER'</span>).value(<span class="string">'test-user'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'has expected user'</span>, () =&gt; &#123;</span><br><span class="line">  assert(process.env.USER === <span class="string">'test-user'</span>, <span class="string">'wrong user'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  sandbox.restore()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Great, but what about properties that might <em>not</em> exist in <code>process.env</code> before the test? After searching through the docs and GitHub issues, I could only conclude that Sinon does not allow you to <em>add a mock property temporarily</em>. To the NPM registry search! I found <a href="https://github.com/burl/mock-env" target="_blank" rel="noopener">burl/mock-env</a>, but its syntax was really weird. So I finally coded <a href="https://github.com/bahmutov/mocked-env" target="_blank" rel="noopener">mocked-env</a>, check it out.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mockedEnv = <span class="built_in">require</span>(<span class="string">'mocked-env'</span>)</span><br><span class="line"><span class="keyword">let</span> restore</span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// pass object with modified / added / deleted values</span></span><br><span class="line">  <span class="comment">// it will be merged into existing process.env</span></span><br><span class="line">  restore = mockedEnv(&#123;</span><br><span class="line">    USER: <span class="string">'test-user'</span>,</span><br><span class="line">    PWD: <span class="literal">undefined</span>, <span class="comment">// will be deleted from process.env</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'works'</span>, () =&gt; &#123;</span><br><span class="line">  assert(process.env.USER === <span class="string">'test-user'</span>, <span class="string">'wrong user'</span>)</span><br><span class="line">  assert(process.env.PWD === <span class="literal">undefined</span>, <span class="string">'wrong PWD'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// don't forget to restore the old process.env</span></span><br><span class="line">  restore()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Happy testing!</p><h2><span id="related-posts">Related posts</span></h2><ul><li><a href="../mock-system-apis/">Mock system APIs</a></li><li><a href="../mocking-vs-refactoring/">Mocking vs Refactoring</a></li><li>and lots of my other <a href="../tags/testing/">testing posts</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Often, the behavior of the program is controlled by the environment variables at its startup. In Node, all these variables are stored in 
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>Zeit Now GitHub app + Renovate app + Cypress tests = 💝</title>
    <link href="https://glebbahmutov.com/blog/zeit-now-renovate-and-app/"/>
    <id>https://glebbahmutov.com/blog/zeit-now-renovate-and-app/</id>
    <published>2018-08-10T04:00:00.000Z</published>
    <updated>2018-08-10T13:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="tested-pr-deploys">Tested PR deploys</span></h2><p>Recent news: <a href="https://zeit.co/" target="_blank" rel="noopener">Zeit.co</a> has released a GitHub app for automatically deploying GitHub pull requests using <a href="https://zeit.co/blog/new-static-deployments" target="_blank" rel="noopener">Zeit Now tool</a>. Previously, I have been a huge fan of testing my code on Now cloud using immutable deploys - read <a href="../immutable-deploys-with-data-and-testing/">Immutable deploys and Cypress</a> and try my helper tool <a href="https://github.com/bahmutov/now-pipeline" target="_blank" rel="noopener">now-pipeline</a>. Now (excuse my pun), I wanted to see if I could run the same tests on each pull request without any custom tooling, just by using <a href="https://zeit.co/blog/now-for-github" target="_blank" rel="noopener">Zeit GitHub app</a>.</p><p>So I made a tiny static repo <a href="https://github.com/bahmutov/tiny-blog" target="_blank" rel="noopener">bahmutov/tiny-blog</a> and connected it to the &quot;Now&quot; GitHub application.</p><p><img src="/blog/images/zeit-github/github-now.png" alt="Now GitHub application"></p><p>My example is a static site, which I configure using <a href="https://github.com/bahmutov/tiny-blog/blob/master/now.json" target="_blank" rel="noopener">tiny-blog/now.json</a> file</p><figure class="highlight json"><figcaption><span>now.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"static"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I needed to add a Dockerfile to test and serve my site. Zeit Now can be used for Node deploys, but its full power lies in running <em>any</em> Docker-based project. So I have added a <a href="https://github.com/bahmutov/tiny-blog/blob/master/Dockerfile" target="_blank" rel="noopener">Dockerfile</a> that runs end-to-end tests against a local site using <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress.io</a> test runner. The <a href="https://github.com/bahmutov/tiny-blog/blob/master/Dockerfile" target="_blank" rel="noopener">Dockerfile</a> looks intimidating, but as I explain in <a href="https://www.cypress.io/blog/2018/08/08/Fast-Tests-Tiny-Docker-Image/" target="_blank" rel="noopener">Fast Tests, Tiny Docker Image</a> blog post, it only looks complicated because I build two images - one to run end-to-end tests, and another to actually serve the static site in production. By using <a href="../making-small-docker-image/">Docker multi-stage build feature</a> we can keep the production image really really small - because it will NOT include tests or test dependencies. In summary, the Dockerfile looks like this</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Testing image</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">FROM</span> cypress/base:<span class="number">10</span> as TEST</span><br><span class="line"><span class="comment"># dependencies will be installed only if the package files change</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package.json .</span></span><br><span class="line"><span class="bash">COPY package-lock.json .</span></span><br><span class="line"><span class="bash"><span class="comment"># by setting CI environment variable we switch the Cypress install messages</span></span></span><br><span class="line"><span class="bash"><span class="comment"># to small "started / finished" and avoid 1000s of lines of progress messages</span></span></span><br><span class="line"><span class="bash"><span class="comment"># https://github.com/cypress-io/cypress/issues/1243</span></span></span><br><span class="line"><span class="bash">ENV CI=1</span></span><br><span class="line"><span class="bash">RUN npm ci</span></span><br><span class="line"><span class="bash"><span class="comment"># tests will rerun if the "cypress" folder, "cypress.json" file or "public" folder</span></span></span><br><span class="line"><span class="bash"><span class="comment"># has any changes</span></span></span><br><span class="line"><span class="bash"><span class="comment"># copy tests</span></span></span><br><span class="line"><span class="bash">COPY cypress cypress</span></span><br><span class="line"><span class="bash">COPY cypress.json .</span></span><br><span class="line"><span class="bash"><span class="comment"># copy what to test</span></span></span><br><span class="line"><span class="bash">COPY public public</span></span><br><span class="line"><span class="bash"><span class="comment">#</span></span></span><br><span class="line"><span class="bash"><span class="comment"># run e2e Cypress tests</span></span></span><br><span class="line"><span class="bash"><span class="comment">#</span></span></span><br><span class="line"><span class="bash">RUN npm <span class="built_in">test</span></span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#</span></span></span><br><span class="line"><span class="bash"><span class="comment"># Production image - without Cypress and node modules!</span></span></span><br><span class="line"><span class="bash"><span class="comment">#</span></span></span><br><span class="line"><span class="bash">FROM busybox as PROD</span></span><br><span class="line"><span class="bash">COPY --from=TEST /app/public /public</span></span><br><span class="line"><span class="bash"><span class="comment"># nothing to do - Zeit should take care of serving static content</span></span></span><br><span class="line"><span class="bash"><span class="comment"># we would only need a command if we want to use this image locally</span></span></span><br></pre></td></tr></table></figure><p>That is it - and the best part is that you can build this Docker image locally to make sure it is working! You should see end-to-end tests executing headlessly. Here is a typical test that Cypress will run</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line">describe(<span class="string">'tiny blog'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'loads'</span>, () =&gt; &#123;</span><br><span class="line">    cy.visit(<span class="string">'localhost:5000'</span>)</span><br><span class="line">    cy.contains(<span class="string">'h1'</span>, <span class="string">'Tiny Blog'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>And here is the output from Docker building the image and running tests on my Mac. I am passing an argument to force Docker to NOT cache intermediate step &quot;RUN npm test&quot;, thus forcing the tests to run. Notice how most steps say &quot;Using cache&quot; - because Docker is really good at caching intermediate steps as layers!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">$ docker build . --build-arg HOSTNAME=$(date +%s)</span><br><span class="line">Sending build context to Docker daemon  1.966MB</span><br><span class="line">Step 1/18 : FROM cypress/base:10 as TEST</span><br><span class="line"> ---&gt; 1613db8573fa</span><br><span class="line">Step 2/18 : WORKDIR /app</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 3038f77e74b3</span><br><span class="line">Step 3/18 : COPY package.json .</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; e9ba57858ac0</span><br><span class="line">Step 4/18 : COPY package-lock.json .</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 1d5d0f63cf76</span><br><span class="line">Step 5/18 : ENV CI=1</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; c677a011cf68</span><br><span class="line">Step 6/18 : RUN npm ci</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; f6a0137ee209</span><br><span class="line">Step 7/18 : RUN npx cypress verify</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 37ebebd34694</span><br><span class="line">Step 8/18 : COPY cypress cypress</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 613f68dfd956</span><br><span class="line">Step 9/18 : COPY cypress.json .</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; cd084d7f40c7</span><br><span class="line">Step 10/18 : COPY public public</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 2a26ab11cb83</span><br><span class="line">Step 11/18 : RUN ls -la</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 43078b798bcc</span><br><span class="line">Step 12/18 : RUN ls -la public</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 640b6abba3ea</span><br><span class="line">Step 13/18 : ARG HOSTNAME=1</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 5fa9ec65b8d3</span><br><span class="line">Step 14/18 : RUN npm test</span><br><span class="line"> ---&gt; Running in 766257f65511</span><br><span class="line"></span><br><span class="line">&gt; tiny-blog@1.0.0 test /app</span><br><span class="line">&gt; start-test 5000 cy:run</span><br><span class="line"></span><br><span class="line">starting server using command &quot;npm run start&quot;</span><br><span class="line">and when url &quot;http://localhost:5000&quot; is responding</span><br><span class="line">running tests using command &quot;cy:run&quot;</span><br><span class="line"></span><br><span class="line">&gt; tiny-blog@1.0.0 start /app</span><br><span class="line">&gt; serve public</span><br><span class="line"></span><br><span class="line">INFO: Accepting connections at http://localhost:5000</span><br><span class="line"></span><br><span class="line">&gt; tiny-blog@1.0.0 cy:run /app</span><br><span class="line">&gt; cypress run</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Starting)</span><br><span class="line"></span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ Cypress:    3.0.3                                                                              │</span><br><span class="line">  │ Browser:    Electron 59 (headless)                                                             │</span><br><span class="line">  │ Specs:      1 found (spec.js)                                                                  │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br><span class="line">  Running: spec.js...                                                                      (1 of 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  tiny blog</span><br><span class="line">    ✓ loads (88ms)</span><br><span class="line">    ✓ loads 2nd time (105ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  2 passing (1s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  (Results)</span><br><span class="line"></span><br><span class="line">  ┌────────────────────────┐</span><br><span class="line">  │ Tests:        2        │</span><br><span class="line">  │ Passing:      2        │</span><br><span class="line">  │ Failing:      0        │</span><br><span class="line">  │ Pending:      0        │</span><br><span class="line">  │ Skipped:      0        │</span><br><span class="line">  │ Screenshots:  0        │</span><br><span class="line">  │ Video:        true     │</span><br><span class="line">  │ Duration:     1 second │</span><br><span class="line">  │ Spec Ran:     spec.js  │</span><br><span class="line">  └────────────────────────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  (Video)</span><br><span class="line"></span><br><span class="line">  - Started processing:   Compressing to 32 CRF</span><br><span class="line">  - Finished processing:  /app/cypress/videos/spec.js.mp4 (0 seconds)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">====================================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Finished)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Spec                                                Tests  Passing  Failing  Pending  Skipped</span><br><span class="line">  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ ✔ spec.js                                   00:01        2        2        -        -        - │</span><br><span class="line">  └────────────────────────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">    All specs passed!                           00:01        2        2        -        -        -</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INFO: Gracefully shutting down. Please wait...</span><br><span class="line">Removing intermediate container 766257f65511</span><br><span class="line"> ---&gt; 669fd49b065a</span><br><span class="line">Step 15/18 : FROM busybox as PROD</span><br><span class="line"> ---&gt; 22c2dd5ee85d</span><br><span class="line">Step 16/18 : COPY --from=TEST /app/public /public</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 080af7d4cccd</span><br><span class="line">Step 17/18 : RUN ls -la</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 8996a8bc6893</span><br><span class="line">Step 18/18 : RUN du -sh</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 84d15f475947</span><br><span class="line">Successfully built 84d15f475947</span><br></pre></td></tr></table></figure><p>Ok, works locally, now push to GitHub! From now on (again, another pun), every pull request to the <a href="https://github.com/bahmutov/tiny-blog" target="_blank" rel="noopener">bahmutov/tiny-blog</a> repo is built on the Zeit cloud, the tests are executed and if they pass, the site is deployed under a unique url. You can see an example <a href="https://github.com/bahmutov/tiny-blog/pull/3" target="_blank" rel="noopener">pull request 3</a></p><p><img src="/blog/images/zeit-github/pr.png" alt="Pull request 3"></p><p>Under &quot;details&quot;, Zeit adds a message with the link going to the deployment.</p><p><img src="/blog/images/zeit-github/details.png" alt="Deployed url in the details"></p><p>During deploy, if you are fast enough (or at any time by going to the <code>https://zeit.co/&lt;username&gt;/dashboard</code>) you should see the same output, but from the Docker container being built by the Zeit cloud machines.</p><p><img src="/blog/images/zeit-github/zeit-build.png" alt="Zeit cloud build"></p><p>The deployed site does not look like much, does it 😄</p><p><img src="/blog/images/zeit-github/site.png" alt="Deployed tiny-blog"></p><p>But the really good thing about this setup is this - I have a well tested unique deploy for each pull request with minimum effort!</p><h2><span id="dependencies">Dependencies</span></h2><p>Well, if we can have one GitHub app, why not have two? I am a <a href="../renovate-app/">huuuge fan</a> of <a href="https://renovatebot.com/" target="_blank" rel="noopener">RenovateApp</a> - a fast and painless way to keep all my NPM dependencies up to date with minimum effort. What happens if we set both Zeit Now and Renovate apps?</p><p><img src="/blog/images/zeit-github/now-and-renovate.png" alt="Zeit Now and Renovate apps in tiny-blog"></p><p>I really trust good tests and usually allow automerging minor and patch version changes (if tests pass), while manually reviewing major version upgrades. So my <a href="https://github.com/bahmutov/tiny-blog/blob/master/renovate.json" target="_blank" rel="noopener">renovate.json</a> looks like this</p><figure class="highlight json"><figcaption><span>renovate.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"config:base"</span>],</span><br><span class="line">  <span class="attr">"automerge"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"major"</span>: &#123;</span><br><span class="line">    <span class="attr">"automerge"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And here is the result - when Renovate notices a new version of an NPM dependency, it opens a pull request. Zeit Now runs the end-to-end tests using Cypress, and tells GitHub.</p><p><img src="/blog/images/zeit-github/pull-requests.png" alt="Pull requests opened by Renovate app"></p><p>Each pull request like <a href="https://github.com/bahmutov/tiny-blog/pull/8" target="_blank" rel="noopener">this one</a> tells me what is about to happen, and has a unique deploy URL</p><p><img src="/blog/images/zeit-github/renovate-pull-request.png" alt="Typical pull request opened by Renovate app"></p><p>Renovate uses the test status (pass / fail) and upgrade type (major / minor / patch) to keep the PR open or automerge it after an hour or so. The commit log shows these auto-merged dependency upgrades.</p><p><img src="/blog/images/zeit-github/merged-commits.png" alt="Commits automatically merged by Renovate after tests passed"></p><p>Boom! I got myself pain-free, almost-zero config way of testing code changes, seeing the deployed result and keeping dependencies up to date.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;tested-pr-deploys&quot;&gt;Tested PR deploys&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Recent news: &lt;a href=&quot;https://zeit.co/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Zeit
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="github" scheme="https://glebbahmutov.com/blog/tags/github/"/>
    
      <category term="zeit" scheme="https://glebbahmutov.com/blog/tags/zeit/"/>
    
  </entry>
  
  <entry>
    <title>Carriage return</title>
    <link href="https://glebbahmutov.com/blog/carriage-return/"/>
    <id>https://glebbahmutov.com/blog/carriage-return/</id>
    <published>2018-08-03T04:00:00.000Z</published>
    <updated>2018-08-03T14:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine building a progress indicator in Node. We could start with low level &quot;print&quot; calls</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">process.stdout.write(<span class="string">'long message first'</span>)</span><br><span class="line">process.stdout.write(<span class="string">'short message'</span>)</span><br></pre></td></tr></table></figure><p>This prints messages one after another on the same line</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long message firstshort message</span><br></pre></td></tr></table></figure><p>Hmm, not the best output, the words are printed on the same line. If we want to print the second message on the second line, we have to print &quot;new line&quot; character <code>\n</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">process.stdout.write(<span class="string">'long message first\n'</span>)</span><br><span class="line">process.stdout.write(<span class="string">'short message\n'</span>)</span><br></pre></td></tr></table></figure><p>which outputs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">long message first</span><br><span class="line">short message</span><br></pre></td></tr></table></figure><p>Note, this is what <code>console.log</code> does by default - it adds <code>\n</code> after each printed line.</p><p>But what if we send carriage return character <code>\r</code> after the first message?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">process.stdout.write(<span class="string">'long message first\r'</span>)</span><br><span class="line">process.stdout.write(<span class="string">'short message\n'</span>)</span><br></pre></td></tr></table></figure><p>Our output is garbled!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">short messagefirst</span><br></pre></td></tr></table></figure><p>The second message is shorter and thus it overwrites only a part of the first line of text. We cannot have this; we need to clear the rest of the line every time we print it. We can print a string of spaces to clear the line - but we need to know how many spaces to print. Luckily there is a property <code>process.stdout.columns</code> that tells us exactly how many characters are in the terminal. We can clear the current line by print an empty line + <code>\r</code> before we print new text.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'stdout width'</span>, process.stdout.columns)</span><br><span class="line"><span class="keyword">const</span> emptyLine = <span class="string">''</span>.padEnd(process.stdout.columns, <span class="string">' '</span>)</span><br><span class="line">process.stdout.write(<span class="string">'long message first\r'</span>)</span><br><span class="line"><span class="comment">// delay to better see the first message</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  process.stdout.write(emptyLine + <span class="string">'\r'</span>)</span><br><span class="line">  process.stdout.write(<span class="string">'short message\n'</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stdout width 99</span><br><span class="line">long message first</span><br></pre></td></tr></table></figure><p>Then a second later the output becomes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stdout width 99</span><br><span class="line">short message</span><br></pre></td></tr></table></figure><p>Beautiful!</p><h2><span id="docker">Docker</span></h2><p>But what happens if our code runs in a terminal that is really feature-limited, like the output piped from the Docker build command? Here is a Docker file I will use</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">8</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> index.js .</span></span><br><span class="line"><span class="bash">RUN node .</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Status: Downloaded newer image for node:8</span><br><span class="line"> ---&gt; ed145ef978c4</span><br><span class="line">Step 2/3 : COPY index.js .</span><br><span class="line"> ---&gt; 44db58d93738</span><br><span class="line">Step 3/3 : RUN node .</span><br><span class="line"> ---&gt; Running in 1bc9d0e3b0d3</span><br><span class="line">stdout width undefined</span><br><span class="line">short messagefirst</span><br><span class="line">Removing intermediate container 1bc9d0e3b0d3</span><br><span class="line"> ---&gt; cb8ac000c993</span><br><span class="line">Successfully built cb8ac000c993</span><br></pre></td></tr></table></figure><p>There is no <code>process.stdout.columns</code> number, even if the carriage return works! So how do we show the second line? Well, we can take a shortcut and just do the &quot;newline&quot; instead!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emptyLine = process.stdout.columns ? <span class="string">''</span>.padEnd(process.stdout.columns, <span class="string">' '</span>) : <span class="string">'\n'</span></span><br></pre></td></tr></table></figure><p>and it works nicely in the terminal and in Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> ---&gt; Running in 8d63833b96ac</span><br><span class="line">stdout width undefined</span><br><span class="line">long message first</span><br><span class="line">short message</span><br></pre></td></tr></table></figure><p>Nice, except when you have progress bars ... which output thousands of messages when showing percentage increments for example. We have this problem when showing Cypress installation (see issue <a href="https://github.com/cypress-io/cypress/issues/1243" target="_blank" rel="noopener">#1243</a>) progress. The output log would just flood with thousands of identical lines like these</p><p><img src="https://user-images.githubusercontent.com/1771003/35659154-bacb403a-06d2-11e8-9a78-44864e05e1aa.gif" alt="Terminal output"></p><p>In this case we should treat using progress bars as <em>an enhancement</em>. By default the program should show only the text messages at the start and end of the action.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Installing Cypress (version: 1.4.2)</span><br><span class="line"></span><br><span class="line">[10:27:23]  Downloading Cypress     [started]</span><br><span class="line">[10:27:52]  Downloading Cypress     [completed]</span><br><span class="line">[10:27:52]  Unzipping Cypress       [started]</span><br><span class="line">[10:27:58]  Unzipping Cypress       [completed]</span><br></pre></td></tr></table></figure><p>Only if we find that the terminal has <code>process.stdout.columns</code> set, then we can use a more advanced printing and you can show progress indicators.</p><p>Note: the code is in repo <a href="https://github.com/bahmutov/test-line-return" target="_blank" rel="noopener">bahmutov/test-line-return</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine building a progress indicator in Node. We could start with low level &amp;quot;print&amp;quot; calls&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
      <category term="docker" scheme="https://glebbahmutov.com/blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Gatsby Netlify Circle and Cypress</title>
    <link href="https://glebbahmutov.com/blog/gatsby-netlify-circle-and-cypress/"/>
    <id>https://glebbahmutov.com/blog/gatsby-netlify-circle-and-cypress/</id>
    <published>2018-06-29T04:00:00.000Z</published>
    <updated>2018-06-29T02:56:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Static site generator <a href="https://www.gatsbyjs.org" target="_blank" rel="noopener">Gatsby</a> is all the rage these days. It pairs nicely with quick deploys using <a href="https://www.netlify.com" target="_blank" rel="noopener">Netlify</a>. In this blog post I will show how to test your site using <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> in several situations.</p><ol><li>when running Gatsby locally during development</li><li>on Netlify before deploying</li><li>on CircleCI after deploying against the newly deployed URL</li></ol><p>You can find the source at <a href="https://github.com/bahmutov/gatsby-starter-blog" target="_blank" rel="noopener">bahmutov/gatsby-starter-blog</a> - it is a fork of the Gatsby&#39;s own example. I have the deployed blog running at <a href="https://gatsby-blog-0a5be4.netlify.com/" target="_blank" rel="noopener">https://gatsby-blog-0a5be4.netlify.com/</a>.</p><p><img src="/blog/images/netlify/first-test.png" alt="Cypress test against the blog post (running locally)"></p><p>The deployed sites itself has the 3 mini blog posts that describe the local setup, the Netlify command and how Netlify triggers CircleCI build using a webhook after each deploy.</p><p>So read the blog posts <a href="https://gatsby-blog-0a5be4.netlify.com/" target="_blank" rel="noopener">https://gatsby-blog-0a5be4.netlify.com/</a>, explore the source, and ping me with any questions.</p><p>PS: the immutable deploys and testing go hand in hand. See how to perform them from CI using <a href="https://zeit.co/now" target="_blank" rel="noopener">Zeit Now</a> in the blog post <a href="https://www.cypress.io/blog/2017/05/30/cypress-and-immutable-deploys/" target="_blank" rel="noopener">Immutable deploys and Cypress</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Static site generator &lt;a href=&quot;https://www.gatsbyjs.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gatsby&lt;/a&gt; is all the rage these days. It pairs n
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
      <category term="immutable" scheme="https://glebbahmutov.com/blog/tags/immutable/"/>
    
  </entry>
  
  <entry>
    <title>Incredibly Powerful cy.task</title>
    <link href="https://glebbahmutov.com/blog/powerful-cy-task/"/>
    <id>https://glebbahmutov.com/blog/powerful-cy-task/</id>
    <published>2018-06-27T04:00:00.000Z</published>
    <updated>2018-06-27T14:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>There is a new super powerful command in <a href="https://docs.cypress.io/guides/references/changelog.html#3-0-0" target="_blank" rel="noopener">Cypress v3</a> - and that is <a href="https://on.cypress.io/task" target="_blank" rel="noopener"><code>cy.task</code></a>. This command allows your tests to &quot;jump&quot; from the browser context to Node and run <em>any code</em> before returning (asynchronously) the result back to the test. Let me show how to use this command for &quot;deeper&quot; server-side validation.</p><p>Let me take a TodoMVC application as an example. This is the same web application I have tested <em>a lot</em> in <a href="https://www.cypress.io/blog/2017/11/28/testing-vue-web-application-with-vuex-data-store-and-rest-backend/" target="_blank" rel="noopener">Testing Vue web applications with Vuex data store &amp; REST backend</a> blog post. You can find all code from this blog post in <a href="https://github.com/bahmutov/cypress-task-demo" target="_blank" rel="noopener">bahmutov/cypress-task-demo</a> repository.</p><p>The TodoMVC application sends each new todo item entered by the user to the backend server (via XHR calls). The backend is <a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">json-server</a> that saves the data as a plain JSON file called <code>data.json</code>. Good. So how can we assert that all parts of the system are working as expected?</p><h2><span id="testing-the-ui">Testing the UI</span></h2><p>The most obvious thing that everyone writing end-to-end tests should do is to only exercise the application via its user interface. For example, we can add a new todo item, and then confirm that the text of the item appears in the list below.</p><figure class="highlight js"><figcaption><span>ui.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; enterTodo, resetDatabase &#125; <span class="keyword">from</span> <span class="string">'./utils'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'UI'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(resetDatabase)</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'adds todo'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// random text to avoid confusion</span></span><br><span class="line">    <span class="keyword">const</span> id = Cypress._.random(<span class="number">1</span>, <span class="number">1e6</span>)</span><br><span class="line">    <span class="keyword">const</span> title = <span class="string">`todo <span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">    enterTodo(title)</span><br><span class="line">    <span class="comment">// confirm the new item has been added to the list</span></span><br><span class="line">    cy.contains(<span class="string">'.todoapp li'</span>, title)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Here is this test in action; I am hovering over &quot;CONTAINS&quot; command and Cypress highlights the new item in the DOM snapshots at that moment in test.</p><p><img src="/blog/images/powerful-cy-task/confirm-new-item-via-ui.gif" alt="Confirms new item has been added via UI"></p><p>The new item appears in the list, but was it <em>really</em> sent to the server? We could write another test to spy on the XHR call to observe the new item being sent to the server. But was the item <em>really</em> saved? Hmm, we are going deeper in the implementation details here. Why not avoid testing the <em>implementation</em> of the application and the server and instead test the <em>external</em> state - in this case the file &quot;database&quot; where the server saves data?</p><h2><span id="testing-the-database">Testing the database</span></h2><p>So every time the user enters new Todo item, it should be saved in the file &quot;data.json&quot; like this</p><figure class="highlight json"><figcaption><span>data.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"todos"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"todo 423665"</span>,</span><br><span class="line">      <span class="attr">"completed"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"9197021112"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can write a test that adds an item via UI, but then checks the database to make sure the new record has been added. There is <a href="https://on.cypress.io/readfile" target="_blank" rel="noopener"><code>cy.readFile</code></a> that can read file contents, but it is not powerful enough:</p><ul><li><code>cy.readFile</code> fails the test if the file does not exist</li><li>we want to write general code that can actually query any database, not just read a file.</li></ul><p>The new command <a href="https://on.cypress.io/task" target="_blank" rel="noopener"><code>cy.task</code></a> allows us to do <em>anything</em>. This is an &quot;escape&quot; hatch - a way for the end-to-end test running in the browser to run code in Node environment.</p><p>So let&#39;s write a new task - and all it has to do is to find the new text in the database. We will write this code inside <code>cypress/plugins/index.js</code> file - that is the place for all Node code inside Cypress tests.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> repoRoot = path.join(__dirname, <span class="string">'..'</span>, <span class="string">'..'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> findRecord = <span class="function"><span class="params">title</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dbFilename = path.join(repoRoot, <span class="string">'data.json'</span>)</span><br><span class="line">  <span class="keyword">const</span> contents = <span class="built_in">JSON</span>.parse(fs.readFileSync(dbFilename, <span class="string">'utf8'</span>))</span><br><span class="line">  <span class="keyword">const</span> todos = contents.todos</span><br><span class="line">  <span class="keyword">return</span> todos.find(<span class="function"><span class="params">record</span> =&gt;</span> record.title === title)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// "cy.task" can be used from specs to "jump" into Node environment</span></span><br><span class="line">  <span class="comment">// and doing anything you might want. For example, checking "data.json" file!</span></span><br><span class="line">  on(<span class="string">'task'</span>, &#123;</span><br><span class="line">    hasSavedRecord (title) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'looking for title "%s" in the database'</span>, title)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Boolean</span>(findRecord(title))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can &quot;call&quot; <code>cy.task</code> passing arguments (which should be serializable).</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; enterTodo, resetDatabase &#125; <span class="keyword">from</span> <span class="string">'./utils'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'cy.task'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(resetDatabase)</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'finds record in the database'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// random text to avoid confusion</span></span><br><span class="line">    <span class="keyword">const</span> id = Cypress._.random(<span class="number">1</span>, <span class="number">1e6</span>)</span><br><span class="line">    <span class="keyword">const</span> title = <span class="string">`todo <span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">    enterTodo(title)</span><br><span class="line">    <span class="comment">// confirm the new item has been saved</span></span><br><span class="line">    <span class="comment">// https://on.cypress.io/task</span></span><br><span class="line">    cy.task(<span class="string">'hasSavedRecord'</span>, title).should(<span class="string">'equal'</span>, <span class="literal">true</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Our test is passing!</p><p><img src="/blog/images/powerful-cy-task/finds-record.png" alt="`cy.task` finds saved record"></p><p>The terminal where I started Cypress test runner shows the console log from the <code>cy.task</code> command, which happens <em>after</em> posting the item</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST /todos 201 8.135 ms - -</span><br><span class="line">looking for title &quot;todo 166155&quot; in the database</span><br></pre></td></tr></table></figure><p>Everything is great!</p><p>Or is it?</p><h2><span id="if-at-first-you-don39t-succeed">If at first you don&#39;t succeed ...</span></h2><p>&quot;Dust yourself off and try again&quot;, right?</p><p>We have a problem - we really assume that the item is saved before we check for it. But in the real world things are delayed, items are buffered before being sent or saved, etc. That is why Cypress is <a href="https://on.cypress.io/should" target="_blank" rel="noopener">retrying all its commands</a> - because nothing happens instantly!</p><p>To simulate the problem, let me change the TodoMVC application and add a 2 second delay when adding an item.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addTodo event listener</span></span><br><span class="line">addTodo (e) &#123;</span><br><span class="line">  e.target.value = <span class="string">''</span></span><br><span class="line">  <span class="comment">// delay by 2 seconds on purpose</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">'addTodo'</span>)</span><br><span class="line">    <span class="keyword">this</span>.$store.dispatch(<span class="string">'clearNewTodo'</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you rerun the <code>ui.js</code> test file, the test still passes - the <code>cy.contains</code> just waits for 2 seconds; it keeps observing the DOM and passes as soon as the new item text is found in the list.</p><p><img src="/blog/images/powerful-cy-task/retry-ui.gif" alt="UI assertion keeps checking the DOM until the text is found"></p><p>But if you run <code>spec.js</code> the assertion <code>cy.task(&#39;hasSavedRecord&#39;, title).should(&#39;equal&#39;, true)</code> fails!</p><p><img src="/blog/images/powerful-cy-task/find-fails.png" alt="`cy.task` fails to find the record"></p><p>Notice in the screenshot that the failed assertion is placed <em>before</em> the POST XHR request from the web application to the server. This gives us a clue that we checked the database too early.</p><p>The <code>cy.task</code> command <strong>does not</strong> retry. Because Cypress has no idea what your task is going to do - it probably is NOT idempotent action. For example <code>cy.get</code> is idempotent command; it does not change the state of the application, unlike <code>cy.type</code> or <code>cy.click</code> that do. Just like Cypress cannot automatically retry <code>cy.click</code> Cypress cannot retry <code>cy.task</code> command.</p><p>But we can!</p><p>Let us wrap the code that is checking the database file with a loop. We are going to keep checking the file until we find the record or hit the time limit. Instead of returning a boolean value, we are going to return a promise, and <code>cy.task</code> will automatically wait for the promise. Here is the <code>plugins/index.js</code> code that just keeps chaining promises, checking the file every 50 milliseconds.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> findRecord = <span class="function"><span class="params">title</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dbFilename = path.join(repoRoot, <span class="string">'data.json'</span>)</span><br><span class="line">  <span class="keyword">const</span> contents = <span class="built_in">JSON</span>.parse(fs.readFileSync(dbFilename, <span class="string">'utf8'</span>))</span><br><span class="line">  <span class="keyword">const</span> todos = contents.todos</span><br><span class="line">  <span class="keyword">return</span> todos.find(<span class="function"><span class="params">record</span> =&gt;</span> record.title === title)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hasRecordAsync = <span class="function">(<span class="params">title, ms</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> delay = <span class="number">50</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ms &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Could not find record with title "<span class="subst">$&#123;title&#125;</span>"`</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> found = findRecord(title)</span><br><span class="line">    <span class="keyword">if</span> (found) &#123;</span><br><span class="line">      <span class="keyword">return</span> resolve(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      hasRecordAsync(title, ms - delay).then(resolve, reject)</span><br><span class="line">    &#125;, <span class="number">50</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// "cy.task" can be used from specs to "jump" into Node environment</span></span><br><span class="line">  <span class="comment">// and doing anything you might want. For example, checking "data.json" file!</span></span><br><span class="line">  on(<span class="string">'task'</span>, &#123;</span><br><span class="line">    hasSavedRecord (title, ms = <span class="number">3000</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">'looking for title "%s" in the database (time limit %dms)'</span>,</span><br><span class="line">        title,</span><br><span class="line">        ms</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">return</span> hasRecordAsync(title, ms)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our test now passes - beautiful!</p><p><img src="/blog/images/powerful-cy-task/task-retries.gif" alt="Task retries until passes"></p><p>Notice that the assertion <code>task(...).should(&#39;equal&#39;, true)</code> passes AFTER the web application sends XHR to the server.</p><h2><span id="making-it-beautiful">Making it beautiful</span></h2><p>User should know when the application is busy doing something, and the user should be notified when an action either succeeded or failed. Cypress command timeline shows a blue spinner while an action is being retried, and it uses icons and colors to show test commands that passed and failed. Our Node code should do the same thing for the tasks. Luckily this can be added using a nice spinner library <a href="https://github.com/sindresorhus/ora#readme" target="_blank" rel="noopener">ora</a>.</p><p>I will change my <code>plugins</code> code to wrap custom promise-returning code with Bluebird promise that will control a CLI spinner.</p><figure class="highlight js"><figcaption><span>cypress/plugins/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'bluebird'</span>)</span><br><span class="line"><span class="comment">// rest of the code is the same</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// "cy.task" can be used from specs to "jump" into Node environment</span></span><br><span class="line">  <span class="comment">// and doing anything you might want. For example, checking "data.json" file!</span></span><br><span class="line">  on(<span class="string">'task'</span>, &#123;</span><br><span class="line">    hasSavedRecord (title, ms = <span class="number">3000</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> spinner = ora(</span><br><span class="line">        <span class="string">`looking for title "<span class="subst">$&#123;title&#125;</span>" in the database`</span></span><br><span class="line">      ).start()</span><br><span class="line">      <span class="keyword">return</span> hasRecordAsync(title, ms)</span><br><span class="line">        .tap(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          spinner.succeed(<span class="string">`found "<span class="subst">$&#123;title&#125;</span>" in the database`</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .tapCatch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          spinner.fail(err.message)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is the result - the spinner working in the terminal, showing a message on success.</p><p><img src="/blog/images/powerful-cy-task/spinner-pass.gif" alt="Task spinner passes"></p><p>Here is the spinner when the task fails.</p><p><img src="/blog/images/powerful-cy-task/spinner-fail.gif" alt="Task spinner fails"></p><h2><span id="final-thoughts">Final thoughts</span></h2><p>When writing Cypress tests automatic retries are sooo convenient - you just don&#39;t have to think at all when <em>exactly</em> the things inside your application happen. You don&#39;t have to put <code>wait(5000)</code> in order to predict delays, yet the tests keep flying because they never have to wait longer than necessary. <code>cy.task</code> gives us a tremendous power to run any Node code, but we have to wrap it with retries ourself. Luckily it is simple to do so.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;There is a new super powerful command in &lt;a href=&quot;https://docs.cypress.io/guides/references/changelog.html#3-0-0&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Rolling for a Test</title>
    <link href="https://glebbahmutov.com/blog/rolling-for-test/"/>
    <id>https://glebbahmutov.com/blog/rolling-for-test/</id>
    <published>2018-06-25T04:00:00.000Z</published>
    <updated>2018-06-25T13:44:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>End-to-end test tool like <a href="https://www.cypress.io" target="_blank" rel="noopener">Cypress.io</a> usually loads a complete page from a web server and executes a series of test commands against it. Recently I have introduced a series of framework-specific adaptors that allow running end-to-end tests against individual <em>components</em> rather than web pages. You can find more details about this approach from these links</p><ul><li>read the blog post <a href="https://www.cypress.io/blog/2018/04/02/sliding-down-the-testing-pyramid/" target="_blank" rel="noopener">Sliding Down the Testing Pyramid</a> that explains the principles behind component testing using E2E test runner</li><li>watch the <a href="https://www.youtube.com/watch?v=5FnalKRjpZk" target="_blank" rel="noopener">AssertJS video</a> (<a href="https://slides.com/bahmutov/assertjs" target="_blank" rel="noopener">slides</a>) where I talk about this approach</li><li>take a look at <a href="https://github.com/bahmutov/cypress-vue-unit-test" target="_blank" rel="noopener">cypress-vue-unit-test</a> repo which has a typical adaptor for Vue.js framework.</li></ul><p>A typical component is loaded by the spec file and is &quot;mounted&quot; inside Cypress and becomes &quot;live&quot; mini web application. Here is a typical &#39;counter&#39; example for Vue framework.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ButtonCounter <span class="keyword">from</span> <span class="string">'../../components/ButtonCounter.vue'</span></span><br><span class="line"><span class="keyword">const</span> mount = <span class="built_in">require</span>(<span class="string">'cypress-vue-unit-test'</span>)</span><br><span class="line">describe(<span class="string">'ButtonCounter'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(mount(ButtonCounter))</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'starts with zero'</span>, () =&gt; &#123;</span><br><span class="line">    cy.contains(<span class="string">'button'</span>, <span class="string">'0'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Notice that even with framework-specific <code>mount</code> function, the rest of interaction with the component and the testing goes through the standard browser interfaces: DOM, network, events. This makes Cypress tests very portable - because they really are not tied to a specific implementation.</p><p>But there is a problem here, and it is that <code>import Button from &#39;...&#39;</code> statement. But first, let me explain how the test code is separated from the application&#39;s code.</p><h2><span id="e2e-vs-component">E2E vs Component</span></h2><p>Let me explain the iframing in Cypress. Here is a typical end-to-end test that loads a page &quot;localhost:3000&quot;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'opens the page'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When this test executes, Cypress runs the website &quot;localhost:3000&quot; inside an <em>iframe</em> called &quot;Your App ...&quot;. Here is the app iframe highlighted in the browser. Notice different JavaScript contexts in the DevTools.</p><p><img src="/blog/images/rolling-for-test/app-iframe.png" alt="App iframe and separate JavaScript contexts"></p><p>The test JavaScript runs in a separate iframe called &quot;Your Spec ...&quot; and thus is a walled off garden away from the application&#39;s code. Because there is no DOM in the specs (the command reporter lives in the &quot;top&quot; context), the &quot;Your Spec ...&quot; iframe is zero pixels in size.</p><p><img src="/blog/images/rolling-for-test/spec-iframe.png" alt="Spec iframe"></p><p>Good. But what happens to the JavaScript inside our <code>spec.js</code> file? It gets bundled by Cypress and loaded by the &quot;Your Spec ...&quot; iframe. Here is a typical closure with a variable <code>foo</code> in the <code>spec.js</code> and how it looks when running the spec file</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="string">'bar'</span></span><br><span class="line"><span class="keyword">debugger</span></span><br><span class="line">it.only(<span class="string">'opens the page'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/rolling-for-test/spec-closure.png" alt="Bundled spec code"></p><p>We can see the spec script with this bundled code linked from the &quot;Your Spec ...&quot; iframe document</p><p><img src="/blog/images/rolling-for-test/spec-script.png" alt="Spec script loaded by the spec iframe"></p><h2><span id="bundling-component">Bundling component</span></h2><p>Now that you understand the 2 iframes in Cypress, we can inspect what happens when you do <code>import Button from &#39;...&#39;</code> from the <strong>spec</strong> file. It bundles the component code (and possible the framework code) and <em>executes</em> the code in the &quot;Your Spec ...&quot; iframe. Hmm. That might be ... a problem. And it is! Often your component loads styles, which creates style sheets, which ... get attached to the WRONG <code>document</code> element! Thus the <code>mount</code> function for example <em>copies</em> style nodes from the &quot;Your Spec ...&quot; iframe to &quot;Your App ...&quot; iframe. There are other problems like this - styles are extremely problematic because the bundling logic often executes immediately once per spec file, and we need it to execute <em>before each</em> test.</p><p>I had such hard time making CSS-in-JS libraries like <a href="https://github.com/morishitter/picostyle" target="_blank" rel="noopener">picostyle</a> work with components, that this is still an open <a href="https://github.com/bahmutov/cypress-hyperapp-unit-test/issues/6" target="_blank" rel="noopener">issue #6</a> in <a href="https://github.com/bahmutov/cypress-hyperapp-unit-test" target="_blank" rel="noopener">cypress-hyperapp-unit-test</a>. We need to find a way to bundle components differently. I need the bundling to have these two features</p><ul><li>bundle before each test. Because we want to really isolate each test from the other tests. Brian Mann did an excellent &quot;Best Practices&quot; presentation explaining this best practice in <a href="https://www.youtube.com/watch?v=5XQOK0v_YRE" target="_blank" rel="noopener">this AssertJS presentation</a></li><li>execute the component bundle in the context of &quot;Your App ...&quot; iframe and NOT &quot;Your Spec ...&quot;. Which means you will NOT be able to easily access the component&#39;s JavaScript, but that is an acceptable tradeoff to me.</li></ul><p>So we are going to do the following: instead of importing the component and getting evaluated code like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// instead of this</span></span><br><span class="line"><span class="keyword">import</span> ButtonCounter <span class="keyword">from</span> <span class="string">'../../components/ButtonCounter.vue'</span></span><br><span class="line"><span class="keyword">const</span> mount = <span class="built_in">require</span>(<span class="string">'cypress-vue-unit-test'</span>)</span><br><span class="line">describe(<span class="string">'ButtonCounter'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(mount(ButtonCounter))</span><br><span class="line">  <span class="comment">// tests</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>we are going to just &quot;direct&quot; Cypress to bundle the component and evaluate it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// do this</span></span><br><span class="line"><span class="keyword">const</span> mount = <span class="built_in">require</span>(<span class="string">'bundle-in-app'</span>)</span><br><span class="line">describe(<span class="string">'ButtonCounter'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(mount(<span class="string">'../../components/ButtonCounter.vue'</span>))</span><br><span class="line">  <span class="comment">// tests</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The function <code>mount</code> will load the passed in file, bundle it (somehow) and then will evaluate the component, but this will be done inside the &quot;Your App ...&quot; frame. Any styles will thus be in the &quot;place&quot;, and will be attached to the right <code>document</code>, making the code work as intended.</p><h2><span id="cytask-rollup">cy.task + Rollup</span></h2><p>To bundle code on demand, I will use new Cypress command <a href="https://on.cypress.io/task" target="_blank" rel="noopener"><code>cy.task</code></a> introduced in <a href="https://docs.cypress.io/guides/references/changelog.html#3-0-0" target="_blank" rel="noopener">Cypress v3</a>. This command &quot;closes the gap&quot; and allows your test code (running in the real browser) call and execute &quot;task&quot; code that runs in Node context. Cypress is an Electron application and the Node v8 comes included!</p><p>You write your &quot;tasks&quot; in <code>cypress/plugins/index.js</code> file. You can then call tasks by name, pass argument and receive result from the spec files. Common use - file creation, database access, etc.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in test</span></span><br><span class="line">cy.task(<span class="string">'readJson'</span>, <span class="string">'cypress.json'</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// data equals:</span></span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   projectId: '12345',</span></span><br><span class="line">  <span class="comment">//   ...</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// in plugins/index.js file</span></span><br><span class="line">on(<span class="string">'task'</span>, &#123;</span><br><span class="line">  readJson () &#123;</span><br><span class="line">    <span class="comment">// reads the file relative to current working directory</span></span><br><span class="line">    <span class="keyword">return</span> fsExtra.readJson(path.join(process.cwd(), arg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Super - but how are we going to bundle actual code? For this I will use <a href="https://rollupjs.org/" target="_blank" rel="noopener">Rollup</a> - because it is a ⭐️️️️⭐️️️️⭐️️️️⭐️️️️⭐️️️️ tool and just keeps getting better! So here is my bundling code (with details omitted, you can find the full code <a href="https://github.com/bahmutov/rolling-task/blob/master/cypress/plugins/index.js" target="_blank" rel="noopener">here</a>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/plugins/index.js</span></span><br><span class="line"><span class="keyword">const</span> rollup = <span class="built_in">require</span>(<span class="string">'rollup'</span>)</span><br><span class="line"><span class="keyword">const</span> postcss = <span class="built_in">require</span>(<span class="string">'rollup-plugin-postcss'</span>)</span><br><span class="line"><span class="keyword">const</span> buble = <span class="built_in">require</span>(<span class="string">'rollup-plugin-buble'</span>)</span><br><span class="line"><span class="keyword">const</span> resolve = <span class="built_in">require</span>(<span class="string">'rollup-plugin-node-resolve'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; join &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// filenames should be from the integration folder</span></span><br><span class="line"><span class="keyword">const</span> root = join(__dirname, <span class="string">'..'</span>, <span class="string">'integration'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bundleRollup</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputOptions = &#123;</span><br><span class="line">    input: file,</span><br><span class="line">    plugins: [</span><br><span class="line">      postcss(),</span><br><span class="line">      buble(&#123;</span><br><span class="line">        jsx: <span class="string">'h'</span> <span class="comment">// for Hyperapp</span></span><br><span class="line">      &#125;),</span><br><span class="line">      resolve()</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create a bundle</span></span><br><span class="line">  <span class="keyword">return</span> rollup.rollup(inputOptions).then(<span class="function"><span class="params">bundle</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> outputOptions = &#123;</span><br><span class="line">      dir: <span class="string">'dist'</span>,</span><br><span class="line">      file: <span class="string">'out.js'</span>,</span><br><span class="line">      format: <span class="string">'iife'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bundle.generate(outputOptions).then(<span class="function">(<span class="params">&#123; code, map &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// or write the bundle to disk</span></span><br><span class="line">      <span class="comment">// ? how to avoid writing to disk?</span></span><br><span class="line">      <span class="keyword">return</span> bundle.write(outputOptions)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on, config</span>) =&gt;</span> &#123;</span><br><span class="line">  on(<span class="string">'task'</span>, &#123;</span><br><span class="line">    roll (filename) &#123;</span><br><span class="line">      filename = join(root, filename)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'file to bundle %s'</span>, filename)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> bundleRollup(filename)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code is good for bundling Hyperapp JSX components / applications that use Picostyle, and the important detail - the bundler produces a stand alone IIFE source that just needs to be included as a <code>&lt;script&gt;...&lt;/script&gt;</code> element to work. Thus the rest of the &quot;mount&quot; function is simple - I will just run this before each test directly in the spec file.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/integration/spec.js</span></span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.task(<span class="string">'roll'</span>, <span class="string">'./text-app.js'</span>).then(<span class="function">(<span class="params">&#123; code &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// grab the references to the "Your App ..." document</span></span><br><span class="line">    <span class="keyword">const</span> doc = cy.state(<span class="string">'document'</span>)</span><br><span class="line">    <span class="keyword">const</span> script_tag = doc.createElement(<span class="string">'script'</span>)</span><br><span class="line">    script_tag.type = <span class="string">'text/javascript'</span></span><br><span class="line">    script_tag.text = code</span><br><span class="line">    doc.body.appendChild(script_tag)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> checkFont = <span class="function"><span class="params">size</span> =&gt;</span></span><br><span class="line">  cy</span><br><span class="line">    .contains(<span class="string">'.p0'</span>, <span class="string">'Picostyle'</span>)</span><br><span class="line">    .invoke(<span class="string">'css'</span>, <span class="string">'fontSize'</span>)</span><br><span class="line">    .should(<span class="string">'be.equal'</span>, size)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'uses smaller font on smaller screen'</span>, () =&gt; &#123;</span><br><span class="line">  cy.viewport(<span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">  cy.wait(<span class="number">1000</span>)</span><br><span class="line">  checkFont(<span class="string">'32px'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The loaded test shows the style</p><p><img src="/blog/images/rolling-for-test/picostyle.png" alt="Picostyle working"></p><p>What is the root file &quot;text-app.js&quot; that we have bundled? Here it is</p><figure class="highlight js"><figcaption><span>cypress/integration/text-app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cypress/integration/text-app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; app &#125; <span class="keyword">from</span> <span class="string">'hyperapp'</span></span><br><span class="line"><span class="keyword">import</span> &#123; view &#125; <span class="keyword">from</span> <span class="string">'../../components/view'</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  text: <span class="string">'Picostyle'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line">app(state, actions, view, <span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure><p>It is a full web application that we construct just for the test. The <code>view</code> function comes from the <code>components</code> folder though - this is our code that we want to exercise - we just combine <code>view</code> with test <code>actions</code> and <code>state</code>.</p><figure class="highlight jsx"><figcaption><span>components/view.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/view.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">'hyperapp'</span></span><br><span class="line"><span class="keyword">import</span> picostyle <span class="keyword">from</span> <span class="string">'picostyle'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ps = picostyle(h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> view = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> keyColor = <span class="string">'#f07'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Text = ps(<span class="string">'span'</span>)(&#123;</span><br><span class="line">    fontSize: <span class="string">'64px'</span>,</span><br><span class="line">    cursor: <span class="string">'pointer'</span>,</span><br><span class="line">    color: <span class="string">'#fff'</span>,</span><br><span class="line">    padding: <span class="string">'0.4em'</span>,</span><br><span class="line">    transition: <span class="string">'all .2s ease-in-out'</span>,</span><br><span class="line">    textDecoration: <span class="string">'none'</span>,</span><br><span class="line">    <span class="string">':hover'</span>: &#123;</span><br><span class="line">      transform: <span class="string">'scale(1.3)'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'@media (max-width: 450px)'</span>: &#123;</span><br><span class="line">      fontSize: <span class="string">'32px'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Wrapper = ps(<span class="string">'div'</span>)(&#123;</span><br><span class="line">    display: <span class="string">'flex'</span>,</span><br><span class="line">    justifyContent: <span class="string">'center'</span>,</span><br><span class="line">    alignItems: <span class="string">'center'</span>,</span><br><span class="line">    width: <span class="string">'100vw'</span>,</span><br><span class="line">    height: <span class="string">'100vh'</span>,</span><br><span class="line">    backgroundColor: keyColor</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Wrapper&gt;</span><br><span class="line">      &lt;Text&gt;&#123;state.text&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Wrapper&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So our bundler creates a combination of <code>cypress/integration/text-app.js</code> with <code>components/view.js</code> (and <code>hyperapp</code> and <code>picostyle</code>) and we pass this bundled JavaScript as a resolved file from <code>cy.task</code> back to the code running inside the &quot;Your Spec ...&quot; iframe which gets the reference to the &quot;Your App ...&quot; <code>document</code> object and adds a script tag, which evaluates the bundled script, mounting the application! Easy peasy (if you remember which iframe should execute what that is)!</p><p>You can find this code in <a href="https://github.com/bahmutov/rolling-task" target="_blank" rel="noopener">rolling-task</a> repository.</p><p>Happy Testing!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;End-to-end test tool like &lt;a href=&quot;https://www.cypress.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cypress.io&lt;/a&gt; usually loads a complete page fr
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="hyperapp" scheme="https://glebbahmutov.com/blog/tags/hyperapp/"/>
    
  </entry>
  
  <entry>
    <title>Tested live documentation is a thing with MDX, Docz and Cypress</title>
    <link href="https://glebbahmutov.com/blog/tested-live-documentation/"/>
    <id>https://glebbahmutov.com/blog/tested-live-documentation/</id>
    <published>2018-06-24T04:00:00.000Z</published>
    <updated>2018-06-25T12:08:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>I love documenting things. I hate when my documentation is out of date. For unit tests I have built a tool called <a href="https://github.com/bahmutov/xplain#readme" target="_blank" rel="noopener">xplain</a> to convert unit tests into Markdown examples to be included in README. But what about UI components? Turns out you can have an interactive documentation for your components with a new tool called <a href="https://docz.site" target="_blank" rel="noopener">docz</a> that is just a pleasure to use. Currently <code>docz</code> supports only React components, but support for other frameworks might be coming.</p><h2><span id="live-documentation-with-docz">Live documentation with Docz</span></h2><p><code>docz</code> uses <a href="https://github.com/mdx-js/mdx" target="_blank" rel="noopener">MDX document</a> format which is a Markdown enhanced with JSX. If you want to see Docz in action, take a look at the short intro video by clicking the link below the image.</p><p><a href="https://www.docz.site?wvideo=cl69p284xk" target="_blank" rel="noopener"><img src="https://embedwistia-a.akamaihd.net/deliveries/8ac81e1f0fc13c9401a4da81cbe97cf807653611.jpg?image_play_button_size=2x&amp;image_crop_resized=960x540&amp;image_play_button=1&amp;image_play_button_color=4568f3e0" alt="See docz preview video by clicking on this link"></a></p><p>Great, so we can write component documentation <em>really quickly</em>, and our documentation site is interactive! Take a look at the example repo <a href="https://github.com/bahmutov/cy-docz" target="_blank" rel="noopener">bahmutov/cy-docz</a> - just a couple of components, with <code>Button</code> component showing &quot;onClick&quot; handler that does &quot;alert&quot; message. Clone the repo, start the <code>docz</code> server with <code>npm run dev</code> and open <code>localhost:3000</code> - the documentation is live</p><p><img src="/blog/images/cy-docz/docz-alert.gif" alt="Button onClick triggers alert"></p><p>Here is the relevant part from the <code>Button.mdx</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">name: Button</span><br><span class="line">menu: Components</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">import &#123; Playground &#125; from &apos;docz&apos;</span><br><span class="line">import Button from &apos;./Button&apos;</span><br><span class="line"></span><br><span class="line">## With onclick handler</span><br><span class="line"></span><br><span class="line">&lt;Playground&gt;</span><br><span class="line">    &lt;Button onClick=&#123;() =&gt; alert(&apos;hi there&apos;)&#125;&gt;Shows alert&lt;/Button&gt;</span><br><span class="line">&lt;/Playground&gt;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> you can create &quot;index&quot; page by creating a MDX file with &quot;route /&quot; meta setting.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">name: Index page</span><br><span class="line">route: /</span><br><span class="line">order: 1</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">This will be the index page</span><br></pre></td></tr></table></figure><p>And now let us make sure our documentation is never out of date with respect to the source component. We will test it - we will add end-to-end tests to our live documentation using the <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress.io</a> test runner.</p><h2><span id="testing-documentation">Testing documentation</span></h2><p>I will place my spec files right in <code>components</code> folder to be next to the source code <code>Button.jsx</code> and its documentation <code>Button.mdx</code> files.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">  Alert.jsx</span><br><span class="line">  Alert.mdx</span><br><span class="line">  Button-spec.js</span><br><span class="line">  Button.jsx</span><br><span class="line">  Button.mdx</span><br></pre></td></tr></table></figure><p>And I will point Cypress to load <code>*-spec.js</code> files from this folder, while ignoring <code>.jsx</code> or <code>.mdx</code> files using <code>cypress.json</code> configuration file. I also set the viewport width to be wide to avoid Docz menu covering the buttons (<code>docz</code> output is not yet responsive)</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"integrationFolder"</span>: <span class="string">"components"</span>,</span><br><span class="line">  <span class="attr">"ignoreTestFiles"</span>: <span class="string">"*.*x"</span>,</span><br><span class="line">  <span class="attr">"viewportWidth"</span>: <span class="number">1400</span>,</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:3000"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is a test to confirm the documentation page shows <code>alert</code> message when the user clicks the button. The test assumes the <code>docz</code> size is running locally via <code>npm run dev</code> command.</p><figure class="highlight js"><figcaption><span>Button-spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"><span class="comment">//@ts-check</span></span><br><span class="line">describe(<span class="string">'Button'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">'/components-button'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'shows alert on click'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> stub = cy.stub()</span><br><span class="line">    cy.on(<span class="string">'window:alert'</span>, stub)</span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'h2#with-onclick-handler + button'</span>)</span><br><span class="line">    .click()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      expect(stub).to.have.been.calledOnce</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>When we run this test it ... shows no <code>alert</code> dialog, because Cypress automatically intercepts it.</p><p><img src="/blog/images/cy-docz/test-alert.gif" alt="Button alert test"></p><p>But you can still see that the Button documentation behaves as expected - the Cypress command list shows the stubbed invocation.</p><p><img src="/blog/images/cy-docz/stub-alert.png" alt="Alert was stubbed and called"></p><p>Great! We can sleep better knowing that our documentation is really working. You can find a few more tests I wrote against <code>Button.mdx</code> in <a href="https://github.com/bahmutov/cy-docz/blob/master/components/Button-spec.js" target="_blank" rel="noopener">components/Button-spec.js</a></p><h2><span id="running-tests">Running tests</span></h2><p>How can we run <code>docz</code> and test it quickly? We need to start the <code>docz</code> server, wait for it to finish bundling (it might take a few seconds even for small projects), then run Cypress tests. There is a utility <a href="http://github.com/bahmutov/start-server-and-test#readme" target="_blank" rel="noopener">start-server-and-test</a> I wrote that makes it easy. After installing it as a dev dependency, here are my package scripts</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"start-test dev http-get://localhost:3000 cy:run"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"docz dev"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"docz build"</span>,</span><br><span class="line">    <span class="attr">"cy:open"</span>: <span class="string">"cypress open"</span>,</span><br><span class="line">    <span class="attr">"cy:run"</span>: <span class="string">"cypress run"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Two observations:</p><ul><li>I just need to execute <code>npm test</code> to make sure my documentation is correct</li><li><code>docz</code> is using <code>webpack</code> dev server under the hood, which does not reply to <code>HEAD</code> requests. Thus I need to use <code>GET</code> requests to ping the server to know when it&#39;s ready. Thus the url to ping is <code>http-get://localhost:3000</code> and not simply <code>http://localhost:3000</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">$ npm t</span><br><span class="line"></span><br><span class="line">&gt; cy-docz@1.0.0 test /Users/gleb/git/cy-docz</span><br><span class="line">&gt; start-test dev http-get://localhost:3000 cy:run</span><br><span class="line"></span><br><span class="line">starting server using command &quot;npm run dev&quot;</span><br><span class="line">and when url &quot;http-get://localhost:3000&quot; is responding</span><br><span class="line">running tests using command &quot;cy:run&quot;</span><br><span class="line"></span><br><span class="line">&gt; cy-docz@1.0.0 dev /Users/gleb/git/cy-docz</span><br><span class="line">&gt; docz dev</span><br><span class="line"></span><br><span class="line">ℹ  info      Removing old app files</span><br><span class="line">ℹ  info      Creating new docz files</span><br><span class="line">ℹ  info      Setup entries socket on port 8089</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> DONE  Compiled successfully in 4766ms                                   10:58:27</span><br><span class="line"></span><br><span class="line"> I  You application is running at http://localhost:3000</span><br><span class="line"></span><br><span class="line"> &gt; cy-docz@1.0.0 cy:run /Users/gleb/git/cy-docz</span><br><span class="line">&gt; cypress run</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Starting)</span><br><span class="line"></span><br><span class="line">  ┌─────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ Cypress:  3.0.1                                                             │</span><br><span class="line">  │ Browser:  Electron 59 (headless)                                            │</span><br><span class="line">  │ Specs:    1 found (Button-spec.js)                                          │</span><br><span class="line">  └─────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br><span class="line">  Running: Button-spec.js...                                            (1 of 1)</span><br><span class="line">   ✓ has menu bar (narrow screen) (1124ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  4 passing (6s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  (Results)</span><br><span class="line"></span><br><span class="line">  ┌──────────────────────────────┐</span><br><span class="line">  │ Tests:        4              │</span><br><span class="line">  │ Passing:      4              │</span><br><span class="line">  │ Failing:      0              │</span><br><span class="line">  │ Pending:      0              │</span><br><span class="line">  │ Skipped:      0              │</span><br><span class="line">  │ Screenshots:  0              │</span><br><span class="line">  │ Video:        true           │</span><br><span class="line">  │ Duration:     5 seconds      │</span><br><span class="line">  │ Spec Ran:     Button-spec.js │</span><br><span class="line">  └──────────────────────────────┘</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  (Video)</span><br><span class="line"></span><br><span class="line">  - Started processing:   Compressing to 32 CRF</span><br><span class="line">  - Finished processing:  /Users/gleb/git/cy-docz/cypress/videos/Button-spec.js.mp4 (0 seconds)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=================================================================================</span><br><span class="line"></span><br><span class="line">  (Run Finished)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Spec                                     Tests  Pass…  Fail…  Pend…  Skip…</span><br><span class="line">  ┌─────────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">  │ ✔ Button-spec.js                   00:05      4      4      -      -      - │</span><br><span class="line">  └─────────────────────────────────────────────────────────────────────────────┘</span><br><span class="line">    All specs passed!                  00:05      4      4      -      -      -</span><br></pre></td></tr></table></figure><h2><span id="deploying-docs">Deploying docs</span></h2><p><code>docz</code> comes with <code>build</code> command that can package entire documentation and components into a static site.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line"></span><br><span class="line">&gt; cy-docz@1.0.0 build /Users/gleb/git/cy-docz</span><br><span class="line">&gt; docz build</span><br><span class="line"></span><br><span class="line">▶  start     Creating an optimized production build...</span><br><span class="line">✔  success   Compiled successfully.</span><br><span class="line"></span><br><span class="line">File sizes after gzip:</span><br><span class="line"></span><br><span class="line">  138.67 KB  dist/static/js/vendors.360b5044.js</span><br><span class="line">  1.36 KB    dist/static/js/components-button.d13b64c5.js</span><br><span class="line">  1.15 KB    dist/static/js/runtime~app.0f53f534.js</span><br><span class="line">  1023 B     dist/static/js/components-alert.b0a4263a.js</span><br><span class="line">  950 B      dist/static/js/app.7db074eb.js</span><br></pre></td></tr></table></figure><p>We can deploy the docs to GitHub pages using <a href="https://www.npmjs.com/package/gh-pages" target="_blank" rel="noopener">gh-pages</a>. Here are the relevant scripts from <code>package.json</code>, and because I plan to host the docs at <code>https://glebbahmutov.com/cy-docz</code> I need to pass <code>base</code> parameter so that all resources are prefixed with <code>/cy-docz</code> in the generated HTML</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"docz build --base /cy-docz/"</span>,</span><br><span class="line">    <span class="attr">"predeploy"</span>: <span class="string">"npm run build"</span>,</span><br><span class="line">    <span class="attr">"deploy"</span>: <span class="string">"gh-pages -d .docz/dist"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can see the deployed documentation at <a href="https://glebbahmutov.com/cy-docz">https://glebbahmutov.com/cy-docz</a> url. Best feature - we can test the deployed documentation just to make sure the build process did not break our documentation (that would be awful, right?)</p><p>So we add one more command to our <code>package.json</code> file to run Cypress tests against the public site by passing <code>baseUrl</code> as a CLI argument - check out the script &quot;test-deployed&quot; below:</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"start-test dev http-get://localhost:3000 cy:run"</span>,</span><br><span class="line">    <span class="attr">"test-deployed"</span>: <span class="string">"cypress run --config baseUrl=https://glebbahmutov.com/cy-docz"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"docz dev"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"docz build --base /cy-docz/"</span>,</span><br><span class="line">    <span class="attr">"cy:open"</span>: <span class="string">"cypress open"</span>,</span><br><span class="line">    <span class="attr">"cy:run"</span>: <span class="string">"cypress run"</span>,</span><br><span class="line">    <span class="attr">"predeploy"</span>: <span class="string">"npm run build"</span>,</span><br><span class="line">    <span class="attr">"deploy"</span>: <span class="string">"gh-pages -d .docz/dist"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After each deploy we validate the documentation using Cypress</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ npm run test-deployed</span><br><span class="line"></span><br><span class="line">&gt; cy-docz@1.0.0 test-deployed /Users/gleb/git/cy-docz</span><br><span class="line">&gt; cypress run --config baseUrl=https://glebbahmutov.com/cy-docz</span><br><span class="line"></span><br><span class="line">  Running: Button-spec.js...                                            (1 of 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Button</span><br><span class="line">    ✓ shows on the docz page (1099ms)</span><br><span class="line">    ✓ shows alert on click (1953ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  2 passing (3s)</span><br></pre></td></tr></table></figure><p>Great, live interactive documentation that is tested with very little effort - just use <a href="https://docz.site" target="_blank" rel="noopener">docz</a> and <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a> together.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I love documenting things. I hate when my documentation is out of date. For unit tests I have built a tool called &lt;a href=&quot;https://github
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Trying GraphQL</title>
    <link href="https://glebbahmutov.com/blog/trying-graphql/"/>
    <id>https://glebbahmutov.com/blog/trying-graphql/</id>
    <published>2018-06-15T04:00:00.000Z</published>
    <updated>2018-06-21T20:09:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="defining-schema">Defining schema</span></h2><p>You start with a schema - a description of what the clients can ask. For example if we have a &quot;product&quot; item we can describe like this below.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> typeDefs = <span class="string">`</span></span><br><span class="line"><span class="string">  "describes Product item"</span></span><br><span class="line"><span class="string">  type Product &#123;</span></span><br><span class="line"><span class="string">    _id: ID</span></span><br><span class="line"><span class="string">    name: String! # name is required</span></span><br><span class="line"><span class="string">    qty: Int</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>For now this is a simple JavaScript string.</p><h2><span id="simple-queries">Simple queries</span></h2><p>It is not enough to describe the <code>Product</code> schema. We also should describe <em>queries</em> that return it. Let us return a single product by id, or list of all products. I am also putting comments into the schema string as quoted lines or after <code>#</code> character. You can find more schema examples in the <a href="https://github.com/apollographql/graphql-tools" target="_blank" rel="noopener">graph-tools repo</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> typeDefs = <span class="string">`</span></span><br><span class="line"><span class="string">  "describes Product item"</span></span><br><span class="line"><span class="string">  type Product &#123;</span></span><br><span class="line"><span class="string">    _id: ID</span></span><br><span class="line"><span class="string">    name: String!</span></span><br><span class="line"><span class="string">    qty: Int</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line"><span class="string">  a couple of queries to get a single product</span></span><br><span class="line"><span class="string">  or an array of all products</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line"><span class="string">  type Query &#123;</span></span><br><span class="line"><span class="string">    getProduct(_id: ID): Product</span></span><br><span class="line"><span class="string">    allProducts: [Product]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h2><span id="resolvers">Resolvers</span></h2><p>Each query should return actual data somehow. We need to map each query to a <em>resolver</em> function. Let us use hard coded data for now. Here is our data</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> products = [&#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  name: <span class="string">'foo'</span>,</span><br><span class="line">  qty: <span class="number">10</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  id: <span class="number">2</span>,</span><br><span class="line">  name: <span class="string">'bar'</span>,</span><br><span class="line">  qty: <span class="number">3</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>Here are the two resolvers we need - one for <code>allProducts</code> and another for <code>getProduct</code>. These methods map by name to the properties inside <code>type Query</code> in our type definitions.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resolvers = &#123;</span><br><span class="line">  Query: &#123;</span><br><span class="line">    <span class="comment">// simple resolver - returns array of products</span></span><br><span class="line">    allProducts () &#123;</span><br><span class="line">      <span class="keyword">return</span> products</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// grab the argument "id" by deconstructing the second argument</span></span><br><span class="line">    getProduct (_, &#123;id&#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> products.find(<span class="function"><span class="params">p</span> =&gt;</span> p.id === id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="server">Server</span></h2><p>We now can use <a href="https://github.com/apollographql/graphql-tools" target="_blank" rel="noopener">graphql-tools</a> to make middleware for an Express.js server.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span></span><br><span class="line"><span class="keyword">import</span> graphqlHTTP <span class="keyword">from</span> <span class="string">'express-graphql'</span></span><br><span class="line"><span class="keyword">import</span> &#123; makeExecutableSchema &#125; <span class="keyword">from</span> <span class="string">'graphql-tools'</span></span><br><span class="line"><span class="comment">// typeDefs + resolvers =&gt; schema</span></span><br><span class="line"><span class="keyword">const</span> schema = makeExecutableSchema(&#123;</span><br><span class="line">  typeDefs,</span><br><span class="line">  resolvers</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">3000</span></span><br><span class="line"><span class="comment">// put graphQL at /g endpoint</span></span><br><span class="line">app.use(</span><br><span class="line">  <span class="string">'/g'</span>,</span><br><span class="line">  graphqlHTTP(&#123;</span><br><span class="line">    schema,</span><br><span class="line">    graphiql: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.listen(PORT, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server running at <span class="subst">$&#123;PORT&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Once we start the server, we can either the graphical interface (open your browsers at <code>localhost:3000</code>) or do regular <code>GET</code> requests from the command line. I am using excellent <a href="https://github.com/jakubroztocil/httpie" target="_blank" rel="noopener">httpie</a> client.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">http http://localhost:3000/g?query=&#123;allProducts&#123;id&#125;&#125;</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;allProducts&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;id&quot;: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;id&quot;: 2</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Excellent - the result is placed into <code>data</code> key, and we have only asked for ids. Let us ask for more fields; we can ask for <code>name</code> and <code>qty</code> of each product. Note that from the command line I need to escape commas</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ http http://localhost:3000/g?query=&#123;allProducts&#123;id\,name\,qty&#125;&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;allProducts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: 1,</span><br><span class="line">                &quot;name&quot;: &quot;foo&quot;,</span><br><span class="line">                &quot;qty&quot;: 10</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: 2,</span><br><span class="line">                &quot;name&quot;: &quot;bar&quot;,</span><br><span class="line">                &quot;qty&quot;: 3</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If I ask for a non-existent property, instead of <code>data</code> field, the server will return a list of errors.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ http http://localhost:3000/g?query=&#123;allProducts&#123;foo&#125;&#125;</span><br><span class="line">HTTP/1.1 400 Bad Request</span><br><span class="line">&#123;</span><br><span class="line">    &quot;errors&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;locations&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;column&quot;: 14,</span><br><span class="line">                    &quot;line&quot;: 1</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;message&quot;: &quot;Cannot query field \&quot;foo\&quot; on type \&quot;Product\&quot;.&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let us ask for a specific item (and we only ask for <code>id</code> and <code>name</code> properties).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ http http://localhost:3000/g?query=&#123;getProduct\(id:1\)&#123;id\,name&#125;&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;getProduct&quot;: &#123;</span><br><span class="line">            &quot;id&quot;: 1,</span><br><span class="line">            &quot;name&quot;: &quot;foo&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is kind of annoying to escape special URL symbols, like <code>,</code> and <code>()</code> when making these requests from command line.</p><h2><span id="graphql-files">Graphql files</span></h2><p>Instead of using strings, we can place our GraphQL schema definitions into <code>.graphql</code> files and use a helper module to import them. I will use <a href="https://github.com/prismagraphql/graphql-import" target="_blank" rel="noopener">graphql-import</a> to import the schema file (and the default VSCode syntax highlighting)</p><figure class="highlight plain"><figcaption><span>schema.graphql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&quot;describes Product item&quot;</span><br><span class="line">type Product &#123;</span><br><span class="line">  id: Int! # integer id property is required</span><br><span class="line">  name: String! # name string is required</span><br><span class="line">  qty: Int # integer quality is optional</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a couple of queries to get a single product</span><br><span class="line">or an array of all products</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">type Query &#123;</span><br><span class="line">  getProduct(id: Int!): Product</span><br><span class="line">  allProducts: [Product]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; importSchema &#125; <span class="keyword">from</span> <span class="string">'graphql-import'</span></span><br><span class="line"><span class="keyword">const</span> typeDefs = importSchema(<span class="string">'./schema.graphql'</span>)</span><br><span class="line"><span class="comment">// works the same way</span></span><br></pre></td></tr></table></figure><p>We can even split the schema file further. Place &quot;Person&quot; definition in <code>person.graphql</code></p><figure class="highlight plain"><figcaption><span>person.graphql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;describes Product item&quot;</span><br><span class="line">type Product &#123;</span><br><span class="line">  id: Int! # integer id property is required</span><br><span class="line">  name: String! # name string is required</span><br><span class="line">  qty: Int # integer quality is optional</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and import &quot;Person&quot; using <code>import</code> in the comment from <code>schema.graphql</code></p><figure class="highlight plain"><figcaption><span>schema.graphql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># import Person from &quot;person.graphql&quot;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">a couple of queries to get a single product</span><br><span class="line">or an array of all products</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">type Query &#123;</span><br><span class="line">  getProduct(id: Int!): Product</span><br><span class="line">  allProducts: [Product]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and now the GraphQL schemas are organized much better.</p><h2><span id="connecting-query-to-the-database">Connecting query to the database</span></h2><p>Next, we need to fetch real data from the database. I went through the <a href="https://egghead.io/courses/build-graphql-apis-with-node-js-on-mongodb" target="_blank" rel="noopener">Build GraphQL APIs with Node.js on MongoDB</a> Egghead.io course, coding along. You can find the working version in the <a href="https://github.com/bahmutov/graphql-node-mongo-egghead-course" target="_blank" rel="noopener">bahmutov/graphql-node-mongo-egghead-course</a> repository. The <code>master</code> branch has a local MongoDB database (via Mongoose ORM). As an experiment, I also  implemented the database API by using <a href="https://github.com/Vincit/objection.js/tree/master/examples/express-es6" target="_blank" rel="noopener">objection.js</a> ORM on top of <code>sqlite3</code>. Check out branch <a href="https://github.com/bahmutov/graphql-node-mongo-egghead-course/tree/objection-1" target="_blank" rel="noopener"><code>objection-1</code></a> to see the code. Here is a typical resolver:</p><figure class="highlight javascript"><figcaption><span>resolvers.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Product <span class="keyword">from</span> <span class="string">'./models/product'</span> <span class="comment">// objection model</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> resolvers = &#123;</span><br><span class="line">  Query: &#123;</span><br><span class="line">    <span class="keyword">async</span> allProducts() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> Product.query()</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> getProduct(_, &#123; _id &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> Product.query().findById(_id)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Quite nice - each resolver can be a Promise-returning function that maps nicely to the database query.</p><h2><span id="mutations">Mutations</span></h2><p>Having just static queries is not enough. How do we write mutations using GraphQL that add new data items or update existing ones? We write <code>type Mutation</code> type definition! For example, here are typical queries for adding / deleting / updating a <code>Product</code> type.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">input ProductInput &#123;</span><br><span class="line">  name: String!</span><br><span class="line">  qty: Int!</span><br><span class="line">&#125;</span><br><span class="line">type Mutation &#123;</span><br><span class="line">  createProduct(input: ProductInput): Product</span><br><span class="line">  updateProduct(_id: ID, input: ProductInput): Product</span><br><span class="line">  &quot;when deleting an item, just return the ID&quot;</span><br><span class="line">  deleteProduct(_id: ID): ID</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The implementation in resolvers is very similar to the queries.</p><figure class="highlight javascript"><figcaption><span>resolvers.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> resolvers = &#123;</span><br><span class="line">  <span class="comment">// Query ..</span></span><br><span class="line">  Mutation: &#123;</span><br><span class="line">    <span class="comment">// creating a single product</span></span><br><span class="line">    <span class="keyword">async</span> createProduct(_, &#123; input &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> Product.query().insert(input)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// updating a product by ID</span></span><br><span class="line">    <span class="keyword">async</span> updateProduct(_, &#123; _id, input &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> Product.query().patchAndFetchById(_id, input)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> deleteProduct(_, &#123; _id &#125;) &#123;</span><br><span class="line">      <span class="keyword">await</span> Product.query().deleteById(_id)</span><br><span class="line">      <span class="keyword">return</span> _id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Perfect 🎉</p><h2><span id="apollo-server-v2">Apollo Server v2</span></h2><p>While you can use any HTTP server with GraphQL endpoint, it makes sense to try something that is optimized for serving GraphQL queries. <a href="https://www.apollographql.com/docs/apollo-server/" target="_blank" rel="noopener">Apollo Server</a> is one such thing. Its v2 promises to be pretty good, so I am trying a release candidate (<code>npm i apollo-server@rc</code>). You can run its stand alone like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ApolloServer, gql &#125; = <span class="built_in">require</span>(<span class="string">'apollo-server'</span>)</span><br><span class="line"><span class="keyword">const</span> typeDefs = gql<span class="string">`</span></span><br><span class="line"><span class="string">  # your type definitions</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">const</span> resolvers = &#123;&#125; <span class="comment">// your resolvers</span></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> ApolloServer(&#123; typeDefs, resolvers &#125;)</span><br><span class="line">server.listen().then(<span class="function">(<span class="params">&#123; url &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`🚀  Server ready at <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Or you can apply ApolloServer v2 as middleware to existing server.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; ApolloServer, gql &#125; = <span class="built_in">require</span>(<span class="string">'apollo-server'</span>)</span><br><span class="line"><span class="keyword">const</span> typeDefs = gql<span class="string">`</span></span><br><span class="line"><span class="string">  # your type definitions</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">const</span> resolvers = &#123;&#125; <span class="comment">// your resolvers</span></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> ApolloServer(&#123; typeDefs, resolvers &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">4000</span></span><br><span class="line">server.applyMiddleware(&#123; app &#125;)</span><br><span class="line"></span><br><span class="line">app.listen(PORT, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`server running at <span class="subst">$&#123;PORT&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`try GraphQL playground at <span class="subst">$&#123;PORT&#125;</span>/graphql`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>If you get an API key from a Apollo organization, you can enable <a href="https://www.apollographql.com/docs/engine/performance.html" target="_blank" rel="noopener">performance tracing</a> on your server which is very important, because all queries go through the same endpoint, and so &quot;traditional&quot; performance monitoring is not going to work very well.</p><h2><span id="performance">Performance</span></h2><p>You can turn on performance tracing in some GraphQL servers. For example</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> ApolloServer(&#123;</span><br><span class="line">  ...schema,</span><br><span class="line">  tracing: <span class="literal">true</span>,</span><br><span class="line">  cacheControl: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Then make a query request like</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ http :3000/graphql?query=&#123;hello</span><br></pre></td></tr></table></figure><p>and you should see performance information with the result</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"hello"</span>: <span class="string">"Welcome to G"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"extensions"</span>: &#123;</span><br><span class="line">    <span class="attr">"cacheControl"</span>: &#123;</span><br><span class="line">      <span class="attr">"hints"</span>: [],</span><br><span class="line">      <span class="attr">"version"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"tracing"</span>: &#123;</span><br><span class="line">      <span class="attr">"duration"</span>: <span class="number">2193735</span>,</span><br><span class="line">      <span class="attr">"endTime"</span>: <span class="string">"2018-06-21T20:06:47.368Z"</span>,</span><br><span class="line">      <span class="attr">"execution"</span>: &#123;</span><br><span class="line">        <span class="attr">"resolvers"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"duration"</span>: <span class="number">1495979</span>,</span><br><span class="line">            <span class="attr">"fieldName"</span>: <span class="string">"hello"</span>,</span><br><span class="line">            <span class="attr">"parentType"</span>: <span class="string">"Query"</span>,</span><br><span class="line">            <span class="attr">"path"</span>: [</span><br><span class="line">              <span class="string">"hello"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"returnType"</span>: <span class="string">"String!"</span>,</span><br><span class="line">            <span class="attr">"startOffset"</span>: <span class="number">666848</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"startTime"</span>: <span class="string">"2018-06-21T20:06:47.366Z"</span>,</span><br><span class="line">      <span class="attr">"version"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is what <a href="https://www.apollographql.com/engine" target="_blank" rel="noopener">ApolloEngine</a> uses to show performance stats for the GraphQL queries.</p><h2><span id="links">Links</span></h2><p>There are many excellent resources for learning GraphQL. Some of the ones I read are</p><ul><li><a href="https://egghead.io/courses/build-graphql-apis-with-node-js-on-mongodb" target="_blank" rel="noopener">Build GraphQL APIs with Node.js on MongoDB</a> Egghead.io course</li><li><a href="https://fluent-conf-apollo.surge.sh/#/" target="_blank" rel="noopener">Front end developers guide to GraphQL</a> slides</li><li><a href="https://speakerdeck.com/unicodeveloper/authentication-and-authorization-in-graphql?slide=1" target="_blank" rel="noopener">Authentication &amp; Authorization in GraphQL</a> slides</li></ul><h2><span id="extras">Extras</span></h2><p>I have several other blog posts that are trying a technology. Check out these links</p><ul><li><a href="../trying-out-redis">Trying Redis</a></li><li><a href="../trying-typescript">Trying TypeScript</a></li><li><a href="../playing-with-pouchdb">Playing with PouchDB</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;defining-schema&quot;&gt;Defining schema&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;You start with a schema - a description of what the clients can ask. For exampl
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
      <category term="graphql" scheme="https://glebbahmutov.com/blog/tags/graphql/"/>
    
  </entry>
  
  <entry>
    <title>Trying Redis</title>
    <link href="https://glebbahmutov.com/blog/trying-out-redis/"/>
    <id>https://glebbahmutov.com/blog/trying-out-redis/</id>
    <published>2018-04-28T04:00:00.000Z</published>
    <updated>2018-06-16T17:01:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have never had to manage or really use Redis in my professional life. Other people have set one up for me for <a href="../express-sessions/">session storage</a> or other needs. But recently I needed a quick cache for checking external urls, so I have decided to finally really use Redis.</p><p>The goal of Redis NoSQL DB is simple. Given a key and a value (almost any serializable value would work) write a value into the database. You can even set an expiration duration on the key - after certain time the value will be automatically deleted from the Redis database.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Redis set command</span><br><span class="line">set &lt;key&gt; &lt;value&gt;</span><br><span class="line">get &lt;key&gt;</span><br><span class="line">// you can expire values after a certain time</span><br><span class="line">set &lt;key&gt; &lt;value&gt; EX &lt;seconds&gt;</span><br><span class="line">// set command options (https://redis.io/commands/set)</span><br><span class="line">// EX seconds -- Set the specified expire time, in seconds.</span><br><span class="line">// PX milliseconds -- Set the specified expire time, in milliseconds.</span><br><span class="line">// NX -- Only set the key if it does not already exist.</span><br><span class="line">// XX -- Only set the key if it already exist.</span><br></pre></td></tr></table></figure><p>Using a popular Node Redis client <a href="https://github.com/luin/ioredis" target="_blank" rel="noopener">ioredis</a> this looks like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = process.env.REDIS_URL</span><br><span class="line"><span class="keyword">const</span> Redis = <span class="built_in">require</span>(<span class="string">'ioredis'</span>)</span><br><span class="line"><span class="keyword">const</span> redis = <span class="keyword">new</span> Redis(url)</span><br><span class="line"><span class="comment">// expire this value after 5 seconds</span></span><br><span class="line">redis.set(<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'ex'</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// getting value back is async</span></span><br><span class="line"><span class="keyword">const</span> value = <span class="keyword">await</span> redis.get(<span class="string">'foo'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(value)</span><br></pre></td></tr></table></figure><p>Great, so let&#39;s setup a shared Redis instance, I don&#39;t want to have it work just on my machine!</p><h2><span id="setting-up-remote-redis">Setting up remote Redis</span></h2><p>I have set up a free Redis machine at <a href="https://redislabs.com" target="_blank" rel="noopener">https://redislabs.com</a>. A total of 30MB should be plenty for my needs. To connect I will need the url with the password included.</p><p><img src="/blog/images/redis/redis-test.png" alt="Redis setup information"></p><p>I will place the full connection url into <code>~/.as-a/.as-a.ini</code> file like this</p><figure class="highlight ini"><figcaption><span>.as-a.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[redis-labs]</span></span><br><span class="line"><span class="attr">REDIS_URL</span>=redis://:&lt;password&gt;@&lt;url&gt;.redislabs.com:<span class="number">13654</span></span><br></pre></td></tr></table></figure><p>Using CLI tool <a href="https://github.com/bahmutov/as-a" target="_blank" rel="noopener">as-a</a> I can quickly run my script with <code>REDIS_URL</code> environment variable (or any other collection of variables)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ as-a redis-labs node .</span><br></pre></td></tr></table></figure><p>Here my first script that shows values stored and retrieved from a remote Redis server</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = process.env.REDIS_URL</span><br><span class="line"><span class="keyword">const</span> Redis = <span class="built_in">require</span>(<span class="string">'ioredis'</span>)</span><br><span class="line"><span class="keyword">const</span> redis = <span class="keyword">new</span> Redis(url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// expire this value after 5 seconds</span></span><br><span class="line">redis.set(<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'ex'</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">const</span> value = <span class="keyword">await</span> redis.get(<span class="string">'foo'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// trying to get a value that does not exist</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">await</span> redis.get(<span class="string">'bar'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bar is'</span>, bar) <span class="comment">// bar is null</span></span><br><span class="line"></span><br><span class="line">process.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>We can see the value under key <code>foo</code> only stored for 5 seconds. Comment out the line <code>redis.set(&#39;foo&#39;, &#39;bar&#39;, &#39;ex&#39;, 5)</code> and run the program again quickly - the string &quot;bar&quot; will be returned. But if we run the program again after 5 seconds, the <code>null</code> will appear. Here is a &quot;normal&quot; run, then run with the line commented out after 4 seconds, then another run after 4 more seconds.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ as-a redis-labs node .</span><br><span class="line">2018-04-27T19:48:40.644Z</span><br><span class="line">bar</span><br><span class="line">bar is null</span><br><span class="line"></span><br><span class="line">$ as-a redis-labs node .</span><br><span class="line">2018-04-27T19:48:44.053Z</span><br><span class="line">bar</span><br><span class="line">bar is null</span><br><span class="line"></span><br><span class="line">$ as-a redis-labs node .</span><br><span class="line">2018-04-27T19:48:47.958Z</span><br><span class="line">null</span><br><span class="line">bar is null</span><br></pre></td></tr></table></figure><p>The value has expired.</p><h2><span id="redis-vs-memory">Redis vs memory</span></h2><p>To simplify testing, instead of always going through the real Redis instance, I have switched to <a href="https://github.com/lukechilds/keyv" target="_blank" rel="noopener">keyv</a> that allows me to use either in-memory DB or Redis.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save keyv @keyv/redis</span><br></pre></td></tr></table></figure><p>The Keyv API for <code>set</code> and <code>get</code> is almost the same as &quot;classic&quot; Redis client and enough for my needs.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Keyv = <span class="built_in">require</span>(<span class="string">'keyv'</span>)</span><br><span class="line"><span class="comment">// if process.env.REDIS_URL is a `redis:...` url will use</span></span><br><span class="line"><span class="comment">// Redis client. Otherwise uses in-memory cache</span></span><br><span class="line"><span class="keyword">const</span> keyv = <span class="keyword">new</span> Keyv(process.env.REDIS_URL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> seconds = <span class="function">(<span class="params">n</span>) =&gt;</span> <span class="number">1000</span> * n</span><br><span class="line"></span><br><span class="line"><span class="comment">// keyv.set returns a promise!</span></span><br><span class="line"><span class="comment">// expire this value after 5 seconds</span></span><br><span class="line"><span class="keyword">await</span> keyv.set(<span class="string">'foo'</span>, <span class="string">'bar'</span>, seconds(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="keyword">await</span> keyv.get(<span class="string">'foo'</span>))</span><br><span class="line"></span><br><span class="line">setInterval(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="keyword">await</span> keyv.get(<span class="string">'foo'</span>))</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>Run this and see the value expire after 5 seconds.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">2018-04-27T20:18:05.746Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:18:06.751Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:18:07.754Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:18:08.760Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:18:09.762Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:18:10.767Z undefined</span><br><span class="line">2018-04-27T20:18:11.768Z undefined</span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p>Or against a Redis instance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ as-a redis-labs node .</span><br><span class="line">2018-04-27T20:19:04.430Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:19:05.470Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:19:06.472Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:19:07.476Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:19:08.479Z &apos;bar&apos;</span><br><span class="line">2018-04-27T20:19:09.482Z undefined</span><br><span class="line">2018-04-27T20:19:10.484Z undefined</span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p>Beautiful, but note that <code>keyv</code> returns <code>undefined</code> and not a <code>null</code>. This might be significant for some use cases, but not for mine.</p><h2><span id="do-not-prevent-node-from-exiting">Do not prevent Node from exiting</span></h2><p>By default, an open Redis connection will prevent the Node process from exiting, just like listening to a port prevents the process from terminating. The Redis client exposes <a href="https://github.com/NodeRedis/node_redis#clientunref" target="_blank" rel="noopener"><code>client.unref()</code></a> method. I have forked <a href="https://github.com/lukechilds/keyv-redis" target="_blank" rel="noopener">@keyv/redis</a> and modified its code to expose the actual client in the Keyv constructor. Now the following process just exits.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Keyv = <span class="built_in">require</span>(<span class="string">'keyv'</span>)</span><br><span class="line"><span class="keyword">const</span> keyv = <span class="keyword">new</span> Keyv(process.env.REDIS_URL)</span><br><span class="line">keyv.opts.store.client.unref()</span><br></pre></td></tr></table></figure><p>While the <a href="https://github.com/lukechilds/keyv-redis/pull/16" target="_blank" rel="noopener">pull request 16</a> stays open, or if it is declined, you can use my fork directly from GitHub.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S bahmutov/keyv-redis#5850d5999ca897ba832c751c0574d77c7b566034</span><br></pre></td></tr></table></figure><p>Running the above test program confirms normal process exit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ as-a redis-labs node .</span><br><span class="line">2018-04-27T21:23:45.445Z &apos;bar&apos;</span><br></pre></td></tr></table></figure><h2><span id="top-level-async-await">Top level async / await</span></h2><p>You have noticed that I am using <code>async</code> keyword at the top level of my program. To make this work, I recommend <a href="https://github.com/robertklep/top-level-await#readme" target="_blank" rel="noopener">top-level-await</a>. Just load this module from <code>index.js</code> and move &quot;actual&quot; source code into <code>app.js</code></p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'top-level-await'</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./app'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Keyv = <span class="built_in">require</span>(<span class="string">'keyv'</span>)</span><br><span class="line"><span class="keyword">const</span> keyv = <span class="keyword">new</span> Keyv(process.env.REDIS_URL)</span><br><span class="line"><span class="keyword">const</span> seconds = <span class="function">(<span class="params">n</span>) =&gt;</span> <span class="number">1000</span> * n</span><br><span class="line"><span class="comment">// expire this value after 5 seconds</span></span><br><span class="line"><span class="keyword">await</span> keyv.set(<span class="string">'foo'</span>, <span class="string">'bar'</span>, seconds(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="keyword">await</span> keyv.get(<span class="string">'foo'</span>))</span><br></pre></td></tr></table></figure><h2><span id="using-redis-for-caching">Using Redis for caching</span></h2><p>So now it is time to actually use Redis for a task. <a href="https://docs.cypress.io" target="_blank" rel="noopener">Cypress documentation</a> is an open source project that lives at <a href="https://github.com/cypress-io/cypress-documentation" target="_blank" rel="noopener">github.com/cypress-io/cypress-documentation</a>. The documentation uses <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> static generator to transform Markdown into a static site. We have extended Hexo with a few additional helpers. One of them transforms urls into anchor links. Here are a couple of examples, including links the Cypress redirection service <code>on.cypress.io</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// link to an external page</span><br><span class="line">&#123;% url &apos;https://github.com/stanleyhlng/mocha-multi-reporters&apos; %&#125;</span><br><span class="line">// link to https://on.cypress.io/visit</span><br><span class="line">&#123;% url &apos;visit&apos; visit %&#125;</span><br><span class="line">// link to https://on.cypress.io/configuration#Screenshots</span><br><span class="line">&#123;% url &apos;screenshotsFolder&apos; configuration#Screenshots %&#125;</span><br></pre></td></tr></table></figure><p>When generating the static documentation site, we want to validate the links to make sure they are still valid. There is an <a href="https://github.com/cypress-io/cypress-documentation/blob/87715357dbe46a1b3ef9979895417ea63e485254/lib/url_generator.js" target="_blank" rel="noopener">url helper</a> that does the check.</p><ul><li>if the url has no hash part, then we can check if the request <code>HEAD &lt;url&gt;</code> is responding with 200 status</li><li>if the url does have a hash part like <code>configuration#Screenshots</code> then we need to get the full page and check if there is an element with ID <code>screenshots</code></li></ul><p>Because urls repeat, caching the checks speeds up the site build a lot - there are almost 1800 urls in the docs as of April 2018! The caching right now uses a plain JavaScript object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cache validations</span></span><br><span class="line"><span class="keyword">const</span> cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateAndGetUrl</span> (<span class="params">sidebar, href, source, text, render</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do we already have a cache for this href?</span></span><br><span class="line">  <span class="keyword">const</span> cachedValue = cache[href]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if we got it, return it!</span></span><br><span class="line">  <span class="keyword">if</span> (cachedValue) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(cachedValue)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isExternalHref(href)) &#123;</span><br><span class="line">    <span class="comment">// cache this now even though</span></span><br><span class="line">    <span class="comment">// we haven't validated it yet</span></span><br><span class="line">    <span class="comment">// because it will just fail later</span></span><br><span class="line">    cache[href] = href</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (args.validate === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(href)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> validateExternalUrl(href, source)</span><br><span class="line">    .return(href)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// other code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Great, the code already is using Promises to do its work. Moving it to <code>Keyv</code> is very straightforward. Even better, without <code>REDIS_URL</code> it automatically falls back to in-memory cache which acts same way as using an object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Keyv = <span class="built_in">require</span>(<span class="string">'keyv'</span>)</span><br><span class="line"><span class="keyword">const</span> keyv = <span class="keyword">new</span> Keyv(process.env.REDIS_URL)</span><br><span class="line"><span class="keyword">if</span> (process.env.REDIS_URL) &#123;</span><br><span class="line">  debug(<span class="string">'using external Redis server to store HREF checks'</span>)</span><br><span class="line">  <span class="comment">// allow the process exit when done</span></span><br><span class="line">  <span class="comment">// otherwise Redis connection will block it forever</span></span><br><span class="line">  keyv.opts.store.client.unref()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  debug(<span class="string">'storing external HREF checks in memory'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateAndGetUrl</span> (<span class="params">sidebar, href, source, text, render</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do we already have a cache for this href?</span></span><br><span class="line">  <span class="keyword">return</span> keyv.get(href).then(<span class="function">(<span class="params">cachedValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// if we got it, return it!</span></span><br><span class="line">    <span class="keyword">if</span> (cachedValue) &#123;</span><br><span class="line">      debug(<span class="string">'key found %s -&gt; %s'</span>, href, cachedValue)</span><br><span class="line">      <span class="keyword">return</span> cachedValue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// rest of the code</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can see the <a href="https://github.com/cypress-io/cypress-documentation/pull/559" target="_blank" rel="noopener">pull request</a> with my changes. When this gets merged, I can set the <code>REDIS_URL</code> environment variable on our CI that is doing the site build and deployment, and make the cache duration something longer like 1 day. This will ensure that external links are rechecked, yet multiple deploys per day are fast.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have never had to manage or really use Redis in my professional life. Other people have set one up for me for &lt;a href=&quot;../express-sessi
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="tutorial" scheme="https://glebbahmutov.com/blog/tags/tutorial/"/>
    
      <category term="db" scheme="https://glebbahmutov.com/blog/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>VuePress and some Cypress end-to-end testing tips</title>
    <link href="https://glebbahmutov.com/blog/vuepress-conditional-testing/"/>
    <id>https://glebbahmutov.com/blog/vuepress-conditional-testing/</id>
    <published>2018-04-23T04:00:00.000Z</published>
    <updated>2018-04-24T01:17:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently <a href="https://vuepress.vuejs.org/" target="_blank" rel="noopener">VuePress</a> static site generator came out. It is powered by Vue.js under the hood, and I must say - I like it. Everything just works - my Markdown is turned into a pretty and fast static site with almost zero configuration. Even better, the built &quot;production&quot; site scored really well in Chrome DevTools performance audit.</p><p>We can configure output title and description meta information. For example, here is the <code>src/.vuepress/config.js</code> file that defines the options I want.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// see for all options https://vuepress.vuejs.org/config/</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  title: <span class="string">'Try Vuepress'</span>,</span><br><span class="line">  description: <span class="string">'Just playing around'</span>,</span><br><span class="line">  dest: <span class="string">'dist'</span>,</span><br><span class="line">  base: <span class="string">'/try-vuepress/'</span>,</span><br><span class="line">  evergreen: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here are the only two Markdown pages in the site - both in <code>src</code> folder</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- src/README.md --&gt;</span></span></span><br><span class="line"><span class="section"># Hello VuePress</span></span><br><span class="line"></span><br><span class="line">This is an example page. There is also [<span class="string">about</span>](<span class="link">./about.html</span>) page.</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- src/about.md --&gt;</span></span></span><br><span class="line"><span class="section"># About</span></span><br><span class="line"></span><br><span class="line">This is the "about" page. It is important.</span><br></pre></td></tr></table></figure><p>Let us make sure the generated site is working in <em>dev</em> mode. I will install <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress</a> and will add a few tests.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D cypress</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"vuepress dev src"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"vuepress build src"</span>,</span><br><span class="line">    <span class="attr">"cy:open"</span>: <span class="string">"cypress open"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The local URL goes into <code>cypress.json</code></p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:8080/try-vuepress/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Our first test is simple - it just makes sure the dev site is loading.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line">describe(<span class="string">'VuePress site'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">'/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">'loads'</span>, () =&gt; &#123;</span><br><span class="line">    cy.contains(<span class="string">'Hello VuePress'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Start the server, open Cypress and ... the test fails! Here is the message and the element it finds by content &quot;Hello VuePress&quot;.</p><p><img src="/blog/images/vuepress/failed-test.png" alt="Failed test"></p><p>Turns out there are links made automatically by VuePress that use <code>h1</code> page titles as content. We can see these links by changing their <code>display</code> property from the Elements tab.</p><p><img src="/blog/images/vuepress/sidebar.png" alt="Sidebar links"></p><p>This happens sometimes in testing: if you search by text content or a common class name, you will find a wrong element. We can always <a href="https://docs.cypress.io/guides/references/best-practices.html#Selecting-Elements" target="_blank" rel="noopener">use test ids</a> or just make our selector a little more specific. Adding <code>h1</code> element solves the problem.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'loads'</span>, () =&gt; &#123;</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'Hello VuePress'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can test going to the &quot;About&quot; page and back</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'goes to About page and back'</span>, () =&gt; &#123;</span><br><span class="line">  cy.contains(<span class="string">'.next'</span>, <span class="string">'About'</span>).click()</span><br><span class="line">  cy.url().should(<span class="string">'contain'</span>, <span class="string">'about.html'</span>)</span><br><span class="line">  cy.go(<span class="string">'back'</span>)</span><br><span class="line">  cy.url().should(<span class="string">'equal'</span>, Cypress.config(<span class="string">'baseUrl'</span>) + <span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Let&#39;s also test the text search VuePress provides for us. First, we will type our text into the search box. It is easy to find the search box selector using the Elements panel.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'finds the about page'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'.search-box input'</span>).type(<span class="string">'about'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Hmm, we see the list of found results (with a single &quot;About&quot; page), but as soon as we go to inspect it, the list disappears! Luckily, Cypress keeps DOM snapshots for each command. We can click on the <code>type(&#39;about&#39;)</code> command and pin the <em>after</em> snapshot. Now we can take a look at the DOM node in the Elements tab without &quot;scaring it away&quot;.</p><p><img src="/blog/images/vuepress/after-snapshot.png" alt="After command snapshot"></p><p>We can write the search results assertions in several ways. We want to make sure the list of results has at least 1 found item, and that the first result has the page title &quot;About&quot;.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'finds the about page'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'.search-box input'</span>).type(<span class="string">'about'</span>)</span><br><span class="line">  cy.get(<span class="string">'.suggestions'</span>).find(<span class="string">'li'</span>)</span><br><span class="line">    .should(<span class="string">'be.visible'</span>)</span><br><span class="line">    .and(<span class="string">'have.length.gte'</span>, <span class="number">1</span>)</span><br><span class="line">    .first()</span><br><span class="line">    .contains(<span class="string">'.page-title'</span>, <span class="string">'About'</span>)</span><br><span class="line">    .click()</span><br><span class="line">  cy.title().should(<span class="string">'contain'</span>, <span class="string">'About'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The alternating &quot;query / assertion&quot; pattern shown above is the best way to make sure Cypress successfully goes step by step. The test runner retries the &quot;query&quot; step until the &quot;assertion&quot; passes. Thus by explicitly looking for visible suggestions to have a few items we make sure the application really behaves the way we think it should behave during the test.</p><p><img src="/blog/images/vuepress/search-test.png" alt="Search test finishes in About page"></p><p>Hmm, our <code>cy.title()</code> assertion only compared part of the full title. The full title was &quot;Try Vuepress | About&quot; which is the concatenation of the blog&#39;s and the page&#39;s titles. But the blog&#39;s title is specified in the <code>src/.vuepress/config.js</code>. Do we need to duplicate the blog title and put it into the spec file? No, we can import any JavaScript directly from our test file, thus reusing application&#39;s configuration.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="cypress" /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123;title&#125; <span class="keyword">from</span> <span class="string">'../../src/.vuepress/config'</span></span><br><span class="line">describe(<span class="string">'VuePress site'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'finds the about page'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// same test code</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    cy.title().should(<span class="string">'equal'</span>, <span class="string">`<span class="subst">$&#123;title&#125;</span> | About`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Our assertion is a lot stricter now!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently &lt;a href=&quot;https://vuepress.vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VuePress&lt;/a&gt; static site generator came out. It is powered 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="vuejs" scheme="https://glebbahmutov.com/blog/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Lock Down Sinon Stub</title>
    <link href="https://glebbahmutov.com/blog/lock-down-sinon-stub/"/>
    <id>https://glebbahmutov.com/blog/lock-down-sinon-stub/</id>
    <published>2018-04-07T04:00:00.000Z</published>
    <updated>2018-04-07T13:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>I like using <a href="http://sinonjs.org/" target="_blank" rel="noopener">sinon.js</a> for spying and stubbing on my code during testing. For example, here we have an object with a single method <code>say()</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  say: <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'hello'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'o.say()'</span>, o.say())</span><br><span class="line"><span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure><p>I can stub the method <code>o.say</code> to return a known value like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sinon = <span class="built_in">require</span>(<span class="string">'sinon'</span>)</span><br><span class="line">sinon.stub(o, <span class="string">'say'</span>).returns(<span class="number">42</span>)</span><br><span class="line">o.say()</span><br><span class="line"><span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>But during testing we might want to be more precise - if we stub <code>o.say()</code> when called with <em>a certain argument</em> our tests will be stricter. They will ensure that whatever part of the code calls the <code>o.say()</code> also calls it with expected arguments.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sinon.stub(o, <span class="string">'say'</span>)</span><br><span class="line">  .withArgs(<span class="string">'foo'</span>)</span><br><span class="line">  .returns(<span class="number">42</span>)</span><br><span class="line"><span class="built_in">console</span>.log(o.say(<span class="string">'foo'</span>))</span><br><span class="line"><span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>What happens if the stub is called with different arguments? Well, here is the &quot;bad&quot; part - Sinon just returns <code>undefined</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sinon.stub(o, <span class="string">'say'</span>)</span><br><span class="line">  .withArgs(<span class="string">'foo'</span>)</span><br><span class="line">  .returns(<span class="number">42</span>)</span><br><span class="line"><span class="built_in">console</span>.log(o.say(<span class="string">'foo'</span>))</span><br><span class="line"><span class="comment">// 42</span></span><br><span class="line"><span class="built_in">console</span>.log(o.say())</span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>Hmm, does not seem too bad - and might be even considered a good default behavior. But I often was in a situation in a large unfamiliar codebase where after a small change, my tests would start failing with <em>very weird errors</em>. It was very hard to debug such cases, because often the original stubbed method was returning a promise - and now returning <code>undefined</code> caused all sorts of errors with weird stack traces!</p><p>We can lock down the stub by forcing it to throw an error for <em>every unknown argument</em> using <code>stub.throws()</code> method, we can even pass a text message to become a thrown error.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sinon.stub(o, <span class="string">'say'</span>)</span><br><span class="line">  .throws(<span class="string">'nope'</span>)</span><br><span class="line">  .withArgs(<span class="string">'foo'</span>).returns(<span class="number">42</span>)</span><br><span class="line">o.say(<span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// 42</span></span><br><span class="line">o.say(<span class="string">'bar'</span>)</span><br><span class="line"><span class="comment">// throws Error('nope')</span></span><br></pre></td></tr></table></figure><p>This is great! But the thrown error does NOT tell us what the arguments were that did not match the expected ones. In order to show the arguments that were used to call the stub (and that were unexpected) we can use <code>stub.callsFake()</code> to serialize the arguments. Now the calling code can be found and changed very quickly, even in an unfamiliar codebase.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throwError</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Cannot call this stub with argument <span class="subst">$&#123;a&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">sinon.stub(o, <span class="string">'say'</span>)</span><br><span class="line">  .callsFake(throwError) <span class="comment">// everything else</span></span><br><span class="line">  .withArgs(<span class="string">'foo'</span>).returns(<span class="number">42</span>)</span><br><span class="line">o.say(<span class="string">'bar'</span>)</span><br><span class="line"><span class="comment">// throws Error('Cannot call this stub with argument bar')</span></span><br></pre></td></tr></table></figure><p>I even wrote a utility <a href="https://github.com/bahmutov/not-allowed" target="_blank" rel="noopener">not-allowed</a> that does a good job serializing the arguments and throwing the error.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> notAllowed = <span class="built_in">require</span>(<span class="string">'not-allowed'</span>)</span><br><span class="line">sinon.stub(o, <span class="string">'say'</span>)</span><br><span class="line">  .callsFake(notAllowed)</span><br><span class="line">  .withArgs(<span class="string">'foo'</span>).returns(<span class="number">42</span>)</span><br><span class="line">o.say(<span class="string">'bar'</span>, <span class="string">'bar'</span>, <span class="number">42</span>)</span><br><span class="line"><span class="comment">// Error: Not allowed to call this function with arguments</span></span><br><span class="line"><span class="comment">//    foo bar 42</span></span><br></pre></td></tr></table></figure><p>Perfect, no confusion here.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I like using &lt;a href=&quot;http://sinonjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sinon.js&lt;/a&gt; for spying and stubbing on my code during testing.
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>How I Organize README</title>
    <link href="https://glebbahmutov.com/blog/how-i-organize-readme/"/>
    <id>https://glebbahmutov.com/blog/how-i-organize-readme/</id>
    <published>2018-03-24T04:00:00.000Z</published>
    <updated>2018-03-24T13:44:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have <a href="https://glebbahmutov.com/">a lot of projects</a>, mostly NPM modules. If you browser through <a href="https://www.npmjs.com/~bahmutov" target="_blank" rel="noopener">www.npmjs.com/~bahmutov</a> you may notice how uniform all my README files are. Every module has a README file that follows pretty much the same template (thanks to Yeoman <a href="https://github.com/bahmutov/generator-node-bahmutov" target="_blank" rel="noopener">generator-node-bahmutov</a> I use to scaffold new projects).</p><p><img src="../images/readme/readme.png" alt="Typical README with several must-have sections"></p><p>The main sections top to bottom are:</p><ul><li>head with name and description</li><li>badges</li><li>requirements and install instructions</li><li>how to load the code</li><li>quick example</li><li>legal matters</li></ul><p>Let me quickly describe what each section does.</p><h2><span id="head">Head</span></h2><p>Most people looking at the README <em>are not your users</em>. Maybe they were searching for something else and stumbled upon your repository. In either case, the first thing my README has to answer <em>for everyone</em> is &quot;what is this?&quot; The most important information everyone should see right away is module&#39;s name and description.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mocha-banner</span><br><span class="line"></span><br><span class="line">&gt; Terminal-wide banner with test name before each Mocha test</span><br></pre></td></tr></table></figure><p>People who are NOT looking for a Mocha utility will leave after reading these two lines. People who are looking for a big &quot;in your face&quot; messages to make their Mocha output easier to understand will continue reading.</p><h2><span id="badges">Badges</span></h2><p>No one wants to waste time learning and using an unreliable library. Having a few badges that tell the user that the project has CI system, has recently published version and follows certain conventions is a good way to earn user&#39;s trust. I wrote <a href="../project-status-badges/">about badges before</a> so here are the only 5 badges I always use.</p><p>I start with a large NPM badge with the main information: latest published version and when it was published.</p><p><a href="https://npmjs.org/package/mocha-banner" target="_blank" rel="noopener"><img src="https://nodei.co/npm/mocha-banner.svg?downloads=true" alt="NPM module stats"></a></p><p>Then I have 4 inline badges that signal the quality of the module.</p><table><thead><tr><th>badge</th><th>description</th></tr></thead><tbody><tr><td><a href="https://travis-ci.org/bahmutov/mocha-banner" target="_blank" rel="noopener"><img src="https://travis-ci.org/bahmutov/mocha-banner.svg?branch=master" alt="Build status"></a></td><td>I only use NPM modules with a CI system setup. I hope it stays green.</td></tr><tr><td><a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg" alt="semantic-release"></a></td><td>module uses <a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener">semantic-release</a> to publish.</td></tr><tr><td><a href="http://standardjs.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/code%20style-standard-brightgreen.svg" alt="js-standard-style"></a></td><td>linter catches silly JavaScript errors.</td></tr><tr><td><a href="https://renovateapp.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/renovate-app-blue.svg" alt="renovate-app badge"></a></td><td>this module <a href="../renovate-app/">has its dependencies updated automatically</a>.</td></tr></tbody></table><p>Here is the Markdown markup for these badges. I usually keep the urls at the bottom of the readme. Only the package name and username and repository names have to be updated in the urls.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[![NPM][npm-icon]][npm-url]</span><br><span class="line"></span><br><span class="line">[![Build status][ci-image]][ci-url]</span><br><span class="line">[![semantic-release][semantic-image]][semantic-url]</span><br><span class="line">[![js-standard-style][standard-image]][standard-url]</span><br><span class="line">[![renovate-app badge][renovate-badge]][renovate-app]</span><br><span class="line"></span><br><span class="line">[npm-icon]: https://nodei.co/npm/mocha-banner.svg?downloads=true</span><br><span class="line">[npm-url]: https://npmjs.org/package/mocha-banner</span><br><span class="line">[ci-image]: https://travis-ci.org/bahmutov/mocha-banner.svg?branch=master</span><br><span class="line">[ci-url]: https://travis-ci.org/bahmutov/mocha-banner</span><br><span class="line">[semantic-image]: https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg</span><br><span class="line">[semantic-url]: https://github.com/semantic-release/semantic-release</span><br><span class="line">[standard-image]: https://img.shields.io/badge/code%20style-standard-brightgreen.svg</span><br><span class="line">[standard-url]: http://standardjs.com/</span><br><span class="line">[renovate-badge]: https://img.shields.io/badge/renovate-app-blue.svg</span><br><span class="line">[renovate-app]: https://renovateapp.com/</span><br></pre></td></tr></table></figure><h2><span id="requirements-and-install">Requirements and install</span></h2><p>This section tells what version of Node (and NPM) is required by this module. Projects that set strict engines option in their <code>.npmrc</code> will not be able to install dependencies that need newer versions of Node. Also I show the install command to let people know if the module is meant as a production or development dependency. Copy and paste into the terminal and go!</p><h2><span id="loading-code">Loading code</span></h2><p>Again, as a courtesy to the user, I want to quickly show how one can load the module. Is it a function or an object? Maybe the module is doing global registration?! Do not make me think, just show me so I can copy and paste into my code!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include somewhere at the beginning</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'mocha-banner'</span>).register()</span><br></pre></td></tr></table></figure><p>Helpful.</p><h2><span id="show-an-example">Show an example</span></h2><p>The reader is still trying to decide if your module is what they need. Showing the most basic &quot;hello, world&quot; example gives this last bit of information, hopefully. Just put the most typical basic example to showcase the main benefit or use of your library.</p><p><img src="../images/readme/example.png" alt="Example section"></p><h2><span id="legal">Legal</span></h2><p>At the bottom of the README I put links to my profile, this blog, etc. I also clearly tell what license this module has. Pretty much all my software is published under MIT license, and the users should know it. I also make sure the <code>package.json</code> file has the license specified to make life easier for audit tools like <a href="https://github.com/davglass/license-checker#readme" target="_blank" rel="noopener">license-checker</a>.</p><p><img src="../images/readme/legal.png" alt="Links and legal section at the bottom"></p><h2><span id="final-thoughts">Final thoughts</span></h2><p>The README should answer quickly the following questions</p><ul><li>what your library is doing?</li><li>can it be used in the user&#39;s application?</li><li>how it should be used?</li><li>are you allowed to use it?</li></ul><p>And that&#39;s it! Remember, you are not there to answer these questions, but your README text is.</p><h2><span id="more-information">More information</span></h2><ul><li>I have recently made a presentation at Confoo Canada about my NPM workflow, check out the <a href="https://slides.com/bahmutov/node-checklist" target="_blank" rel="noopener">slides</a></li><li>I love semantic release and have written a lot of blog posts about <a href="../tags/modular-development/">modular development</a></li><li>Automate good readmes using a <a href="http://yeoman.io/" target="_blank" rel="noopener">Yeoman</a> generator, like my <a href="https://github.com/bahmutov/generator-node-bahmutov" target="_blank" rel="noopener">generator-node-bahmutov</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have &lt;a href=&quot;https://glebbahmutov.com/&quot;&gt;a lot of projects&lt;/a&gt;, mostly NPM modules. If you browser through &lt;a href=&quot;https://www.npmjs.c
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="advice" scheme="https://glebbahmutov.com/blog/tags/advice/"/>
    
  </entry>
  
  <entry>
    <title>Painless Dependency Upgrades with Renovate App</title>
    <link href="https://glebbahmutov.com/blog/renovate-app/"/>
    <id>https://glebbahmutov.com/blog/renovate-app/</id>
    <published>2018-03-14T04:00:00.000Z</published>
    <updated>2018-03-16T14:07:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have <a href="https://www.npmjs.com/~bahmutov" target="_blank" rel="noopener">a lot of NPM packages</a>. Like &quot;more than a 400&quot; a lot. Every package falls behind its dependencies as soon as it is published to the NPM registry. Periodically I get new GitHub issues <a href="https://github.com/bahmutov/available-versions/pull/29" target="_blank" rel="noopener">like this</a> one asking me to upgrade a particular dependency and publish a new version to get around a bug or a known security issue.</p><p><img src="/blog/images/renovate-app/update-dependency-pr.png" alt="Pull request to update a vulnerable dependency"></p><p>Manual dependency upgrades are soooo boring. Grab the code, install dependency, increment version for a dependency, run the tests... Boring! So I have written a command line tool <a href="https://github.com/bahmutov/next-update" target="_blank" rel="noopener">next-update</a> to automate this process. The tool helps <em>a lot</em>. But it is still a hustle to run the tool - remember, the number of out of date dependencies is constantly growing, while my time is pretty much constant.</p><h2><span id="next-update-travis">next-update-travis</span></h2><p>So I have automated running <code>next-update</code> - by periodically running it as a <a href="../slow-updates/">Travis cron job</a>. Here is the tool called <a href="https://github.com/bahmutov/next-update-travis" target="_blank" rel="noopener">next-update-travis</a> in action - each Travis build marked &quot;Cron&quot; is the automated dependency update check. Successful updates are committed to <code>master</code> triggering another &quot;normal&quot; Travis build marked with an orange arrow in the screenshot below.</p><p><img src="/blog/images/renovate-app/updated-deps-build-history.png" alt="Updating dependencies using next-update-travis using Travis Cron job"></p><p>While that works, this approach lacks any flexibility. I could only test dependency upgrade and merge the result - I could not review it. Yes, I could change the code to open a pull request, but then the tool would require a lot more to be useful. It would need logic to NOT open multiple branches for the same dependency, merge some dependency upgrades but not others, etc. So I needed a more flexible solution.</p><h2><span id="greenkeeperio">greenkeeper.io</span></h2><p>My first impulse was to look at the service offered by my friends from <a href="https://github.com/semantic-release/semantic-release" target="_blank" rel="noopener">semantic-release</a> organization. After all - they have written the only tool I <em>always use</em> to publish my NPM packages! They must know how to organize the workflow that makes dependency updates painless. In fact they do have a great tool called <a href="https://greenkeeper.io/" target="_blank" rel="noopener">greenkeeper.io</a> to be installed as a GitHub application. Free for public repos, it monitors all versions of your dependencies and opens pull requests when a new version comes out.</p><p><img src="/blog/images/renovate-app/greenkeeper.png" alt="A typical pull request from Greenkeeper.io"></p><p>The onboarding process is <em>very intuitive</em>, and the updates start flowing a few seconds after installing the application. The pull requests are very intelligent and are tied to the CI statuses. Just review the changelog for a dependency included in the pull request and merge it! The app even merges multiple dependency version updates into a single pull request and rebases it when the master changes.</p><p>But many, many pull requests opened for a couple of my repositories soon overwhelmed me. Here is a screenshot of a relatively small project - see all these pull requests from Greenkeeper?! It looks even worse for the closed pull requests - 9 out of 15 closed PRs are dependency updates.</p><p><img src="/blog/images/renovate-app/greenkeeper-prs.png" alt="Many open Greenkeeper.io pull requests"></p><p>Often, I am looking at a pull request from Greenkeeper.io to merge a &quot;patch&quot; dependency upgrade and ask myself &quot;why can&#39;t Greenkeeper merge this pull request automatically?&quot; If my code is well tested, if the update is just a &quot;patch&quot; from a trusted library, and if the CI tests are passing - that should be a no-brainer! Yet there is no such option. So I need to continue my search.</p><h2><span id="greenkeeper-keeper">greenkeeper-keeper</span></h2><p>I found <a href="https://github.com/greenkeeper-keeper/meta" target="_blank" rel="noopener">greenkeeper-keeper</a> by the great <a href="https://matt.travi.org/" target="_blank" rel="noopener">Matt Travi</a> (Hi Matt!) that can automate merging of &quot;green&quot; pull requests from Greenkeeper. Yet I would need to run the <code>greenkeeper-keeper</code> server myself ... and I already have too many services running and would prefer to avoid adding anything else to my plate. But I know Matt is going to make an awesome tool and service for dependency management some time in the future.</p><h2><span id="renovateapp">RenovateApp</span></h2><p>Then I tried <a href="https://renovateapp.com/" target="_blank" rel="noopener">Renovate App</a> from <a href="https://github.com/rarkins" target="_blank" rel="noopener">Rhys Arkins</a> with whom I have a pleasure of talking from time to time about dependency management. Again, this application is a GitHub app, which means I can just select a few public repositories via GitHub configuration page - and it is up and running!</p><p><img src="/blog/images/renovate-app/renovate-repos.png" alt="Allow RenovateApp to work with a few repos"></p><p>A good example project where you can see Renovate App running is my <a href="https://github.com/bahmutov/snap-shot-it" target="_blank" rel="noopener">bahmutov/snap-shot-it</a>.</p><p>RenovateApp has a <a href="https://renovateapp.com/docs/configuration-reference/configuration-options" target="_blank" rel="noopener">huge number of configuration options</a>. But to start I placed a simple JSON file into my repositories (or I can just wait for the first pull request from the <code>renovate[bot]</code> to add this file to my repository). Here is the simplest configuration I tried</p><figure class="highlight json"><figcaption><span>renovate.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"config:base"</span>],</span><br><span class="line">  <span class="attr">"automerge"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"major"</span>: &#123;</span><br><span class="line">    <span class="attr">"automerge"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>My project will use mostly the default settings (<code>config:base</code>), but will allow Renovate to <em>automerge</em> passing pull requests after a short period of time. This short period of time is about 1 hour and is very convenient because I can look at the pull request and merge it myself quickly.</p><p>Each pull request from RenovateApp has the commit log between the current version of the dependency and the target one. For example see <a href="https://github.com/bahmutov/snap-shot-it/pull/42" target="_blank" rel="noopener">this pull request</a></p><p><img src="/blog/images/renovate-app/renovate-pr-notes.png" alt="Pull request has the relevant changelog for the dependency"></p><p>The pull requests are quickly adding up, but there are configuration options that allow limiting their total number and frequency to avoid too much noise.</p><p><img src="/blog/images/renovate-app/renovate-prs.png" alt="Open pull requests from the Renovate App"></p><p>Notice that some pull requests are <code>chore(...)</code> and some are <code>fix(...)</code>. By default (this can be configured), production dependency upgrades get message <code>fix(...)</code> triggering publishing of a new &quot;fix&quot; release of my NPM module (if I have configured semantic release). Updates to the <code>devDependencies</code> are only getting a <code>chore(...)</code> commit message, NOT triggering a new version release.</p><p>No need to worry about all these pull requests because ... most of them will be merged automatically!</p><p><img src="/blog/images/renovate-app/renovate-commits.png" alt="Passing PRs are merged automatically"></p><p>Look at the <code>renovate-bot</code> chugging along, moving code into the <code>master</code> without any effort! Of course I must <a href="../tags/testing/">set up good testing</a> for my repositories to avoid accidentally breaking things. The automerging is disabled for &quot;major&quot; dependency updates. Thus a relatively dangerous upgrade from Lodash 3.x.x to 4.x.x will require my review and approval, while the backwards-compatible minor and patch updates are merged by the Renovate bot. When <code>semantic-release</code> publishes a new version it even writes a comment under the pull request to tell the new NPM version; isn&#39;t it great when tools play nicely together?</p><p><img src="/blog/images/renovate-app/publish-note-on-pr.png" alt="Published version comment"></p><p>I have limited my initial exploration of Renovate App to just updating dependencies, but there are <a href="https://renovateapp.com/docs/" target="_blank" rel="noopener">a lot of other things it could do</a>. I hope to investigate the app further in the future. Renovate App looks like a winner.</p><p>Just to mark every repo that has Renovate installed I created a couple of badges that look like this <a href="https://renovateapp.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/renovate-app-blue.svg" alt="renovate-app badge"></a></p><p>Below is the Markdown markup.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[![renovate-app badge][renovate-badge]][renovate-app]</span><br><span class="line"></span><br><span class="line">[renovate-badge]: https://img.shields.io/badge/renovate-app-blue.svg</span><br><span class="line">[renovate-app]: https://renovateapp.com/</span><br></pre></td></tr></table></figure><p>Feel free to use these in your README files.</p><h2><span id="final-thoughts">Final thoughts</span></h2><ul><li><a href="https://github.com/bahmutov/next-update" target="_blank" rel="noopener">next-update</a> is my &quot;go to&quot; tool for upgrading dependencies from command line</li><li><a href="https://github.com/bahmutov/next-update-travis" target="_blank" rel="noopener">next-update-travis</a> is a great tool to keep dependencies up to date for small well tested projects</li><li><a href="https://greenkeeper.io/" target="_blank" rel="noopener">greenkeeper.io</a> is awesome if you plan to review every dependency update</li><li><a href="https://github.com/greenkeeper-keeper/meta" target="_blank" rel="noopener">greenkeeper-keeper</a> is a small add-on service to automerge passing dependency updates</li><li><a href="https://renovateapp.com/" target="_blank" rel="noopener">RenovateApp</a> seems like a tool I will be using from now on. Easy to use, powerful configuration, automatic merging <em>when configured</em> - this tool can completely automate the grunt work, leaving me to pursue more intellectual activities, like binge watching TV shows.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have &lt;a href=&quot;https://www.npmjs.com/~bahmutov&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;a lot of NPM packages&lt;/a&gt;. Like &amp;quot;more than a 400&amp;quo
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="modular development" scheme="https://glebbahmutov.com/blog/tags/modular-development/"/>
    
  </entry>
  
  <entry>
    <title>Debugging Mocha from Node using Chrome Inspector</title>
    <link href="https://glebbahmutov.com/blog/debugging-mocha-using-inspector/"/>
    <id>https://glebbahmutov.com/blog/debugging-mocha-using-inspector/</id>
    <published>2018-03-12T04:00:00.000Z</published>
    <updated>2018-03-13T02:42:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you are using Mocha test runner, you can easily debug the test execution using Node and Chrome DevTools inspector. I am using Mocha 3.5.3 and Node 8.9.4 in this demo.</p><p><strong>1.</strong> Break at the start of the Node process</p><p>Here is my test command (I am working on detecting <code>it.only</code> used inside the tests, thus my command for this demo is <code>only-test</code>)</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"only-test"</span>: <span class="string">"mocha --inspect-brk only-test/test.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.</strong> When starting the tests it pauses the execution and outputs the following message</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ npm run only-test</span><br><span class="line"></span><br><span class="line">&gt; snap-shot-it@0.0.0-development only-test /Users/gleb/git/snap-shot-it</span><br><span class="line">&gt; mocha --inspect-brk only-test/test.js</span><br><span class="line"></span><br><span class="line">Debugger listening on ws://127.0.0.1:9229/40045c70-8525-4d12-a565-11066bc604a3</span><br><span class="line">For help see https://nodejs.org/en/docs/inspector</span><br><span class="line">Debugger attached.</span><br></pre></td></tr></table></figure><p><strong>3.</strong> Open in Chrome special url <code>chrome://inspect</code> which shows that there is a &quot;remote target&quot; available to connect.</p><p><img src="/blog/images/inspect/inspect.png" alt="Chrome inspect"></p><p>If Chrome is already started, no problem, it will keep polling for remote devices and the Node process will appear once you start it.</p><p><strong>4.</strong> The execution pauses at the start of the first loaded script, which in this case is <code>_mocha</code></p><p><img src="/blog/images/inspect/break.png" alt="Break on start"></p><p>If you want to pause at your code, add <code>debugger</code> statement</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'before each'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(<span class="keyword">this</span>))</span><br><span class="line">  <span class="keyword">debugger</span></span><br><span class="line">  <span class="comment">// this._runnable.parent._onlyTests</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>5.</strong> Enjoy the full power of DevTools debugger while stepping through the unit tests!</p><p><img src="/blog/images/inspect/debugger.png" alt="Debugger statement"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you are using Mocha test runner, you can easily debug the test execution using Node and Chrome DevTools inspector. I am using Mocha 3.
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
      <category term="browser" scheme="https://glebbahmutov.com/blog/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>Subfolders as Dependencies</title>
    <link href="https://glebbahmutov.com/blog/subfolders-as-dependencies/"/>
    <id>https://glebbahmutov.com/blog/subfolders-as-dependencies/</id>
    <published>2018-03-03T05:00:00.000Z</published>
    <updated>2018-03-03T14:43:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Imagine an NPM project when one file requires another file, maybe in a different directory. We have to use a relative path.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line">index.js</span><br><span class="line">subfolder/</span><br><span class="line">  foo.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>subfolder/foo.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'foo'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">require</span>(<span class="string">'./subfolder/foo'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'foo:'</span>, foo)</span><br></pre></td></tr></table></figure><p>Running <code>./index.js</code> prints &quot;foo&quot; as expected</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">foo: foo</span><br></pre></td></tr></table></figure><p>But in a larger project the paths become longer and longer. I hate seeing long require paths going up several levels before drilling down into a specific subfolder.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 😡 where is bar.js? Right, it is in a galaxy far far away</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="built_in">require</span>(<span class="string">'../../../src/lib/utils/bar'</span>)</span><br></pre></td></tr></table></figure><p>Luckily we can <em>easily</em> avoid this by creating &quot;dummy&quot; internal packages that can wrap entire folders. First, create a <code>subfolder/package.json</code> with some internal name.</p><figure class="highlight json"><figcaption><span>subfolder/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"@internal/foo"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"foo.js"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Second, install this <strong>subfolder</strong> as an NPM dependency. Yes, you can NPM install folders, tar files and event GitHub repos, <a href="https://docs.npmjs.com/cli/install" target="_blank" rel="noopener">see docs</a>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v8.9.4</span><br><span class="line">$ npm -v</span><br><span class="line">5.6.0</span><br><span class="line">$ npm i -S ./subfolder</span><br><span class="line">npm WARN subfolders@1.0.0 No description</span><br><span class="line">npm WARN subfolders@1.0.0 No repository field.</span><br><span class="line"></span><br><span class="line">+ @internal/foo@0.0.0</span><br><span class="line">added 1 package <span class="keyword">in</span> 0.204s</span><br></pre></td></tr></table></figure><p>Our subfolder is now linked as a dependency</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"subfolders"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"@internal/foo"</span>: <span class="string">"file:subfolder"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Third, change relative path to <code>subfolder/foo.js</code> to use the package name.</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">require</span>(<span class="string">'@internal/foo'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'foo:'</span>, foo)</span><br></pre></td></tr></table></figure><p>Still works as expected</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">foo: foo</span><br></pre></td></tr></table></figure><p>Don&#39;t forget to include the subfolder in the list of distributed files</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"subfolders"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@internal/foo"</span>: <span class="string">"file:subfolder"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"files"</span>: [</span><br><span class="line">    <span class="string">"index.js"</span>,</span><br><span class="line">    <span class="string">"subfolder"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"size"</span>: <span class="string">"t=\"$(npm pack .)\"; wc -c \"$&#123;t&#125;\"; tar tvf \"$&#123;t&#125;\"; rm \"$&#123;t&#125;\";"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npm run size</span><br><span class="line"></span><br><span class="line">&gt; subfolders@1.0.0 size /subfolders</span><br><span class="line">&gt; t=<span class="string">"<span class="variable">$(npm pack .)</span>"</span>; wc -c <span class="string">"<span class="variable">$&#123;t&#125;</span>"</span>; tar tvf <span class="string">"<span class="variable">$&#123;t&#125;</span>"</span>; rm <span class="string">"<span class="variable">$&#123;t&#125;</span>"</span>;</span><br><span class="line"></span><br><span class="line">     586 subfolders-1.0.0.tgz</span><br><span class="line">-rw-r--r--  0 0      0         420 Mar  3 09:26 package/package.json</span><br><span class="line">-rw-r--r--  0 0      0         260 Mar  3 09:36 package/index.js</span><br><span class="line">-rw-r--r--  0 0      0          23 Mar  3 09:26 package/subfolder/foo.js</span><br><span class="line">-rw-r--r--  0 0      0          72 Mar  3 09:26 package/subfolder/package.json</span><br></pre></td></tr></table></figure><p>Let us try installing our package from another folder - do we get the <code>subfolder</code> dependency correctly?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /tmp/test-subfolder</span><br><span class="line">$ cd /tmp/test-subfolder</span><br><span class="line">$ npm init -y</span><br><span class="line">$ npm i -S /subfolders</span><br><span class="line">test-subfolder@1.0.0 /private/tmp/test-subfolder</span><br><span class="line">└─┬ subfolders@1.0.0</span><br><span class="line">  └── @internal/foo@0.0.0</span><br><span class="line"></span><br><span class="line">npm WARN test-subfolder@1.0.0 No description</span><br><span class="line">npm WARN test-subfolder@1.0.0 No repository field.</span><br><span class="line">$ ls node_modules/</span><br><span class="line">@internalsubfolders</span><br><span class="line">$ node -e &apos;require(&quot;subfolders&quot;)&apos;</span><br><span class="line">foo: foo</span><br></pre></td></tr></table></figure><p>Everything is working.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Imagine an NPM project when one file requires another file, maybe in a different directory. We have to use a relative path.&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="nodejs" scheme="https://glebbahmutov.com/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Parcel Bundler</title>
    <link href="https://glebbahmutov.com/blog/parcel/"/>
    <id>https://glebbahmutov.com/blog/parcel/</id>
    <published>2018-02-13T05:00:00.000Z</published>
    <updated>2018-02-15T03:39:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="getting-started">Getting started</span></h2><p><a href="https://parceljs.org/" target="_blank" rel="noopener">Parcel bundler</a> is a new bundler that can work without any configuration. Here is a quick look at this awesome tool. First, start an NPM package and install the bundler as a dev dependency.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm i -D parcel-bundler</span><br></pre></td></tr></table></figure><p>Let us make an HTML page that includes a JavaScript file.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"src/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>As you can see, it is including <code>src/main.js</code> file. We hope that file is a single bundle prepared for the browser - before ES6 modules land, the browser cannot usually load additional files. But our file does import code from other local files!</p><figure class="highlight js"><figcaption><span>src/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name&#125; <span class="keyword">from</span> <span class="string">'./utils'</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerText = <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>The second file will export the name constant<figure class="highlight js"><figcaption><span>src/utils.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">'World'</span></span><br></pre></td></tr></table></figure></p><p>Let us load the HTML page in the browser. Here is a command to server the file using Parcel</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"parcel index.html"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we run <code>npm start</code> we get a server watching our files and serving the page at port <code>:1234</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm start</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> parcel-bundler-post@1.0.0 start /code/parcel-bundler-post</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> parcel index.html</span></span><br><span class="line"></span><br><span class="line">Server running at http://localhost:1234</span><br><span class="line">✨  Built in 450ms.</span><br></pre></td></tr></table></figure><p>We can open any browser and not only we see the <code>Hello World</code> message, we also can get source maps and hot module reload! Even though the source panel complains about the <code>import</code> syntax, the break points are working.</p><p><img src="../images/parcel/hello-world.png" alt="Hello World"></p><p>The served page is interesting - it is NOT the input <code>index.html</code> file. Instead Parcel serves a generated file <code>dist/index.html</code>. That file refers to <em>bundles</em> JavaScript internally, even uses hashes to bust the browser cache.</p><figure class="highlight html"><figcaption><span>dist/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/dist/9d1eab3205c8799f59b49243d0d1e069.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The JavaScript file <code>dist/9d1eab3205c8799f59b49243d0d1e069.js</code> is your typical single file produced from <code>src/main.js</code> by tracing all imports and bringing them together into single output file.</p><h2><span id="production">Production</span></h2><p>When you are happy with your application you can produce the &quot;production&quot; bundle that is minified and can be served from any static server. Here is the command</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"parcel build index.html --public-url ./"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now you can either open local file <code>dist/index.html</code> or use any static server on folder <code>dist</code>.</p><h2><span id="css">CSS</span></h2><p>What if our JavaScript code includes CSS files? Let&#39;s try it</p><figure class="highlight js"><figcaption><span>src/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./app.css'</span></span><br><span class="line"><span class="keyword">import</span> &#123;name&#125; <span class="keyword">from</span> <span class="string">'./utils'</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerText = <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>My design skills are sick, so here is my CSS</p><figure class="highlight css"><figcaption><span>src/app.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Same <code>npm start</code> command - and parcel now makes a <em>separate</em> CSS file in the <code>dist</code> folder and includes a link in the <code>dist/index.html</code> file!</p><figure class="highlight html"><figcaption><span>dist/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/dist/9d1eab3205c8799f59b49243d0d1e069.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/dist/9d1eab3205c8799f59b49243d0d1e069.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Ohh, and my page is classy.</p><p><img src="../images/parcel/antiquewhite.png" alt="Bundled CSS"></p><p>Nice!</p><p>Wait, did I say &quot;CSS&quot;? I meant - I want to use <a href="http://lesscss.org/" target="_blank" rel="noopener">Less</a>!</p><figure class="highlight js"><figcaption><span>src/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./app.less'</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><figcaption><span>src/app.less</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@dominant:</span> antiquewhite;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@dominant</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nothing else needed to be done - Parcel does <a href="https://parceljs.org/assets.html#css" target="_blank" rel="noopener">CSS bundling as if by magic...</a>.</p><h2><span id="typescript">TypeScript</span></h2><p>Advantages of static types are obvious. So let&#39;s use TypeScript files! Point <code>index.html</code> at <code>src/main.ts</code>, rename our source files and sprinkle some type love there.</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"src/main.ts"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>src/main.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./app.less'</span></span><br><span class="line"><span class="keyword">import</span> &#123;name&#125; <span class="keyword">from</span> <span class="string">'./utils'</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).innerText = <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>src/utils.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name: <span class="built_in">string</span> = <span class="string">'World'</span></span><br></pre></td></tr></table></figure><p>Here is where the Parcel magic really arrives: the bundler detects missing preprocessor and installs the necessary dependencies automatically!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br><span class="line"></span><br><span class="line">&gt; parcel-bundler-post@1.0.0 start /code/parcel-bundler-post</span><br><span class="line">&gt; parcel index.html</span><br><span class="line"></span><br><span class="line">Server running at http://localhost:1234</span><br><span class="line">⏳  Building main.ts...</span><br><span class="line">npm WARN parcel-bundler-post@1.0.0 No description</span><br><span class="line">npm WARN parcel-bundler-post@1.0.0 No repository field.</span><br><span class="line"></span><br><span class="line">+ typescript@2.7.1</span><br><span class="line">added 1 package in 4.199s</span><br><span class="line">npm WARN parcel-bundler-post@1.0.0 No description</span><br><span class="line">npm WARN parcel-bundler-post@1.0.0 No repository field.</span><br><span class="line"></span><br><span class="line">+ typescript@2.7.1</span><br><span class="line">✨  Built in 6.21s.</span><br></pre></td></tr></table></figure><p>All installed, and the application is working. Talk about great dev experience!</p><h2><span id="api">API</span></h2><p>If you want to use the bundler&#39;s NPM module API to do your own bundling, the docs are not there yet. But luckily, the code is well organized and you should be able to figure out what to call by looking at how <a href="https://github.com/parcel-bundler/parcel/blob/95a6ebfd82ad29a8edb091943950f257320a04c9/src/cli.js" target="_blank" rel="noopener">Parcel CLI</a> uses its <a href="https://github.com/parcel-bundler/parcel/blob/95a6ebfd82ad29a8edb091943950f257320a04c9/src/Bundler.js" target="_blank" rel="noopener">main module</a>. Here is a quick example</p><figure class="highlight js"><figcaption><span>out.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ParcelBundler = <span class="built_in">require</span>(<span class="string">'parcel-bundler'</span>)</span><br><span class="line"><span class="keyword">const</span> bundler = <span class="keyword">new</span> ParcelBundler(<span class="string">'./index.html'</span>, &#123;<span class="attr">watch</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">bundler.bundle()</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bundled'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>If you execute this Node script with <code>node ./out.js</code> you will get a description of the produced bundle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ node ./out.js</span><br><span class="line">✨  Built in 1.01s.</span><br><span class="line">bundled</span><br><span class="line">Bundle &#123;</span><br><span class="line">  type: &apos;html&apos;,</span><br><span class="line">  name: &apos;dist/index.html&apos;,</span><br><span class="line">  parentBundle: undefined,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result describes the main output file <code>dist/index.html</code> and all linked resources (JS and CSS bundles). You can just grab the files in the <code>dist</code> folder and use them.</p><p>You can also bundle files in the <code>watch</code> mode and get notified whenever the source files are changed - Parcel will watch all source files for you.</p><figure class="highlight js"><figcaption><span>out.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ParcelBundler = <span class="built_in">require</span>(<span class="string">'parcel-bundler'</span>)</span><br><span class="line"><span class="keyword">const</span> bundler = <span class="keyword">new</span> ParcelBundler(<span class="string">'./index.html'</span>, &#123;<span class="attr">watch</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">bundler.on(<span class="string">'bundled'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'inputs changed, rebuilt bundle'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">bundler.bundle()</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bundled'</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Start this script, and once it is running change one of the source files, for example <code>src/utils.ts</code> - notice that the bundle has been automatically rebuilt.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ node ./out.js</span><br><span class="line">✨  Built in 1.12s.</span><br><span class="line">inputs changed, rebuilt bundle</span><br><span class="line">✨  Built in 178ms.</span><br><span class="line">inputs changed, rebuilt bundle</span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p>Great job, <a href="https://github.com/orgs/parcel-bundler/people" target="_blank" rel="noopener">Parcel team</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;getting-started&quot;&gt;Getting started&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://parceljs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Parcel bundler&lt;/
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="javascript" scheme="https://glebbahmutov.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Use Lenses in Hyperapp</title>
    <link href="https://glebbahmutov.com/blog/use-lenses-in-hyperapp/"/>
    <id>https://glebbahmutov.com/blog/use-lenses-in-hyperapp/</id>
    <published>2018-01-15T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you look at <a href="https://github.com/hyperapp/awesome" target="_blank" rel="noopener">Hyperapp examples</a> or even simplest counter example, you will see how it deals with state updates. Here is a typical example - incrementing and decrementing a counter.</p><p><img src="../images/hyperapp-module/hyperapp-import.jpg" alt="Hyperapp works inside script type=&quot;module&quot;"></p><p>Hyperapp is nice - it passes the complete state object to every action function, allowing every action to be pure if it wants to be. But the state object is the single source of truth, which means that sometimes actions have to work with properties deep inside the object. Even the above example - there is a lot of boilerplate in dealing with the <code>count</code> property.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  down: <span class="function"><span class="params">()</span> =&gt;</span> state =&gt; (&#123; <span class="attr">count</span>: state.count - <span class="number">1</span> &#125;),</span><br><span class="line">  up: <span class="function"><span class="params">()</span> =&gt;</span> state =&gt; (&#123; <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Every action has to get the desired property, compute its new value and return the new state object (or at least changed key). Here is how we can simplify this code using <a href="http://ramdajs.com/docs/#lens" target="_blank" rel="noopener">functional lenses</a> implemented in Ramda library.</p><p>First, notice that <code>up</code> action for example always works with property <code>count</code> of an object passed to it. We can create <em>a lens</em> that will &quot;look&quot; at the property <code>count</code> using <a href="http://ramdajs.com/docs/#lensProp" target="_blank" rel="noopener"><code>R.lensProp</code></a> function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;lensProp&#125; <span class="keyword">from</span> <span class="string">'ramda'</span></span><br><span class="line"><span class="keyword">const</span> countLens = lensProp(<span class="string">'count'</span>)</span><br></pre></td></tr></table></figure><p>If we have a lens, and we know <em>how</em> we want to change the value, we can create new function that will be ready to increment the <code>count</code> property.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;lensProp, over&#125; <span class="keyword">from</span> <span class="string">'ramda'</span></span><br><span class="line"><span class="keyword">const</span> incrementCount = over(lensProp(<span class="string">'count'</span>), x =&gt; x + <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>Of course, Ramda comes with increment function <a href="http://ramdajs.com/docs/#inc" target="_blank" rel="noopener"><code>R.inc</code></a>, so we don&#39;t have to write one ourselves</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;lensProp, over, inc&#125; <span class="keyword">from</span> <span class="string">'ramda'</span></span><br><span class="line"><span class="keyword">const</span> incrementCount = over(lensProp(<span class="string">'count'</span>), inc)</span><br></pre></td></tr></table></figure><p>Function <code>incrementCount</code> is waiting for an object to be passed in. That object should have <code>count</code> property, and it better be a number!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> incrementCount = over(lensProp(<span class="string">'count'</span>), inc)</span><br><span class="line">incrementCount(&#123; <span class="attr">count</span>: <span class="number">10</span> &#125;) <span class="comment">// &#123;count: 11&#125;</span></span><br></pre></td></tr></table></figure><p>Nice! We can create a &quot;decrement count&quot; function similarly. We can even reuse the same <code>over(lensProp(&#39;count&#39;))</code> functions, thanks to all Ramda methods being curried. My final code looks tight and reads almost English-like.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; lensProp, over, inc, dec &#125; <span class="keyword">from</span> <span class="string">'ramda'</span></span><br><span class="line"><span class="keyword">const</span> count = over(lensProp(<span class="string">'count'</span>))</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  down: <span class="function"><span class="params">()</span> =&gt;</span> count(dec),</span><br><span class="line">  up: <span class="function"><span class="params">()</span> =&gt;</span> count(inc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And that&#39;s how you can clean up actions mutating state in Hyperapp. You can find the change to my counter example in commit <a href="https://github.com/bahmutov/hyperapp-counter-jsx-example/commit/0e2915c9fddfa179c1d5d17cb3ffb8b996955916" target="_blank" rel="noopener">bahmutov/hyperapp-counter-jsx-example/commit/0e2915</a></p><h2><span id="related-blog-posts">Related blog posts</span></h2><ul><li><a href="../tags/hyperapp/">My Hyperapp posts</a></li><li><a href="../lenses/">Using functional lenses to modify objects by example</a></li><li><a href="../quick-refactoring/">Quick functional refactoring</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you look at &lt;a href=&quot;https://github.com/hyperapp/awesome&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hyperapp examples&lt;/a&gt; or even simplest counte
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="hyperapp" scheme="https://glebbahmutov.com/blog/tags/hyperapp/"/>
    
      <category term="ramda" scheme="https://glebbahmutov.com/blog/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Testing ES6 Module in Cypress Electron Browser</title>
    <link href="https://glebbahmutov.com/blog/testing-es6-module-in-cypress-electron/"/>
    <id>https://glebbahmutov.com/blog/testing-es6-module-in-cypress-electron/</id>
    <published>2018-01-14T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you have a tiny framework, importing it as ES6 module is super convenient for quick demos. For example <a href="https://hyperapp.js.org/" target="_blank" rel="noopener">Hyperapp</a> can be imported and used right away in most browsers. <a href="https://twitter.com/okwolf/status/950635170725445632" target="_blank" rel="noopener">Original tweet</a>.</p><p><img src="../images/hyperapp-module/hyperapp-import.jpg" alt="Hyperapp works inside script type=&quot;module&quot;"></p><p>This is awesome - importing ES6 modules works <a href="https://jakearchibald.com/2017/es-modules-in-browsers/" target="_blank" rel="noopener">with some caveats</a>. For other browsers we do want to build ES5 bundle as an alternative to <code>&lt;script type=&quot;module&quot;&gt;</code> syntax. But what about testing? Can we test the above Hyperapp without transpiling it?</p><p>If we take my favorite test runner <a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">Cypress</a> - and it is my favorite in part because I am building it, and in part because it is awesome - yes, you can. Cypress can control multiple browsers. Chrome already supports <code>&lt;script type=&quot;module&quot;&gt;</code> syntax. The built-in Electron browsers does not, and that&#39;s a shame - Cypress records video of the Electron browser on CI which is a great advantage when a test fails. In this blog post I will show how to add es6 module support to Electron browser.</p><p><strong>note:</strong> you can find the source code in the repository <a href="https://github.com/bahmutov/hyperapp-es6-module-cypress" target="_blank" rel="noopener">bahmutov/hyperapp-es6-module-cypress</a></p><p>I copied the example code from the tweet into <code>index.html</code>, and have written a simple test for the counter program.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">it(<span class="string">'loads'</span>, () =&gt; &#123;</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'0'</span>)</span><br><span class="line">  cy</span><br><span class="line">    .contains(<span class="string">'+'</span>)</span><br><span class="line">    .click()</span><br><span class="line">    .click()</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'2'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes when Cypress uses Chrome browser, but fails in Electron - because no code is executing. Electron simply ignores the <code>type=&quot;module&quot;</code> script it does not know how to handle.</p><p><img src="../images/hyperapp-module/module-does-not-run.png" alt="Electron skips ES6 module script"></p><p>We need to somehow transpile ES6 module code (and any other script it might load using <code>import</code> statement) into &quot;normal&quot; bundle. In Node I would use a bundler like <a href="https://rollupjs.org/" target="_blank" rel="noopener">rollup</a>, but what can I use in the browser? I found <a href="https://github.com/ModuleLoader/browser-es-module-loader#readme" target="_blank" rel="noopener">browser-es-module-loader</a> - while it warns that it is not suitable for production, this code is good enough to be used during testing. I cloned and built the repository. It produced two scripts that add ES6 module support to any browser; I placed these two scripts into the <code>dist</code> folder in my test repo. We need to load these scripts <em>before</em> loading any other code on the <code>index.html</code> page. Luckily this is easy to do - by using <code>onBeforeLoad</code> option in <a href="https://on.cypress.io/visit" target="_blank" rel="noopener"><code>cy.visit</code></a> method.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addScript = <span class="function">(<span class="params"><span class="built_in">document</span>, src</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// force immediate load</span></span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">`&lt;script src="<span class="subst">$&#123;src&#125;</span>"&gt;&lt;/script&gt;`</span>)</span><br><span class="line">&#125;</span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">    onBeforeLoad: <span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">      addScript(win.document, <span class="string">'dist/babel-browser-build.js'</span>) <span class="comment">// must be first</span></span><br><span class="line">      addScript(win.document, <span class="string">'dist/browser-es-module-loader.js'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>After the update, Electron browser suddenly &quot;speaks&quot; ES6 modules, and our Hyperapp application is executing, and the test passes.</p><p><img src="../images/hyperapp-module/app-is-running.png" alt="App is running in Electron"></p><h2><span id="related-info">Related info</span></h2><p>While enabling ES6 module support in Electron is nice, for wider code support, bundling code is still the way to go. In that case, end-to-end tests should run against the bundled code. For other tests, like unit tests, please consider &quot;framework-to-Cypress&quot; unit test bridges that allow loading individual components and testing them in the full browser environment.</p><ul><li><a href="https://github.com/bahmutov/cypress-hyperapp-unit-test" target="_blank" rel="noopener">cypress-hyperapp-unit-test</a></li><li><a href="https://github.com/bahmutov/cypress-svelte-unit-test" target="_blank" rel="noopener">cypress-svelte-unit-test</a></li><li><a href="https://github.com/bahmutov/cypress-react-unit-test" target="_blank" rel="noopener">cypress-react-unit-test</a></li><li><a href="https://github.com/bahmutov/cypress-vue-unit-test" target="_blank" rel="noopener">cypress-vue-unit-test</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you have a tiny framework, importing it as ES6 module is super convenient for quick demos. For example &lt;a href=&quot;https://hyperapp.js.or
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="es6" scheme="https://glebbahmutov.com/blog/tags/es6/"/>
    
      <category term="hyperapp" scheme="https://glebbahmutov.com/blog/tags/hyperapp/"/>
    
  </entry>
  
  <entry>
    <title>Drive-by Testing Array Explorer</title>
    <link href="https://glebbahmutov.com/blog/drive-by-testing-array-explorer/"/>
    <id>https://glebbahmutov.com/blog/drive-by-testing-array-explorer/</id>
    <published>2018-01-08T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>TLDR; testing a popular web app using Cypress.</p><!-- toc --><ul><li><a href="#array-explorer">Array Explorer</a></li><li><a href="#the-setup">The setup</a></li><li><a href="#first-test">First test</a></li><li><a href="#second-test">Second test</a></li><li><a href="#covering-primary-methods">Covering primary methods</a></li><li><a href="#use-javascript">Use JavaScript</a></li><li><a href="#simplifying-test-using-aliases">Simplifying test using aliases</a></li><li><a href="#generating-tests">Generating tests</a></li><li><a href="#fake-time">Fake time</a></li><li><a href="#need-for-speed">Need for speed</a></li><li><a href="#how-do-you-say-test-in">How do you say test in ...</a></li><li><a href="#final-thoughts">Final thoughts</a></li></ul><!-- tocstop --><h2><span id="array-explorer">Array Explorer</span></h2><p>Array Explorer is a great resource for learning JavaScript array operations. You can see it in action yourself at <a href="https://sdras.github.io/array-explorer/" target="_blank" rel="noopener">https://sdras.github.io/array-explorer/</a>. Here is me adding items to an array and seeing the result and relevant documentation.</p><p><img src="/blog/images/array-explorer/array-explorer.gif" alt="Adding items to an array"></p><p>The source for this project is available at <a href="https://github.com/sdras/array-explorer" target="_blank" rel="noopener">github.com/sdras/array-explorer</a> and is written by wonderfully productive <a href="https://sarahdrasnerdesign.com/" target="_blank" rel="noopener">Sarah Drasner</a>. I have noticed that the project does not have any tests. This is a great opportunity to quickly write a few end-to-end tests using <a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">Cypress</a> test runner. Just a few high level tests can exercise the entire application <em>as if a real user was interacting with the page</em>.</p><p>Let us start testing!</p><p><strong>Hint:</strong> Sarah has a sister project <a href="https://github.com/sdras/object-explorer" target="_blank" rel="noopener">sdras/object-explorer</a> that <em>you</em> could test the same way! That would be a great practice for anyone trying out Cypress.</p><h2><span id="the-setup">The setup</span></h2><p>First, I need to setup Cypress. Luckily it only takes a minute.</p><ul><li>I forked the <code>sdras/array-explorer</code> repo to get my own copy</li><li>cloned the forked repository to local drive</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:bahmutov/array-explorer.git</span><br><span class="line">$ cd array-explorer</span><br><span class="line">$ git checkout -b add-tests</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>If we execute <code>npm start</code> right now we will get a local app running at <code>http://localhost:8080</code>. Let us start testing it.</p><ul><li>I installed Cypress as a dev dependency, and set the <code>test</code> script command.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"cypress run"</span>,</span><br><span class="line">    <span class="attr">"test:gui"</span>: <span class="string">"cypress open"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>During local development we will be running <code>npm run test:gui</code> which opens Cypress in GUI mode - it is really convenient to see what is going during our tests. On CI we will run Cypress tests in headless mode using <code>cypress run</code> command.</p><ul><li>when I opened Cypress using <code>npm run test:gui</code> for the very first time, it  scaffolded the test folder <code>cypress</code> and a configuration file <code>cypress.json</code>.</li></ul><p><img src="/blog/images/array-explorer/scaffold.png" alt="Opening project for the first time"></p><h2><span id="first-test">First test</span></h2><ul><li>We can rename new file <code>example_spec.js</code> to just <code>spec.js</code> and remove its contents to start from scratch. Notice that Cypress picks up file changes right away; click on the renamed file <code>spec.js</code> in Cypress file list. There no tests yet it says. Here is the first test I wrote.</li></ul><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'array-explorer'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">'http://localhost:8080'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">'loads'</span>, () =&gt; &#123;&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Cypress has noticed file changes and ran it right away. I see the local site in the Cypress iframe (the dev server <code>npm start</code> is still running). Everything is green!</p><h2><span id="second-test">Second test</span></h2><p>Let us confirm that the page is greeting us with the name of the project &quot;JavaScript Array Explorer&quot;. For finding unique text on the page, I usually use <a href="https://on.cypress.io/contains" target="_blank" rel="noopener"><code>cy.contains(text)</code></a> command. In this case this text might appear somewhere else on the page. To avoid accidents like this, let us make the selector more precise. Recently we have introduced <a href="https://github.com/cypress-io/cypress/issues/917" target="_blank" rel="noopener">CSS Selector Playground</a> tool. Click on its target icon next to the url bar and hover over the text to see its &quot;best&quot; selector - in this case it suggests using <code>h1</code> selector.</p><p><img src="/blog/images/array-explorer/greeting.png" alt="CSS Playground suggests using h1"></p><p>Let us update our first test to confirm that the text really greets us after load.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'greets us'</span>, () =&gt; &#123;</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'JavaScript Array Explorer'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Perfect, the test passes.</p><h2><span id="covering-primary-methods">Covering primary methods</span></h2><p>There are 7 primary methods Array Explorer teaches: from &quot;add items or other arrays&quot; to &quot;something else&quot;. We really should create suites of tests for each primary method. In this example I will write just a few example tests. Let me start with &quot;something else&quot; primary method, that has &quot;length of the array&quot; secondary option.</p><p>As suggested by the &quot;CSS Selector Playground&quot; helper (or by looking up in the DevTools), the first drop down choice can be queried with <code>#firstmethod</code> selector. The method options can be set in the <code>#methodoptions</code> drop down. Here is our test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">'something else'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'shows length of an array'</span>, () =&gt; &#123;</span><br><span class="line">    cy.get(<span class="string">'#firstmethod'</span>).select(<span class="string">'something else'</span>)</span><br><span class="line">    cy.get(<span class="string">'#methodoptions'</span>).select(<span class="string">'find the length of the array'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/array-explorer/array-length.png" alt="Array length"></p><p>While the test is running I see Cypress opening drop downs, finding the right choice, selecting it. If an element with a given selector was missing and did not appear for the command&#39;s timeout duration, an intelligent error message with a screenshot would appear. But so far everything is going great.</p><p>We need to add an assertion to the test. We have not confirmed that the app actually shows an example of the array length property. And we have not confirmed that the output text area is really showing the right answer. Let us do this. The app works in steps</p><ol><li>Code appears (with slow type effect) in the first box <code>.usage1</code></li><li>Then the answer appears in box <code>.usage2 &gt; .usage-code</code></li></ol><p>Under the hood, the Array Explorer has input and output code as text already in the DOM, just hidden. The input code is supposed to &quot;produce&quot; the output text - it has <code>console.log(...)</code> statements, but of course they are not actually executing. So in our &quot;length of array&quot; example the input looks like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">1</span>, <span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.length);</span><br></pre></td></tr></table></figure><p>The output text is <code>3</code> and is initially hidden. Only after delayed &quot;type&quot; effect it appears.</p><p>In our test, we can grab the input code as text, and the output text, and we should make sure the output value is visible <em>and correct</em>. To make sure the value is correct, I will <code>eval</code> the input text. Because the input uses <code>console.(...)</code> to &quot;print&quot; the result, before evaluating the code, I will set up a spy on <code>console.log</code> method using built-in [<code>cy.spy</code>][spy] method. Here is the entire test - it kind of looks scary, but it is really universal and can work with any array explorer example!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'shows length of an array'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'#firstmethod'</span>).select(<span class="string">'something else'</span>)</span><br><span class="line">  cy.get(<span class="string">'#methodoptions'</span>).select(<span class="string">'find the length of the array'</span>)</span><br><span class="line">  <span class="comment">// compute the output from input</span></span><br><span class="line">  <span class="keyword">let</span> output</span><br><span class="line">  cy</span><br><span class="line">    .get(<span class="string">'.exampleoutput2'</span>)</span><br><span class="line">    .invoke(<span class="string">'text'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">      output = t</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// set up spy on `console.log` before</span></span><br><span class="line">  <span class="comment">// we can call `eval(input code)`</span></span><br><span class="line">  cy.spy(<span class="built_in">console</span>, <span class="string">'log'</span>)</span><br><span class="line">  cy.get(<span class="string">'.usage1'</span>).then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> input = v.text()</span><br><span class="line">    <span class="comment">// evaluate the input code - we are already spying on console.log!</span></span><br><span class="line">    <span class="built_in">eval</span>(input)</span><br><span class="line">    <span class="comment">// the value comes from DOM - so it needs to be</span></span><br><span class="line">    <span class="comment">// converted before we can compare it to the</span></span><br><span class="line">    <span class="comment">// compute value</span></span><br><span class="line">    expect(<span class="built_in">console</span>.log).to.have.been.calledWith(<span class="built_in">JSON</span>.parse(output))</span><br><span class="line">    <span class="comment">// make sure the output becomes visible</span></span><br><span class="line">    cy</span><br><span class="line">      .get(<span class="string">'.exampleoutput2'</span>)</span><br><span class="line">      .should(<span class="string">'have.css'</span>, <span class="string">'opacity'</span>, <span class="string">'1'</span>)</span><br><span class="line">      <span class="comment">// and the right value appears</span></span><br><span class="line">      .and(<span class="string">'contain'</span>, <span class="built_in">String</span>(output))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Here is the test in action. Notice an interesting detail that goes to the heart of what makes Cypress great - the intelligent waiting for assertion to pass. The last statement of the test grab the output element and sets up TWO assertions.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy</span><br><span class="line">  .get(<span class="string">'.exampleoutput2'</span>)</span><br><span class="line">  <span class="comment">// answer becomes visible</span></span><br><span class="line">  .should(<span class="string">'have.css'</span>, <span class="string">'opacity'</span>, <span class="string">'1'</span>)</span><br><span class="line">  <span class="comment">// and the right value appears</span></span><br><span class="line">  .and(<span class="string">'contain'</span>, <span class="built_in">String</span>(output))</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> <code>.and</code> is equivalent to <code>.should</code>. It improves readability when making multiple assertions about the same element.</p><p>The video below shows the <em>first</em> asserts waits until the type effect finishes and the app makes the answer visible. Then the second assertion verifies that the right value is in the element.</p><p><img src="/blog/images/array-explorer/array-length-test.gif" alt="Array length test"></p><p>Cypress fights the unpredictable nature of end-to-end tests by retrying commands for a period of time, and these options are very configurable. The default command timeout of 4 seconds works well for this example, but was too short for other ones. So I increased the command timeout by setting it in <code>cypress.json</code> file</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"viewportHeight"</span>: <span class="number">800</span>,</span><br><span class="line">  <span class="attr">"defaultCommandTimeout"</span>: <span class="number">10000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="use-javascript">Use JavaScript</span></h2><p>As my test grows in complexity to handle multiple output values and different edge cases, the code becomes difficult to understand. Luckily, it is just JavaScript. I can refactor the test code as much as I like. I could move utility functions out to separate files and just <code>require</code> or <code>import</code> them. I can bring any NPM module as a dependency and include in my test code.</p><p>Back to our test. We can factor out the logic for running the input code sample and comparing it to the output text box. Here is this function with its main parts.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> confirmInputAndOutput = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// get expected output text</span></span><br><span class="line">  <span class="comment">// spy on console.log method</span></span><br><span class="line">  <span class="comment">// get the input code sample</span></span><br><span class="line">  <span class="comment">// eval(input code sample)</span></span><br><span class="line">  <span class="comment">// compare console.log from the spy</span></span><br><span class="line">  <span class="comment">//   with expected output text values</span></span><br><span class="line">  <span class="comment">// check if output box appears and contains output text</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// example test</span></span><br><span class="line">it(<span class="string">'shows length of array'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'#firstmethod'</span>).select(<span class="string">'something else'</span>)</span><br><span class="line">  cy.get(<span class="string">'#methodoptions'</span>).select(<span class="string">'find the length of the array'</span>)</span><br><span class="line">  confirmInputAndOutput()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2><span id="simplifying-test-using-aliases">Simplifying test using aliases</span></h2><p>A very handy feature to make tests simpler is <a href="https://on.cypress.io/variables-and-aliases" target="_blank" rel="noopener">aliases</a>. Aliases allow saving reference to a DOM element, data or XHR stubs to use later. Here is a fragment of the function that gets the output text and saves several aliases for future use.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> confirmInputAndOutput = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy</span><br><span class="line">    .get(<span class="string">'.exampleoutput2'</span>).as(<span class="string">'output'</span>)</span><br><span class="line">    .invoke(<span class="string">'text'</span>).then(removeComments).as(<span class="string">'outputText'</span>)</span><br><span class="line">    .then(parseText).as(<span class="string">'outputValues'</span>)</span><br><span class="line">  <span class="comment">// the test goes on</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above example we save reference to the DOM element as alias <code>output</code>, raw text without comments as alias <code>outputText</code> and parsed JavaScript values as <code>outputValues</code>. Later we can use the aliased values like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eval(input code sample)</span></span><br><span class="line"><span class="comment">// confirm console.log with expected values happened in order</span></span><br><span class="line">cy.get(<span class="string">'@outputValues'</span>).then(<span class="function"><span class="params">outputValues</span> =&gt;</span> &#123;</span><br><span class="line">  outputValues.forEach(<span class="function">(<span class="params">value, k</span>) =&gt;</span> &#123;</span><br><span class="line">    expect(<span class="built_in">console</span>.log.getCall(k)).to.have.been.calledWith(value)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// make sure the output text actually appears</span></span><br><span class="line">cy.get(<span class="string">'@outputText'</span>).then(<span class="function"><span class="params">outputText</span> =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">'@output'</span>).should(<span class="string">'have.css'</span>, <span class="string">'opacity'</span>, <span class="string">'1'</span>)</span><br><span class="line">  <span class="comment">// the only difficulty is with multiline text where there might</span></span><br><span class="line">  <span class="comment">// be white space at the start of each line</span></span><br><span class="line">  outputText</span><br><span class="line">    .split(<span class="string">'\n'</span>)</span><br><span class="line">    .map(trim)</span><br><span class="line">    .forEach(<span class="function"><span class="params">line</span> =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">'@output'</span>).should(<span class="string">'contain'</span>, line)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Aliases are great way to avoid deep nesting or temporary variables.</p><h2><span id="generating-tests">Generating tests</span></h2><p>I wrote a couple of other tests: &quot;fill array ...&quot;, &quot;copy a sequence of elements ...&quot;. They all work the same way - set the desired method example and call <code>confirmInputAndOutput</code>. The spec file kind of looks boring.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">'something else'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.get(<span class="string">'#firstmethod'</span>).select(<span class="string">'something else'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'shows length of an array'</span>, () =&gt; &#123;</span><br><span class="line">    selectMethodOptions(<span class="string">'find the length of the array'</span>)</span><br><span class="line">    confirmInputAndOutput()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'fills array with given value'</span>, () =&gt; &#123;</span><br><span class="line">    selectMethodOptions(</span><br><span class="line">      <span class="string">'fill all the elements of the array with a static value'</span></span><br><span class="line">    )</span><br><span class="line">    confirmInputAndOutput()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'copy a sequence of array elements within the array'</span>, () =&gt; &#123;</span><br><span class="line">    selectMethodOptions(<span class="string">'copy a sequence of array elements within the array.'</span>)</span><br><span class="line">    confirmInputAndOutput()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>All tests are going to look like this. Can we generate the tests from a list of options? Yes we can. Instead of writing individual <code>it(..., () =&gt; {...})</code> calls, I placed all primary method names and corresponding option names into an object of arrays. A small helper function iterates over the arrays, creating tests.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> methods = &#123;</span><br><span class="line">  <span class="string">'order an array'</span>: [</span><br><span class="line">    <span class="string">'reverse the order of the array'</span>,</span><br><span class="line">    <span class="string">'sort the items of the array'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'something else'</span>: [</span><br><span class="line">    <span class="string">'find the length of the array'</span>,</span><br><span class="line">    <span class="string">'fill all the elements of the array with a static value'</span>,</span><br><span class="line">    <span class="string">'copy a sequence of array elements within the array.'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// a lot more methods ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(methods).forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">  context(method, () =&gt; &#123;</span><br><span class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      cy.get(<span class="string">'#firstmethod'</span>).select(method)</span><br><span class="line">    &#125;)</span><br><span class="line">    methods[method].forEach(<span class="function"><span class="params">secondary</span> =&gt;</span> &#123;</span><br><span class="line">      it(secondary, () =&gt; &#123;</span><br><span class="line">        selectMethodOptions(secondary)</span><br><span class="line">        confirmInputAndOutput()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>One short spec file is running 20 tests checking all array method examples (except for &quot;find&quot; method that requires extra arguments)</p><h2><span id="fake-time">Fake time</span></h2><p>One test is failing. Can you spot the problem?</p><p><img src="/blog/images/array-explorer/failing-test.png" alt="Failing test"></p><p>The input code sample uses current date!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">5</span>, <span class="number">1</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> date = [<span class="keyword">new</span> <span class="built_in">Date</span>()];</span><br><span class="line"><span class="keyword">const</span> arrString = arr.toLocaleString();</span><br><span class="line"><span class="keyword">const</span> dateString = date.toLocaleString();</span><br><span class="line"><span class="built_in">console</span>.log(arrString, dateString);</span><br></pre></td></tr></table></figure><p>The expected output is hardcoded to be &quot;12/26/2017, 6:54:49 PM&quot;, which will never match the evaluated input code. What can we do? Ordinarily, Cypress tests use <a href="https://on.cypress.io/clock" target="_blank" rel="noopener"><code>cy.clock</code></a> to control the time inside the running application like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'12/26/2017, 6:54:49 PM'</span>).getTime()</span><br><span class="line">  cy.clock(now)</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:8080'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>But our use case is different. It is NOT the application that is calling <code>new Date()</code>, but our unit test via <code>eval</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">`</span></span><br><span class="line"><span class="string">let arr = [5, 1, 8];</span></span><br><span class="line"><span class="string">let date = [new Date()];</span></span><br><span class="line"><span class="string">const arrString = arr.toLocaleString();</span></span><br><span class="line"><span class="string">const dateString = date.toLocaleString();</span></span><br><span class="line"><span class="string">console.log(arrString, dateString);</span></span><br><span class="line"><span class="string">`</span>)</span><br></pre></td></tr></table></figure><p>Thus our <em>test code</em> must fake the date. Luckily, Cypress has <a href="http://sinonjs.org/" target="_blank" rel="noopener">Sinon</a> bundled and available under <code>Cypress.sinon</code> property. Right before we evaluate our code we can fake the <code>Date</code> object.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clock = Cypress.sinon.useFakeTimers(</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'12/26/2017, 6:54:49 PM'</span>).getTime()</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// evaluate the input code - we are already spying on console.log!</span></span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">'const Date = clock.Date;'</span> + sourceCode)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// don't forget to restore system clock</span></span><br><span class="line"><span class="comment">// otherwise good things will not happen</span></span><br><span class="line">clock.restore()</span><br></pre></td></tr></table></figure><p>Tricking <code>eval</code> to use local variable via closure is one of my <a href="../faking-lexical-scope/">favorite JS tricks</a>. Aside from this, I changed the original example a little bit. I split the single <code>console.log</code> to be two statements to better match what every example is doing and what my tests expect.</p><p><img src="/blog/images/array-explorer/faked-date.png" alt="Passing test after faking current time"></p><p><strong>Note</strong> the alises are highlighted when saved (pink and blue rounded labels <code>output</code> and <code>outputValues</code>). They are also highlighted with <code>@...</code> label when used.</p><h2><span id="need-for-speed">Need for speed</span></h2><p>The tests are passing, but there is one negative. They take too long to finish - 67 seconds! The main reason each tests takes a few seconds are the delays built into the app. There is half a second delay to let the user read the first line of the example code, then there is the &quot;type&quot; effect that uses <code>gsap</code> library to reveal the rest of the example code.</p><figure class="highlight js"><figcaption><span>AppCode.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">selectedUsage() &#123;</span><br><span class="line">  <span class="comment">// initial delay</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.typeOut()</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;,</span><br><span class="line">typeOut() &#123;</span><br><span class="line">  <span class="keyword">let</span> split = <span class="keyword">new</span> SplitText(<span class="keyword">this</span>.$refs.ex, &#123; <span class="attr">type</span>: <span class="string">'chars'</span> &#125;),</span><br><span class="line">    split2 = <span class="keyword">new</span> SplitText(<span class="keyword">this</span>.$refs.ex2, &#123; <span class="attr">type</span>: <span class="string">'chars'</span> &#125;),</span><br><span class="line">    tl = <span class="keyword">new</span> TimelineMax()</span><br><span class="line"></span><br><span class="line">  tl.add(<span class="string">'start'</span>)</span><br><span class="line">  <span class="comment">// animation keyframes</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <a href="https://github.com/greensock/GreenSock-JS" target="_blank" rel="noopener">gsap</a> is JavaScript animation library, so maybe if we can &quot;speed&quot; up application&#39;s timers we can zoom through the type animation and make our tests faster. While Sinon includes timers, I found <a href="https://github.com/sinonjs/lolex" target="_blank" rel="noopener">lolex</a> to be the most convenient library to work with fake timers. Luckily using this from our tests is very simple.</p><p>First, install <code>lolex</code> as a new dev dependency.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D lolex</span><br><span class="line">+ lolex@2.3.1</span><br></pre></td></tr></table></figure></p><p>Second, install fake timers into the application <em>before</em> the application loads. We can do this in the callback <code>onBeforeLoad</code> of the <a href="https://on.cypress.io/visit" target="_blank" rel="noopener"><code>cy.visit</code></a> method. It is important to pass the application&#39;s window as the target for stubbing timers.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fakeClock</span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:8080'</span>, &#123;</span><br><span class="line">    onBeforeLoad: <span class="function"><span class="params">win</span> =&gt;</span> &#123;</span><br><span class="line">      fakeClock = lolex.install(&#123;</span><br><span class="line">        target: win,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Inside the test logic we can manually advance the clock after the source code appears and the app called its <code>setTimeout</code> (which is now stubbed).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> confirmInputAndOutput = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy</span><br><span class="line">    .get(<span class="string">'.exampleoutput2'</span>).as(<span class="string">'output'</span>)</span><br><span class="line">    .invoke(<span class="string">'text'</span>).then(removeComments).as(<span class="string">'outputText'</span>)</span><br><span class="line">    .then(parseText).as(<span class="string">'outputValues'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fakeClock.tick(<span class="number">10000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// the test goes on</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The generous 10 second time jump completes the initial delay of 500ms and instantly zooms through any typing animation the app makes. The result is awesome - total time to finish all tests goes down from 67 seconds to 27 seconds!</p><h2><span id="how-do-you-say-test-in">How do you say test in ...</span></h2><p>The last thing I will do is write a test to make sure the language selector works. Because the language selection element does not have a good way to access it I have added <code>data-attr-cy</code> attribute</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selectedLanguage"</span> <span class="attr">data-attr-cy</span>=<span class="string">"language"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"(val, key) in languages"</span> <span class="attr">:value</span>=<span class="string">"key"</span>&gt;</span>&#123;&#123;val.long&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The test can use this data attribute to get the right selection element. After selecting the desired language (I am picking my native Russian), we use the same test logic as before.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'works in Russian'</span>, () =&gt; &#123;</span><br><span class="line">  cy.get(<span class="string">'[data-attr-cy="language"'</span>).select(<span class="string">'Russian'</span>)</span><br><span class="line">  selectMethod(<span class="string">'удалить элементы'</span>) <span class="comment">// remove elements</span></span><br><span class="line">  selectMethodOptions(<span class="string">'первый элемент массива'</span>) <span class="comment">// first element of the array</span></span><br><span class="line">  confirmInputAndOutput()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/blog/images/array-explorer/russian-test.png" alt="In Soviet Russia array removes you"></p><p><strong>Tip:</strong> we could have imported data for different languages directly from the <code>store/&lt;language&gt;</code> files. Then we could actually iterate and create full test suites for <em>every</em> language. After all, out tests are JavaScript and can share code with the web app itself!</p><h2><span id="final-thoughts">Final thoughts</span></h2><p>Here is the final result - the <a href="https://github.com/bahmutov/array-explorer/blob/9a07cc43734c150f170cececb5b3f76ce1af9851/cypress/integration/spec.js" target="_blank" rel="noopener">spec.js file</a> and the screen recording of the running tests. The tests take longer than 27 seconds because my laptop is choking a little bit during while doing full screen recording.</p><iframe width="853" height="480" src="https://www.youtube.com/embed/0t5rkNbN6sY?rel=0" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><p>I have opened a pull request <a href="https://github.com/sdras/array-explorer/pull/70" target="_blank" rel="noopener">sdras/array-explorer/pull/70</a> to merge these tests into the Array Explorer. Maybe these tests can inspire you to add tests to <a href="https://github.com/sdras/object-explorer" target="_blank" rel="noopener">sdras/object-explorer</a>?</p><p>You can find more information about Cypress from these links</p><ul><li><a href="https://www.cypress.io/" target="_blank" rel="noopener">https://www.cypress.io/</a></li><li><a href="https://on.cypress.io/intro" target="_blank" rel="noopener">https://on.cypress.io/intro</a></li><li><a href="https://www.cypress.io/blog/" target="_blank" rel="noopener">https://www.cypress.io/blog/</a></li><li><a href="../tags/cypress/">https://glebbahmutov.com/blog/tags/cypress/</a></li><li><a href="https://on.cypress.io/talks-media" target="_blank" rel="noopener">https://on.cypress.io/talks-media</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TLDR; testing a popular web app using Cypress.&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#array-explorer&quot;&gt;Array Explorer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="vuejs" scheme="https://glebbahmutov.com/blog/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Testing Vue CLI reload</title>
    <link href="https://glebbahmutov.com/blog/testing-vue-cli-reload/"/>
    <id>https://glebbahmutov.com/blog/testing-vue-cli-reload/</id>
    <published>2018-01-07T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="vue-cli-test">Vue-cli test</span></h2><p>Recently I came across <a href="https://github.com/vuejs/vue-cli/blob/15c2c78481ba15402c1b1e089961f4443e1aa6c9/packages/%40vue/cli-service/lib/__tests__/serve.spec.js" target="_blank" rel="noopener">vue-cli server reload test</a>. The test uses <a href="https://github.com/GoogleChrome/puppeteer#readme" target="_blank" rel="noopener">Puppeteer</a> to verify that vue-cli scaffolds a project correctly, that dev server is serving a Vue app, and that changing the app&#39;s source file reloads the page, and it shows updated text. Here is the main part of that test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> runTest = <span class="keyword">async</span> (url) =&gt; &#123;</span><br><span class="line">  <span class="comment">// some setup code omitted</span></span><br><span class="line">  <span class="keyword">const</span> browser = activeBrowser = <span class="keyword">await</span> puppeteer.launch(opts)</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">  <span class="keyword">await</span> page.goto(url)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> assertText = <span class="keyword">async</span> (selector, text) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">await</span> page.evaluate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">'h1'</span>).textContent</span><br><span class="line">    &#125;)</span><br><span class="line">    expect(value).toMatch(text)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> msg = <span class="string">`Welcome to Your Vue.js App`</span></span><br><span class="line">  <span class="keyword">await</span> assertText(<span class="string">'h1'</span>, msg)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// test hot reload</span></span><br><span class="line">  <span class="keyword">const</span> file = <span class="keyword">await</span> read(<span class="string">`src/App.vue`</span>)</span><br><span class="line">  <span class="keyword">await</span> write(<span class="string">`src/App.vue`</span>, file.replace(msg, <span class="string">`Updated`</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> nextUpdate() <span class="comment">// wait for child stdout update signal</span></span><br><span class="line">  <span class="keyword">await</span> sleep(<span class="number">1000</span>) <span class="comment">// give the client time to update, should happen in 1s</span></span><br><span class="line">  <span class="keyword">await</span> assertText(<span class="string">'h1'</span>, <span class="string">`Updated`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> browser.close()</span><br><span class="line">  activeBrowser = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above code certainly works. But even discounting all the code outside the function <code>runTest</code>, count how many lines of code are <em>related to the test</em> and how many lines of code are dealing with starting the browser, finding the element, waiting for the text and then cleaning up. Puppeteer is a great tool, but it is NOT a testing tool specifically; it is a general Chrome browser automation tool. Thus a tool <em>specifically designed</em> to be a testing tool around a real browser might be more convenient to use in this case.</p><h2><span id="cypress">Cypress</span></h2><p>One such tool that specifically focuses on solving browser management, element selection, automated retries and other developer experience issues common during testing is <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress.io</a> (full disclosure: I have joined Cypress team in 2017 after being a super happy user for almost a year). Let me try writing a similar server test using Cypress for comparison.</p><p>I prefer working on a new project rather than forking <code>vue-cli</code> to avoid distractions of a large code base. Let us create a new Vue project to use as a test playground. After installing <code>vue-cli</code> globally, I need to scaffold a project with hot module reloading (you can find finished project at <a href="https://github.com/bahmutov/test-vue-cli" target="_blank" rel="noopener">bahmutov/test-vue-cli</a>).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ vue list</span><br><span class="line"></span><br><span class="line">  Available official templates:</span><br><span class="line"></span><br><span class="line">  ★  browserify - A full-featured Browserify + vueify setup with hot-reload, linting &amp; unit testing.</span><br><span class="line">  ★  browserify-simple - A simple Browserify + vueify setup for quick prototyping.</span><br><span class="line">  ★  pwa - PWA template for vue-cli based on the webpack template</span><br><span class="line">  ★  simple - The simplest possible Vue setup in a single HTML file</span><br><span class="line">  ★  webpack - A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.</span><br><span class="line">  ★  webpack-simple - A simple Webpack + vue-loader setup for quick prototyping.</span><br></pre></td></tr></table></figure><p>Pick <code>webpack-simple</code> and run <code>vue init</code> with full template name (to get around 404 response I am getting today) <a href="https://github.com/vuejs-templates/webpack-simple" target="_blank" rel="noopener">vuejs-templates/webpack-simple</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ vue init vuejs-templates/webpack-simple</span><br><span class="line"></span><br><span class="line">? Generate project in current directory? Yes</span><br><span class="line">? Project name test-vue-cli</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author Gleb Bahmutov</span><br><span class="line">? License MIT</span><br><span class="line">? Use sass? No</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated &quot;test-vue-cli&quot;.</span><br><span class="line"></span><br><span class="line">   To get started:</span><br><span class="line"></span><br><span class="line">     npm install</span><br><span class="line">     npm run dev</span><br></pre></td></tr></table></figure><p>The project has been bootstrapped in the current folder. Install NPM dependencies and here are the files in the current folder</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l</span><br><span class="line">total 32</span><br><span class="line">-rw-r--r--    1  staff    327 Jan  7 14:27 README.md</span><br><span class="line">-rw-r--r--    1  staff    206 Jan  7 14:27 index.html</span><br><span class="line">drwxr-xr-x  640  staff  21760 Jan  7 14:29 node_modules</span><br><span class="line">-rw-r--r--    1  staff    855 Jan  7 14:27 package.json</span><br><span class="line">drwxr-xr-x    5  staff    170 Jan  7 14:27 src</span><br><span class="line">-rw-r--r--    1  staff   1600 Jan  7 14:27 webpack.config.js</span><br></pre></td></tr></table></figure><p>Install Cypress using <code>npm i -D cypress</code> and add two script commands.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"cross-env NODE_ENV=development webpack-dev-server --open --hot"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack --progress --hide-modules"</span>,</span><br><span class="line">    <span class="attr">"cypress:open"</span>: <span class="string">"cypress open"</span>,</span><br><span class="line">    <span class="attr">"cypress:run"</span>: <span class="string">"cypress run"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Open Cypress once with <code>npm run cypress:open</code> to scaffold its folder <code>cypress</code>.</p><p><img src="/blog/images/test-vue-cli/scaffold.png" alt="Scaffolding Cypress on first run"></p><p>I prefer deleting the created <code>example_spec.js</code> with many many examples of tests and starting from scratch. Let us verify that our default application shows the expected text &quot;Welcome to Your Vue.js App&quot; in element <code>h1</code>.</p><figure class="highlight js"><figcaption><span>cypress/integration/spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'serves'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:8080'</span>)</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'Welcome to Your Vue.js App'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Start the dev server with <code>npm run dev</code> and open Cypress with <code>npm run cypress:open</code>. We have a passing test!</p><p><img src="/blog/images/test-vue-cli/first-test.png" alt="First test"></p><p>Now let us read the <code>src/App.vue</code> file, change the message passed to the Vue component and check that the browser shows the updated message. We are going to use <a href="https://on.cypress.io/readfile" target="_blank" rel="noopener"><code>cy.readFile</code></a> and <a href="https://on.cypress.io/writefile" target="_blank" rel="noopener"><code>cy.writeFile</code></a> methods.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line"><span class="keyword">const</span> setNewText = <span class="function"><span class="params">source</span> =&gt;</span> source.replace(message, <span class="string">'Updated'</span>)</span><br><span class="line">it(<span class="string">'serves'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:8080'</span>)</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, message)</span><br><span class="line">  cy</span><br><span class="line">    .readFile(<span class="string">'src/App.vue'</span>)</span><br><span class="line">    .then(setNewText)</span><br><span class="line">    .then(<span class="function"><span class="params">source</span> =&gt;</span> cy.writeFile(<span class="string">'src/App.vue'</span>, source))</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'Updated'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test passes, of course. We can see each step of the test in the command log on the left.</p><p><img src="/blog/images/test-vue-cli/updated.png" alt="Updated text test"></p><p>Here is the important part. Cypress is really optimized for testing. Do you want to see why the first assertion <code>cy.contains(&#39;h1&#39;, message)</code> passed? Hover over or click on step 2 to see the state of the DOM <em>at that moment</em>. We are finding the right text at the right location on the page - not accidentally matching some other text that might be on the page.</p><p><img src="/blog/images/test-vue-cli/contains.png" alt="Contains text"></p><p>Click on the next test command - <code>READFILE</code>. It shows a popup message &quot;Printed output to your console&quot;. Open the DevTools (Cypress is after all just an Electron app, or it can control Chrome browser) to see the file read and its contents.</p><p><img src="/blog/images/test-vue-cli/read-file.png" alt="cy.readFile"></p><p>Isn&#39;t this convenient during working with tests to see all data related to each step of the test?</p><h2><span id="dealing-with-initial-state">Dealing with initial state</span></h2><p>There is one more note that I must make. You should strive to make each test independent from any other test, even independent from <em>its previous run</em>. In our case we have <em>changed</em> the file <code>src/App.vue</code>, and if we reload the test, it fails to find the original text &quot;Welcome to Your Vue.js App&quot;. Our previous run changed the source file, and our test did not start from the clean state.</p><p><img src="/blog/images/test-vue-cli/failed.png" alt="Running test again fails"></p><p>Again, the above screenshot shows the difference between a general browser automation tool and Cypress. The reason for the failure is communicated very clearly; Cypress team pays a lot of attention to good error messages. It should be enough to look at the screenshot to immediately see the problem. In this case the app shows &quot;Updated&quot; where &quot;Welcome ...&quot; text should have been.</p><p>By the way, Cypress takes video of the entire test run by default, and screenshot after failures automatically when running on CI with <code>npm run cypress:run</code> command; there is nothing to configure.</p><p>Ok, let us fix the test. We can modify the <code>App.vue</code> file <em>after</em> the test - but that is an <a href="https://on.cypress.io/best-practices#Using-after-or-afterEach-hooks" target="_blank" rel="noopener">anti-pattern to avoid</a>. You never know if the test failed or crashed - the clean up after the test is <em>not guaranteed</em>. So let us make sure the test starts with expected file.</p><p>There are many things we could do in this case, but I pick using a fixture. Copy the original <code>src/App.vue</code> to <code>cypress/fixtures/App.vue</code>. Before our test, load the fixture and save it as <code>src/App.vue</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">'App.vue'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">source</span> =&gt;</span> cy.writeFile(<span class="string">'src/App.vue'</span>, source))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line"><span class="keyword">const</span> setNewText = <span class="function"><span class="params">source</span> =&gt;</span> source.replace(message, <span class="string">'Updated'</span>)</span><br><span class="line">it(<span class="string">'serves'</span>, () =&gt; &#123;</span><br><span class="line">  cy.visit(<span class="string">'http://localhost:8080'</span>)</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, message)</span><br><span class="line">  cy</span><br><span class="line">    .readFile(<span class="string">'src/App.vue'</span>)</span><br><span class="line">    .then(setNewText)</span><br><span class="line">    .then(<span class="function"><span class="params">source</span> =&gt;</span> cy.writeFile(<span class="string">'src/App.vue'</span>, source))</span><br><span class="line">  cy.contains(<span class="string">'h1'</span>, <span class="string">'Updated'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The test reliably passes any time we run it. Even better, we can add back our very first original &quot;message&quot; test.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Vue server'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> message = <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line">  <span class="keyword">const</span> setNewText = <span class="function"><span class="params">source</span> =&gt;</span> source.replace(message, <span class="string">'Updated'</span>)</span><br><span class="line">  <span class="keyword">const</span> saveSource = <span class="function"><span class="params">source</span> =&gt;</span> cy.writeFile(<span class="string">'src/App.vue'</span>, source)</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.fixture(<span class="string">'App.vue'</span>).then(saveSource)</span><br><span class="line">    cy.visit(<span class="string">'http://localhost:8080'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">'serves'</span>, () =&gt; &#123;</span><br><span class="line">    cy.contains(<span class="string">'h1'</span>, message)</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">'reloads on change'</span>, () =&gt; &#123;</span><br><span class="line">    cy</span><br><span class="line">      .readFile(<span class="string">'src/App.vue'</span>)</span><br><span class="line">      .then(setNewText)</span><br><span class="line">      .then(saveSource)</span><br><span class="line">    cy.contains(<span class="string">'h1'</span>, <span class="string">'Updated'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>This way we will know exactly which dev server feature is broken if a test fails. First test tells us if the dev server is serving the bundled application. Second test tells us if the hot module replacement is working.</p><p><img src="/blog/images/test-vue-cli/two-tests.png" alt="Two tests"></p><h2><span id="starting-the-server">Starting the server</span></h2><p>The <a href="https://github.com/vuejs/vue-cli/blob/15c2c78481ba15402c1b1e089961f4443e1aa6c9/packages/%40vue/cli-service/lib/__tests__/serve.spec.js" target="_blank" rel="noopener">original Vue test</a> also starts the dev server, grabs the output URL and runs the test. We believe starting and stopping server <em>inside</em> Cypress is an anti-pattern. Instead we recommend using <a href="https://github.com/bahmutov/start-server-and-test" target="_blank" rel="noopener">start-server-and-test</a> utility.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"test"</span>: <span class="string">"start-server-and-test dev http://localhost:8080 cypress:run"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>npm test</code> command starts the dev server, waits for the given url to respond with 200, then runs Cypress without GUI, and then shuts down the server. The url is hardcoded, but we could add extracting url from the first command&#39;s output to <code>start-server-and-test</code> tool if needed. For now I will just move the url from the spec file to <code>cypress.json</code> file.</p><figure class="highlight js"><figcaption><span>spec.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  cy.fixture(<span class="string">'App.vue'</span>).then(saveSource)</span><br><span class="line">  cy.visit(<span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"defaultCommandTimeout"</span>: <span class="number">10000</span>,</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:8080"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At runtime, we can even overwrite the base url using command line arguments or environment variable. For example, if the server is running at port 3000 we can run out tests against that port with this command.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CYPRESS_baseUrl=http://localhost:3000 npm run cypress:run</span><br></pre></td></tr></table></figure><h2><span id="final-thoughts">Final thoughts</span></h2><p>The <a href="https://github.com/vuejs/vue-cli/blob/15c2c78481ba15402c1b1e089961f4443e1aa6c9/packages/%40vue/cli-service/lib/__tests__/serve.spec.js" target="_blank" rel="noopener">Vue test</a> has 60 lines, including several blank ones. Almost equivalent Cypress test is 20 lines. But I think the smaller test size does not tell the whole story.</p><p>Puppeteer is a great general purpose Chrome automation tool, but lacks anything to make testing web applications easier. Cypress has smart selector API, automatic command retries, GUI with full interactive command history, server and object mocking, helpful errors, site blacklisting, command customization, plugins API, great CI support, screenshots and video recording, <a href="https://www.cypress.io/dashboard/" target="_blank" rel="noopener">central dashboard</a> and many other things currently on the <a href="https://on.cypress.io/roadmap" target="_blank" rel="noopener">roadmap</a>.</p><p>Give Cypress 5 minutes, and I guarantee that you will not want to use any other tool for E2E testing. After all, here is what NASA <a href="https://twitter.com/CollinEstes/status/949382099722752000" target="_blank" rel="noopener">says about Cypress</a></p><p><img src="/blog/images/test-vue-cli/nasa.png" alt="NASA tweets"></p><h3><span id="where-to-start">Where to start</span></h3><ul><li><a href="https://www.cypress.io/" target="_blank" rel="noopener">https://www.cypress.io/</a></li><li><a href="https://on.cypress.io/intro" target="_blank" rel="noopener">https://on.cypress.io/intro</a></li><li><a href="https://on.cypress.io/why-cypress" target="_blank" rel="noopener">https://on.cypress.io/why-cypress</a></li><li><a href="https://on.cypress.io/tutorials" target="_blank" rel="noopener">https://on.cypress.io/tutorials</a></li><li><a href="https://on.cypress.io/talks-media" target="_blank" rel="noopener">https://on.cypress.io/talks-media</a></li><li><a href="https://on.cypress.io/key-differences" target="_blank" rel="noopener">https://on.cypress.io/key-differences</a></li><li><a href="https://github.com/bahmutov/test-vue-cli" target="_blank" rel="noopener">https://github.com/bahmutov/test-vue-cli</a> has the source code for this blog post</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;vue-cli-test&quot;&gt;Vue-cli test&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Recently I came across &lt;a href=&quot;https://github.com/vuejs/vue-cli/blob/15c2c78481ba154
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="testing" scheme="https://glebbahmutov.com/blog/tags/testing/"/>
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
      <category term="vuejs" scheme="https://glebbahmutov.com/blog/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>Quick functional refactoring</title>
    <link href="https://glebbahmutov.com/blog/quick-refactoring/"/>
    <id>https://glebbahmutov.com/blog/quick-refactoring/</id>
    <published>2018-01-05T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>I was writing a small program to drive <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress test runner</a> via its <a href="https://on.cypress.io/command-line#Module-API" target="_blank" rel="noopener">module api</a> to run the same spec file against multiple apps. There is a list of application names and we go through each app one by one.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'console.table'</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'bluebird'</span>)</span><br><span class="line"><span class="built_in">Promise</span>.mapSeries(apps, testApp)</span><br><span class="line">  .then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// results is array of objects</span></span><br><span class="line">    <span class="comment">// example:</span></span><br><span class="line">    <span class="comment">// [&#123;</span></span><br><span class="line">    <span class="comment">//   tests: 21,</span></span><br><span class="line">    <span class="comment">//   passes: 21,</span></span><br><span class="line">    <span class="comment">//   pending: 0,</span></span><br><span class="line">    <span class="comment">//   failures: 0,</span></span><br><span class="line">    <span class="comment">//   duration: '35 seconds',</span></span><br><span class="line">    <span class="comment">//   screenshots: 0,</span></span><br><span class="line">    <span class="comment">//   video: false,</span></span><br><span class="line">    <span class="comment">//   version: '1.4.1'</span></span><br><span class="line">    <span class="comment">// &#125;, ...]</span></span><br><span class="line">    <span class="built_in">console</span>.table(<span class="string">'App results'</span>, results)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>The <code>testApp</code> function calls Cypress module to actually run the tests.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cypress = <span class="built_in">require</span>(<span class="string">'cypress'</span>)</span><br><span class="line"><span class="keyword">const</span> testApp = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> cypress</span><br><span class="line">    .run(&#123;</span><br><span class="line">      browser: args.browser,</span><br><span class="line">      env: &#123;</span><br><span class="line">        app</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ok, so let&#39;s run it with two different apps, what do we see?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TodoMVC results</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">tests  passes  pending  failures  duration    screenshots  video  version</span><br><span class="line">-----  ------  -------  --------  ----------  -----------  -----  -------</span><br><span class="line">21     21      0        0         33 seconds  0            false  1.4.1</span><br><span class="line">29     29      0        0         37 seconds  0            false  1.4.1</span><br></pre></td></tr></table></figure><p>Hmm, not really useful. There are columns that are going to be the same: screenshots, video and version. And there is the most important column missing - the name of the app for each row! I also want to highlight the number of failures if there are any. Any value above zero in the <code>failures</code> column should be displayed in red, while zero should be displayed in green.</p><p>Ok, we are good programmers so we separate changing the shape of the object from changing colors. We can attach transforms to the promise returned from <code>cypress.run</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testApp = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> cypress</span><br><span class="line">    .run(&#123;</span><br><span class="line">      browser: args.browser,</span><br><span class="line">      env: &#123;</span><br><span class="line">        app</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(addInfo)</span><br><span class="line">    .then(addColors)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The function is <code>addInfo</code> that will remove some properties and add others. We can write it in my usual &quot;procedural&quot; style. That&#39;s how I usually start my code - just get the thing working.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> testApp = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> addInfo = <span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">delete</span> results.screenshots</span><br><span class="line">    <span class="keyword">delete</span> results.video</span><br><span class="line">    <span class="keyword">delete</span> results.version</span><br><span class="line">    results.app = app</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cypress</span><br><span class="line">    .run(...)</span><br><span class="line">    .then(addInfo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hmm, is this function <code>testResults</code> doing what I think it should be doing? How can I test it - it is deep inside the <code>testApp</code> closure, hard to reach to test it. The only reason it has to be there is because it needs variable <code>app</code>. Let us solve this problem - let us move <code>addInfo</code> outside. We can pass the <code>app</code> name as an argument.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addInfo = <span class="function">(<span class="params">results, app</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">delete</span> results.screenshots</span><br><span class="line">  <span class="keyword">delete</span> results.video</span><br><span class="line">  <span class="keyword">delete</span> results.version</span><br><span class="line">  results.app = app</span><br><span class="line">  <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hmm, but using this function is a little inconvenient.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> cypress</span><br><span class="line">  .run(...)</span><br><span class="line">  .then(<span class="function"><span class="params">results</span> =&gt;</span> addInfo(results, app))</span><br></pre></td></tr></table></figure><p>See what I mean? We know <code>app</code> right away, but have to wait until the <code>cypress.run</code> promise resolves to get the <code>results</code> value. In situations like this, when we know one argument <em>much earlier</em> than the other arguments, <a href="../put-callback-first-for-elegance/">we should place first</a> in the functions signature. So this order would be preferred. Now we can do partial application right in <code>.then</code> callback.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addInfo = <span class="function">(<span class="params">app, results</span>) =&gt;</span> &#123; ... &#125;</span><br><span class="line">cypress.run(...)</span><br><span class="line">  .then(addInfo.bind(<span class="literal">null</span>, app))</span><br></pre></td></tr></table></figure><p>Great, JavaScript can even do <a href="../binding-vs-partial-application/">partial application</a> in ES5, but we can shorten our code using a helper library like <a href="http://ramdajs.com/docs/" target="_blank" rel="noopener">Ramda</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> R = <span class="built_in">require</span>(<span class="string">'ramda'</span>)</span><br><span class="line">cypress.run(...)</span><br><span class="line">  .then(R.partial(addInfo, app))</span><br></pre></td></tr></table></figure><p>But we can make this even more convenient by currying the <code>addInfo</code> function - in ES6 it is so simple to do, no extras required.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addInfo = <span class="function"><span class="params">app</span> =&gt;</span> results =&gt; &#123;...&#125;</span><br><span class="line"><span class="comment">// look how it is easy now</span></span><br><span class="line">cypress.run(...)</span><br><span class="line">  .then(addInfo(app))</span><br></pre></td></tr></table></figure><p>Easy peasy.</p><p>Let us look inside the function <code>addInfo</code> itself. The point of functional refactoring is to split unrelated operations into many small single purpose functions and then compose back <a href="http://slides.com/bahmutov/fun-javascript-workshop#/" target="_blank" rel="noopener">slides</a>. We currently have two different things going on - deleting some properties and adding a new one.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// deleting</span></span><br><span class="line"><span class="keyword">delete</span> results.screenshots</span><br><span class="line"><span class="keyword">delete</span> results.video</span><br><span class="line"><span class="keyword">delete</span> results.version</span><br><span class="line"><span class="comment">// adding</span></span><br><span class="line">results.app = app</span><br></pre></td></tr></table></figure><p>Deleting a list of properties from an object is so common, there is a function in Ramda that does exactly that <a href="http://ramdajs.com/docs/#omit" target="_blank" rel="noopener">R.omit</a>. And it is already designed &quot;the right way&quot; - the names of properties we know is at first position, and the function is curried.We can even move it out of <code>addInfo</code> into its own <code>.then(...)</code> step.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cypress.run(...)</span><br><span class="line">  .then(R.omit([<span class="string">'screenshots'</span>, <span class="string">'video'</span>, <span class="string">'version'</span>]))</span><br><span class="line">  .then(addInfo(app))</span><br></pre></td></tr></table></figure><p>Now let&#39;s add the <code>app</code> property. There is no built-in method for this - and you will see why shortly (there is more general and powerful one). We could make our own tiny function just for this. That is what I do a lot - writing tiny functions when I do not want to bring heavy guns.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setProp = <span class="function"><span class="params">name</span> =&gt;</span> value =&gt; <span class="function"><span class="params">object</span> =&gt;</span> &#123;</span><br><span class="line">  object[name] = value</span><br><span class="line">  <span class="keyword">return</span> object</span><br><span class="line">&#125;</span><br><span class="line">cypress.run(...)</span><br><span class="line">  .then(R.omit([<span class="string">'screenshots'</span>, <span class="string">'video'</span>, <span class="string">'version'</span>]))</span><br><span class="line">  .then(setProp(<span class="string">'app'</span>, app))</span><br></pre></td></tr></table></figure><p>Great, we have triple function <code>setProp</code>! But it is not as polished as <code>R.omit</code>. We can notice this by inspecting the input and output objects.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = R.omit([<span class="string">'foo'</span>])(input)</span><br><span class="line">result === input <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>R.omit</code> does not mutate the input object - it creates a new one without the listed properties. Our function <code>setProp</code> mutates the object - making it harder to rely on it. Any object passed into <code>setProp</code> will be forever changed. Or not, you really cannot tell in JavaScript. So lets look at what Ramda can give us. Working with object properties is done via <em>lenses</em>. First we create a lens to look at specific property <code>app</code>. Then we use a different function to set a specific value via this lens on an object <em>that will arrive later</em>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lens = R.lensProp(<span class="string">'app'</span>)</span><br><span class="line">cypress.run(...)</span><br><span class="line">  .then(R.omit([<span class="string">'screenshots'</span>, <span class="string">'video'</span>, <span class="string">'version'</span>]))</span><br><span class="line">  .then(R.set(lens, app))</span><br></pre></td></tr></table></figure><p>We don&#39;t need to make <code>lens</code> object separately, we can just make it in place when needed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cypress.run(...)</span><br><span class="line">  .then(R.omit([<span class="string">'screenshots'</span>, <span class="string">'video'</span>, <span class="string">'version'</span>]))</span><br><span class="line">  .then(R.set(R.lensProp(<span class="string">'app'</span>), app))</span><br></pre></td></tr></table></figure><p>Perfect, remember why we have started this? So that our function <code>appInfo</code> is testable. Look what has happened now - we have eliminated <code>appInfo</code> completely. Instead we have two very simple functions from a well tested and widely used library. It is very unlikely that anything will go wrong in <code>R.omit</code> or <code>R.set</code> functions, so we don&#39;t have to worry.</p><p>Next we should look at the <code>addColors</code> function. My original implementation is using <a href="https://github.com/chalk/chalk#readme" target="_blank" rel="noopener">chalk</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addColors = <span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">  results.failures = results.failures</span><br><span class="line">    ? chalk.red(results.failures)</span><br><span class="line">    : chalk.green(results.failures)</span><br><span class="line">  <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice the similarity to our previous refactoring - we are working with specific property on an object that is yet to arrive. So we will make a lens to &quot;look&quot; at the property <code>failures</code> and we are going to modify its value and will put it back into the object. Or rather we will make a new object with updated property (thanks immutability).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> failuresLens = R.lensProp(<span class="string">'failures'</span>)</span><br><span class="line"><span class="keyword">const</span> colorFailures = <span class="function"><span class="params">n</span> =&gt;</span> (n ? chalk.red(n) : chalk.green(n))</span><br><span class="line"><span class="keyword">const</span> addColors = <span class="function"><span class="params">results</span> =&gt;</span> R.over(failuresLens, colorFailures, results)</span><br></pre></td></tr></table></figure><p>Notice how we split the function into its atomic operations? And the great thing - the last line is NOT needed - all it does is passing <code>results</code> as the last argument to <code>R.over</code>. Since every function in Ramda is curried, we can get rid of it. Plus we can create the lens in place, bringing our logic to super simple two-liner.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colorFailures = <span class="function"><span class="params">n</span> =&gt;</span> (n ? chalk.red(n) : chalk.green(n))</span><br><span class="line"><span class="keyword">const</span> addColors = R.over(R.lensProp(<span class="string">'failures'</span>), colorFailures)</span><br></pre></td></tr></table></figure><p>So here is our final code - pure functions, passing and modifying data along the chain.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colorFailures = <span class="function"><span class="params">n</span> =&gt;</span> (n ? chalk.red(n) : chalk.green(n))</span><br><span class="line"><span class="keyword">const</span> addColors = R.over(R.lensProp(<span class="string">'failures'</span>), colorFailures)</span><br><span class="line"><span class="keyword">return</span> cypress</span><br><span class="line">  .run(...)</span><br><span class="line">  .then(R.omit([<span class="string">'screenshots'</span>, <span class="string">'video'</span>, <span class="string">'version'</span>]))</span><br><span class="line">  .then(R.set(R.lensProp(<span class="string">'app'</span>), app))</span><br><span class="line">  .then(addColors)</span><br></pre></td></tr></table></figure><p>And here the result - nice little table we got here.</p><p><img src="/blog/images/todomvc-table.png" alt="Results"></p><p>PS: you do not have to code every object transform by hand. I wrote a tiny utility <a href="https://github.com/bahmutov/change-by-example" target="_blank" rel="noopener">change-by-example</a> that given two objects computes the transformation using Ramda functions and <a href="../lenses/">especially lenses</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I was writing a small program to drive &lt;a href=&quot;https://www.cypress.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cypress test runner&lt;/a&gt; via its &lt;
      
    
    </summary>
    
      <category term="process" scheme="https://glebbahmutov.com/blog/categories/process/"/>
    
    
      <category term="functional" scheme="https://glebbahmutov.com/blog/tags/functional/"/>
    
  </entry>
  
  <entry>
    <title>JSON schema for the win</title>
    <link href="https://glebbahmutov.com/blog/json-schema-for-the-win/"/>
    <id>https://glebbahmutov.com/blog/json-schema-for-the-win/</id>
    <published>2017-12-21T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>I have noticed a curious thing while editing <code>tsconfig.json</code> file the other day. I was usingVSCode and there was an IntelliSense popup as I started entering a property name in a JSONobject.</p><p><img src="/blog/images/json-schema/tsconfig-vscode.png" alt="IntelliSense popup in tsconfig.json"></p><p>Then I have noticed the same happening while editing <code>package.json</code>. Here is me hovering overthe property <code>main</code>. Seems accurate.</p><p><img src="/blog/images/json-schema/package-vscode.png" alt="IntelliSense popup in package.json"></p><p>The editor was quite helpful - not only it is displaying suggestions, it also highlights aserrors places where I am trying to enter invalid values.</p><p><img src="/blog/images/json-schema/wrong-value.png" alt="Entering a number for main"></p><p>The editor &quot;knows&quot; that <code>main</code> property should have a string value, and not a number.</p><p>So I have decided to investigate how the editor knows what properties are supposed to bein the <code>tsconfig.json</code> or <code>package.json</code>? Searching around I found VSCode<a href="https://code.visualstudio.com/docs/languages/json" target="_blank" rel="noopener">Json editing docs</a>. Turns out the secretto the IntelliSense &quot;superpowers&quot; is that the editor finds schema for the JSON file by name.For <code>tsconfig.json</code> there is a public schema at<a href="json.schemastore.org/tsconfig">json.schemastore.org/tsconfig</a>. It describes every property,here is a small part</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"JSON schema for the TypeScript compiler's configuration file"</span>,</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"http://json-schema.org/draft-04/schema#"</span>,</span><br><span class="line">  <span class="attr">"definitions"</span>: &#123;</span><br><span class="line">    <span class="attr">"filesDefinition"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"files"</span>: &#123;</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"If no 'files' or 'include' property ..."</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">          <span class="attr">"items"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are a lot of schemas for widely used <code>JSON</code> files on<a href="http://schemastore.org/json/" target="_blank" rel="noopener">schemastore.org/json/</a> and you can add your own by makinga <a href="https://github.com/schemastore/schemastore/#contribute" target="_blank" rel="noopener">pull request</a>.</p><h2><span id="cypressjson-schema">Cypress.json schema</span></h2><p>I have been working a lot on <a href="https://www.cypress.io/" target="_blank" rel="noopener">Cypress test runner</a> - after all, it ismy job. All Cypress options can be configured inside the <code>cypress.json</code> file in the userproject. Guess what - <a href="https://on.cypress.io/configuration" target="_blank" rel="noopener">there are LOT of options</a>.I constantly had to look up configuration names and allowed values myself!</p><p>A JSON schema would be super helpful. So I wrote one, by mostly copying the propertydescriptions from the documentation and pasting them into the JSON file. You can findthe result <a href="https://github.com/cypress-io/cypress/blob/ad0357dce072db27c0d45de55d429ed2c0d2c347/cli/schema/cypress.schema.json" target="_blank" rel="noopener">here</a>.</p><p>I have opened a pull request <a href="https://github.com/SchemaStore/schemastore/pull/384" target="_blank" rel="noopener">#384</a>to add a schema for <code>cypress.json</code> file. This pull request is a little unusual. Instead ofuploading a static JSON file to the <code>schemastore</code>, I only added a record to their catalogto point at JSON schema file stored in our<a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">https://github.com/cypress-io/cypress</a> repo.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"cypress.json"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Cypress.io test runner configuration file"</span>,</span><br><span class="line">  <span class="attr">"fileMatch"</span>: [ <span class="string">"cypress.json"</span> ],</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"https://raw.githubusercontent.com/cypress-io/cypress/develop/cli/schema/cypress.schema.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While waiting for the Schemastore pull request to be accepted, I wanted to start using theschema file. Luckily, VSCode allows me to configure my own settings right away.</p><p>Open &quot;Preferences&quot; - &quot;Settings&quot; - &quot;User Settings&quot;. Then add a new section to the object.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"json.schemas"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"fileMatch"</span>: [</span><br><span class="line">        <span class="string">"/cypress.json"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://raw.githubusercontent.com/cypress-io/cypress/develop/cli/schema/cypress.schema.json"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Boom! Open any <code>cypress.json</code> file and start enjoying life in the fast lane.</p><iframe width="720" height="405" src="https://www.youtube.com/embed/G164ULdJ-70?rel=0" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><p>If you do not have public JSON schema that works for everyone (for example if you have multipleversions of config files), you can distribute the JSON schema file with your JSON file andpoint at it using a property in the JSON file itself. For example, in the <code>cypress.json</code>you could do</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"http://localhost:8000"</span>,</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"../node_modules/cypress/schema/cypress.schema.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VSCode and other editors are smart enough to find and apply schema file from the relative pathor from URL specified in the <code>$schema</code> property.</p><p>Happy coding!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have noticed a curious thing while editing &lt;code&gt;tsconfig.json&lt;/code&gt; file the other day. I was using
VSCode and there was an IntelliSe
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="cypress" scheme="https://glebbahmutov.com/blog/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>Sync callbacks</title>
    <link href="https://glebbahmutov.com/blog/sync-callbacks/"/>
    <id>https://glebbahmutov.com/blog/sync-callbacks/</id>
    <published>2017-12-19T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>One thing that always trips me up in JavaScript is its event-driven nature.A piece of code written &quot;normally&quot; does not execute linearly. When we startlearning JS language, we see examples like this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'x ='</span>, x)</span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = identity(<span class="string">'foo'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'result ='</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapped = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(identity)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'mapped ='</span>, mapped)</span><br></pre></td></tr></table></figure><p>In what order does this execute? In the order written - from top line to the bottom line.We see this in the printed values</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = foo</span><br><span class="line">result = foo</span><br><span class="line">x = 1</span><br><span class="line">x = 2</span><br><span class="line">x = 3</span><br><span class="line">mapped = [ 1, 2, 3 ]</span><br></pre></td></tr></table></figure><p>This is relatively easy to understand. But things become much more complicated when youwrite &quot;regular&quot; Node or browser code. It is difficult because all the sudden, the callbacksthat look absolutely the same are NOT called synchronously. Instead they will be called some time in the future. Here is the &quot;simple&quot; code that causes all the confusion in the world.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncIdentity</span>(<span class="params">x, cb</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'returning x ='</span>, x)</span><br><span class="line">    cb(x)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = asyncIdentity(<span class="string">'foo'</span>, (arg) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'callback value ='</span>, arg)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'result ='</span>, result)</span><br></pre></td></tr></table></figure><p>To the outside caller function <code>asyncIdentity</code> looks almost the same as our previousfunction <code>identity</code>. But look a the program&#39;s output - the order of statements is NOTwhat you would expect by reading the source code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = undefined</span><br><span class="line">returning x = foo</span><br><span class="line">callback value = foo</span><br></pre></td></tr></table></figure><p>Instead of executing the callback right away, the <em>last statement</em> <code>console.log(&#39;result =&#39;, result)</code> is executed instead. And notice that we no longer get anyresult - there is no concept of result available immediately. Instead the computed value will bepassed to the callback function by scheduling it to run - to the back of the event queue it goes!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'returning x ='</span>, x)</span><br><span class="line">  cb(x)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>If only this function did not use <code>setTimeout</code>! Then it would not cause any problems in tracingthe flow of run time calls.</p><p>We get around callbacks. We now got Promises - a way to schedule computation to receive a computed value eventually and call callbacks using <code>.then</code> method, rather than byconvention.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promisedIdentity</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'returning x ='</span>, x)</span><br><span class="line">      resolve(x)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">promisedIdentity(<span class="string">'foo'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'callback value ='</span>, arg)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>This program acts &quot;more sensibly&quot;. The output shows that the code inside <code>promisedIdentity</code>first runs, then the callback inside &quot;then&quot; executes. Since &quot;then&quot; callback is below the promisewe almost read the program top to bottom, like a regular synchronous program. This is much betterthan jumping up and down when reading a source code with callbacks.</p><p>Small aside. There is now <code>async / await</code> to force asynchronous code to read &quot;normally&quot;. I donot like this construct at all, and would prefer moving towards better structure than Promise - like <a href="http://folktale.origamitower.com/api/v2.0.0/en/folktale.concurrency.task.html" target="_blank" rel="noopener">Task</a>.</p><p>Coming full circle, I am now finding myself struggling with using objects like <a href="http://folktale.origamitower.com/api/v2.0.0/en/folktale.maybe.html" target="_blank" rel="noopener">Maybe</a>, all because theyuse callbacks that I expect to be asynchronous; and I am trying to attach my code torun as a callback, rather than get the value out (like we have done with array <code>const mapped = [1, 2, 3].map(identity)</code>).</p><p>For example, if I want to get a valid value, and multiply it by 2, I could have an <code>if</code> statement</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = ... <span class="comment">// comes from somewhere</span></span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">x</span> =&gt;</span> x + x</span><br><span class="line"><span class="keyword">let</span> result</span><br><span class="line"><span class="keyword">if</span> (x !== <span class="literal">undefined</span> and x !== <span class="literal">null</span>) &#123;</span><br><span class="line">    result = double(x)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = <span class="string">'default value'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><p>But <code>Maybe</code> is a much better way to work with values that might be invalid.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Maybe = <span class="built_in">require</span>(<span class="string">'folktale/maybe'</span>)</span><br><span class="line"><span class="keyword">const</span> x = Maybe.fromNullable(...) <span class="comment">// value comes from somewhere</span></span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">x</span> =&gt;</span> x + x</span><br><span class="line"><span class="keyword">const</span> result = x.map(double).getOrElse(<span class="string">'default value'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><p>Notice how much this looks both like a Promise but the right analogy is <code>Array.map</code>.The callback <code>.map(double)</code> runs synchronously, and the value <code>result</code> is returned synchronously. I often forget it and make my life harder by moving actions torun in a callback</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while this works - this is huge overkill</span></span><br><span class="line"><span class="keyword">const</span> Maybe = <span class="built_in">require</span>(<span class="string">'folktale/maybe'</span>)</span><br><span class="line"><span class="keyword">const</span> x = Maybe.fromNullable() <span class="comment">// value comes from somewhere</span></span><br><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">x</span> =&gt;</span> x + x</span><br><span class="line">x.map(double)</span><br><span class="line">  .orElse(<span class="function"><span class="params">_</span> =&gt;</span> Maybe.of(<span class="string">'default value'</span>))</span><br><span class="line">  .map(<span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure><p>The above, while works, also runs synchronously, but tries to &quot;fix&quot; the undefined valueusing <code>.orElse(_ =&gt; Maybe.of(&#39;default value&#39;))</code> before merging &quot;valid&quot; and &quot;nothing&quot; code paths and calling <code>.map(console.log)</code>.</p><p>Too bad JavaScript does not tell us (except for now present <code>async</code> keyword) if the callback will be called synchronously vs asynchronously. I have to remember that a lot of times itjust runs in sync and the code reads top to bottom.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;One thing that always trips me up in JavaScript is its event-driven nature.
A piece of code written &amp;quot;normally&amp;quot; does not execute
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://glebbahmutov.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Split CI Jobs</title>
    <link href="https://glebbahmutov.com/blog/split-ci-jobs/"/>
    <id>https://glebbahmutov.com/blog/split-ci-jobs/</id>
    <published>2017-12-13T05:00:00.000Z</published>
    <updated>2018-02-14T02:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Who loves waiting on CI to finish testing multiple files? Not me. Luckily modern CIs support isolation and running multiple test jobs in many containers, splitting single sequence of test jobs into parallel runs. My favorite system for doing this is GitLabCI, but the same can be done in many other popular CIs. This blog post shows how to set up parallel test runs in CircleCI (v2) and on TravisCI. If I do not write this down I will forget and will have to reinvent this in the future, I am sure!</p><h2><span id="example-setup">Example setup</span></h2><p>Imagine you have a single repository with many folders with tests. The <a href="https://github.com/cypress-io/cypress-example-recipes" target="_blank" rel="noopener">cypress/cypress-example-recipes</a> is a good example. Different recipes are subfolders in the <code>examples</code> folder - there are more than 20 folders!</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> exa -l examples</span></span><br><span class="line">drwxr-xr-x - irinakous 13 Dec 16:28 blogs__codepen-demo</span><br><span class="line">drwxr-xr-x - irinakous 13 Dec 16:28 blogs__direct-control-angular</span><br><span class="line">drwxr-xr-x - irinakous 28 Nov 11:16 blogs__e2e-api-testing</span><br><span class="line">drwxr-xr-x - irinakous 13 Dec 10:12 blogs__e2e-snapshots</span><br><span class="line">...</span><br><span class="line">drwxr-xr-x - irinakous 28 Nov 11:16 testing-dom__tab-handling-links</span><br><span class="line">drwxr-xr-x - irinakous 28 Nov 11:16 unit-testing__application-code</span><br><span class="line">drwxr-xr-x - irinakous 28 Nov 11:16 unit-testing__react-enzyme</span><br></pre></td></tr></table></figure><p>A single script going through every folder, running end-to-end tests takes about 15 minutes. There are two test services where we run tests: <a href="https://circleci.com/gh/cypress-io/workflows/cypress-example-recipes" target="_blank" rel="noopener">on Circle</a> and <a href="https://travis-ci.org/cypress-io/cypress-example-recipes" target="_blank" rel="noopener">on Travis</a>. First, let us convert sequence to parallel jobs on Circle CI.</p><h2><span id="circle">Circle</span></h2><p>CircleCI v2 has introduces <a href="https://circleci.com/docs/2.0/workflows/" target="_blank" rel="noopener">workflows</a> that are extremely powerful. Think of a workflow as a series of jobs; for our purposes every job is independent. Here is how we can define a workflow - we will name each job after a folder.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">workflows:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># when adding new example subfolder with a recipe</span></span><br><span class="line">  <span class="comment"># add its name here to "create" CircleCI job</span></span><br><span class="line"><span class="attr">  all-recipes:</span></span><br><span class="line"><span class="attr">    jobs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">blogs__codepen-demo</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">blogs__direct-control-angular</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">unit-testing__react-enzyme</span></span><br></pre></td></tr></table></figure><p>Now we need to define each job. We need to specify the Docker container the job should run in, any environment variables to set and the actual job steps. While we could copy and paste these steps, in reality all our test job are the same - only the folder is different. So we can use YAML template feature to create common job definition and only substitute the <em>job name</em>. Here is how it looks:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line"><span class="attr">  parallelism:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  working_directory:</span> <span class="string">~/app</span></span><br><span class="line"><span class="attr">  docker:</span></span><br><span class="line"><span class="attr">    - image:</span> <span class="string">cypress/browsers:chrome63</span></span><br><span class="line"><span class="attr">      environment:</span></span><br><span class="line">        <span class="comment">## this enables colors + fixes failing unit tests</span></span><br><span class="line"><span class="attr">        TERM:</span> <span class="string">xterm</span></span><br><span class="line">        <span class="comment"># avoid million NPM install messages</span></span><br><span class="line"><span class="attr">        npm_config_loglevel:</span> <span class="string">warn</span></span><br><span class="line">        <span class="comment"># allow installing when the main user is root</span></span><br><span class="line"><span class="attr">        npm_config_unsafe_perm:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  steps:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">checkout</span></span><br><span class="line">    <span class="comment"># npm module caching</span></span><br><span class="line"><span class="attr">    - restore_cache:</span></span><br><span class="line"><span class="attr">        key:</span> <span class="string">root-deps</span></span><br><span class="line"><span class="attr">    - run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">    - run:</span> <span class="string">npm</span> <span class="string">prune</span></span><br><span class="line"><span class="attr">    - save_cache:</span></span><br><span class="line"><span class="attr">        key:</span> <span class="string">root-deps-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">"package.json"</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">node_modules</span></span><br><span class="line">    <span class="comment"># starting server and running tests</span></span><br><span class="line"><span class="attr">    - run:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">start</span> <span class="string">the</span> <span class="string">server</span></span><br><span class="line"><span class="attr">        background:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd examples/$CIRCLE_JOB</span></span><br><span class="line"><span class="string">          npm run start</span></span><br><span class="line"><span class="string"></span><span class="attr">    - run:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">Cypress</span> <span class="string">tests</span></span><br><span class="line"><span class="attr">        command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd examples/$CIRCLE_JOB</span></span><br><span class="line"><span class="string">          npm run cypress:run -- --record</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># define a new job with defailts for each "examples/*" subfolder</span></span><br><span class="line"><span class="attr">  blogs__codepen-demo:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">  blogs__direct-control-angular:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">  unit-testing__react-enzyme:</span></span><br><span class="line">    <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br></pre></td></tr></table></figure><p>Note that every job in the workflow automatically receives the name (as we defined it) in the environment variable <code>CIRCLE_JOB</code> - which we used to change into the right folder. You can see the exact <a href="https://github.com/cypress-io/cypress-example-recipes/blob/f7c63e6f75d1a2ba2c9e497967fdacc5249edaaa/circle.yml" target="_blank" rel="noopener">cicle.yml file</a> at the moment of this writing.</p><h2><span id="travis">Travis</span></h2><p>TravisCI has recently introduced <a href="https://docs.travis-ci.com/user/build-stages" target="_blank" rel="noopener">build stages</a>. Personally I do not think they are as easy to use as CircleCI workflows, they are suitable for our task. Again we will put all common test steps into a template. Because there is no predefined environment variable with the folder name, I will pass it as an environment variable <code>DIR</code>.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># common build steps for each recipe</span></span><br><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cd</span> <span class="string">examples/$DIR</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">start</span> <span class="bullet">--</span> <span class="bullet">--silent</span> <span class="string">&amp;</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">run</span> <span class="attr">cypress:run</span> <span class="bullet">--</span> <span class="bullet">--record</span></span><br></pre></td></tr></table></figure><p>Now to the test job definitions. They all belong to the same stage named <code>test</code>, thus they will run in parallel. Instead of job&#39;s name, I am setting environment variable <code>DIR</code> to the folder name.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  include:</span></span><br><span class="line">    <span class="comment"># define a separate script for each "examples/*" folder</span></span><br><span class="line">    <span class="comment"># this will run it in a separate job on TravisCI</span></span><br><span class="line"><span class="attr">    - stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">DIR=blogs__codepen-demo</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">    - stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">DIR=blogs__direct-control-angular</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"><span class="attr">    - stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">DIR=blogs__e2e-api-testing</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"><span class="attr">    - stage:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">DIR=unit-testing__react-enzyme</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br></pre></td></tr></table></figure><p>You can find the exact <a href="https://github.com/cypress-io/cypress-example-recipes/blob/f7c63e6f75d1a2ba2c9e497967fdacc5249edaaa/.travis.yml" target="_blank" rel="noopener">.travis.yml file here</a>. Here is how <a href="https://travis-ci.org/cypress-io/cypress-example-recipes" target="_blank" rel="noopener">TravisCI shows</a> the progress of the test run - some jobs have finished, others are running and more jobs are queued up.</p><p><img src="/blog/images/travis-jobs.png" alt="Travis jobs"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Who loves waiting on CI to finish testing multiple files? Not me. Luckily modern CIs support isolation and running multiple test jobs in 
      
    
    </summary>
    
      <category term="products" scheme="https://glebbahmutov.com/blog/categories/products/"/>
    
    
      <category term="ci" scheme="https://glebbahmutov.com/blog/tags/ci/"/>
    
  </entry>
  
</feed>
